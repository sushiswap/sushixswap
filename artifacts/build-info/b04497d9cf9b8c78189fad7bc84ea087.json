{"id":"b04497d9cf9b8c78189fad7bc84ea087","_format":"hh-sol-build-info-1","solcVersion":"0.8.11","solcLongVersion":"0.8.11+commit.d7f03943","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"},"contracts/adapters/BentoAdapter.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"../interfaces/IBentoBoxMinimal.sol\";\nimport \"../base/ImmutableState.sol\";\n\n/// @title BentoAdapter\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\nabstract contract BentoAdapter is ImmutableState {\n    /// @notice Deposits the token from users wallet into the BentoBox.\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\n    /// Pass either amount or share.\n    /// @param token token to deposit. Use token as address(0) when depositing native token\n    /// @param from sender\n    /// @param to receiver\n    /// @param amount amount to be deposited\n    /// @param share share to be deposited\n    /// @param value native token value to be deposited. Only use when token address is address(0)\n    function _depositToBentoBox(\n        address token,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share,\n        uint256 value\n    ) internal {\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\n    }\n\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\n    /// Pass either amount or share.\n    /// @param token token to transfer. For native tokens, use wnative token address\n    /// @param from sender\n    /// @param to receiver\n    /// @param amount amount to transfer\n    /// @param share share to transfer\n    /// @param unwrapBento use true for withdraw and false for transfer\n    function _transferFromBentoBox(\n        address token,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share,\n        bool unwrapBento\n    ) internal {\n        if (unwrapBento) {\n            bentoBox.withdraw(token, from, to, amount, share);\n        } else {\n            if (amount > 0) {\n                share = bentoBox.toShare(token, amount, false);\n            }\n            bentoBox.transfer(token, from, to, share);\n        }\n    }\n}"},"contracts/adapters/StargateAdapter.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"../interfaces/stargate/IStargateAdapter.sol\";\n\n/// @title StargateAdapter\n/// @notice Adapter for function used by Stargate Bridge\nabstract contract StargateAdapter is ImmutableState, IStargateReceiver {\n    using SafeERC20 for IERC20;\n\n    // Custom Error\n    error NotStargateRouter();\n    error InsufficientGas();\n\n    // events\n    event StargateSushiXSwapSrc(bytes32 indexed srcContext);\n    event StargateSushiXSwapDst(bytes32 indexed srcContext, bool failed);\n\n    struct StargateTeleportParams {\n        uint16 dstChainId; // stargate dst chain id\n        address token; // token getting bridged\n        uint256 srcPoolId; // stargate src pool id\n        uint256 dstPoolId; // stargate dst pool id\n        uint256 amount; // amount to bridge\n        uint256 amountMin; // amount to bridge minimum\n        uint256 dustAmount; // native token to be received on dst chain\n        address receiver; // sushiXswap on dst chain\n        address to; // receiver bridge token incase of transaction reverts on dst chain\n        uint256 gas; // extra gas to be sent for dst chain operations\n        bytes32 srcContext; // random bytes32 as source context\n    }\n\n    /// @notice Approves token to the Stargate Router\n    /// @param token token to approve\n    function approveToStargateRouter(IERC20 token) external {\n        token.safeApprove(address(stargateRouter), type(uint256).max);\n    }\n\n    /// @notice Bridges the token to dst chain using Stargate Router\n    /// @dev It is hardcoded to use all the contract balance. Only call this as the last step.\n    /// The refund address for extra fees sent it msg.sender.\n    /// @param params required by the Stargate, can be found at StargateTeleportParams struct.\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\n    function _stargateTeleport(\n        StargateTeleportParams memory params,\n        uint8[] memory actions,\n        uint256[] memory values,\n        bytes[] memory datas\n    ) internal {\n        bytes memory payload = abi.encode(params.to, actions, values, datas, params.srcContext);\n\n        /// @dev dst gas should be more than 100k\n        if(params.gas < 100000) revert InsufficientGas();\n\n        stargateRouter.swap{value: address(this).balance}(\n            params.dstChainId,\n            params.srcPoolId,\n            params.dstPoolId,\n            payable(msg.sender), // refund address\n            params.amount != 0\n                ? params.amount\n                : IERC20(params.token).balanceOf(address(this)),\n            params.amountMin,\n            IStargateRouter.lzTxObj(\n                params.gas, // extra gas to be sent for dst execution\n                params.dustAmount,\n                abi.encodePacked(params.receiver)\n            ),\n            abi.encodePacked(params.receiver), // sushiXswap on the dst chain\n            payload\n        );\n\n        stargateWidget.partnerSwap(0x0001);\n\n        emit StargateSushiXSwapSrc(params.srcContext);\n    }\n\n    /// @notice Get the fees to be paid in native token for the swap\n    /// @param _dstChainId stargate dst chainId\n    /// @param _functionType stargate Function type 1 for swap.\n    /// See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\n    /// @param _receiver sushiXswap on the dst chain\n    /// @param _gas extra gas being sent\n    /// @param _dustAmount dust amount to be received at the dst chain\n    /// @param _payload payload being sent at the dst chain\n    function getFee(\n        uint16 _dstChainId,\n        uint8 _functionType,\n        address _receiver,\n        uint256 _gas,\n        uint256 _dustAmount,\n        bytes memory _payload\n    ) external view returns (uint256 a, uint256 b) {\n        (a, b) = stargateRouter.quoteLayerZeroFee(\n            _dstChainId,\n            _functionType,\n            abi.encodePacked(_receiver),\n            abi.encode(_payload),\n            IStargateRouter.lzTxObj(\n                _gas,\n                _dustAmount,\n                abi.encodePacked(_receiver)\n            )\n        );\n    }\n\n    /// @notice Receiver function on dst chain\n    /// @param _token bridge token received\n    /// @param amountLD amount received\n    /// @param payload ABI-Encoded data received from src chain\n    function sgReceive(\n        uint16,\n        bytes memory,\n        uint256,\n        address _token,\n        uint256 amountLD,\n        bytes memory payload\n    ) external override {\n        if (msg.sender != address(stargateRouter)) revert NotStargateRouter();\n\n        (\n            address to,\n            uint8[] memory actions,\n            uint256[] memory values,\n            bytes[] memory datas,\n            bytes32 srcContext\n        ) = abi.decode(payload, (address, uint8[], uint256[], bytes[], bytes32));\n\n        uint256 reserveGas = 100000;\n        bool failed;\n\n        if(gasleft() < reserveGas) {\n            if(_token != SGETH) {\n                IERC20(_token).safeTransfer(to, amountLD);\n            }\n            /// @dev transfer any native token received as dust to the to address\n            if (address(this).balance > 0)\n                to.call{value: (address(this).balance)}(\"\");\n\n            failed = true;\n            emit StargateSushiXSwapDst(srcContext, failed);\n            return;\n        }\n\n        // 100000 -> exit gas\n        uint256 limit = gasleft() - reserveGas;\n\n        /// @dev incase the actions fail, transfer bridge token to the to address\n        try\n            ISushiXSwap(payable(address(this))).cook{gas: limit}(\n                actions,\n                values,\n                datas\n            )\n        {} catch (bytes memory) {\n            if(_token != SGETH) {\n                IERC20(_token).safeTransfer(to, amountLD);\n            }\n            failed = true;\n        }\n\n        /// @dev transfer any native token received as dust to the to address\n        if (address(this).balance > 0)\n            to.call{value: (address(this).balance)}(\"\");\n\n        emit StargateSushiXSwapDst(srcContext, failed);\n\n    }\n}"},"contracts/adapters/SushiLegacyAdapter.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../libraries/UniswapV2Library.sol\";\nimport \"../base/ImmutableState.sol\";\n\n/// @title SushiLegacyAdapter\n/// @notice Adapter for functions used to swap using Sushiswap Legacy AMM.\nabstract contract SushiLegacyAdapter is ImmutableState {\n    using SafeERC20 for IERC20;\n\n    function _swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        bool sendTokens\n    ) internal returns (uint256 amountOut) {\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\n            factory,\n            amountIn,\n            path,\n            pairCodeHash\n        );\n        amountOut = amounts[amounts.length - 1];\n\n        require(amountOut >= amountOutMin, \"insufficient-amount-out\");\n\n        /// @dev force sends token to the first pair if not already sent\n        if (sendTokens) {\n            IERC20(path[0]).safeTransfer(\n                UniswapV2Library.pairFor(\n                    factory,\n                    path[0],\n                    path[1],\n                    pairCodeHash\n                ),\n                IERC20(path[0]).balanceOf(address(this))\n            );\n        }\n        _swap(amounts, path, to);\n    }\n\n    /// @dev requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory path,\n        address _to\n    ) internal virtual {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            address to = i < path.length - 2\n                ? UniswapV2Library.pairFor(\n                    factory,\n                    output,\n                    path[i + 2],\n                    pairCodeHash\n                )\n                : _to;\n            IUniswapV2Pair(\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n}"},"contracts/adapters/TokenAdapter.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IWETH.sol\";\n\n/// @title TokenAdapter\n/// @notice Adapter for all token operations\nabstract contract TokenAdapter {\n    using SafeERC20 for IERC20;\n\n    /// @notice Function to transfer tokens from address(this)\n    /// @param token token to transfer\n    /// @param to receiver\n    /// @param amount amount to transfer\n    function _transferTokens(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        if (address(token) != address(0)) {\n            token.safeTransfer(to, amount);\n        } else {\n            payable(to).transfer(amount);\n        }\n    }\n\n    /// @notice Function to transfer tokens from user to the to address\n    /// @param token token to transfer\n    /// @param to receiver\n    /// @param amount amount to transfer\n    function _transferFromToken(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        token.safeTransferFrom(msg.sender, to, amount);\n    }\n\n    /// @notice Unwraps the wrapper native into native and sends it to the receiver.\n    /// @param token token to transfer\n    /// @param to receiver\n    function _unwrapTransfer(address token, address to) internal {\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\n    }\n\n    /// @notice Wraps the token to the wrapped token\n    /// @param token token to wrap\n    /// @param amount amount to wrap\n    function _wrapToken(address token, uint256 amount) internal {\n        IWETH(token).deposit{value: amount}();\n    }\n}"},"contracts/adapters/TridentSwapAdapter.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"../interfaces/trident/ITridentSwapAdapter.sol\";\n\n/// @title TridentSwapAdapter\n/// @notice Adapter for all Trident based Swaps\n\nabstract contract TridentSwapAdapter is\n    ITridentRouter,\n    ImmutableState,\n    BentoAdapter,\n    TokenAdapter\n{\n    // Custom Error\n    error TooLittleReceived();\n\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\n    function _exactInput(ExactInputParams memory params)\n        internal\n        returns (uint256 amountOut)\n    {\n        if (params.amountIn == 0) {\n          uint256 tokenBalance = IERC20(params.tokenIn).balanceOf(\n                address(this)\n            );\n            _transferTokens(\n                IERC20(params.tokenIn),\n                address(bentoBox),\n                tokenBalance\n            );\n            // Pay the first pool directly.\n            (, params.amountIn) = bentoBox.deposit(\n                params.tokenIn,\n                address(bentoBox),\n                params.path[0].pool,\n                tokenBalance,\n                0\n            );\n        }\n\n        // Call every pool in the path.\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\n        // The last pool should transfer its output tokens to the user.\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\n        // a batch call should be made to `unwrapWETH`.\n        uint256 n = params.path.length;\n        for (uint256 i = 0; i < n; i = _increment(i)) {\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\n        }\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\n    }\n\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\n    /// @param params This includes everything needed for the swap.\n    /// Look at the `ComplexPathParams` struct for more details.\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\n    function _complexPath(ComplexPathParams memory params) internal {\n        // Deposit all initial tokens to respective pools and initiate the swaps.\n        // Input tokens come from the user - output goes to following pools.\n        uint256 n = params.initialPath.length;\n        for (uint256 i = 0; i < n; i = _increment(i)) {\n            bentoBox.transfer(\n                params.initialPath[i].tokenIn,\n                address(this),\n                params.initialPath[i].pool,\n                params.initialPath[i].amount\n            );\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\n        }\n        // Do all the middle swaps. Input comes from previous pools.\n        n = params.percentagePath.length;\n        for (uint256 i = 0; i < n; i = _increment(i)) {\n            uint256 balanceShares = bentoBox.balanceOf(\n                params.percentagePath[i].tokenIn,\n                address(this)\n            );\n            uint256 transferShares = (balanceShares *\n                params.percentagePath[i].balancePercentage) / uint256(10)**8;\n            bentoBox.transfer(\n                params.percentagePath[i].tokenIn,\n                address(this),\n                params.percentagePath[i].pool,\n                transferShares\n            );\n            IPool(params.percentagePath[i].pool).swap(\n                params.percentagePath[i].data\n            );\n        }\n        // Ensure enough was received and transfer the ouput to the recipient.\n        n = params.output.length;\n        for (uint256 i = 0; i < n; i = _increment(i)) {\n            uint256 balanceShares = bentoBox.balanceOf(\n                params.output[i].token,\n                address(this)\n            );\n            if (balanceShares < params.output[i].minAmount)\n                revert TooLittleReceived();\n            if (params.output[i].unwrapBento) {\n                bentoBox.withdraw(\n                    params.output[i].token,\n                    address(this),\n                    params.output[i].to,\n                    0,\n                    balanceShares\n                );\n            } else {\n                bentoBox.transfer(\n                    params.output[i].token,\n                    address(this),\n                    params.output[i].to,\n                    balanceShares\n                );\n            }\n        }\n    }\n\n    function _increment(uint256 i) internal pure returns (uint256) {\n        unchecked {\n            return i + 1;\n        }\n    }\n}"},"contracts/base/ImmutableState.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"../interfaces/IImmutableState.sol\";\n\n/// @title ImmutableState\n/// @notice Stores the immutable state\nabstract contract ImmutableState is IImmutableState {\n    /// @notice BentoBox token vault\n    IBentoBoxMinimal public immutable override bentoBox;\n\n    /// @notice Stargate Router for cross chain interaction\n    IStargateRouter public immutable override stargateRouter;\n\n    /// @notice Stargate Widget for stargate partner fee\n    IStargateWidget public immutable override stargateWidget;\n\n    /// @notice Sushiswap Legacy AMM Factory\n    address public immutable override factory;\n\n    /// @notice Sushiswap Legacy AMM PairCodeHash\n    bytes32 public immutable override pairCodeHash;\n\n    /// @notice Address of the Stargate ETH Vault\n    address public immutable override SGETH;\n\n    constructor(\n        IBentoBoxMinimal _bentoBox,\n        IStargateRouter _stargateRouter,\n        address _factory,\n        bytes32 _pairCodeHash,\n        IStargateWidget _stargateWidget,\n        address _SGETH\n    ) {\n        bentoBox = _bentoBox;\n        stargateRouter = _stargateRouter;\n        stargateWidget = _stargateWidget;\n        factory = _factory;\n        pairCodeHash = _pairCodeHash;\n        SGETH = _SGETH;\n    }\n}"},"contracts/interfaces/IBentoBoxMinimal.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\n/// @notice Minimal BentoBox vault interface.\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\ninterface IBentoBoxMinimal {\n    /// @notice Balance per ERC-20 token per account in shares.\n    function balanceOf(address, address) external view returns (uint256);\n\n    /// @dev Helper function to represent an `amount` of `token` in shares.\n    /// @param token The ERC-20 token.\n    /// @param amount The `token` amount.\n    /// @param roundUp If the result `share` should be rounded up.\n    /// @return share The token amount represented in shares.\n    function toShare(\n        address token,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share);\n\n    /// @dev Helper function to represent shares back into the `token` amount.\n    /// @param token The ERC-20 token.\n    /// @param share The amount of shares.\n    /// @param roundUp If the result should be rounded up.\n    /// @return amount The share amount back into native representation.\n    function toAmount(\n        address token,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount);\n\n    /// @notice Registers this contract so that users can approve it for BentoBox.\n    function registerProtocol() external;\n\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\n    /// @param token_ The ERC-20 token to deposit.\n    /// @param from which account to pull the tokens.\n    /// @param to which account to push the tokens.\n    /// @param amount Token amount in native representation to deposit.\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount represented in shares.\n    function deposit(\n        address token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    /// @notice Withdraws an amount of `token` from a user account.\n    /// @param token_ The ERC-20 token to withdraw.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n    /// @param share Like above, but `share` takes precedence over `amount`.\n    function withdraw(\n        address token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    /// @notice Transfer shares from a user account to another one.\n    /// @param token The ERC-20 token to transfer.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param share The amount of `token` in shares.\n    function transfer(\n        address token,\n        address from,\n        address to,\n        uint256 share\n    ) external;\n\n    function setMasterContractApproval(\n        address user,\n        address masterContract,\n        bool approved,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"},"contracts/interfaces/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\ninterface IERC20Permit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}"},"contracts/interfaces/IImmutableState.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"./IBentoBoxMinimal.sol\";\nimport \"./stargate/IStargateRouter.sol\";\nimport \"./stargate/IStargateWidget.sol\";\n\ninterface IImmutableState {\n    function bentoBox() external view returns (IBentoBoxMinimal);\n\n    function stargateRouter() external view returns (IStargateRouter);\n\n    function stargateWidget() external view returns (IStargateWidget);\n\n    function factory() external view returns (address);\n\n    function pairCodeHash() external view returns (bytes32);\n\n    function SGETH() external view returns(address);\n}"},"contracts/interfaces/ISushiXSwap.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"../adapters/BentoAdapter.sol\";\nimport \"../adapters/TokenAdapter.sol\";\nimport \"../adapters/SushiLegacyAdapter.sol\";\nimport \"../adapters/TridentSwapAdapter.sol\";\nimport \"../adapters/StargateAdapter.sol\";\n\ninterface ISushiXSwap {\n    function cook(\n        uint8[] memory actions,\n        uint256[] memory values,\n        bytes[] memory datas\n    ) external payable;\n}"},"contracts/interfaces/IWETH.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}"},"contracts/interfaces/stargate/IStargateAdapter.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../base/ImmutableState.sol\";\nimport \"../ISushiXSwap.sol\";\nimport \"./IStargateReceiver.sol\";\nimport \"./IStargateWidget.sol\";\n\ninterface IStargateAdapter {}"},"contracts/interfaces/stargate/IStargateReceiver.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.11;\n\ninterface IStargateReceiver {\n    function sgReceive(\n        uint16 _chainId,\n        bytes memory _srcAddress,\n        uint256 _nonce,\n        address _token,\n        uint256 amountLD,\n        bytes memory payload\n    ) external;\n}"},"contracts/interfaces/stargate/IStargateRouter.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.11;\n\ninterface IStargateRouter {\n\n    struct lzTxObj {\n        uint256 dstGasForCall;\n        uint256 dstNativeAmount;\n        bytes dstNativeAddr;\n    }\n\n    function swap(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable;\n\n    function quoteLayerZeroFee(\n        uint16 _dstChainId,\n        uint8 _functionType,\n        bytes calldata _toAddress,\n        bytes calldata _transferAndCallPayload,\n        lzTxObj memory _lzTxParams\n    ) external view returns (uint256, uint256);\n}"},"contracts/interfaces/stargate/IStargateWidget.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.11;\n\ninterface IStargateWidget {\n    function partnerSwap(bytes2 _partnerId) external;\n}"},"contracts/interfaces/trident/IPool.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\n/// @notice Trident pool interface.\ninterface IPool {\n    /// @notice Executes a swap from one token to another.\n    /// @dev The input tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\n    function swap(bytes calldata data)\n        external\n        returns (uint256 finalAmountOut);\n\n    /// @notice Executes a swap from one token to another with a callback.\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\n    function flashSwap(bytes calldata data)\n        external\n        returns (uint256 finalAmountOut);\n\n    /// @notice Mints liquidity tokens.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\n    function mint(bytes calldata data) external returns (uint256 liquidity);\n\n    /// @notice Burns liquidity tokens.\n    /// @dev The input LP tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\n    function burn(bytes calldata data)\n        external\n        returns (TokenAmount[] memory withdrawnAmounts);\n\n    /// @notice Burns liquidity tokens for a single output token.\n    /// @dev The input LP tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return amountOut The amount of output tokens that were sent to the user.\n    function burnSingle(bytes calldata data)\n        external\n        returns (uint256 amountOut);\n\n    /// @return A unique identifier for the pool type.\n    function poolIdentifier() external pure returns (bytes32);\n\n    /// @return An array of tokens supported by the pool.\n    function getAssets() external view returns (address[] memory);\n\n    /// @notice Simulates a trade and returns the expected output.\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\n    function getAmountOut(bytes calldata data)\n        external\n        view\n        returns (uint256 finalAmountOut);\n\n    /// @notice Simulates a trade and returns the expected output.\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\n    function getAmountIn(bytes calldata data)\n        external\n        view\n        returns (uint256 finalAmountIn);\n\n    /// @dev This event must be emitted on all swaps.\n    event Swap(\n        address indexed recipient,\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /// @dev This struct frames output tokens for burns.\n    struct TokenAmount {\n        address token;\n        uint256 amount;\n    }\n}"},"contracts/interfaces/trident/ITridentRouter.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"./IPool.sol\";\nimport \"../IBentoBoxMinimal.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\n/// @notice Trident pool router interface.\ninterface ITridentRouter {\n    struct Path {\n        address pool;\n        bytes data;\n    }\n\n    struct ExactInputSingleParams {\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        address pool;\n        address tokenIn;\n        bytes data;\n    }\n\n    struct ExactInputParams {\n        address tokenIn;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        Path[] path;\n    }\n\n    struct TokenInput {\n        address token;\n        bool native;\n        uint256 amount;\n    }\n\n    struct InitialPath {\n        address tokenIn;\n        address pool;\n        bool native;\n        uint256 amount;\n        bytes data;\n    }\n\n    struct PercentagePath {\n        address tokenIn;\n        address pool;\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\n        bytes data;\n    }\n\n    struct Output {\n        address token;\n        address to;\n        bool unwrapBento;\n        uint256 minAmount;\n    }\n\n    struct ComplexPathParams {\n        InitialPath[] initialPath;\n        PercentagePath[] percentagePath;\n        Output[] output;\n    }\n}"},"contracts/interfaces/trident/ITridentSwapAdapter.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"./ITridentRouter.sol\";\nimport \"../../adapters/BentoAdapter.sol\";\nimport \"../../adapters/TokenAdapter.sol\";\nimport \"../../base/ImmutableState.sol\";\n\ninterface ITridentSwapAdapter {}"},"contracts/libraries/SafeMath.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.12;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMathUniswap {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n}"},"contracts/libraries/UniswapV2Library.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\nimport \"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\";\n\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMathUniswap for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB,\n        bytes32 pairCodeHash\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            pairCodeHash // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB,\n        bytes32 pairCodeHash\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\n        ).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\n        require(\n            reserveA > 0 && reserveB > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path,\n        bytes32 pairCodeHash\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i],\n                path[i + 1],\n                pairCodeHash\n            );\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path,\n        bytes32 pairCodeHash\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i - 1],\n                path[i],\n                pairCodeHash\n            );\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}"},"contracts/misc/StargateFeeV04Extraction.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nstruct BridgeState {\n    uint256 currentAssetSD;\n    uint256 lpAsset;\n    uint256 eqFeePool;\n    uint256 idealBalance;\n    uint256 currentBalance;\n    bool allocPointIsPositive;\n}\n\nstruct Fees {\n    uint256 eqFee;\n    uint256 eqReward;\n    uint256 lpFee;\n    uint256 protocolFee;\n}\n\ncontract StargateFeeV04Extraction {\n    using SafeMath for uint256;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n\n    // equilibrium func params. all in BPs * 10 ^ 2, i.e. 1 % = 10 ^ 6 units\n    uint256 public constant DENOMINATOR = 1e18;\n    uint256 public constant DELTA_1 = 6000 * 1e14;\n    uint256 public constant DELTA_2 = 500 * 1e14;\n    uint256 public constant LAMBDA_1 = 40 * 1e14;\n    uint256 public constant LAMBDA_2 = 9960 * 1e14;\n    uint256 public constant LP_FEE = 10 * 1e13;\n    uint256 public constant PROTOCOL_FEE = 50 * 1e13;\n    uint256 public constant PROTOCOL_SUBSIDY = 3 * 1e13;\n\n    uint256 public constant FIFTY_PERCENT = 5 * 1e17;\n    uint256 public constant SIXTY_PERCENT = 6 * 1e17;\n\n    constructor() {}\n\n    // function getBridgeState(\n    //     uint256 srcPoolId,\n    //     uint256 dstPoolId,\n    //     uint16 dstChainId,\n    //     address from\n    // ) external view returns (BridgeState memory state, bool whitelisted) {        \n    //     IStargateFeeLibrary feeLibrary = STARGATE_POOL_ADDRESS[srcChainId][srcBridgeToken.address].feeLibrary()\n    //     Pool pool = feeLibrary.factory().getPool(srcPoolId);\n    //     state.currentAssetSD = IERC20(pool.token()).balanceOf(address(pool)).div(pool.convertRate());\n    //     state.lpAsset = pool.totalLiquidity();\n    //     state.eqFeePool = pool.eqFeePool();\n\n    //     Pool.ChainPath memory chainPath = pool.getChainPath(dstChainId, dstPoolId);\n    //     state.idealBalance = chainPath.idealBalance;\n    //     state.currentBalance = chainPath.balance;\n    //     (, uint256 allocPoint, , ) = feeLibrary.lpStaking().poolInfo(feeLibrary.poolIdToLpId(srcPoolId));\n    //     state.allocPointIsPositive = allocPoint > 0\n    //     whitelisted = feeLibrary.whitelist(from);\n    // }\n\n    function getFees(\n        BridgeState memory state,\n        bool whitelisted,\n        uint256 amountSD\n    ) external pure returns (Fees memory s) {\n        // calculate the equilibrium reward\n        s.eqReward = _getEqReward(state, amountSD);\n\n        // calculate the equilibrium fee\n        uint256 protocolSubsidy;\n        (s.eqFee, protocolSubsidy) = _getEquilibriumFee(state, amountSD);\n\n        // return no protocol/lp fees for addresses in this mapping\n        if (whitelisted) {\n            return s;\n        }\n\n        // calculate protocol and lp fee\n        (s.protocolFee, s.lpFee) = _getProtocolAndLpFee(state, amountSD, protocolSubsidy);\n\n        return s;\n    }\n \n    function _getEqReward(\n        BridgeState memory state,\n        uint256 amountSD\n    ) internal pure returns (uint256 eqReward) {\n        if (state.lpAsset <= state.currentAssetSD) {\n            return 0;\n        }\n\n        uint256 poolDeficit = state.lpAsset.sub(state.currentAssetSD);\n        // assets in pool are < 75% of liquidity provided & amount transferred > 2% of pool deficit\n        if (state.currentAssetSD.mul(100).div(state.lpAsset) < 75 && amountSD.mul(100) > poolDeficit.mul(2)) {\n            // reward capped at rewardPoolSize\n            eqReward = state.eqFeePool.mul(amountSD).div(poolDeficit);\n            if (eqReward > state.eqFeePool) {\n                eqReward = state.eqFeePool;\n            }\n        } else {\n            eqReward = 0;\n        }\n    }\n\n    function _getEquilibriumFee(\n        BridgeState memory state,\n        uint256 amountSD\n    ) internal pure returns (uint256, uint256) {\n        uint256 beforeBalance = state.currentBalance;\n        uint256 idealBalance = state.idealBalance;\n\n        require(beforeBalance >= amountSD, \"Stargate: not enough balance\");\n        uint256 afterBalance = beforeBalance.sub(amountSD);\n\n        uint256 safeZoneMax = idealBalance.mul(DELTA_1).div(DENOMINATOR);\n        uint256 safeZoneMin = idealBalance.mul(DELTA_2).div(DENOMINATOR);\n\n        uint256 eqFee = 0;\n        uint256 protocolSubsidy = 0;\n\n        if (afterBalance >= safeZoneMax) {\n            // no fee zone, protocol subsidize it.\n            eqFee = amountSD.mul(PROTOCOL_SUBSIDY).div(DENOMINATOR);\n            protocolSubsidy = eqFee;\n        } else if (afterBalance >= safeZoneMin) {\n            // safe zone\n            uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\n            eqFee = _getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, afterBalance);\n        } else {\n            // danger zone\n            if (beforeBalance >= safeZoneMin) {\n                // across 2 or 3 zones\n                // part 1\n                uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, safeZoneMin));\n                // part 2\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, safeZoneMin, afterBalance));\n            } else {\n                // only in danger zone\n                // part 2 only\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, beforeBalance, afterBalance));\n            }\n        }\n        return (eqFee, protocolSubsidy);\n    }\n\n    function _getProtocolAndLpFee(\n        BridgeState memory state,\n        uint256 amountSD,\n        uint256 protocolSubsidy\n    ) internal pure returns (uint256 protocolFee, uint256 lpFee) {\n        protocolFee = amountSD.mul(PROTOCOL_FEE).div(DENOMINATOR).sub(protocolSubsidy);\n        lpFee = amountSD.mul(LP_FEE).div(DENOMINATOR);\n\n        // when there are active emissions, give the lp fee to the protocol\n        if (state.allocPointIsPositive) {\n            protocolFee = protocolFee.add(lpFee);\n            lpFee = 0;\n        }\n\n        if (state.lpAsset == 0) {\n            return (protocolFee, lpFee);\n        }\n\n        bool isAboveIdeal = state.currentBalance.sub(amountSD) > state.idealBalance.mul(SIXTY_PERCENT).div(DENOMINATOR);\n        uint256 currentAssetNumerated = state.currentAssetSD.mul(DENOMINATOR).div(state.lpAsset);\n        if (currentAssetNumerated <= FIFTY_PERCENT && isAboveIdeal) {\n            // x <= 50% => no fees\n            protocolFee = 0;\n            lpFee = 0;\n        } else if ( currentAssetNumerated < SIXTY_PERCENT && isAboveIdeal) {\n            // 50% > x < 60% => scaled fees &&\n            // the resulting transfer does not drain the pathway below 60% o`f the ideal balance,\n\n            // reduce the protocol and lp fee linearly\n            // Examples:\n            // currentAsset == 101, lpAsset == 200 -> haircut == 5%\n            // currentAsset == 115, lpAsset == 200 -> haircut == 75%\n            // currentAsset == 119, lpAsset == 200 -> haircut == 95%\n            uint256 haircut = currentAssetNumerated.sub(FIFTY_PERCENT).mul(10); // scale the percentage by 10\n            protocolFee = protocolFee.mul(haircut).div(DENOMINATOR);\n            lpFee = lpFee.mul(haircut).div(DENOMINATOR);\n        }\n\n        // x > 60% => full fees\n    }\n\n    function _getTrapezoidArea(\n        uint256 lambda,\n        uint256 yOffset,\n        uint256 xUpperBound,\n        uint256 xLowerBound,\n        uint256 xStart,\n        uint256 xEnd\n    ) internal pure returns (uint256) {\n        require(xEnd >= xLowerBound && xStart <= xUpperBound, \"Stargate: balance out of bound\");\n        uint256 xBoundWidth = xUpperBound.sub(xLowerBound);\n\n        // xStartDrift = xUpperBound.sub(xStart);\n        uint256 yStart = xUpperBound.sub(xStart).mul(lambda).div(xBoundWidth).add(yOffset);\n\n        // xEndDrift = xUpperBound.sub(xEnd)\n        uint256 yEnd = xUpperBound.sub(xEnd).mul(lambda).div(xBoundWidth).add(yOffset);\n\n        // compute the area\n        uint256 deltaX = xStart.sub(xEnd);\n        return yStart.add(yEnd).mul(deltaX).div(2).div(DENOMINATOR);\n    }\n}"},"contracts/mocks/MockERC20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20(\"Token 1\", \"TOK\") { \n\n}"},"contracts/SushiXSwap.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"./interfaces/ISushiXSwap.sol\";\n\n/// @title SushiXSwap\n/// @notice Enables cross chain swap for sushiswap.\n/// @dev Supports both BentoBox and Wallet. Supports both Trident and Legacy AMM. Uses Stargate as bridge.\ncontract SushiXSwap is\n    ISushiXSwap,\n    BentoAdapter,\n    TokenAdapter,\n    SushiLegacyAdapter,\n    TridentSwapAdapter,\n    StargateAdapter\n{\n    constructor(\n        IBentoBoxMinimal _bentoBox,\n        IStargateRouter _stargateRouter,\n        address _factory,\n        bytes32 _pairCodeHash,\n        IStargateWidget _stargateWidget,\n        address _SGETH\n    ) ImmutableState(_bentoBox, _stargateRouter, _factory, _pairCodeHash, _stargateWidget, _SGETH) {\n        // Register to BentoBox\n        _bentoBox.registerProtocol();\n    }\n\n    /// @notice List of ACTIONS supported by the `cook()`.\n\n    // Bento and Token Operations\n    uint8 internal constant ACTION_MASTER_CONTRACT_APPROVAL = 0;\n    uint8 internal constant ACTION_SRC_DEPOSIT_TO_BENTOBOX = 1;\n    uint8 internal constant ACTION_SRC_TRANSFER_FROM_BENTOBOX = 2;\n    uint8 internal constant ACTION_DST_DEPOSIT_TO_BENTOBOX = 3;\n    uint8 internal constant ACTION_DST_WITHDRAW_TOKEN = 4;\n    uint8 internal constant ACTION_DST_WITHDRAW_OR_TRANSFER_FROM_BENTOBOX = 5;\n    uint8 internal constant ACTION_UNWRAP_AND_TRANSFER = 6;\n\n    // Swap Operations\n    uint8 internal constant ACTION_LEGACY_SWAP = 7;\n    uint8 internal constant ACTION_TRIDENT_SWAP = 8;\n    uint8 internal constant ACTION_TRIDENT_COMPLEX_PATH_SWAP = 9;\n\n    // Bridge Operations\n    uint8 internal constant ACTION_STARGATE_TELEPORT = 10;\n\n    uint8 internal constant ACTION_SRC_TOKEN_TRANSFER = 11;\n\n    uint8 internal constant ACTION_WRAP_TOKEN = 12;\n\n    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\n    /// @dev The function gets invoked both at the src and dst chain.\n    function cook(\n        uint8[] memory actions,\n        uint256[] memory values,\n        bytes[] memory datas\n    ) public payable override {\n        uint256 actionLength = actions.length;\n        for (uint256 i; i < actionLength; i = _increment(i)) {\n            uint8 action = actions[i];\n            // update for total amounts in contract?\n            if (action == ACTION_MASTER_CONTRACT_APPROVAL) {\n                (\n                    address user,\n                    bool approved,\n                    uint8 v,\n                    bytes32 r,\n                    bytes32 s\n                ) = abi.decode(\n                        datas[i],\n                        (address, bool, uint8, bytes32, bytes32)\n                    );\n\n                bentoBox.setMasterContractApproval(\n                    user,\n                    address(this),\n                    approved,\n                    v,\n                    r,\n                    s\n                );\n            } else if (action == ACTION_SRC_DEPOSIT_TO_BENTOBOX) {\n                (address token, address to, uint256 amount, uint256 share) = abi\n                    .decode(datas[i], (address, address, uint256, uint256));\n                _depositToBentoBox(\n                    token,\n                    msg.sender,\n                    to,\n                    amount,\n                    share,\n                    values[i]\n                );\n            } else if (action == ACTION_SRC_TRANSFER_FROM_BENTOBOX) {\n                (\n                    address token,\n                    address to,\n                    uint256 amount,\n                    uint256 share,\n                    bool unwrapBento\n                ) = abi.decode(\n                        datas[i],\n                        (address, address, uint256, uint256, bool)\n                    );\n                _transferFromBentoBox(\n                    token,\n                    msg.sender,\n                    to,\n                    amount,\n                    share,\n                    unwrapBento\n                );\n            } else if (action == ACTION_SRC_TOKEN_TRANSFER) {\n                (address token, address to, uint256 amount) = abi.decode(\n                    datas[i],\n                    (address, address, uint256)\n                );\n\n                _transferFromToken(IERC20(token), to, amount);\n            } else if (action == ACTION_DST_DEPOSIT_TO_BENTOBOX) {\n                (address token, address to, uint256 amount, uint256 share) = abi\n                    .decode(datas[i], (address, address, uint256, uint256));\n\n                if (amount == 0) {\n                    amount = IERC20(token).balanceOf(address(this));\n                    // Stargate Router doesn't support value? Should we update it anyway?\n                    // values[i] = address(this).balance;\n                }\n\n                _transferTokens(IERC20(token), address(bentoBox), amount);\n\n                _depositToBentoBox(\n                    token,\n                    address(bentoBox),\n                    to,\n                    amount,\n                    share,\n                    values[i]\n                );\n            } else if (action == ACTION_DST_WITHDRAW_TOKEN) {\n                (address token, address to, uint256 amount) = abi.decode(\n                    datas[i],\n                    (address, address, uint256)\n                );\n                if (amount == 0) {\n                    if (token != address(0)) {\n                        amount = IERC20(token).balanceOf(address(this));\n                    } else {\n                        amount = address(this).balance;\n                    }\n                }\n                _transferTokens(IERC20(token), to, amount);\n            } else if (\n                action == ACTION_DST_WITHDRAW_OR_TRANSFER_FROM_BENTOBOX\n            ) {\n                (\n                    address token,\n                    address to,\n                    uint256 amount,\n                    uint256 share,\n                    bool unwrapBento\n                ) = abi.decode(\n                        datas[i],\n                        (address, address, uint256, uint256, bool)\n                    );\n                if (amount == 0 && share == 0) {\n                    share = bentoBox.balanceOf(token, address(this));\n                }\n                _transferFromBentoBox(\n                    token,\n                    address(this),\n                    to,\n                    amount,\n                    share,\n                    unwrapBento\n                );\n            } else if (action == ACTION_UNWRAP_AND_TRANSFER) {\n                (address token, address to) = abi.decode(\n                    datas[i],\n                    (address, address)\n                );\n\n                _unwrapTransfer(token, to);\n            } else if (action == ACTION_WRAP_TOKEN) {\n                (address token, uint256 amount) = abi.decode(\n                    datas[i],\n                    (address, uint256)\n                );\n\n                _wrapToken(token, amount);\n            } else if (action == ACTION_LEGACY_SWAP) {\n                (\n                    uint256 amountIn,\n                    uint256 amountOutMin,\n                    address[] memory path,\n                    address to\n                ) = abi.decode(\n                        datas[i],\n                        (uint256, uint256, address[], address)\n                    );\n                bool sendTokens;\n                if (amountIn == 0) {\n                    amountIn = IERC20(path[0]).balanceOf(address(this));\n                    sendTokens = true;\n                }\n                _swapExactTokensForTokens(\n                    amountIn,\n                    amountOutMin,\n                    path,\n                    to,\n                    sendTokens\n                );\n            } else if (action == ACTION_TRIDENT_SWAP) {\n                ExactInputParams memory params = abi.decode(\n                    datas[i],\n                    (ExactInputParams)\n                );\n\n                _exactInput(params);\n            } else if (action == ACTION_TRIDENT_COMPLEX_PATH_SWAP) {\n                ComplexPathParams memory params = abi.decode(\n                    datas[i],\n                    (ComplexPathParams)\n                );\n\n                _complexPath(params);\n            } else if (action == ACTION_STARGATE_TELEPORT) {\n                (\n                    StargateTeleportParams memory params,\n                    uint8[] memory actionsDST,\n                    uint256[] memory valuesDST,\n                    bytes[] memory datasDST\n                ) = abi.decode(\n                        datas[i],\n                        (StargateTeleportParams, uint8[], uint256[], bytes[])\n                    );\n\n                _stargateTeleport(params, actionsDST, valuesDST, datasDST);\n            }\n        }\n    }\n\n    /// @notice Allows the contract to receive Native tokens\n    receive() external payable {}\n}"}},"settings":{"optimizer":{"enabled":true,"runs":999999},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"9302","formattedMessage":"Warning: Return value of low-level calls not used.\n   --> contracts/adapters/StargateAdapter.sol:141:17:\n    |\n141 |                 to.call{value: (address(this).balance)}(\"\");\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Return value of low-level calls not used.","severity":"warning","sourceLocation":{"end":5461,"file":"contracts/adapters/StargateAdapter.sol","start":5418},"type":"Warning"},{"component":"general","errorCode":"9302","formattedMessage":"Warning: Return value of low-level calls not used.\n   --> contracts/adapters/StargateAdapter.sol:167:13:\n    |\n167 |             to.call{value: (address(this).balance)}(\"\");\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Return value of low-level calls not used.","severity":"warning","sourceLocation":{"end":6257,"file":"contracts/adapters/StargateAdapter.sol","start":6214},"type":"Warning"}],"sources":{"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[667]},"id":3,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:0"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3,"sourceUnit":668,"src":"115:35:0","symbolAliases":[],"unitAlias":""}],"src":"90:61:0"},"id":0},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[1456],"ERC20":[589],"IERC20":[667],"IERC20Metadata":[692]},"id":590,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":590,"sourceUnit":668,"src":"130:22:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":590,"sourceUnit":693,"src":"153:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":590,"sourceUnit":1457,"src":"195:33:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":9,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1456,"src":"1550:7:1"},"id":10,"nodeType":"InheritanceSpecifier","src":"1550:7:1"},{"baseName":{"id":11,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"1559:6:1"},"id":12,"nodeType":"InheritanceSpecifier","src":"1559:6:1"},{"baseName":{"id":13,"name":"IERC20Metadata","nodeType":"IdentifierPath","referencedDeclaration":692,"src":"1567:14:1"},"id":14,"nodeType":"InheritanceSpecifier","src":"1567:14:1"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"230:1301:1","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":589,"linearizedBaseContracts":[589,692,667,1456],"name":"ERC20","nameLocation":"1541:5:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":18,"mutability":"mutable","name":"_balances","nameLocation":"1624:9:1","nodeType":"VariableDeclaration","scope":589,"src":"1588:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":17,"keyType":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"1596:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1588:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":16,"name":"uint256","nodeType":"ElementaryTypeName","src":"1607:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":24,"mutability":"mutable","name":"_allowances","nameLocation":"1696:11:1","nodeType":"VariableDeclaration","scope":589,"src":"1640:67:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":23,"keyType":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1648:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1640:47:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":22,"keyType":{"id":20,"name":"address","nodeType":"ElementaryTypeName","src":"1667:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1659:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":21,"name":"uint256","nodeType":"ElementaryTypeName","src":"1678:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":26,"mutability":"mutable","name":"_totalSupply","nameLocation":"1730:12:1","nodeType":"VariableDeclaration","scope":589,"src":"1714:28:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"1714:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":28,"mutability":"mutable","name":"_name","nameLocation":"1764:5:1","nodeType":"VariableDeclaration","scope":589,"src":"1749:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":27,"name":"string","nodeType":"ElementaryTypeName","src":"1749:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":30,"mutability":"mutable","name":"_symbol","nameLocation":"1790:7:1","nodeType":"VariableDeclaration","scope":589,"src":"1775:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":29,"name":"string","nodeType":"ElementaryTypeName","src":"1775:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":46,"nodeType":"Block","src":"2036:57:1","statements":[{"expression":{"id":40,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":38,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"2046:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":39,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"2054:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2046:13:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":41,"nodeType":"ExpressionStatement","src":"2046:13:1"},{"expression":{"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":42,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"2069:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":43,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"2079:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2069:17:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":45,"nodeType":"ExpressionStatement","src":"2069:17:1"}]},"documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"1804:171:1","text":" @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."},"id":47,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33,"mutability":"mutable","name":"name_","nameLocation":"2006:5:1","nodeType":"VariableDeclaration","scope":47,"src":"1992:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":32,"name":"string","nodeType":"ElementaryTypeName","src":"1992:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"symbol_","nameLocation":"2027:7:1","nodeType":"VariableDeclaration","scope":47,"src":"2013:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":34,"name":"string","nodeType":"ElementaryTypeName","src":"2013:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1991:44:1"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"2036:0:1"},"scope":589,"src":"1980:113:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[679],"body":{"id":56,"nodeType":"Block","src":"2227:29:1","statements":[{"expression":{"id":54,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"2244:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":53,"id":55,"nodeType":"Return","src":"2237:12:1"}]},"documentation":{"id":48,"nodeType":"StructuredDocumentation","src":"2099:54:1","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":57,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2167:4:1","nodeType":"FunctionDefinition","overrides":{"id":50,"nodeType":"OverrideSpecifier","overrides":[],"src":"2194:8:1"},"parameters":{"id":49,"nodeType":"ParameterList","parameters":[],"src":"2171:2:1"},"returnParameters":{"id":53,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":57,"src":"2212:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":51,"name":"string","nodeType":"ElementaryTypeName","src":"2212:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2211:15:1"},"scope":589,"src":"2158:98:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[685],"body":{"id":66,"nodeType":"Block","src":"2440:31:1","statements":[{"expression":{"id":64,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"2457:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"2450:14:1"}]},"documentation":{"id":58,"nodeType":"StructuredDocumentation","src":"2262:102:1","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2378:6:1","nodeType":"FunctionDefinition","overrides":{"id":60,"nodeType":"OverrideSpecifier","overrides":[],"src":"2407:8:1"},"parameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"2384:2:1"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"2425:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":61,"name":"string","nodeType":"ElementaryTypeName","src":"2425:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2424:15:1"},"scope":589,"src":"2369:102:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[691],"body":{"id":76,"nodeType":"Block","src":"3169:26:1","statements":[{"expression":{"hexValue":"3138","id":74,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3186:2:1","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":73,"id":75,"nodeType":"Return","src":"3179:9:1"}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"2477:622:1","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":77,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3113:8:1","nodeType":"FunctionDefinition","overrides":{"id":70,"nodeType":"OverrideSpecifier","overrides":[],"src":"3144:8:1"},"parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"3121:2:1"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":77,"src":"3162:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":71,"name":"uint8","nodeType":"ElementaryTypeName","src":"3162:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3161:7:1"},"scope":589,"src":"3104:91:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[616],"body":{"id":86,"nodeType":"Block","src":"3325:36:1","statements":[{"expression":{"id":84,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"3342:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":83,"id":85,"nodeType":"Return","src":"3335:19:1"}]},"documentation":{"id":78,"nodeType":"StructuredDocumentation","src":"3201:49:1","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":87,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3264:11:1","nodeType":"FunctionDefinition","overrides":{"id":80,"nodeType":"OverrideSpecifier","overrides":[],"src":"3298:8:1"},"parameters":{"id":79,"nodeType":"ParameterList","parameters":[],"src":"3275:2:1"},"returnParameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":87,"src":"3316:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":81,"name":"uint256","nodeType":"ElementaryTypeName","src":"3316:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3315:9:1"},"scope":589,"src":"3255:106:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[624],"body":{"id":100,"nodeType":"Block","src":"3502:42:1","statements":[{"expression":{"baseExpression":{"id":96,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"3519:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":98,"indexExpression":{"id":97,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"3529:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3519:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":95,"id":99,"nodeType":"Return","src":"3512:25:1"}]},"documentation":{"id":88,"nodeType":"StructuredDocumentation","src":"3367:47:1","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":101,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3428:9:1","nodeType":"FunctionDefinition","overrides":{"id":92,"nodeType":"OverrideSpecifier","overrides":[],"src":"3475:8:1"},"parameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"account","nameLocation":"3446:7:1","nodeType":"VariableDeclaration","scope":101,"src":"3438:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"3438:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:17:1"},"returnParameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":101,"src":"3493:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":93,"name":"uint256","nodeType":"ElementaryTypeName","src":"3493:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3492:9:1"},"scope":589,"src":"3419:125:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[634],"body":{"id":125,"nodeType":"Block","src":"3825:104:1","statements":[{"assignments":[113],"declarations":[{"constant":false,"id":113,"mutability":"mutable","name":"owner","nameLocation":"3843:5:1","nodeType":"VariableDeclaration","scope":125,"src":"3835:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"3835:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":116,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":114,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"3851:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3851:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3835:28:1"},{"expression":{"arguments":[{"id":118,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3883:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":119,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"3890:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":120,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"3894:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":117,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"3873:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3873:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":122,"nodeType":"ExpressionStatement","src":"3873:28:1"},{"expression":{"hexValue":"74727565","id":123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3918:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":111,"id":124,"nodeType":"Return","src":"3911:11:1"}]},"documentation":{"id":102,"nodeType":"StructuredDocumentation","src":"3550:185:1","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":126,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3749:8:1","nodeType":"FunctionDefinition","overrides":{"id":108,"nodeType":"OverrideSpecifier","overrides":[],"src":"3801:8:1"},"parameters":{"id":107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":104,"mutability":"mutable","name":"to","nameLocation":"3766:2:1","nodeType":"VariableDeclaration","scope":126,"src":"3758:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"3758:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":106,"mutability":"mutable","name":"amount","nameLocation":"3778:6:1","nodeType":"VariableDeclaration","scope":126,"src":"3770:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":105,"name":"uint256","nodeType":"ElementaryTypeName","src":"3770:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3757:28:1"},"returnParameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":126,"src":"3819:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":109,"name":"bool","nodeType":"ElementaryTypeName","src":"3819:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3818:6:1"},"scope":589,"src":"3740:189:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[644],"body":{"id":143,"nodeType":"Block","src":"4085:51:1","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":137,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"4102:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":139,"indexExpression":{"id":138,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"4114:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4102:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":141,"indexExpression":{"id":140,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"4121:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4102:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":136,"id":142,"nodeType":"Return","src":"4095:34:1"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"3935:47:1","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":144,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3996:9:1","nodeType":"FunctionDefinition","overrides":{"id":133,"nodeType":"OverrideSpecifier","overrides":[],"src":"4058:8:1"},"parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"owner","nameLocation":"4014:5:1","nodeType":"VariableDeclaration","scope":144,"src":"4006:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"4006:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"spender","nameLocation":"4029:7:1","nodeType":"VariableDeclaration","scope":144,"src":"4021:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"4021:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4005:32:1"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":135,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":144,"src":"4076:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":134,"name":"uint256","nodeType":"ElementaryTypeName","src":"4076:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4075:9:1"},"scope":589,"src":"3987:149:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[654],"body":{"id":168,"nodeType":"Block","src":"4533:108:1","statements":[{"assignments":[156],"declarations":[{"constant":false,"id":156,"mutability":"mutable","name":"owner","nameLocation":"4551:5:1","nodeType":"VariableDeclaration","scope":168,"src":"4543:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"4543:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":159,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":157,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"4559:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4559:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4543:28:1"},{"expression":{"arguments":[{"id":161,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"4590:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":162,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"4597:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":163,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4606:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":160,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"4581:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4581:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":165,"nodeType":"ExpressionStatement","src":"4581:32:1"},{"expression":{"hexValue":"74727565","id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4630:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":154,"id":167,"nodeType":"Return","src":"4623:11:1"}]},"documentation":{"id":145,"nodeType":"StructuredDocumentation","src":"4142:297:1","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":169,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4453:7:1","nodeType":"FunctionDefinition","overrides":{"id":151,"nodeType":"OverrideSpecifier","overrides":[],"src":"4509:8:1"},"parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"spender","nameLocation":"4469:7:1","nodeType":"VariableDeclaration","scope":169,"src":"4461:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":146,"name":"address","nodeType":"ElementaryTypeName","src":"4461:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":149,"mutability":"mutable","name":"amount","nameLocation":"4486:6:1","nodeType":"VariableDeclaration","scope":169,"src":"4478:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":148,"name":"uint256","nodeType":"ElementaryTypeName","src":"4478:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4460:33:1"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":169,"src":"4527:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":152,"name":"bool","nodeType":"ElementaryTypeName","src":"4527:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4526:6:1"},"scope":589,"src":"4444:197:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[666],"body":{"id":201,"nodeType":"Block","src":"5306:153:1","statements":[{"assignments":[183],"declarations":[{"constant":false,"id":183,"mutability":"mutable","name":"spender","nameLocation":"5324:7:1","nodeType":"VariableDeclaration","scope":201,"src":"5316:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":182,"name":"address","nodeType":"ElementaryTypeName","src":"5316:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":186,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":184,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"5334:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5334:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5316:30:1"},{"expression":{"arguments":[{"id":188,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"5372:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":189,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"5378:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":190,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"5387:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":187,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5356:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5356:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":192,"nodeType":"ExpressionStatement","src":"5356:38:1"},{"expression":{"arguments":[{"id":194,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"5414:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":195,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"5420:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":196,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"5424:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":193,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"5404:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5404:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":198,"nodeType":"ExpressionStatement","src":"5404:27:1"},{"expression":{"hexValue":"74727565","id":199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5448:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":181,"id":200,"nodeType":"Return","src":"5441:11:1"}]},"documentation":{"id":170,"nodeType":"StructuredDocumentation","src":"4647:551:1","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":202,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5212:12:1","nodeType":"FunctionDefinition","overrides":{"id":178,"nodeType":"OverrideSpecifier","overrides":[],"src":"5282:8:1"},"parameters":{"id":177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"mutability":"mutable","name":"from","nameLocation":"5233:4:1","nodeType":"VariableDeclaration","scope":202,"src":"5225:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":171,"name":"address","nodeType":"ElementaryTypeName","src":"5225:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":174,"mutability":"mutable","name":"to","nameLocation":"5247:2:1","nodeType":"VariableDeclaration","scope":202,"src":"5239:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"5239:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":176,"mutability":"mutable","name":"amount","nameLocation":"5259:6:1","nodeType":"VariableDeclaration","scope":202,"src":"5251:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":175,"name":"uint256","nodeType":"ElementaryTypeName","src":"5251:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5224:42:1"},"returnParameters":{"id":181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":202,"src":"5300:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":179,"name":"bool","nodeType":"ElementaryTypeName","src":"5300:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5299:6:1"},"scope":589,"src":"5203:256:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":230,"nodeType":"Block","src":"5948:140:1","statements":[{"assignments":[213],"declarations":[{"constant":false,"id":213,"mutability":"mutable","name":"owner","nameLocation":"5966:5:1","nodeType":"VariableDeclaration","scope":230,"src":"5958:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":212,"name":"address","nodeType":"ElementaryTypeName","src":"5958:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":216,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":214,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"5974:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5974:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5958:28:1"},{"expression":{"arguments":[{"id":218,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"6005:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":219,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"6012:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":221,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"6031:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":222,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"6038:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":220,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"6021:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6021:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":224,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"6049:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6021:38:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":217,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"5996:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5996:64:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":227,"nodeType":"ExpressionStatement","src":"5996:64:1"},{"expression":{"hexValue":"74727565","id":228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6077:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":211,"id":229,"nodeType":"Return","src":"6070:11:1"}]},"documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"5465:384:1","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":231,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5863:17:1","nodeType":"FunctionDefinition","parameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"spender","nameLocation":"5889:7:1","nodeType":"VariableDeclaration","scope":231,"src":"5881:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":204,"name":"address","nodeType":"ElementaryTypeName","src":"5881:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":207,"mutability":"mutable","name":"addedValue","nameLocation":"5906:10:1","nodeType":"VariableDeclaration","scope":231,"src":"5898:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":206,"name":"uint256","nodeType":"ElementaryTypeName","src":"5898:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5880:37:1"},"returnParameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":210,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":231,"src":"5942:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":209,"name":"bool","nodeType":"ElementaryTypeName","src":"5942:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5941:6:1"},"scope":589,"src":"5854:234:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":271,"nodeType":"Block","src":"6674:328:1","statements":[{"assignments":[242],"declarations":[{"constant":false,"id":242,"mutability":"mutable","name":"owner","nameLocation":"6692:5:1","nodeType":"VariableDeclaration","scope":271,"src":"6684:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":241,"name":"address","nodeType":"ElementaryTypeName","src":"6684:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":245,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":243,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"6700:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6700:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6684:28:1"},{"assignments":[247],"declarations":[{"constant":false,"id":247,"mutability":"mutable","name":"currentAllowance","nameLocation":"6730:16:1","nodeType":"VariableDeclaration","scope":271,"src":"6722:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":246,"name":"uint256","nodeType":"ElementaryTypeName","src":"6722:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":252,"initialValue":{"arguments":[{"id":249,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"6759:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":250,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"6766:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":248,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"6749:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6749:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6722:52:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":254,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"6792:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":255,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"6812:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6792:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6829:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":253,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"6784:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6784:85:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":259,"nodeType":"ExpressionStatement","src":"6784:85:1"},{"id":268,"nodeType":"UncheckedBlock","src":"6879:95:1","statements":[{"expression":{"arguments":[{"id":261,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"6912:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":262,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"6919:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":263,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"6928:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":264,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"6947:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6928:34:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":260,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"6903:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6903:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":267,"nodeType":"ExpressionStatement","src":"6903:60:1"}]},{"expression":{"hexValue":"74727565","id":269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6991:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":240,"id":270,"nodeType":"Return","src":"6984:11:1"}]},"documentation":{"id":232,"nodeType":"StructuredDocumentation","src":"6094:476:1","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":272,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6584:17:1","nodeType":"FunctionDefinition","parameters":{"id":237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":234,"mutability":"mutable","name":"spender","nameLocation":"6610:7:1","nodeType":"VariableDeclaration","scope":272,"src":"6602:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"6602:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":236,"mutability":"mutable","name":"subtractedValue","nameLocation":"6627:15:1","nodeType":"VariableDeclaration","scope":272,"src":"6619:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":235,"name":"uint256","nodeType":"ElementaryTypeName","src":"6619:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6601:42:1"},"returnParameters":{"id":240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":272,"src":"6668:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":238,"name":"bool","nodeType":"ElementaryTypeName","src":"6668:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6667:6:1"},"scope":589,"src":"6575:427:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":348,"nodeType":"Block","src":"7534:710:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":283,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"7552:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7568:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7560:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"7560:7:1","typeDescriptions":{}}},"id":287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7560:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7552:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7572:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":282,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"7544:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7544:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":291,"nodeType":"ExpressionStatement","src":"7544:68:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":293,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"7630:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7644:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7636:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":294,"name":"address","nodeType":"ElementaryTypeName","src":"7636:7:1","typeDescriptions":{}}},"id":297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7636:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7630:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7648:37:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":292,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"7622:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7622:64:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":301,"nodeType":"ExpressionStatement","src":"7622:64:1"},{"expression":{"arguments":[{"id":303,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"7718:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":304,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"7724:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":305,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"7728:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":302,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"7697:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7697:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":307,"nodeType":"ExpressionStatement","src":"7697:38:1"},{"assignments":[309],"declarations":[{"constant":false,"id":309,"mutability":"mutable","name":"fromBalance","nameLocation":"7754:11:1","nodeType":"VariableDeclaration","scope":348,"src":"7746:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":308,"name":"uint256","nodeType":"ElementaryTypeName","src":"7746:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":313,"initialValue":{"baseExpression":{"id":310,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"7768:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":312,"indexExpression":{"id":311,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"7778:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7768:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7746:37:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":315,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"7801:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":316,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"7816:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7824:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":314,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"7793:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7793:72:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":320,"nodeType":"ExpressionStatement","src":"7793:72:1"},{"id":335,"nodeType":"UncheckedBlock","src":"7875:273:1","statements":[{"expression":{"id":327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":321,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"7899:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":323,"indexExpression":{"id":322,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"7909:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7899:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":324,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"7917:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":325,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"7931:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7917:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:38:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":328,"nodeType":"ExpressionStatement","src":"7899:38:1"},{"expression":{"id":333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":329,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"8114:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":331,"indexExpression":{"id":330,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"8124:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8114:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":332,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"8131:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8114:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":334,"nodeType":"ExpressionStatement","src":"8114:23:1"}]},{"eventCall":{"arguments":[{"id":337,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"8172:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":338,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"8178:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":339,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"8182:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":336,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"8163:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8163:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":341,"nodeType":"EmitStatement","src":"8158:31:1"},{"expression":{"arguments":[{"id":343,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"8220:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":344,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"8226:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":345,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"8230:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":342,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"8200:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8200:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":347,"nodeType":"ExpressionStatement","src":"8200:37:1"}]},"documentation":{"id":273,"nodeType":"StructuredDocumentation","src":"7008:443:1","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":349,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7465:9:1","nodeType":"FunctionDefinition","parameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":275,"mutability":"mutable","name":"from","nameLocation":"7483:4:1","nodeType":"VariableDeclaration","scope":349,"src":"7475:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":274,"name":"address","nodeType":"ElementaryTypeName","src":"7475:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":277,"mutability":"mutable","name":"to","nameLocation":"7497:2:1","nodeType":"VariableDeclaration","scope":349,"src":"7489:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":276,"name":"address","nodeType":"ElementaryTypeName","src":"7489:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":279,"mutability":"mutable","name":"amount","nameLocation":"7509:6:1","nodeType":"VariableDeclaration","scope":349,"src":"7501:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"7501:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7474:42:1"},"returnParameters":{"id":281,"nodeType":"ParameterList","parameters":[],"src":"7534:0:1"},"scope":589,"src":"7456:788:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":405,"nodeType":"Block","src":"8585:470:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":358,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"8603:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8622:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8614:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":359,"name":"address","nodeType":"ElementaryTypeName","src":"8614:7:1","typeDescriptions":{}}},"id":362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8614:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8603:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8626:33:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":357,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"8595:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8595:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":366,"nodeType":"ExpressionStatement","src":"8595:65:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8700:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8692:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":368,"name":"address","nodeType":"ElementaryTypeName","src":"8692:7:1","typeDescriptions":{}}},"id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8692:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":372,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"8704:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":373,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"8713:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":367,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"8671:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8671:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":375,"nodeType":"ExpressionStatement","src":"8671:49:1"},{"expression":{"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":376,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"8731:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":377,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"8747:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8731:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":379,"nodeType":"ExpressionStatement","src":"8731:22:1"},{"id":386,"nodeType":"UncheckedBlock","src":"8763:175:1","statements":[{"expression":{"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":380,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"8899:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":382,"indexExpression":{"id":381,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"8909:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8899:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":383,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"8921:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8899:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":385,"nodeType":"ExpressionStatement","src":"8899:28:1"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":389,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8961:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":388,"name":"address","nodeType":"ElementaryTypeName","src":"8961:7:1","typeDescriptions":{}}},"id":391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8961:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":392,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"8973:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":393,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"8982:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":387,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"8952:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8952:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":395,"nodeType":"EmitStatement","src":"8947:42:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9028:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9020:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":397,"name":"address","nodeType":"ElementaryTypeName","src":"9020:7:1","typeDescriptions":{}}},"id":400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9020:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":401,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"9032:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":402,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"9041:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":396,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"9000:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9000:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":404,"nodeType":"ExpressionStatement","src":"9000:48:1"}]},"documentation":{"id":350,"nodeType":"StructuredDocumentation","src":"8250:265:1","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":406,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8529:5:1","nodeType":"FunctionDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"mutability":"mutable","name":"account","nameLocation":"8543:7:1","nodeType":"VariableDeclaration","scope":406,"src":"8535:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"8535:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"mutability":"mutable","name":"amount","nameLocation":"8560:6:1","nodeType":"VariableDeclaration","scope":406,"src":"8552:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":353,"name":"uint256","nodeType":"ElementaryTypeName","src":"8552:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8534:33:1"},"returnParameters":{"id":356,"nodeType":"ParameterList","parameters":[],"src":"8585:0:1"},"scope":589,"src":"8520:535:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":477,"nodeType":"Block","src":"9440:594:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":415,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"9458:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9477:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":417,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9469:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":416,"name":"address","nodeType":"ElementaryTypeName","src":"9469:7:1","typeDescriptions":{}}},"id":419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9469:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9458:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9481:35:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":414,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"9450:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9450:67:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":423,"nodeType":"ExpressionStatement","src":"9450:67:1"},{"expression":{"arguments":[{"id":425,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"9549:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9566:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9558:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"9558:7:1","typeDescriptions":{}}},"id":429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9558:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":430,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"9570:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":424,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"9528:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9528:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":432,"nodeType":"ExpressionStatement","src":"9528:49:1"},{"assignments":[434],"declarations":[{"constant":false,"id":434,"mutability":"mutable","name":"accountBalance","nameLocation":"9596:14:1","nodeType":"VariableDeclaration","scope":477,"src":"9588:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":433,"name":"uint256","nodeType":"ElementaryTypeName","src":"9588:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":438,"initialValue":{"baseExpression":{"id":435,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"9613:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":437,"indexExpression":{"id":436,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"9623:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9613:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9588:43:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":440,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"9649:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":441,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"9667:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9649:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9675:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":439,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"9641:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9641:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":445,"nodeType":"ExpressionStatement","src":"9641:71:1"},{"id":458,"nodeType":"UncheckedBlock","src":"9722:194:1","statements":[{"expression":{"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":446,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"9746:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":448,"indexExpression":{"id":447,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"9756:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9746:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":449,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":434,"src":"9767:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":450,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"9784:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9767:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9746:44:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":453,"nodeType":"ExpressionStatement","src":"9746:44:1"},{"expression":{"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":454,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"9883:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":455,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"9899:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9883:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":457,"nodeType":"ExpressionStatement","src":"9883:22:1"}]},{"eventCall":{"arguments":[{"id":460,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"9940:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9957:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9949:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":461,"name":"address","nodeType":"ElementaryTypeName","src":"9949:7:1","typeDescriptions":{}}},"id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9949:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":465,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"9961:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":459,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"9931:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9931:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":467,"nodeType":"EmitStatement","src":"9926:42:1"},{"expression":{"arguments":[{"id":469,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"9999:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10016:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10008:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"10008:7:1","typeDescriptions":{}}},"id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10008:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":474,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"10020:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":468,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"9979:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9979:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":476,"nodeType":"ExpressionStatement","src":"9979:48:1"}]},"documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"9061:309:1","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":478,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9384:5:1","nodeType":"FunctionDefinition","parameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"account","nameLocation":"9398:7:1","nodeType":"VariableDeclaration","scope":478,"src":"9390:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"9390:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":411,"mutability":"mutable","name":"amount","nameLocation":"9415:6:1","nodeType":"VariableDeclaration","scope":478,"src":"9407:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":410,"name":"uint256","nodeType":"ElementaryTypeName","src":"9407:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9389:33:1"},"returnParameters":{"id":413,"nodeType":"ParameterList","parameters":[],"src":"9440:0:1"},"scope":589,"src":"9375:659:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":522,"nodeType":"Block","src":"10540:257:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":489,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"10558:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10575:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10567:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":490,"name":"address","nodeType":"ElementaryTypeName","src":"10567:7:1","typeDescriptions":{}}},"id":493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10567:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10558:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10579:38:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":488,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"10550:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10550:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":497,"nodeType":"ExpressionStatement","src":"10550:68:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":499,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"10636:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10655:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10647:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"10647:7:1","typeDescriptions":{}}},"id":503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10647:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10636:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10659:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":498,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"10628:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10628:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":507,"nodeType":"ExpressionStatement","src":"10628:68:1"},{"expression":{"id":514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":508,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"10707:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":511,"indexExpression":{"id":509,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"10719:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10707:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":512,"indexExpression":{"id":510,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"10726:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10707:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":513,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"10737:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10707:36:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":515,"nodeType":"ExpressionStatement","src":"10707:36:1"},{"eventCall":{"arguments":[{"id":517,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"10767:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":518,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"10774:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":519,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"10783:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":516,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"10758:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10758:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":521,"nodeType":"EmitStatement","src":"10753:37:1"}]},"documentation":{"id":479,"nodeType":"StructuredDocumentation","src":"10040:412:1","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":523,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10466:8:1","nodeType":"FunctionDefinition","parameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":481,"mutability":"mutable","name":"owner","nameLocation":"10483:5:1","nodeType":"VariableDeclaration","scope":523,"src":"10475:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":480,"name":"address","nodeType":"ElementaryTypeName","src":"10475:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"spender","nameLocation":"10498:7:1","nodeType":"VariableDeclaration","scope":523,"src":"10490:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":482,"name":"address","nodeType":"ElementaryTypeName","src":"10490:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":485,"mutability":"mutable","name":"amount","nameLocation":"10515:6:1","nodeType":"VariableDeclaration","scope":523,"src":"10507:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":484,"name":"uint256","nodeType":"ElementaryTypeName","src":"10507:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10474:48:1"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[],"src":"10540:0:1"},"scope":589,"src":"10457:340:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":565,"nodeType":"Block","src":"11168:321:1","statements":[{"assignments":[534],"declarations":[{"constant":false,"id":534,"mutability":"mutable","name":"currentAllowance","nameLocation":"11186:16:1","nodeType":"VariableDeclaration","scope":565,"src":"11178:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":533,"name":"uint256","nodeType":"ElementaryTypeName","src":"11178:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":539,"initialValue":{"arguments":[{"id":536,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"11215:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":537,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"11222:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":535,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":144,"src":"11205:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11205:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11178:52:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":540,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"11244:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11269:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":542,"name":"uint256","nodeType":"ElementaryTypeName","src":"11269:7:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":541,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"11264:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11264:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"11264:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11244:37:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":564,"nodeType":"IfStatement","src":"11240:243:1","trueBody":{"id":563,"nodeType":"Block","src":"11283:200:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":548,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"11305:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":549,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"11325:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11305:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11333:31:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":547,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"11297:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11297:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":553,"nodeType":"ExpressionStatement","src":"11297:68:1"},{"id":562,"nodeType":"UncheckedBlock","src":"11379:94:1","statements":[{"expression":{"arguments":[{"id":555,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"11416:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":556,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"11423:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":557,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"11432:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":558,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"11451:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11432:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":554,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"11407:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11407:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":561,"nodeType":"ExpressionStatement","src":"11407:51:1"}]}]}}]},"documentation":{"id":524,"nodeType":"StructuredDocumentation","src":"10803:270:1","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":566,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11087:15:1","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":526,"mutability":"mutable","name":"owner","nameLocation":"11111:5:1","nodeType":"VariableDeclaration","scope":566,"src":"11103:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":525,"name":"address","nodeType":"ElementaryTypeName","src":"11103:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"spender","nameLocation":"11126:7:1","nodeType":"VariableDeclaration","scope":566,"src":"11118:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":527,"name":"address","nodeType":"ElementaryTypeName","src":"11118:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"amount","nameLocation":"11143:6:1","nodeType":"VariableDeclaration","scope":566,"src":"11135:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"11135:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11102:48:1"},"returnParameters":{"id":532,"nodeType":"ParameterList","parameters":[],"src":"11168:0:1"},"scope":589,"src":"11078:411:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":576,"nodeType":"Block","src":"12162:2:1","statements":[]},"documentation":{"id":567,"nodeType":"StructuredDocumentation","src":"11495:573:1","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":577,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12082:20:1","nodeType":"FunctionDefinition","parameters":{"id":574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":569,"mutability":"mutable","name":"from","nameLocation":"12111:4:1","nodeType":"VariableDeclaration","scope":577,"src":"12103:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":568,"name":"address","nodeType":"ElementaryTypeName","src":"12103:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":571,"mutability":"mutable","name":"to","nameLocation":"12125:2:1","nodeType":"VariableDeclaration","scope":577,"src":"12117:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":570,"name":"address","nodeType":"ElementaryTypeName","src":"12117:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":573,"mutability":"mutable","name":"amount","nameLocation":"12137:6:1","nodeType":"VariableDeclaration","scope":577,"src":"12129:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":572,"name":"uint256","nodeType":"ElementaryTypeName","src":"12129:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12102:42:1"},"returnParameters":{"id":575,"nodeType":"ParameterList","parameters":[],"src":"12162:0:1"},"scope":589,"src":"12073:91:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":587,"nodeType":"Block","src":"12840:2:1","statements":[]},"documentation":{"id":578,"nodeType":"StructuredDocumentation","src":"12170:577:1","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":588,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"12761:19:1","nodeType":"FunctionDefinition","parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"mutability":"mutable","name":"from","nameLocation":"12789:4:1","nodeType":"VariableDeclaration","scope":588,"src":"12781:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":579,"name":"address","nodeType":"ElementaryTypeName","src":"12781:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":582,"mutability":"mutable","name":"to","nameLocation":"12803:2:1","nodeType":"VariableDeclaration","scope":588,"src":"12795:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":581,"name":"address","nodeType":"ElementaryTypeName","src":"12795:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"amount","nameLocation":"12815:6:1","nodeType":"VariableDeclaration","scope":588,"src":"12807:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"12807:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12780:42:1"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[],"src":"12840:0:1"},"scope":589,"src":"12752:90:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":590,"src":"1532:11312:1","usedErrors":[]}],"src":"105:12740:1"},"id":1},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[667]},"id":668,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":591,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"131:70:2","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":667,"linearizedBaseContracts":[667],"name":"IERC20","nameLocation":"212:6:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"225:158:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":601,"name":"Transfer","nameLocation":"394:8:2","nodeType":"EventDefinition","parameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:2","nodeType":"VariableDeclaration","scope":601,"src":"403:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":594,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":597,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:2","nodeType":"VariableDeclaration","scope":601,"src":"425:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":599,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:2","nodeType":"VariableDeclaration","scope":601,"src":"445:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":598,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:2"},"src":"388:72:2"},{"anonymous":false,"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"466:148:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":610,"name":"Approval","nameLocation":"625:8:2","nodeType":"EventDefinition","parameters":{"id":609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:2","nodeType":"VariableDeclaration","scope":610,"src":"634:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":603,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":606,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:2","nodeType":"VariableDeclaration","scope":610,"src":"657:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":608,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:2","nodeType":"VariableDeclaration","scope":610,"src":"682:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":607,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:2"},"src":"619:78:2"},{"documentation":{"id":611,"nodeType":"StructuredDocumentation","src":"703:66:2","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":616,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:2","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"794:2:2"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":616,"src":"820:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":613,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:2"},"scope":667,"src":"774:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"835:72:2","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":624,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:2","nodeType":"FunctionDefinition","parameters":{"id":620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":619,"mutability":"mutable","name":"account","nameLocation":"939:7:2","nodeType":"VariableDeclaration","scope":624,"src":"931:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":618,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:2"},"returnParameters":{"id":623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":624,"src":"971:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":621,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:2"},"scope":667,"src":"912:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":625,"nodeType":"StructuredDocumentation","src":"986:202:2","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":634,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:2","nodeType":"FunctionDefinition","parameters":{"id":630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"to","nameLocation":"1219:2:2","nodeType":"VariableDeclaration","scope":634,"src":"1211:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":626,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":629,"mutability":"mutable","name":"amount","nameLocation":"1231:6:2","nodeType":"VariableDeclaration","scope":634,"src":"1223:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:2"},"returnParameters":{"id":633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":634,"src":"1257:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":631,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:2"},"scope":667,"src":"1193:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":635,"nodeType":"StructuredDocumentation","src":"1269:264:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":644,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:2","nodeType":"FunctionDefinition","parameters":{"id":640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":637,"mutability":"mutable","name":"owner","nameLocation":"1565:5:2","nodeType":"VariableDeclaration","scope":644,"src":"1557:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":636,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":639,"mutability":"mutable","name":"spender","nameLocation":"1580:7:2","nodeType":"VariableDeclaration","scope":644,"src":"1572:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":638,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:2"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":644,"src":"1612:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":641,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:2"},"scope":667,"src":"1538:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":645,"nodeType":"StructuredDocumentation","src":"1627:642:2","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":654,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:2","nodeType":"FunctionDefinition","parameters":{"id":650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"spender","nameLocation":"2299:7:2","nodeType":"VariableDeclaration","scope":654,"src":"2291:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":649,"mutability":"mutable","name":"amount","nameLocation":"2316:6:2","nodeType":"VariableDeclaration","scope":654,"src":"2308:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":648,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:2"},"returnParameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":654,"src":"2342:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":651,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:2"},"scope":667,"src":"2274:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":655,"nodeType":"StructuredDocumentation","src":"2354:287:2","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":666,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:2","nodeType":"FunctionDefinition","parameters":{"id":662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":657,"mutability":"mutable","name":"from","nameLocation":"2676:4:2","nodeType":"VariableDeclaration","scope":666,"src":"2668:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":656,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":659,"mutability":"mutable","name":"to","nameLocation":"2690:2:2","nodeType":"VariableDeclaration","scope":666,"src":"2682:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":658,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":661,"mutability":"mutable","name":"amount","nameLocation":"2702:6:2","nodeType":"VariableDeclaration","scope":666,"src":"2694:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":660,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:2"},"returnParameters":{"id":665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":666,"src":"2728:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":663,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:2"},"scope":667,"src":"2646:88:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":668,"src":"202:2534:2","usedErrors":[]}],"src":"106:2631:2"},"id":2},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[667],"IERC20Metadata":[692]},"id":693,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":669,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":670,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":693,"sourceUnit":668,"src":"135:23:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":672,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"305:6:3"},"id":673,"nodeType":"InheritanceSpecifier","src":"305:6:3"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":671,"nodeType":"StructuredDocumentation","src":"160:116:3","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":692,"linearizedBaseContracts":[692,667],"name":"IERC20Metadata","nameLocation":"287:14:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":674,"nodeType":"StructuredDocumentation","src":"318:54:3","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":679,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:3","nodeType":"FunctionDefinition","parameters":{"id":675,"nodeType":"ParameterList","parameters":[],"src":"390:2:3"},"returnParameters":{"id":678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":677,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":679,"src":"416:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":676,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:3"},"scope":692,"src":"377:54:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":680,"nodeType":"StructuredDocumentation","src":"437:56:3","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":685,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:3","nodeType":"FunctionDefinition","parameters":{"id":681,"nodeType":"ParameterList","parameters":[],"src":"513:2:3"},"returnParameters":{"id":684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":683,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":685,"src":"539:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":682,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:3"},"scope":692,"src":"498:56:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"560:65:3","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":691,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:3","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[],"src":"647:2:3"},"returnParameters":{"id":690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":689,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":691,"src":"673:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":688,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:3"},"scope":692,"src":"630:50:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":693,"src":"277:405:3","usedErrors":[]}],"src":"110:573:3"},"id":3},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[728]},"id":729,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":694,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":695,"nodeType":"StructuredDocumentation","src":"148:480:4","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":728,"linearizedBaseContracts":[728],"name":"IERC20Permit","nameLocation":"639:12:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":696,"nodeType":"StructuredDocumentation","src":"658:792:4","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":713,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1464:6:4","nodeType":"FunctionDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"owner","nameLocation":"1488:5:4","nodeType":"VariableDeclaration","scope":713,"src":"1480:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":697,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":700,"mutability":"mutable","name":"spender","nameLocation":"1511:7:4","nodeType":"VariableDeclaration","scope":713,"src":"1503:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"1503:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":702,"mutability":"mutable","name":"value","nameLocation":"1536:5:4","nodeType":"VariableDeclaration","scope":713,"src":"1528:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":701,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"deadline","nameLocation":"1559:8:4","nodeType":"VariableDeclaration","scope":713,"src":"1551:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"1551:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"v","nameLocation":"1583:1:4","nodeType":"VariableDeclaration","scope":713,"src":"1577:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":705,"name":"uint8","nodeType":"ElementaryTypeName","src":"1577:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":708,"mutability":"mutable","name":"r","nameLocation":"1602:1:4","nodeType":"VariableDeclaration","scope":713,"src":"1594:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1594:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":710,"mutability":"mutable","name":"s","nameLocation":"1621:1:4","nodeType":"VariableDeclaration","scope":713,"src":"1613:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":709,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1613:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1470:158:4"},"returnParameters":{"id":712,"nodeType":"ParameterList","parameters":[],"src":"1637:0:4"},"scope":728,"src":"1455:183:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":714,"nodeType":"StructuredDocumentation","src":"1644:294:4","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":721,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1952:6:4","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":716,"mutability":"mutable","name":"owner","nameLocation":"1967:5:4","nodeType":"VariableDeclaration","scope":721,"src":"1959:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":715,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1958:15:4"},"returnParameters":{"id":720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":721,"src":"1997:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":718,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:9:4"},"scope":728,"src":"1943:63:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":722,"nodeType":"StructuredDocumentation","src":"2012:128:4","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":727,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2207:16:4","nodeType":"FunctionDefinition","parameters":{"id":723,"nodeType":"ParameterList","parameters":[],"src":"2223:2:4"},"returnParameters":{"id":726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":725,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":727,"src":"2249:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":724,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2249:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2248:9:4"},"scope":728,"src":"2198:60:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":729,"src":"629:1631:4","usedErrors":[]}],"src":"123:2138:4"},"id":4},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[1434],"IERC20":[667],"IERC20Permit":[728],"SafeERC20":[1104]},"id":1105,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":730,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":731,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1105,"sourceUnit":668,"src":"140:23:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":732,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1105,"sourceUnit":729,"src":"164:40:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":733,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1105,"sourceUnit":1435,"src":"205:36:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":734,"nodeType":"StructuredDocumentation","src":"243:457:5","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1104,"linearizedBaseContracts":[1104],"name":"SafeERC20","nameLocation":"709:9:5","nodeType":"ContractDefinition","nodes":[{"id":737,"libraryName":{"id":735,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":1434,"src":"731:7:5"},"nodeType":"UsingForDirective","src":"725:26:5","typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":760,"nodeType":"Block","src":"1013:103:5","statements":[{"expression":{"arguments":[{"id":749,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1043:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":752,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1073:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":634,"src":"1073:14:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1073:23:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":755,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"1098:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":756,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"1102:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":750,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"1050:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":751,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1050:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":748,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"1023:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1023:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":759,"nodeType":"ExpressionStatement","src":"1023:86:5"}]},"documentation":{"id":738,"nodeType":"StructuredDocumentation","src":"757:179:5","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":761,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:5","nodeType":"FunctionDefinition","parameters":{"id":746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":741,"mutability":"mutable","name":"token","nameLocation":"970:5:5","nodeType":"VariableDeclaration","scope":761,"src":"963:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":740,"nodeType":"UserDefinedTypeName","pathNode":{"id":739,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"963:6:5"},"referencedDeclaration":667,"src":"963:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":743,"mutability":"mutable","name":"to","nameLocation":"985:2:5","nodeType":"VariableDeclaration","scope":761,"src":"977:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":742,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":745,"mutability":"mutable","name":"value","nameLocation":"997:5:5","nodeType":"VariableDeclaration","scope":761,"src":"989:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":744,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:5"},"returnParameters":{"id":747,"nodeType":"ParameterList","parameters":[],"src":"1013:0:5"},"scope":1104,"src":"941:175:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":787,"nodeType":"Block","src":"1445:113:5","statements":[{"expression":{"arguments":[{"id":775,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"1475:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":778,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"1505:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":666,"src":"1505:18:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1505:27:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":781,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"1534:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":782,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":769,"src":"1540:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"1544:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":776,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"1482:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1482:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":774,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"1455:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1455:96:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":786,"nodeType":"ExpressionStatement","src":"1455:96:5"}]},"documentation":{"id":762,"nodeType":"StructuredDocumentation","src":"1122:228:5","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":788,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:5","nodeType":"FunctionDefinition","parameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":765,"mutability":"mutable","name":"token","nameLocation":"1388:5:5","nodeType":"VariableDeclaration","scope":788,"src":"1381:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":764,"nodeType":"UserDefinedTypeName","pathNode":{"id":763,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"1381:6:5"},"referencedDeclaration":667,"src":"1381:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":767,"mutability":"mutable","name":"from","nameLocation":"1403:4:5","nodeType":"VariableDeclaration","scope":788,"src":"1395:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":766,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":769,"mutability":"mutable","name":"to","nameLocation":"1417:2:5","nodeType":"VariableDeclaration","scope":788,"src":"1409:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":768,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":771,"mutability":"mutable","name":"value","nameLocation":"1429:5:5","nodeType":"VariableDeclaration","scope":788,"src":"1421:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":770,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:5"},"returnParameters":{"id":773,"nodeType":"ParameterList","parameters":[],"src":"1445:0:5"},"scope":1104,"src":"1355:203:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":831,"nodeType":"Block","src":"1894:497:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"2143:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":803,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":808,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2183:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1104","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1104","typeString":"library SafeERC20"}],"id":807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":806,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:5","typeDescriptions":{}}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2175:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":810,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"2190:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":804,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"2159:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":644,"src":"2159:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2159:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":814,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":799,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2121:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2121:163:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":818,"nodeType":"ExpressionStatement","src":"2121:163:5"},{"expression":{"arguments":[{"id":820,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"2314:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":823,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"2344:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":654,"src":"2344:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"2344:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":826,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"2368:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":827,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"2377:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":821,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2321:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2321:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":819,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"2294:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2294:90:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":830,"nodeType":"ExpressionStatement","src":"2294:90:5"}]},"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"1564:249:5","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":832,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:5","nodeType":"FunctionDefinition","parameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":792,"mutability":"mutable","name":"token","nameLocation":"1846:5:5","nodeType":"VariableDeclaration","scope":832,"src":"1839:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":791,"nodeType":"UserDefinedTypeName","pathNode":{"id":790,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"1839:6:5"},"referencedDeclaration":667,"src":"1839:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"spender","nameLocation":"1861:7:5","nodeType":"VariableDeclaration","scope":832,"src":"1853:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":793,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":796,"mutability":"mutable","name":"value","nameLocation":"1878:5:5","nodeType":"VariableDeclaration","scope":832,"src":"1870:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:5"},"returnParameters":{"id":798,"nodeType":"ParameterList","parameters":[],"src":"1894:0:5"},"scope":1104,"src":"1818:573:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":868,"nodeType":"Block","src":"2668:194:5","statements":[{"assignments":[844],"declarations":[{"constant":false,"id":844,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:5","nodeType":"VariableDeclaration","scope":868,"src":"2678:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":843,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":853,"initialValue":{"arguments":[{"arguments":[{"id":849,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2725:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1104","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1104","typeString":"library SafeERC20"}],"id":848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":847,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:5","typeDescriptions":{}}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2717:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":851,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"2732:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":845,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"2701:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":644,"src":"2701:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2701:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:5"},{"expression":{"arguments":[{"id":855,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"2770:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":858,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"2800:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":654,"src":"2800:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"2800:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":861,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"2824:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":862,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"2833:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":863,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":840,"src":"2848:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":856,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2777:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2777:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":854,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"2750:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2750:105:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":867,"nodeType":"ExpressionStatement","src":"2750:105:5"}]},"documentation":{"id":833,"nodeType":"StructuredDocumentation","src":"2397:180:5","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":869,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:5","nodeType":"FunctionDefinition","parameters":{"id":841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":836,"mutability":"mutable","name":"token","nameLocation":"2620:5:5","nodeType":"VariableDeclaration","scope":869,"src":"2613:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":835,"nodeType":"UserDefinedTypeName","pathNode":{"id":834,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"2613:6:5"},"referencedDeclaration":667,"src":"2613:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":838,"mutability":"mutable","name":"spender","nameLocation":"2635:7:5","nodeType":"VariableDeclaration","scope":869,"src":"2627:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":837,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":840,"mutability":"mutable","name":"value","nameLocation":"2652:5:5","nodeType":"VariableDeclaration","scope":869,"src":"2644:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":839,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:5"},"returnParameters":{"id":842,"nodeType":"ParameterList","parameters":[],"src":"2668:0:5"},"scope":1104,"src":"2582:280:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":913,"nodeType":"Block","src":"3139:321:5","statements":[{"id":912,"nodeType":"UncheckedBlock","src":"3149:305:5","statements":[{"assignments":[881],"declarations":[{"constant":false,"id":881,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:5","nodeType":"VariableDeclaration","scope":912,"src":"3173:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":880,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":890,"initialValue":{"arguments":[{"arguments":[{"id":886,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"3220:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1104","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1104","typeString":"library SafeERC20"}],"id":885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":884,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:5","typeDescriptions":{}}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3212:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":888,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"3227:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":882,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"3196:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":644,"src":"3196:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3196:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":892,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"3257:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":893,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"3273:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":891,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"3249:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3249:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":897,"nodeType":"ExpressionStatement","src":"3249:75:5"},{"expression":{"arguments":[{"id":899,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"3358:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":902,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"3388:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":654,"src":"3388:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"3388:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":905,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"3412:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":906,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"3421:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":907,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"3436:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":900,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"3365:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3365:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":898,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"3338:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3338:105:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":911,"nodeType":"ExpressionStatement","src":"3338:105:5"}]}]},"documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"2868:180:5","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":914,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:5","nodeType":"FunctionDefinition","parameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":873,"mutability":"mutable","name":"token","nameLocation":"3091:5:5","nodeType":"VariableDeclaration","scope":914,"src":"3084:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":872,"nodeType":"UserDefinedTypeName","pathNode":{"id":871,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"3084:6:5"},"referencedDeclaration":667,"src":"3084:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"spender","nameLocation":"3106:7:5","nodeType":"VariableDeclaration","scope":914,"src":"3098:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":874,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"value","nameLocation":"3123:5:5","nodeType":"VariableDeclaration","scope":914,"src":"3115:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":876,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:5"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[],"src":"3139:0:5"},"scope":1104,"src":"3053:407:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":960,"nodeType":"Block","src":"3833:333:5","statements":[{"assignments":[926],"declarations":[{"constant":false,"id":926,"mutability":"mutable","name":"approvalCall","nameLocation":"3856:12:5","nodeType":"VariableDeclaration","scope":960,"src":"3843:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":925,"name":"bytes","nodeType":"ElementaryTypeName","src":"3843:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":935,"initialValue":{"arguments":[{"expression":{"expression":{"id":929,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"3894:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":654,"src":"3894:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"3894:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":932,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"3918:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"3927:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":927,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"3871:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3871:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3871:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3843:90:5"},{"condition":{"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3948:45:5","subExpression":{"arguments":[{"id":937,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"3973:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"id":938,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"3980:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":936,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"3949:23:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3949:44:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":959,"nodeType":"IfStatement","src":"3944:216:5","trueBody":{"id":958,"nodeType":"Block","src":"3995:165:5","statements":[{"expression":{"arguments":[{"id":942,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"4029:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":945,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"4059:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":654,"src":"4059:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"4059:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":948,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"4083:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4092:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":943,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"4036:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4036:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4036:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":941,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"4009:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4009:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":952,"nodeType":"ExpressionStatement","src":"4009:86:5"},{"expression":{"arguments":[{"id":954,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"4129:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"id":955,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"4136:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":953,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"4109:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4109:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":957,"nodeType":"ExpressionStatement","src":"4109:40:5"}]}}]},"documentation":{"id":915,"nodeType":"StructuredDocumentation","src":"3466:285:5","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n 0 before setting it to a non-zero value."},"id":961,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3765:12:5","nodeType":"FunctionDefinition","parameters":{"id":923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":918,"mutability":"mutable","name":"token","nameLocation":"3785:5:5","nodeType":"VariableDeclaration","scope":961,"src":"3778:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":917,"nodeType":"UserDefinedTypeName","pathNode":{"id":916,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"3778:6:5"},"referencedDeclaration":667,"src":"3778:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":920,"mutability":"mutable","name":"spender","nameLocation":"3800:7:5","nodeType":"VariableDeclaration","scope":961,"src":"3792:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":919,"name":"address","nodeType":"ElementaryTypeName","src":"3792:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":922,"mutability":"mutable","name":"value","nameLocation":"3817:5:5","nodeType":"VariableDeclaration","scope":961,"src":"3809:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":921,"name":"uint256","nodeType":"ElementaryTypeName","src":"3809:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3777:46:5"},"returnParameters":{"id":924,"nodeType":"ParameterList","parameters":[],"src":"3833:0:5"},"scope":1104,"src":"3756:410:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1017,"nodeType":"Block","src":"4533:257:5","statements":[{"assignments":[983],"declarations":[{"constant":false,"id":983,"mutability":"mutable","name":"nonceBefore","nameLocation":"4551:11:5","nodeType":"VariableDeclaration","scope":1017,"src":"4543:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"4543:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":988,"initialValue":{"arguments":[{"id":986,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"4578:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":984,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"4565:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$728","typeString":"contract IERC20Permit"}},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":721,"src":"4565:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4565:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4543:41:5"},{"expression":{"arguments":[{"id":992,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"4607:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":993,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"4614:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":994,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"4623:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":995,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"4630:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":996,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"4640:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":997,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"4643:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":998,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"4646:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":989,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"4594:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$728","typeString":"contract IERC20Permit"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":713,"src":"4594:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4594:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1000,"nodeType":"ExpressionStatement","src":"4594:54:5"},{"assignments":[1002],"declarations":[{"constant":false,"id":1002,"mutability":"mutable","name":"nonceAfter","nameLocation":"4666:10:5","nodeType":"VariableDeclaration","scope":1017,"src":"4658:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1001,"name":"uint256","nodeType":"ElementaryTypeName","src":"4658:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1007,"initialValue":{"arguments":[{"id":1005,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"4692:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1003,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"4679:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$728","typeString":"contract IERC20Permit"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":721,"src":"4679:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4679:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4658:40:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1009,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"4716:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1010,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"4730:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4744:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4730:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4716:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4747:35:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1008,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"4708:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4708:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1016,"nodeType":"ExpressionStatement","src":"4708:75:5"}]},"documentation":{"id":962,"nodeType":"StructuredDocumentation","src":"4172:141:5","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":1018,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4327:10:5","nodeType":"FunctionDefinition","parameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"token","nameLocation":"4360:5:5","nodeType":"VariableDeclaration","scope":1018,"src":"4347:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$728","typeString":"contract IERC20Permit"},"typeName":{"id":964,"nodeType":"UserDefinedTypeName","pathNode":{"id":963,"name":"IERC20Permit","nodeType":"IdentifierPath","referencedDeclaration":728,"src":"4347:12:5"},"referencedDeclaration":728,"src":"4347:12:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$728","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":967,"mutability":"mutable","name":"owner","nameLocation":"4383:5:5","nodeType":"VariableDeclaration","scope":1018,"src":"4375:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":966,"name":"address","nodeType":"ElementaryTypeName","src":"4375:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"spender","nameLocation":"4406:7:5","nodeType":"VariableDeclaration","scope":1018,"src":"4398:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":968,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":971,"mutability":"mutable","name":"value","nameLocation":"4431:5:5","nodeType":"VariableDeclaration","scope":1018,"src":"4423:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":970,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":973,"mutability":"mutable","name":"deadline","nameLocation":"4454:8:5","nodeType":"VariableDeclaration","scope":1018,"src":"4446:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":972,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":975,"mutability":"mutable","name":"v","nameLocation":"4478:1:5","nodeType":"VariableDeclaration","scope":1018,"src":"4472:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":974,"name":"uint8","nodeType":"ElementaryTypeName","src":"4472:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":977,"mutability":"mutable","name":"r","nameLocation":"4497:1:5","nodeType":"VariableDeclaration","scope":1018,"src":"4489:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":976,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4489:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":979,"mutability":"mutable","name":"s","nameLocation":"4516:1:5","nodeType":"VariableDeclaration","scope":1018,"src":"4508:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":978,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4508:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4337:186:5"},"returnParameters":{"id":981,"nodeType":"ParameterList","parameters":[],"src":"4533:0:5"},"scope":1104,"src":"4318:472:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1054,"nodeType":"Block","src":"5243:572:5","statements":[{"assignments":[1028],"declarations":[{"constant":false,"id":1028,"mutability":"mutable","name":"returndata","nameLocation":"5605:10:5","nodeType":"VariableDeclaration","scope":1054,"src":"5592:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1027,"name":"bytes","nodeType":"ElementaryTypeName","src":"5592:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1037,"initialValue":{"arguments":[{"id":1034,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"5646:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5652:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1031,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"5626:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}],"id":1030,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5618:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1029,"name":"address","nodeType":"ElementaryTypeName","src":"5618:7:5","typeDescriptions":{}}},"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5618:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1194,"src":"5618:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5618:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5592:95:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1039,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"5705:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5705:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5726:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5705:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1045,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"5742:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5755:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1046,"name":"bool","nodeType":"ElementaryTypeName","src":"5755:4:5","typeDescriptions":{}}}],"id":1048,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5754:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1043,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"5731:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"5731:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5731:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5705:56:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5763:44:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1038,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5697:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5697:111:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1053,"nodeType":"ExpressionStatement","src":"5697:111:5"}]},"documentation":{"id":1019,"nodeType":"StructuredDocumentation","src":"4796:372:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1055,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5182:19:5","nodeType":"FunctionDefinition","parameters":{"id":1025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"mutability":"mutable","name":"token","nameLocation":"5209:5:5","nodeType":"VariableDeclaration","scope":1055,"src":"5202:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":1021,"nodeType":"UserDefinedTypeName","pathNode":{"id":1020,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"5202:6:5"},"referencedDeclaration":667,"src":"5202:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1024,"mutability":"mutable","name":"data","nameLocation":"5229:4:5","nodeType":"VariableDeclaration","scope":1055,"src":"5216:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1023,"name":"bytes","nodeType":"ElementaryTypeName","src":"5216:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5201:33:5"},"returnParameters":{"id":1026,"nodeType":"ParameterList","parameters":[],"src":"5243:0:5"},"scope":1104,"src":"5173:642:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1102,"nodeType":"Block","src":"6405:505:5","statements":[{"assignments":[1067,1069],"declarations":[{"constant":false,"id":1067,"mutability":"mutable","name":"success","nameLocation":"6706:7:5","nodeType":"VariableDeclaration","scope":1102,"src":"6701:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1066,"name":"bool","nodeType":"ElementaryTypeName","src":"6701:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1069,"mutability":"mutable","name":"returndata","nameLocation":"6728:10:5","nodeType":"VariableDeclaration","scope":1102,"src":"6715:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1068,"name":"bytes","nodeType":"ElementaryTypeName","src":"6715:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1077,"initialValue":{"arguments":[{"id":1075,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"6762:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1072,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"6750:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}],"id":1071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6742:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1070,"name":"address","nodeType":"ElementaryTypeName","src":"6742:7:5","typeDescriptions":{}}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6742:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"6742:19:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6742:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6700:67:5"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1078,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"6796:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1079,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"6808:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6808:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6829:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6808:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1085,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"6845:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6858:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1086,"name":"bool","nodeType":"ElementaryTypeName","src":"6858:4:5","typeDescriptions":{}}}],"id":1088,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6857:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1083,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"6834:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"6834:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6834:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6808:56:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1091,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6807:58:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6796:69:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":1097,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"6896:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}],"id":1096,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6888:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1095,"name":"address","nodeType":"ElementaryTypeName","src":"6888:7:5","typeDescriptions":{}}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6888:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1093,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"6869:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1434_$","typeString":"type(library Address)"}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1122,"src":"6869:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6869:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6796:107:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1065,"id":1101,"nodeType":"Return","src":"6777:126:5"}]},"documentation":{"id":1056,"nodeType":"StructuredDocumentation","src":"5821:490:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":1103,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6325:23:5","nodeType":"FunctionDefinition","parameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"mutability":"mutable","name":"token","nameLocation":"6356:5:5","nodeType":"VariableDeclaration","scope":1103,"src":"6349:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":1058,"nodeType":"UserDefinedTypeName","pathNode":{"id":1057,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"6349:6:5"},"referencedDeclaration":667,"src":"6349:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"data","nameLocation":"6376:4:5","nodeType":"VariableDeclaration","scope":1103,"src":"6363:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1060,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6348:33:5"},"returnParameters":{"id":1065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1103,"src":"6399:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1063,"name":"bool","nodeType":"ElementaryTypeName","src":"6399:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6398:6:5"},"scope":1104,"src":"6316:594:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1105,"src":"701:6211:5","usedErrors":[]}],"src":"115:6798:5"},"id":5},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1434]},"id":1435,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1106,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"126:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1434,"linearizedBaseContracts":[1434],"name":"Address","nameLocation":"202:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1121,"nodeType":"Block","src":"1478:254:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1115,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"1702:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1702:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1702:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1114,"id":1120,"nodeType":"Return","src":"1695:30:6"}]},"documentation":{"id":1108,"nodeType":"StructuredDocumentation","src":"216:1191:6","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1122,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:6","nodeType":"FunctionDefinition","parameters":{"id":1111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1110,"mutability":"mutable","name":"account","nameLocation":"1440:7:6","nodeType":"VariableDeclaration","scope":1122,"src":"1432:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1109,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:6"},"returnParameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1113,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1122,"src":"1472:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1112,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:6"},"scope":1434,"src":"1412:320:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1155,"nodeType":"Block","src":"2718:241:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1133,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2744:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1434","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1434","typeString":"library Address"}],"id":1132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1131,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:6","typeDescriptions":{}}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2736:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2736:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1136,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"2761:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1130,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2728:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2728:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1140,"nodeType":"ExpressionStatement","src":"2728:73:6"},{"assignments":[1142,null],"declarations":[{"constant":false,"id":1142,"mutability":"mutable","name":"success","nameLocation":"2818:7:6","nodeType":"VariableDeclaration","scope":1155,"src":"2813:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1141,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1149,"initialValue":{"arguments":[{"hexValue":"","id":1147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1143,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"2831:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2831:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1145,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"2853:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2831:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:6"},{"expression":{"arguments":[{"id":1151,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"2882:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1150,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2874:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2874:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1154,"nodeType":"ExpressionStatement","src":"2874:78:6"}]},"documentation":{"id":1123,"nodeType":"StructuredDocumentation","src":"1738:904:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1156,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:6","nodeType":"FunctionDefinition","parameters":{"id":1128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1125,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:6","nodeType":"VariableDeclaration","scope":1156,"src":"2666:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1124,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1127,"mutability":"mutable","name":"amount","nameLocation":"2701:6:6","nodeType":"VariableDeclaration","scope":1156,"src":"2693:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1126,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:6"},"returnParameters":{"id":1129,"nodeType":"ParameterList","parameters":[],"src":"2718:0:6"},"scope":1434,"src":"2647:312:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1173,"nodeType":"Block","src":"3790:96:6","statements":[{"expression":{"arguments":[{"id":1167,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"3829:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1168,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"3837:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1166,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1214,1258],"referencedDeclaration":1258,"src":"3807:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3807:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1165,"id":1172,"nodeType":"Return","src":"3800:79:6"}]},"documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"2965:731:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1174,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:6","nodeType":"FunctionDefinition","parameters":{"id":1162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"mutability":"mutable","name":"target","nameLocation":"3731:6:6","nodeType":"VariableDeclaration","scope":1174,"src":"3723:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1158,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1161,"mutability":"mutable","name":"data","nameLocation":"3752:4:6","nodeType":"VariableDeclaration","scope":1174,"src":"3739:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1160,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:6"},"returnParameters":{"id":1165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1174,"src":"3776:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1163,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:6"},"scope":1434,"src":"3701:185:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1193,"nodeType":"Block","src":"4255:76:6","statements":[{"expression":{"arguments":[{"id":1187,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"4294:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1188,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"4302:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1190,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"4311:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1186,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1214,1258],"referencedDeclaration":1258,"src":"4272:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4272:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1185,"id":1192,"nodeType":"Return","src":"4265:59:6"}]},"documentation":{"id":1175,"nodeType":"StructuredDocumentation","src":"3892:211:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1194,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:6","nodeType":"FunctionDefinition","parameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"target","nameLocation":"4147:6:6","nodeType":"VariableDeclaration","scope":1194,"src":"4139:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1176,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"data","nameLocation":"4176:4:6","nodeType":"VariableDeclaration","scope":1194,"src":"4163:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1178,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:6","nodeType":"VariableDeclaration","scope":1194,"src":"4190:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1180,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:6"},"returnParameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1194,"src":"4241:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1183,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:6"},"scope":1434,"src":"4108:223:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1213,"nodeType":"Block","src":"4806:111:6","statements":[{"expression":{"arguments":[{"id":1207,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"4845:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1208,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"4853:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1209,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"4859:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1206,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1214,1258],"referencedDeclaration":1258,"src":"4823:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4823:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1205,"id":1212,"nodeType":"Return","src":"4816:94:6"}]},"documentation":{"id":1195,"nodeType":"StructuredDocumentation","src":"4337:351:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1214,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:6","nodeType":"FunctionDefinition","parameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1197,"mutability":"mutable","name":"target","nameLocation":"4732:6:6","nodeType":"VariableDeclaration","scope":1214,"src":"4724:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1196,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1199,"mutability":"mutable","name":"data","nameLocation":"4753:4:6","nodeType":"VariableDeclaration","scope":1214,"src":"4740:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1198,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1201,"mutability":"mutable","name":"value","nameLocation":"4767:5:6","nodeType":"VariableDeclaration","scope":1214,"src":"4759:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1200,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:6"},"returnParameters":{"id":1205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1214,"src":"4792:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1203,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:6"},"scope":1434,"src":"4693:224:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1257,"nodeType":"Block","src":"5344:267:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1231,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"5370:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1434","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1434","typeString":"library Address"}],"id":1230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1229,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:6","typeDescriptions":{}}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5362:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5362:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1234,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"5387:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1228,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5354:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5354:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1238,"nodeType":"ExpressionStatement","src":"5354:81:6"},{"assignments":[1240,1242],"declarations":[{"constant":false,"id":1240,"mutability":"mutable","name":"success","nameLocation":"5451:7:6","nodeType":"VariableDeclaration","scope":1257,"src":"5446:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1239,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1242,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:6","nodeType":"VariableDeclaration","scope":1257,"src":"5460:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1241,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1249,"initialValue":{"arguments":[{"id":1247,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"5513:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1243,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"5487:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5487:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"5506:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5487:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:6"},{"expression":{"arguments":[{"id":1251,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"5562:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1252,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"5570:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1253,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"5579:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1254,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"5591:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1250,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"5535:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5535:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1227,"id":1256,"nodeType":"Return","src":"5528:76:6"}]},"documentation":{"id":1215,"nodeType":"StructuredDocumentation","src":"4923:237:6","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1258,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:6","nodeType":"FunctionDefinition","parameters":{"id":1224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1217,"mutability":"mutable","name":"target","nameLocation":"5213:6:6","nodeType":"VariableDeclaration","scope":1258,"src":"5205:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1216,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1219,"mutability":"mutable","name":"data","nameLocation":"5242:4:6","nodeType":"VariableDeclaration","scope":1258,"src":"5229:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1218,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1221,"mutability":"mutable","name":"value","nameLocation":"5264:5:6","nodeType":"VariableDeclaration","scope":1258,"src":"5256:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1220,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1223,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:6","nodeType":"VariableDeclaration","scope":1258,"src":"5279:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1222,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:6"},"returnParameters":{"id":1227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1258,"src":"5330:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1225,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:6"},"scope":1434,"src":"5165:446:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1274,"nodeType":"Block","src":"5888:97:6","statements":[{"expression":{"arguments":[{"id":1269,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"5924:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1270,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"5932:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1268,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1275,1304],"referencedDeclaration":1304,"src":"5905:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5905:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1267,"id":1273,"nodeType":"Return","src":"5898:80:6"}]},"documentation":{"id":1259,"nodeType":"StructuredDocumentation","src":"5617:166:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1275,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:6","nodeType":"FunctionDefinition","parameters":{"id":1264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"target","nameLocation":"5824:6:6","nodeType":"VariableDeclaration","scope":1275,"src":"5816:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1260,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1263,"mutability":"mutable","name":"data","nameLocation":"5845:4:6","nodeType":"VariableDeclaration","scope":1275,"src":"5832:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1262,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:6"},"returnParameters":{"id":1267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1275,"src":"5874:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1265,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:6"},"scope":1434,"src":"5788:197:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1303,"nodeType":"Block","src":"6327:168:6","statements":[{"assignments":[1288,1290],"declarations":[{"constant":false,"id":1288,"mutability":"mutable","name":"success","nameLocation":"6343:7:6","nodeType":"VariableDeclaration","scope":1303,"src":"6338:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1287,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1290,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:6","nodeType":"VariableDeclaration","scope":1303,"src":"6352:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1289,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1295,"initialValue":{"arguments":[{"id":1293,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"6397:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1291,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"6379:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6379:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:6"},{"expression":{"arguments":[{"id":1297,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"6446:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1298,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"6454:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1299,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"6463:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1300,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"6475:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1296,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"6419:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6419:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1286,"id":1302,"nodeType":"Return","src":"6412:76:6"}]},"documentation":{"id":1276,"nodeType":"StructuredDocumentation","src":"5991:173:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1304,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:6","nodeType":"FunctionDefinition","parameters":{"id":1283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1278,"mutability":"mutable","name":"target","nameLocation":"6214:6:6","nodeType":"VariableDeclaration","scope":1304,"src":"6206:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1277,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1280,"mutability":"mutable","name":"data","nameLocation":"6243:4:6","nodeType":"VariableDeclaration","scope":1304,"src":"6230:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1279,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:6","nodeType":"VariableDeclaration","scope":1304,"src":"6257:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1281,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:6"},"returnParameters":{"id":1286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1304,"src":"6313:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1284,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:6"},"scope":1434,"src":"6169:326:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1320,"nodeType":"Block","src":"6771:101:6","statements":[{"expression":{"arguments":[{"id":1315,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"6809:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1316,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"6817:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1314,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1321,1350],"referencedDeclaration":1350,"src":"6788:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6788:77:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1313,"id":1319,"nodeType":"Return","src":"6781:84:6"}]},"documentation":{"id":1305,"nodeType":"StructuredDocumentation","src":"6501:168:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1321,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:6","nodeType":"FunctionDefinition","parameters":{"id":1310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1307,"mutability":"mutable","name":"target","nameLocation":"6712:6:6","nodeType":"VariableDeclaration","scope":1321,"src":"6704:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1306,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1309,"mutability":"mutable","name":"data","nameLocation":"6733:4:6","nodeType":"VariableDeclaration","scope":1321,"src":"6720:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1308,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:6"},"returnParameters":{"id":1313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1321,"src":"6757:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1311,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:6"},"scope":1434,"src":"6674:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1349,"nodeType":"Block","src":"7213:170:6","statements":[{"assignments":[1334,1336],"declarations":[{"constant":false,"id":1334,"mutability":"mutable","name":"success","nameLocation":"7229:7:6","nodeType":"VariableDeclaration","scope":1349,"src":"7224:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1333,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1336,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:6","nodeType":"VariableDeclaration","scope":1349,"src":"7238:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1335,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1341,"initialValue":{"arguments":[{"id":1339,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"7285:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1337,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"7265:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7265:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:6"},{"expression":{"arguments":[{"id":1343,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"7334:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1344,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"7342:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1345,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"7351:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1346,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"7363:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1342,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"7307:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7307:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1332,"id":1348,"nodeType":"Return","src":"7300:76:6"}]},"documentation":{"id":1322,"nodeType":"StructuredDocumentation","src":"6878:175:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1350,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:6","nodeType":"FunctionDefinition","parameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"mutability":"mutable","name":"target","nameLocation":"7105:6:6","nodeType":"VariableDeclaration","scope":1350,"src":"7097:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1323,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1326,"mutability":"mutable","name":"data","nameLocation":"7134:4:6","nodeType":"VariableDeclaration","scope":1350,"src":"7121:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1325,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:6","nodeType":"VariableDeclaration","scope":1350,"src":"7148:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1327,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:6"},"returnParameters":{"id":1332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1350,"src":"7199:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1330,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:6"},"scope":1434,"src":"7058:325:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1388,"nodeType":"Block","src":"7865:434:6","statements":[{"condition":{"id":1364,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1355,"src":"7879:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1386,"nodeType":"Block","src":"8235:58:6","statements":[{"expression":{"arguments":[{"id":1382,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"8257:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1383,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1359,"src":"8269:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1381,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"8249:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8249:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1385,"nodeType":"ExpressionStatement","src":"8249:33:6"}]},"id":1387,"nodeType":"IfStatement","src":"7875:418:6","trueBody":{"id":1380,"nodeType":"Block","src":"7888:341:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1365,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"7906:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7906:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1377,"nodeType":"IfStatement","src":"7902:286:6","trueBody":{"id":1376,"nodeType":"Block","src":"7930:258:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1371,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"8132:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1370,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"8121:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8121:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1369,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"8113:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8113:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1375,"nodeType":"ExpressionStatement","src":"8113:60:6"}]}},{"expression":{"id":1378,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"8208:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1363,"id":1379,"nodeType":"Return","src":"8201:17:6"}]}}]},"documentation":{"id":1351,"nodeType":"StructuredDocumentation","src":"7389:277:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1389,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:6","nodeType":"FunctionDefinition","parameters":{"id":1360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1353,"mutability":"mutable","name":"target","nameLocation":"7724:6:6","nodeType":"VariableDeclaration","scope":1389,"src":"7716:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1352,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1355,"mutability":"mutable","name":"success","nameLocation":"7745:7:6","nodeType":"VariableDeclaration","scope":1389,"src":"7740:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1354,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1357,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:6","nodeType":"VariableDeclaration","scope":1389,"src":"7762:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1356,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1359,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:6","nodeType":"VariableDeclaration","scope":1389,"src":"7795:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1358,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:6"},"returnParameters":{"id":1363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1362,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1389,"src":"7851:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1361,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:6"},"scope":1434,"src":"7671:628:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1412,"nodeType":"Block","src":"8680:135:6","statements":[{"condition":{"id":1401,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"8694:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1410,"nodeType":"Block","src":"8751:58:6","statements":[{"expression":{"arguments":[{"id":1406,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"8773:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1407,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"8785:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1405,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"8765:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8765:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1409,"nodeType":"ExpressionStatement","src":"8765:33:6"}]},"id":1411,"nodeType":"IfStatement","src":"8690:119:6","trueBody":{"id":1404,"nodeType":"Block","src":"8703:42:6","statements":[{"expression":{"id":1402,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"8724:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1400,"id":1403,"nodeType":"Return","src":"8717:17:6"}]}}]},"documentation":{"id":1390,"nodeType":"StructuredDocumentation","src":"8305:210:6","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1413,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:6","nodeType":"FunctionDefinition","parameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1392,"mutability":"mutable","name":"success","nameLocation":"8560:7:6","nodeType":"VariableDeclaration","scope":1413,"src":"8555:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1391,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1394,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:6","nodeType":"VariableDeclaration","scope":1413,"src":"8577:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1393,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:6","nodeType":"VariableDeclaration","scope":1413,"src":"8610:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1395,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:6"},"returnParameters":{"id":1400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1413,"src":"8666:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1398,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:6"},"scope":1434,"src":"8520:295:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1432,"nodeType":"Block","src":"8904:457:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1420,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"8980:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8980:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1430,"nodeType":"Block","src":"9310:45:6","statements":[{"expression":{"arguments":[{"id":1427,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"9331:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1426,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[4294967277,4294967277],"referencedDeclaration":4294967277,"src":"9324:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9324:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1429,"nodeType":"ExpressionStatement","src":"9324:20:6"}]},"id":1431,"nodeType":"IfStatement","src":"8976:379:6","trueBody":{"id":1425,"nodeType":"Block","src":"9003:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:6"},"nodeType":"YulFunctionCall","src":"9202:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:6"},"nodeType":"YulFunctionCall","src":"9243:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:6"},"nodeType":"YulFunctionCall","src":"9236:44:6"},"nodeType":"YulExpressionStatement","src":"9236:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1415,"isOffset":false,"isSlot":false,"src":"9208:10:6","valueSize":1},{"declaration":1415,"isOffset":false,"isSlot":false,"src":"9251:10:6","valueSize":1}],"id":1424,"nodeType":"InlineAssembly","src":"9152:142:6"}]}}]},"id":1433,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:6","nodeType":"FunctionDefinition","parameters":{"id":1418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1415,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:6","nodeType":"VariableDeclaration","scope":1433,"src":"8838:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1414,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1417,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:6","nodeType":"VariableDeclaration","scope":1433,"src":"8863:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1416,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:6"},"returnParameters":{"id":1419,"nodeType":"ParameterList","parameters":[],"src":"8904:0:6"},"scope":1434,"src":"8821:540:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1435,"src":"194:9169:6","usedErrors":[]}],"src":"101:9263:6"},"id":6},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1456]},"id":1457,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1436,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:7"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1437,"nodeType":"StructuredDocumentation","src":"111:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1456,"linearizedBaseContracts":[1456],"name":"Context","nameLocation":"626:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1445,"nodeType":"Block","src":"702:34:7","statements":[{"expression":{"expression":{"id":1442,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"719:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1441,"id":1444,"nodeType":"Return","src":"712:17:7"}]},"id":1446,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:7","nodeType":"FunctionDefinition","parameters":{"id":1438,"nodeType":"ParameterList","parameters":[],"src":"659:2:7"},"returnParameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1446,"src":"693:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1439,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:7"},"scope":1456,"src":"640:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1454,"nodeType":"Block","src":"809:32:7","statements":[{"expression":{"expression":{"id":1451,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"826:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1450,"id":1453,"nodeType":"Return","src":"819:15:7"}]},"id":1455,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:7","nodeType":"FunctionDefinition","parameters":{"id":1447,"nodeType":"ParameterList","parameters":[],"src":"759:2:7"},"returnParameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1455,"src":"793:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1448,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:7"},"scope":1456,"src":"742:99:7","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1457,"src":"608:235:7","usedErrors":[]}],"src":"86:758:7"},"id":7},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","exportedSymbols":{"SafeMath":[1768]},"id":1769,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1458,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1459,"nodeType":"StructuredDocumentation","src":"285:196:8","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":1768,"linearizedBaseContracts":[1768],"name":"SafeMath","nameLocation":"490:8:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1490,"nodeType":"Block","src":"717:140:8","statements":[{"id":1489,"nodeType":"UncheckedBlock","src":"727:124:8","statements":[{"assignments":[1472],"declarations":[{"constant":false,"id":1472,"mutability":"mutable","name":"c","nameLocation":"759:1:8","nodeType":"VariableDeclaration","scope":1489,"src":"751:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1471,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1476,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1473,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"763:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1474,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"767:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"763:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"751:17:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1477,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"786:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1478,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"790:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1484,"nodeType":"IfStatement","src":"782:28:8","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"801:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"808:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1482,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"800:10:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1470,"id":1483,"nodeType":"Return","src":"793:17:8"}},{"expression":{"components":[{"hexValue":"74727565","id":1485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"832:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1486,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"838:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1487,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"831:9:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1470,"id":1488,"nodeType":"Return","src":"824:16:8"}]}]},"documentation":{"id":1460,"nodeType":"StructuredDocumentation","src":"505:131:8","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1491,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"650:6:8","nodeType":"FunctionDefinition","parameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1462,"mutability":"mutable","name":"a","nameLocation":"665:1:8","nodeType":"VariableDeclaration","scope":1491,"src":"657:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1461,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1464,"mutability":"mutable","name":"b","nameLocation":"676:1:8","nodeType":"VariableDeclaration","scope":1491,"src":"668:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1463,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:22:8"},"returnParameters":{"id":1470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1491,"src":"702:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1466,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1491,"src":"708:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1468,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:15:8"},"scope":1768,"src":"641:216:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1518,"nodeType":"Block","src":"1078:113:8","statements":[{"id":1517,"nodeType":"UncheckedBlock","src":"1088:97:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1503,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"1116:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1504,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"1120:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1116:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1510,"nodeType":"IfStatement","src":"1112:28:8","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1131:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1508,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1130:10:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1502,"id":1509,"nodeType":"Return","src":"1123:17:8"}},{"expression":{"components":[{"hexValue":"74727565","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1512,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"1168:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1513,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"1172:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1168:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1515,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1161:13:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1502,"id":1516,"nodeType":"Return","src":"1154:20:8"}]}]},"documentation":{"id":1492,"nodeType":"StructuredDocumentation","src":"863:134:8","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1519,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1011:6:8","nodeType":"FunctionDefinition","parameters":{"id":1497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1494,"mutability":"mutable","name":"a","nameLocation":"1026:1:8","nodeType":"VariableDeclaration","scope":1519,"src":"1018:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1493,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1496,"mutability":"mutable","name":"b","nameLocation":"1037:1:8","nodeType":"VariableDeclaration","scope":1519,"src":"1029:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1495,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:22:8"},"returnParameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1499,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1519,"src":"1063:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1498,"name":"bool","nodeType":"ElementaryTypeName","src":"1063:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1519,"src":"1069:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1500,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:15:8"},"scope":1768,"src":"1002:189:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1560,"nodeType":"Block","src":"1415:417:8","statements":[{"id":1559,"nodeType":"UncheckedBlock","src":"1425:401:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1531,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"1683:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1683:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1538,"nodeType":"IfStatement","src":"1679:28:8","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":1534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":1535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1705:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1536,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1698:9:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1530,"id":1537,"nodeType":"Return","src":"1691:16:8"}},{"assignments":[1540],"declarations":[{"constant":false,"id":1540,"mutability":"mutable","name":"c","nameLocation":"1729:1:8","nodeType":"VariableDeclaration","scope":1559,"src":"1721:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1539,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1544,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1541,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"1733:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1542,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"1737:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1733:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1721:17:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1545,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"1756:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1546,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"1760:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1548,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"1765:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1554,"nodeType":"IfStatement","src":"1752:33:8","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1776:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1552,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1775:10:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1530,"id":1553,"nodeType":"Return","src":"1768:17:8"}},{"expression":{"components":[{"hexValue":"74727565","id":1555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1807:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1556,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"1813:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1557,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1806:9:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1530,"id":1558,"nodeType":"Return","src":"1799:16:8"}]}]},"documentation":{"id":1520,"nodeType":"StructuredDocumentation","src":"1197:137:8","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1561,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1348:6:8","nodeType":"FunctionDefinition","parameters":{"id":1525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1522,"mutability":"mutable","name":"a","nameLocation":"1363:1:8","nodeType":"VariableDeclaration","scope":1561,"src":"1355:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1521,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1524,"mutability":"mutable","name":"b","nameLocation":"1374:1:8","nodeType":"VariableDeclaration","scope":1561,"src":"1366:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1523,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1354:22:8"},"returnParameters":{"id":1530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1561,"src":"1400:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1526,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1561,"src":"1406:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1528,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:15:8"},"scope":1768,"src":"1339:493:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1588,"nodeType":"Block","src":"2057:114:8","statements":[{"id":1587,"nodeType":"UncheckedBlock","src":"2067:98:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1573,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"2095:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2095:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1580,"nodeType":"IfStatement","src":"2091:29:8","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2111:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1578,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2110:10:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1572,"id":1579,"nodeType":"Return","src":"2103:17:8"}},{"expression":{"components":[{"hexValue":"74727565","id":1581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2142:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1582,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"2148:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1583,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"2152:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1585,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2141:13:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1572,"id":1586,"nodeType":"Return","src":"2134:20:8"}]}]},"documentation":{"id":1562,"nodeType":"StructuredDocumentation","src":"1838:138:8","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":1589,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1990:6:8","nodeType":"FunctionDefinition","parameters":{"id":1567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1564,"mutability":"mutable","name":"a","nameLocation":"2005:1:8","nodeType":"VariableDeclaration","scope":1589,"src":"1997:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1563,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1566,"mutability":"mutable","name":"b","nameLocation":"2016:1:8","nodeType":"VariableDeclaration","scope":1589,"src":"2008:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1565,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:22:8"},"returnParameters":{"id":1572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1589,"src":"2042:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1568,"name":"bool","nodeType":"ElementaryTypeName","src":"2042:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1571,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1589,"src":"2048:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1570,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2041:15:8"},"scope":1768,"src":"1981:190:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1616,"nodeType":"Block","src":"2406:114:8","statements":[{"id":1615,"nodeType":"UncheckedBlock","src":"2416:98:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1601,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"2444:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2449:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2444:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1608,"nodeType":"IfStatement","src":"2440:29:8","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2460:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1606,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2459:10:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1600,"id":1607,"nodeType":"Return","src":"2452:17:8"}},{"expression":{"components":[{"hexValue":"74727565","id":1609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2491:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1610,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"2497:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1611,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"2501:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2497:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1613,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2490:13:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1600,"id":1614,"nodeType":"Return","src":"2483:20:8"}]}]},"documentation":{"id":1590,"nodeType":"StructuredDocumentation","src":"2177:148:8","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":1617,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2339:6:8","nodeType":"FunctionDefinition","parameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1592,"mutability":"mutable","name":"a","nameLocation":"2354:1:8","nodeType":"VariableDeclaration","scope":1617,"src":"2346:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1591,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1594,"mutability":"mutable","name":"b","nameLocation":"2365:1:8","nodeType":"VariableDeclaration","scope":1617,"src":"2357:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1593,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2345:22:8"},"returnParameters":{"id":1600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1617,"src":"2391:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1596,"name":"bool","nodeType":"ElementaryTypeName","src":"2391:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1617,"src":"2397:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1598,"name":"uint256","nodeType":"ElementaryTypeName","src":"2397:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2390:15:8"},"scope":1768,"src":"2330:190:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1631,"nodeType":"Block","src":"2822:29:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1627,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"2839:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1628,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"2843:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2839:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1626,"id":1630,"nodeType":"Return","src":"2832:12:8"}]},"documentation":{"id":1618,"nodeType":"StructuredDocumentation","src":"2526:224:8","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":1632,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2764:3:8","nodeType":"FunctionDefinition","parameters":{"id":1623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1620,"mutability":"mutable","name":"a","nameLocation":"2776:1:8","nodeType":"VariableDeclaration","scope":1632,"src":"2768:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1619,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1622,"mutability":"mutable","name":"b","nameLocation":"2787:1:8","nodeType":"VariableDeclaration","scope":1632,"src":"2779:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1621,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:22:8"},"returnParameters":{"id":1626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1632,"src":"2813:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1624,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:9:8"},"scope":1768,"src":"2755:96:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1646,"nodeType":"Block","src":"3189:29:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1642,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"3206:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1643,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1637,"src":"3210:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3206:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1641,"id":1645,"nodeType":"Return","src":"3199:12:8"}]},"documentation":{"id":1633,"nodeType":"StructuredDocumentation","src":"2857:260:8","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1647,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3131:3:8","nodeType":"FunctionDefinition","parameters":{"id":1638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1635,"mutability":"mutable","name":"a","nameLocation":"3143:1:8","nodeType":"VariableDeclaration","scope":1647,"src":"3135:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1634,"name":"uint256","nodeType":"ElementaryTypeName","src":"3135:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1637,"mutability":"mutable","name":"b","nameLocation":"3154:1:8","nodeType":"VariableDeclaration","scope":1647,"src":"3146:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1636,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3134:22:8"},"returnParameters":{"id":1641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1647,"src":"3180:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1639,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3179:9:8"},"scope":1768,"src":"3122:96:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1661,"nodeType":"Block","src":"3532:29:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1657,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"3549:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1658,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"3553:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1656,"id":1660,"nodeType":"Return","src":"3542:12:8"}]},"documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"3224:236:8","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":1662,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3474:3:8","nodeType":"FunctionDefinition","parameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"a","nameLocation":"3486:1:8","nodeType":"VariableDeclaration","scope":1662,"src":"3478:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1649,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1652,"mutability":"mutable","name":"b","nameLocation":"3497:1:8","nodeType":"VariableDeclaration","scope":1662,"src":"3489:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1651,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:22:8"},"returnParameters":{"id":1656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1662,"src":"3523:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1654,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:9:8"},"scope":1768,"src":"3465:96:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1676,"nodeType":"Block","src":"3917:29:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1672,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"3934:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1673,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"3938:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1671,"id":1675,"nodeType":"Return","src":"3927:12:8"}]},"documentation":{"id":1663,"nodeType":"StructuredDocumentation","src":"3567:278:8","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":1677,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3859:3:8","nodeType":"FunctionDefinition","parameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1665,"mutability":"mutable","name":"a","nameLocation":"3871:1:8","nodeType":"VariableDeclaration","scope":1677,"src":"3863:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1664,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1667,"mutability":"mutable","name":"b","nameLocation":"3882:1:8","nodeType":"VariableDeclaration","scope":1677,"src":"3874:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1666,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3862:22:8"},"returnParameters":{"id":1671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1677,"src":"3908:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1669,"name":"uint256","nodeType":"ElementaryTypeName","src":"3908:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3907:9:8"},"scope":1768,"src":"3850:96:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1691,"nodeType":"Block","src":"4466:29:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1687,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"4483:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1688,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"4487:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1686,"id":1690,"nodeType":"Return","src":"4476:12:8"}]},"documentation":{"id":1678,"nodeType":"StructuredDocumentation","src":"3952:442:8","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1692,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4408:3:8","nodeType":"FunctionDefinition","parameters":{"id":1683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1680,"mutability":"mutable","name":"a","nameLocation":"4420:1:8","nodeType":"VariableDeclaration","scope":1692,"src":"4412:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1679,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1682,"mutability":"mutable","name":"b","nameLocation":"4431:1:8","nodeType":"VariableDeclaration","scope":1692,"src":"4423:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1681,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4411:22:8"},"returnParameters":{"id":1686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1692,"src":"4457:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1684,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:9:8"},"scope":1768,"src":"4399:96:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1716,"nodeType":"Block","src":"5054:106:8","statements":[{"id":1715,"nodeType":"UncheckedBlock","src":"5064:90:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1705,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"5096:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1706,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"5101:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5096:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1708,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"5104:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1704,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5088:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5088:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1710,"nodeType":"ExpressionStatement","src":"5088:29:8"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1711,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"5138:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1712,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"5142:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5138:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1703,"id":1714,"nodeType":"Return","src":"5131:12:8"}]}]},"documentation":{"id":1693,"nodeType":"StructuredDocumentation","src":"4501:453:8","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1717,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4968:3:8","nodeType":"FunctionDefinition","parameters":{"id":1700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1695,"mutability":"mutable","name":"a","nameLocation":"4980:1:8","nodeType":"VariableDeclaration","scope":1717,"src":"4972:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1694,"name":"uint256","nodeType":"ElementaryTypeName","src":"4972:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"b","nameLocation":"4991:1:8","nodeType":"VariableDeclaration","scope":1717,"src":"4983:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1696,"name":"uint256","nodeType":"ElementaryTypeName","src":"4983:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1699,"mutability":"mutable","name":"errorMessage","nameLocation":"5008:12:8","nodeType":"VariableDeclaration","scope":1717,"src":"4994:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1698,"name":"string","nodeType":"ElementaryTypeName","src":"4994:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4971:50:8"},"returnParameters":{"id":1703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1702,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1717,"src":"5045:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1701,"name":"uint256","nodeType":"ElementaryTypeName","src":"5045:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5044:9:8"},"scope":1768,"src":"4959:201:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1741,"nodeType":"Block","src":"5739:105:8","statements":[{"id":1740,"nodeType":"UncheckedBlock","src":"5749:89:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1730,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"5781:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5785:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5781:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1733,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"5788:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1729,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5773:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5773:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1735,"nodeType":"ExpressionStatement","src":"5773:28:8"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1736,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"5822:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1737,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"5826:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5822:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1728,"id":1739,"nodeType":"Return","src":"5815:12:8"}]}]},"documentation":{"id":1718,"nodeType":"StructuredDocumentation","src":"5166:473:8","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1742,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5653:3:8","nodeType":"FunctionDefinition","parameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1720,"mutability":"mutable","name":"a","nameLocation":"5665:1:8","nodeType":"VariableDeclaration","scope":1742,"src":"5657:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1719,"name":"uint256","nodeType":"ElementaryTypeName","src":"5657:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1722,"mutability":"mutable","name":"b","nameLocation":"5676:1:8","nodeType":"VariableDeclaration","scope":1742,"src":"5668:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1721,"name":"uint256","nodeType":"ElementaryTypeName","src":"5668:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"errorMessage","nameLocation":"5693:12:8","nodeType":"VariableDeclaration","scope":1742,"src":"5679:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1723,"name":"string","nodeType":"ElementaryTypeName","src":"5679:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5656:50:8"},"returnParameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1742,"src":"5730:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1726,"name":"uint256","nodeType":"ElementaryTypeName","src":"5730:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5729:9:8"},"scope":1768,"src":"5644:200:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1766,"nodeType":"Block","src":"6585:105:8","statements":[{"id":1765,"nodeType":"UncheckedBlock","src":"6595:89:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1755,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"6627:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6631:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6627:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1758,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"6634:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1754,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"6619:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6619:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1760,"nodeType":"ExpressionStatement","src":"6619:28:8"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1761,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"6668:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1762,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"6672:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6668:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1753,"id":1764,"nodeType":"Return","src":"6661:12:8"}]}]},"documentation":{"id":1743,"nodeType":"StructuredDocumentation","src":"5850:635:8","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1767,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6499:3:8","nodeType":"FunctionDefinition","parameters":{"id":1750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1745,"mutability":"mutable","name":"a","nameLocation":"6511:1:8","nodeType":"VariableDeclaration","scope":1767,"src":"6503:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1744,"name":"uint256","nodeType":"ElementaryTypeName","src":"6503:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1747,"mutability":"mutable","name":"b","nameLocation":"6522:1:8","nodeType":"VariableDeclaration","scope":1767,"src":"6514:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"6514:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1749,"mutability":"mutable","name":"errorMessage","nameLocation":"6539:12:8","nodeType":"VariableDeclaration","scope":1767,"src":"6525:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1748,"name":"string","nodeType":"ElementaryTypeName","src":"6525:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6502:50:8"},"returnParameters":{"id":1753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1767,"src":"6576:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1751,"name":"uint256","nodeType":"ElementaryTypeName","src":"6576:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6575:9:8"},"scope":1768,"src":"6490:200:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1769,"src":"482:6210:8","usedErrors":[]}],"src":"107:6586:8"},"id":8},"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol":{"ast":{"absolutePath":"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol","exportedSymbols":{"IUniswapV2Pair":[2010]},"id":2011,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":1770,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"37:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV2Pair","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2010,"linearizedBaseContracts":[2010],"name":"IUniswapV2Pair","nameLocation":"73:14:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":1778,"name":"Approval","nameLocation":"100:8:9","nodeType":"EventDefinition","parameters":{"id":1777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1772,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"125:5:9","nodeType":"VariableDeclaration","scope":1778,"src":"109:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1771,"name":"address","nodeType":"ElementaryTypeName","src":"109:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1774,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"148:7:9","nodeType":"VariableDeclaration","scope":1778,"src":"132:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1773,"name":"address","nodeType":"ElementaryTypeName","src":"132:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1776,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"162:5:9","nodeType":"VariableDeclaration","scope":1778,"src":"157:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1775,"name":"uint","nodeType":"ElementaryTypeName","src":"157:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"108:60:9"},"src":"94:75:9"},{"anonymous":false,"id":1786,"name":"Transfer","nameLocation":"180:8:9","nodeType":"EventDefinition","parameters":{"id":1785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1780,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"205:4:9","nodeType":"VariableDeclaration","scope":1786,"src":"189:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1779,"name":"address","nodeType":"ElementaryTypeName","src":"189:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1782,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"227:2:9","nodeType":"VariableDeclaration","scope":1786,"src":"211:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1781,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1784,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"236:5:9","nodeType":"VariableDeclaration","scope":1786,"src":"231:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1783,"name":"uint","nodeType":"ElementaryTypeName","src":"231:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"188:54:9"},"src":"174:69:9"},{"functionSelector":"06fdde03","id":1791,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"258:4:9","nodeType":"FunctionDefinition","parameters":{"id":1787,"nodeType":"ParameterList","parameters":[],"src":"262:2:9"},"returnParameters":{"id":1790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1791,"src":"288:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1788,"name":"string","nodeType":"ElementaryTypeName","src":"288:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"287:15:9"},"scope":2010,"src":"249:54:9","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":1796,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"317:6:9","nodeType":"FunctionDefinition","parameters":{"id":1792,"nodeType":"ParameterList","parameters":[],"src":"323:2:9"},"returnParameters":{"id":1795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1796,"src":"349:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1793,"name":"string","nodeType":"ElementaryTypeName","src":"349:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"348:15:9"},"scope":2010,"src":"308:56:9","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":1801,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"378:8:9","nodeType":"FunctionDefinition","parameters":{"id":1797,"nodeType":"ParameterList","parameters":[],"src":"386:2:9"},"returnParameters":{"id":1800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1801,"src":"412:5:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1798,"name":"uint8","nodeType":"ElementaryTypeName","src":"412:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"411:7:9"},"scope":2010,"src":"369:50:9","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":1806,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"433:11:9","nodeType":"FunctionDefinition","parameters":{"id":1802,"nodeType":"ParameterList","parameters":[],"src":"444:2:9"},"returnParameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1806,"src":"470:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1803,"name":"uint","nodeType":"ElementaryTypeName","src":"470:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"469:6:9"},"scope":2010,"src":"424:52:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":1813,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"490:9:9","nodeType":"FunctionDefinition","parameters":{"id":1809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1808,"mutability":"mutable","name":"owner","nameLocation":"508:5:9","nodeType":"VariableDeclaration","scope":1813,"src":"500:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1807,"name":"address","nodeType":"ElementaryTypeName","src":"500:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"499:15:9"},"returnParameters":{"id":1812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1813,"src":"538:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1810,"name":"uint","nodeType":"ElementaryTypeName","src":"538:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"537:6:9"},"scope":2010,"src":"481:63:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dd62ed3e","id":1822,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"558:9:9","nodeType":"FunctionDefinition","parameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1815,"mutability":"mutable","name":"owner","nameLocation":"576:5:9","nodeType":"VariableDeclaration","scope":1822,"src":"568:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1814,"name":"address","nodeType":"ElementaryTypeName","src":"568:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1817,"mutability":"mutable","name":"spender","nameLocation":"591:7:9","nodeType":"VariableDeclaration","scope":1822,"src":"583:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1816,"name":"address","nodeType":"ElementaryTypeName","src":"583:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"567:32:9"},"returnParameters":{"id":1821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1820,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1822,"src":"623:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1819,"name":"uint","nodeType":"ElementaryTypeName","src":"623:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"622:6:9"},"scope":2010,"src":"549:80:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":1831,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"644:7:9","nodeType":"FunctionDefinition","parameters":{"id":1827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1824,"mutability":"mutable","name":"spender","nameLocation":"660:7:9","nodeType":"VariableDeclaration","scope":1831,"src":"652:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1823,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1826,"mutability":"mutable","name":"value","nameLocation":"674:5:9","nodeType":"VariableDeclaration","scope":1831,"src":"669:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1825,"name":"uint","nodeType":"ElementaryTypeName","src":"669:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:29:9"},"returnParameters":{"id":1830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1831,"src":"699:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1828,"name":"bool","nodeType":"ElementaryTypeName","src":"699:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"698:6:9"},"scope":2010,"src":"635:70:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":1840,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"719:8:9","nodeType":"FunctionDefinition","parameters":{"id":1836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"to","nameLocation":"736:2:9","nodeType":"VariableDeclaration","scope":1840,"src":"728:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1832,"name":"address","nodeType":"ElementaryTypeName","src":"728:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1835,"mutability":"mutable","name":"value","nameLocation":"745:5:9","nodeType":"VariableDeclaration","scope":1840,"src":"740:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1834,"name":"uint","nodeType":"ElementaryTypeName","src":"740:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"727:24:9"},"returnParameters":{"id":1839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1838,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1840,"src":"770:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1837,"name":"bool","nodeType":"ElementaryTypeName","src":"770:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"769:6:9"},"scope":2010,"src":"710:66:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":1851,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"790:12:9","nodeType":"FunctionDefinition","parameters":{"id":1847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1842,"mutability":"mutable","name":"from","nameLocation":"811:4:9","nodeType":"VariableDeclaration","scope":1851,"src":"803:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1841,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1844,"mutability":"mutable","name":"to","nameLocation":"825:2:9","nodeType":"VariableDeclaration","scope":1851,"src":"817:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1843,"name":"address","nodeType":"ElementaryTypeName","src":"817:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1846,"mutability":"mutable","name":"value","nameLocation":"834:5:9","nodeType":"VariableDeclaration","scope":1851,"src":"829:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1845,"name":"uint","nodeType":"ElementaryTypeName","src":"829:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"802:38:9"},"returnParameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1851,"src":"859:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1848,"name":"bool","nodeType":"ElementaryTypeName","src":"859:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"858:6:9"},"scope":2010,"src":"781:84:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"3644e515","id":1856,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"880:16:9","nodeType":"FunctionDefinition","parameters":{"id":1852,"nodeType":"ParameterList","parameters":[],"src":"896:2:9"},"returnParameters":{"id":1855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1856,"src":"922:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1853,"name":"bytes32","nodeType":"ElementaryTypeName","src":"922:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"921:9:9"},"scope":2010,"src":"871:60:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"30adf81f","id":1861,"implemented":false,"kind":"function","modifiers":[],"name":"PERMIT_TYPEHASH","nameLocation":"945:15:9","nodeType":"FunctionDefinition","parameters":{"id":1857,"nodeType":"ParameterList","parameters":[],"src":"960:2:9"},"returnParameters":{"id":1860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1859,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1861,"src":"986:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1858,"name":"bytes32","nodeType":"ElementaryTypeName","src":"986:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"985:9:9"},"scope":2010,"src":"936:59:9","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"7ecebe00","id":1868,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1009:6:9","nodeType":"FunctionDefinition","parameters":{"id":1864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"mutability":"mutable","name":"owner","nameLocation":"1024:5:9","nodeType":"VariableDeclaration","scope":1868,"src":"1016:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1862,"name":"address","nodeType":"ElementaryTypeName","src":"1016:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1015:15:9"},"returnParameters":{"id":1867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1866,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1868,"src":"1054:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1865,"name":"uint","nodeType":"ElementaryTypeName","src":"1054:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1053:6:9"},"scope":2010,"src":"1000:60:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d505accf","id":1885,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1075:6:9","nodeType":"FunctionDefinition","parameters":{"id":1883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1870,"mutability":"mutable","name":"owner","nameLocation":"1090:5:9","nodeType":"VariableDeclaration","scope":1885,"src":"1082:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1869,"name":"address","nodeType":"ElementaryTypeName","src":"1082:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1872,"mutability":"mutable","name":"spender","nameLocation":"1105:7:9","nodeType":"VariableDeclaration","scope":1885,"src":"1097:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1871,"name":"address","nodeType":"ElementaryTypeName","src":"1097:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1874,"mutability":"mutable","name":"value","nameLocation":"1119:5:9","nodeType":"VariableDeclaration","scope":1885,"src":"1114:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1873,"name":"uint","nodeType":"ElementaryTypeName","src":"1114:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1876,"mutability":"mutable","name":"deadline","nameLocation":"1131:8:9","nodeType":"VariableDeclaration","scope":1885,"src":"1126:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1875,"name":"uint","nodeType":"ElementaryTypeName","src":"1126:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1878,"mutability":"mutable","name":"v","nameLocation":"1147:1:9","nodeType":"VariableDeclaration","scope":1885,"src":"1141:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1877,"name":"uint8","nodeType":"ElementaryTypeName","src":"1141:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1880,"mutability":"mutable","name":"r","nameLocation":"1158:1:9","nodeType":"VariableDeclaration","scope":1885,"src":"1150:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1879,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1150:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1882,"mutability":"mutable","name":"s","nameLocation":"1169:1:9","nodeType":"VariableDeclaration","scope":1885,"src":"1161:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1881,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1161:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1081:90:9"},"returnParameters":{"id":1884,"nodeType":"ParameterList","parameters":[],"src":"1180:0:9"},"scope":2010,"src":"1066:115:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"id":1893,"name":"Mint","nameLocation":"1193:4:9","nodeType":"EventDefinition","parameters":{"id":1892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1887,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1214:6:9","nodeType":"VariableDeclaration","scope":1893,"src":"1198:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1886,"name":"address","nodeType":"ElementaryTypeName","src":"1198:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1889,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"1227:7:9","nodeType":"VariableDeclaration","scope":1893,"src":"1222:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1888,"name":"uint","nodeType":"ElementaryTypeName","src":"1222:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1891,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"1241:7:9","nodeType":"VariableDeclaration","scope":1893,"src":"1236:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1890,"name":"uint","nodeType":"ElementaryTypeName","src":"1236:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1197:52:9"},"src":"1187:63:9"},{"anonymous":false,"id":1903,"name":"Burn","nameLocation":"1261:4:9","nodeType":"EventDefinition","parameters":{"id":1902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1282:6:9","nodeType":"VariableDeclaration","scope":1903,"src":"1266:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1894,"name":"address","nodeType":"ElementaryTypeName","src":"1266:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1897,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"1295:7:9","nodeType":"VariableDeclaration","scope":1903,"src":"1290:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1896,"name":"uint","nodeType":"ElementaryTypeName","src":"1290:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1899,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"1309:7:9","nodeType":"VariableDeclaration","scope":1903,"src":"1304:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1898,"name":"uint","nodeType":"ElementaryTypeName","src":"1304:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1901,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1334:2:9","nodeType":"VariableDeclaration","scope":1903,"src":"1318:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1900,"name":"address","nodeType":"ElementaryTypeName","src":"1318:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1265:72:9"},"src":"1255:83:9"},{"anonymous":false,"id":1917,"name":"Swap","nameLocation":"1349:4:9","nodeType":"EventDefinition","parameters":{"id":1916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1905,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1379:6:9","nodeType":"VariableDeclaration","scope":1917,"src":"1363:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1904,"name":"address","nodeType":"ElementaryTypeName","src":"1363:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1907,"indexed":false,"mutability":"mutable","name":"amount0In","nameLocation":"1400:9:9","nodeType":"VariableDeclaration","scope":1917,"src":"1395:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1906,"name":"uint","nodeType":"ElementaryTypeName","src":"1395:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1909,"indexed":false,"mutability":"mutable","name":"amount1In","nameLocation":"1424:9:9","nodeType":"VariableDeclaration","scope":1917,"src":"1419:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1908,"name":"uint","nodeType":"ElementaryTypeName","src":"1419:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1911,"indexed":false,"mutability":"mutable","name":"amount0Out","nameLocation":"1448:10:9","nodeType":"VariableDeclaration","scope":1917,"src":"1443:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1910,"name":"uint","nodeType":"ElementaryTypeName","src":"1443:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1913,"indexed":false,"mutability":"mutable","name":"amount1Out","nameLocation":"1473:10:9","nodeType":"VariableDeclaration","scope":1917,"src":"1468:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1912,"name":"uint","nodeType":"ElementaryTypeName","src":"1468:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1915,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1509:2:9","nodeType":"VariableDeclaration","scope":1917,"src":"1493:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1914,"name":"address","nodeType":"ElementaryTypeName","src":"1493:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1353:164:9"},"src":"1343:175:9"},{"anonymous":false,"id":1923,"name":"Sync","nameLocation":"1529:4:9","nodeType":"EventDefinition","parameters":{"id":1922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1919,"indexed":false,"mutability":"mutable","name":"reserve0","nameLocation":"1542:8:9","nodeType":"VariableDeclaration","scope":1923,"src":"1534:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":1918,"name":"uint112","nodeType":"ElementaryTypeName","src":"1534:7:9","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":1921,"indexed":false,"mutability":"mutable","name":"reserve1","nameLocation":"1560:8:9","nodeType":"VariableDeclaration","scope":1923,"src":"1552:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":1920,"name":"uint112","nodeType":"ElementaryTypeName","src":"1552:7:9","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"1533:36:9"},"src":"1523:47:9"},{"functionSelector":"ba9a7a56","id":1928,"implemented":false,"kind":"function","modifiers":[],"name":"MINIMUM_LIQUIDITY","nameLocation":"1585:17:9","nodeType":"FunctionDefinition","parameters":{"id":1924,"nodeType":"ParameterList","parameters":[],"src":"1602:2:9"},"returnParameters":{"id":1927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1928,"src":"1628:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1925,"name":"uint","nodeType":"ElementaryTypeName","src":"1628:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1627:6:9"},"scope":2010,"src":"1576:58:9","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"c45a0155","id":1933,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nameLocation":"1648:7:9","nodeType":"FunctionDefinition","parameters":{"id":1929,"nodeType":"ParameterList","parameters":[],"src":"1655:2:9"},"returnParameters":{"id":1932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1933,"src":"1681:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1930,"name":"address","nodeType":"ElementaryTypeName","src":"1681:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1680:9:9"},"scope":2010,"src":"1639:51:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0dfe1681","id":1938,"implemented":false,"kind":"function","modifiers":[],"name":"token0","nameLocation":"1704:6:9","nodeType":"FunctionDefinition","parameters":{"id":1934,"nodeType":"ParameterList","parameters":[],"src":"1710:2:9"},"returnParameters":{"id":1937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1938,"src":"1736:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1935,"name":"address","nodeType":"ElementaryTypeName","src":"1736:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1735:9:9"},"scope":2010,"src":"1695:50:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d21220a7","id":1943,"implemented":false,"kind":"function","modifiers":[],"name":"token1","nameLocation":"1759:6:9","nodeType":"FunctionDefinition","parameters":{"id":1939,"nodeType":"ParameterList","parameters":[],"src":"1765:2:9"},"returnParameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1943,"src":"1791:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1940,"name":"address","nodeType":"ElementaryTypeName","src":"1791:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1790:9:9"},"scope":2010,"src":"1750:50:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0902f1ac","id":1952,"implemented":false,"kind":"function","modifiers":[],"name":"getReserves","nameLocation":"1814:11:9","nodeType":"FunctionDefinition","parameters":{"id":1944,"nodeType":"ParameterList","parameters":[],"src":"1825:2:9"},"returnParameters":{"id":1951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1946,"mutability":"mutable","name":"reserve0","nameLocation":"1859:8:9","nodeType":"VariableDeclaration","scope":1952,"src":"1851:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":1945,"name":"uint112","nodeType":"ElementaryTypeName","src":"1851:7:9","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":1948,"mutability":"mutable","name":"reserve1","nameLocation":"1877:8:9","nodeType":"VariableDeclaration","scope":1952,"src":"1869:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":1947,"name":"uint112","nodeType":"ElementaryTypeName","src":"1869:7:9","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":1950,"mutability":"mutable","name":"blockTimestampLast","nameLocation":"1894:18:9","nodeType":"VariableDeclaration","scope":1952,"src":"1887:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1949,"name":"uint32","nodeType":"ElementaryTypeName","src":"1887:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1850:63:9"},"scope":2010,"src":"1805:109:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5909c0d5","id":1957,"implemented":false,"kind":"function","modifiers":[],"name":"price0CumulativeLast","nameLocation":"1928:20:9","nodeType":"FunctionDefinition","parameters":{"id":1953,"nodeType":"ParameterList","parameters":[],"src":"1948:2:9"},"returnParameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1957,"src":"1974:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1954,"name":"uint","nodeType":"ElementaryTypeName","src":"1974:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1973:6:9"},"scope":2010,"src":"1919:61:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5a3d5493","id":1962,"implemented":false,"kind":"function","modifiers":[],"name":"price1CumulativeLast","nameLocation":"1994:20:9","nodeType":"FunctionDefinition","parameters":{"id":1958,"nodeType":"ParameterList","parameters":[],"src":"2014:2:9"},"returnParameters":{"id":1961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1962,"src":"2040:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1959,"name":"uint","nodeType":"ElementaryTypeName","src":"2040:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2039:6:9"},"scope":2010,"src":"1985:61:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7464fc3d","id":1967,"implemented":false,"kind":"function","modifiers":[],"name":"kLast","nameLocation":"2060:5:9","nodeType":"FunctionDefinition","parameters":{"id":1963,"nodeType":"ParameterList","parameters":[],"src":"2065:2:9"},"returnParameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1967,"src":"2091:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1964,"name":"uint","nodeType":"ElementaryTypeName","src":"2091:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2090:6:9"},"scope":2010,"src":"2051:46:9","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6a627842","id":1974,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"2112:4:9","nodeType":"FunctionDefinition","parameters":{"id":1970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1969,"mutability":"mutable","name":"to","nameLocation":"2125:2:9","nodeType":"VariableDeclaration","scope":1974,"src":"2117:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1968,"name":"address","nodeType":"ElementaryTypeName","src":"2117:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2116:12:9"},"returnParameters":{"id":1973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"liquidity","nameLocation":"2152:9:9","nodeType":"VariableDeclaration","scope":1974,"src":"2147:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1971,"name":"uint","nodeType":"ElementaryTypeName","src":"2147:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2146:16:9"},"scope":2010,"src":"2103:60:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"89afcb44","id":1983,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"2177:4:9","nodeType":"FunctionDefinition","parameters":{"id":1977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1976,"mutability":"mutable","name":"to","nameLocation":"2190:2:9","nodeType":"VariableDeclaration","scope":1983,"src":"2182:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1975,"name":"address","nodeType":"ElementaryTypeName","src":"2182:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2181:12:9"},"returnParameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1979,"mutability":"mutable","name":"amount0","nameLocation":"2217:7:9","nodeType":"VariableDeclaration","scope":1983,"src":"2212:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1978,"name":"uint","nodeType":"ElementaryTypeName","src":"2212:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1981,"mutability":"mutable","name":"amount1","nameLocation":"2231:7:9","nodeType":"VariableDeclaration","scope":1983,"src":"2226:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1980,"name":"uint","nodeType":"ElementaryTypeName","src":"2226:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2211:28:9"},"scope":2010,"src":"2168:72:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"022c0d9f","id":1994,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"2254:4:9","nodeType":"FunctionDefinition","parameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1985,"mutability":"mutable","name":"amount0Out","nameLocation":"2264:10:9","nodeType":"VariableDeclaration","scope":1994,"src":"2259:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1984,"name":"uint","nodeType":"ElementaryTypeName","src":"2259:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1987,"mutability":"mutable","name":"amount1Out","nameLocation":"2281:10:9","nodeType":"VariableDeclaration","scope":1994,"src":"2276:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1986,"name":"uint","nodeType":"ElementaryTypeName","src":"2276:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1989,"mutability":"mutable","name":"to","nameLocation":"2301:2:9","nodeType":"VariableDeclaration","scope":1994,"src":"2293:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1988,"name":"address","nodeType":"ElementaryTypeName","src":"2293:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1991,"mutability":"mutable","name":"data","nameLocation":"2320:4:9","nodeType":"VariableDeclaration","scope":1994,"src":"2305:19:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1990,"name":"bytes","nodeType":"ElementaryTypeName","src":"2305:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2258:67:9"},"returnParameters":{"id":1993,"nodeType":"ParameterList","parameters":[],"src":"2334:0:9"},"scope":2010,"src":"2245:90:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"bc25cf77","id":1999,"implemented":false,"kind":"function","modifiers":[],"name":"skim","nameLocation":"2349:4:9","nodeType":"FunctionDefinition","parameters":{"id":1997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1996,"mutability":"mutable","name":"to","nameLocation":"2362:2:9","nodeType":"VariableDeclaration","scope":1999,"src":"2354:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1995,"name":"address","nodeType":"ElementaryTypeName","src":"2354:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2353:12:9"},"returnParameters":{"id":1998,"nodeType":"ParameterList","parameters":[],"src":"2374:0:9"},"scope":2010,"src":"2340:35:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"fff6cae9","id":2002,"implemented":false,"kind":"function","modifiers":[],"name":"sync","nameLocation":"2389:4:9","nodeType":"FunctionDefinition","parameters":{"id":2000,"nodeType":"ParameterList","parameters":[],"src":"2393:2:9"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[],"src":"2404:0:9"},"scope":2010,"src":"2380:25:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"485cc955","id":2009,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"2420:10:9","nodeType":"FunctionDefinition","parameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2009,"src":"2431:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2003,"name":"address","nodeType":"ElementaryTypeName","src":"2431:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2009,"src":"2440:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"2440:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2430:18:9"},"returnParameters":{"id":2008,"nodeType":"ParameterList","parameters":[],"src":"2457:0:9"},"scope":2010,"src":"2411:47:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2011,"src":"63:2397:9","usedErrors":[]}],"src":"37:2423:9"},"id":9},"contracts/SushiXSwap.sol":{"ast":{"absolutePath":"contracts/SushiXSwap.sol","exportedSymbols":{"Address":[1434],"BentoAdapter":[2803],"IBentoBoxMinimal":[4138],"IERC20":[667],"IERC20Permit":[728],"IImmutableState":[4244],"IPool":[4461],"IStargateAdapter":[4292],"IStargateReceiver":[4310],"IStargateRouter":[4360],"IStargateWidget":[4368],"ISushiXSwap":[4264],"ITridentRouter":[4544],"ITridentSwapAdapter":[4551],"IUniswapV2Pair":[2010],"IWETH":[4284],"ImmutableState":[4033],"SafeERC20":[1104],"SafeMathUniswap":[4626],"StargateAdapter":[3223],"SushiLegacyAdapter":[3440],"SushiXSwap":[2712],"TokenAdapter":[3566],"TridentSwapAdapter":[3956],"UniswapV2Library":[5112]},"id":2713,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2012,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:10"},{"absolutePath":"contracts/interfaces/ISushiXSwap.sol","file":"./interfaces/ISushiXSwap.sol","id":2013,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2713,"sourceUnit":4265,"src":"71:38:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2015,"name":"ISushiXSwap","nodeType":"IdentifierPath","referencedDeclaration":4264,"src":"319:11:10"},"id":2016,"nodeType":"InheritanceSpecifier","src":"319:11:10"},{"baseName":{"id":2017,"name":"BentoAdapter","nodeType":"IdentifierPath","referencedDeclaration":2803,"src":"336:12:10"},"id":2018,"nodeType":"InheritanceSpecifier","src":"336:12:10"},{"baseName":{"id":2019,"name":"TokenAdapter","nodeType":"IdentifierPath","referencedDeclaration":3566,"src":"354:12:10"},"id":2020,"nodeType":"InheritanceSpecifier","src":"354:12:10"},{"baseName":{"id":2021,"name":"SushiLegacyAdapter","nodeType":"IdentifierPath","referencedDeclaration":3440,"src":"372:18:10"},"id":2022,"nodeType":"InheritanceSpecifier","src":"372:18:10"},{"baseName":{"id":2023,"name":"TridentSwapAdapter","nodeType":"IdentifierPath","referencedDeclaration":3956,"src":"396:18:10"},"id":2024,"nodeType":"InheritanceSpecifier","src":"396:18:10"},{"baseName":{"id":2025,"name":"StargateAdapter","nodeType":"IdentifierPath","referencedDeclaration":3223,"src":"420:15:10"},"id":2026,"nodeType":"InheritanceSpecifier","src":"420:15:10"}],"canonicalName":"SushiXSwap","contractDependencies":[],"contractKind":"contract","documentation":{"id":2014,"nodeType":"StructuredDocumentation","src":"111:181:10","text":"@title SushiXSwap\n @notice Enables cross chain swap for sushiswap.\n @dev Supports both BentoBox and Wallet. Supports both Trident and Legacy AMM. Uses Stargate as bridge."},"fullyImplemented":true,"id":2712,"linearizedBaseContracts":[2712,3223,4310,3956,3440,3566,2803,4033,4244,4544,4264],"name":"SushiXSwap","nameLocation":"301:10:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":2057,"nodeType":"Block","src":"752:77:10","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2052,"name":"_bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"794:9:10","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"registerProtocol","nodeType":"MemberAccess","referencedDeclaration":4074,"src":"794:26:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"794:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2056,"nodeType":"ExpressionStatement","src":"794:28:10"}]},"id":2058,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2044,"name":"_bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"674:9:10","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},{"id":2045,"name":"_stargateRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"685:15:10","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}},{"id":2046,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"702:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2047,"name":"_pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"712:13:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2048,"name":"_stargateWidget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2039,"src":"727:15:10","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"}},{"id":2049,"name":"_SGETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"744:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2050,"kind":"baseConstructorSpecifier","modifierName":{"id":2043,"name":"ImmutableState","nodeType":"IdentifierPath","referencedDeclaration":4033,"src":"659:14:10"},"nodeType":"ModifierInvocation","src":"659:92:10"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2029,"mutability":"mutable","name":"_bentoBox","nameLocation":"480:9:10","nodeType":"VariableDeclaration","scope":2058,"src":"463:26:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"},"typeName":{"id":2028,"nodeType":"UserDefinedTypeName","pathNode":{"id":2027,"name":"IBentoBoxMinimal","nodeType":"IdentifierPath","referencedDeclaration":4138,"src":"463:16:10"},"referencedDeclaration":4138,"src":"463:16:10","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"visibility":"internal"},{"constant":false,"id":2032,"mutability":"mutable","name":"_stargateRouter","nameLocation":"515:15:10","nodeType":"VariableDeclaration","scope":2058,"src":"499:31:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"},"typeName":{"id":2031,"nodeType":"UserDefinedTypeName","pathNode":{"id":2030,"name":"IStargateRouter","nodeType":"IdentifierPath","referencedDeclaration":4360,"src":"499:15:10"},"referencedDeclaration":4360,"src":"499:15:10","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}},"visibility":"internal"},{"constant":false,"id":2034,"mutability":"mutable","name":"_factory","nameLocation":"548:8:10","nodeType":"VariableDeclaration","scope":2058,"src":"540:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2033,"name":"address","nodeType":"ElementaryTypeName","src":"540:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2036,"mutability":"mutable","name":"_pairCodeHash","nameLocation":"574:13:10","nodeType":"VariableDeclaration","scope":2058,"src":"566:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2035,"name":"bytes32","nodeType":"ElementaryTypeName","src":"566:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2039,"mutability":"mutable","name":"_stargateWidget","nameLocation":"613:15:10","nodeType":"VariableDeclaration","scope":2058,"src":"597:31:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"},"typeName":{"id":2038,"nodeType":"UserDefinedTypeName","pathNode":{"id":2037,"name":"IStargateWidget","nodeType":"IdentifierPath","referencedDeclaration":4368,"src":"597:15:10"},"referencedDeclaration":4368,"src":"597:15:10","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"}},"visibility":"internal"},{"constant":false,"id":2041,"mutability":"mutable","name":"_SGETH","nameLocation":"646:6:10","nodeType":"VariableDeclaration","scope":2058,"src":"638:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2040,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"453:205:10"},"returnParameters":{"id":2051,"nodeType":"ParameterList","parameters":[],"src":"752:0:10"},"scope":2712,"src":"442:387:10","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"constant":true,"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"835:55:10","text":"@notice List of ACTIONS supported by the `cook()`."},"id":2062,"mutability":"constant","name":"ACTION_MASTER_CONTRACT_APPROVAL","nameLocation":"953:31:10","nodeType":"VariableDeclaration","scope":2712,"src":"929:59:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2060,"name":"uint8","nodeType":"ElementaryTypeName","src":"929:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"30","id":2061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"987:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":2065,"mutability":"constant","name":"ACTION_SRC_DEPOSIT_TO_BENTOBOX","nameLocation":"1018:30:10","nodeType":"VariableDeclaration","scope":2712,"src":"994:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2063,"name":"uint8","nodeType":"ElementaryTypeName","src":"994:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"31","id":2064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1051:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":2068,"mutability":"constant","name":"ACTION_SRC_TRANSFER_FROM_BENTOBOX","nameLocation":"1082:33:10","nodeType":"VariableDeclaration","scope":2712,"src":"1058:61:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2066,"name":"uint8","nodeType":"ElementaryTypeName","src":"1058:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":2067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1118:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":2071,"mutability":"constant","name":"ACTION_DST_DEPOSIT_TO_BENTOBOX","nameLocation":"1149:30:10","nodeType":"VariableDeclaration","scope":2712,"src":"1125:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2069,"name":"uint8","nodeType":"ElementaryTypeName","src":"1125:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":2070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":true,"id":2074,"mutability":"constant","name":"ACTION_DST_WITHDRAW_TOKEN","nameLocation":"1213:25:10","nodeType":"VariableDeclaration","scope":2712,"src":"1189:53:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2072,"name":"uint8","nodeType":"ElementaryTypeName","src":"1189:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"34","id":2073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1241:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"},{"constant":true,"id":2077,"mutability":"constant","name":"ACTION_DST_WITHDRAW_OR_TRANSFER_FROM_BENTOBOX","nameLocation":"1272:45:10","nodeType":"VariableDeclaration","scope":2712,"src":"1248:73:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2075,"name":"uint8","nodeType":"ElementaryTypeName","src":"1248:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"35","id":2076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1320:1:10","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"internal"},{"constant":true,"id":2080,"mutability":"constant","name":"ACTION_UNWRAP_AND_TRANSFER","nameLocation":"1351:26:10","nodeType":"VariableDeclaration","scope":2712,"src":"1327:54:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2078,"name":"uint8","nodeType":"ElementaryTypeName","src":"1327:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"36","id":2079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1380:1:10","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"visibility":"internal"},{"constant":true,"id":2083,"mutability":"constant","name":"ACTION_LEGACY_SWAP","nameLocation":"1435:18:10","nodeType":"VariableDeclaration","scope":2712,"src":"1411:46:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2081,"name":"uint8","nodeType":"ElementaryTypeName","src":"1411:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"37","id":2082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1456:1:10","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"visibility":"internal"},{"constant":true,"id":2086,"mutability":"constant","name":"ACTION_TRIDENT_SWAP","nameLocation":"1487:19:10","nodeType":"VariableDeclaration","scope":2712,"src":"1463:47:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2084,"name":"uint8","nodeType":"ElementaryTypeName","src":"1463:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"38","id":2085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1509:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"visibility":"internal"},{"constant":true,"id":2089,"mutability":"constant","name":"ACTION_TRIDENT_COMPLEX_PATH_SWAP","nameLocation":"1540:32:10","nodeType":"VariableDeclaration","scope":2712,"src":"1516:60:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2087,"name":"uint8","nodeType":"ElementaryTypeName","src":"1516:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"39","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1575:1:10","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"visibility":"internal"},{"constant":true,"id":2092,"mutability":"constant","name":"ACTION_STARGATE_TELEPORT","nameLocation":"1632:24:10","nodeType":"VariableDeclaration","scope":2712,"src":"1608:53:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2090,"name":"uint8","nodeType":"ElementaryTypeName","src":"1608:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3130","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1659:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"visibility":"internal"},{"constant":true,"id":2095,"mutability":"constant","name":"ACTION_SRC_TOKEN_TRANSFER","nameLocation":"1692:25:10","nodeType":"VariableDeclaration","scope":2712,"src":"1668:54:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2093,"name":"uint8","nodeType":"ElementaryTypeName","src":"1668:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3131","id":2094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1720:2:10","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"visibility":"internal"},{"constant":true,"id":2098,"mutability":"constant","name":"ACTION_WRAP_TOKEN","nameLocation":"1753:17:10","nodeType":"VariableDeclaration","scope":2712,"src":"1729:46:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2096,"name":"uint8","nodeType":"ElementaryTypeName","src":"1729:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3132","id":2097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1773:2:10","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"visibility":"internal"},{"baseFunctions":[4263],"body":{"id":2705,"nodeType":"Block","src":"2407:6763:10","statements":[{"assignments":[2113],"declarations":[{"constant":false,"id":2113,"mutability":"mutable","name":"actionLength","nameLocation":"2425:12:10","nodeType":"VariableDeclaration","scope":2705,"src":"2417:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"2417:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2116,"initialValue":{"expression":{"id":2114,"name":"actions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"2440:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2440:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2417:37:10"},{"body":{"id":2703,"nodeType":"Block","src":"2517:6647:10","statements":[{"assignments":[2130],"declarations":[{"constant":false,"id":2130,"mutability":"mutable","name":"action","nameLocation":"2537:6:10","nodeType":"VariableDeclaration","scope":2703,"src":"2531:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2129,"name":"uint8","nodeType":"ElementaryTypeName","src":"2531:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2134,"initialValue":{"baseExpression":{"id":2131,"name":"actions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"2546:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"id":2133,"indexExpression":{"id":2132,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"2554:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2546:10:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"2531:25:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2135,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"2627:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2136,"name":"ACTION_MASTER_CONTRACT_APPROVAL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"2637:31:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2627:41:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2181,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"3257:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2182,"name":"ACTION_SRC_DEPOSIT_TO_BENTOBOX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"3267:30:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3257:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2221,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"3705:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2222,"name":"ACTION_SRC_TRANSFER_FROM_BENTOBOX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"3715:33:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3705:43:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2263,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"4352:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2264,"name":"ACTION_SRC_TOKEN_TRANSFER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"4362:25:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4352:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2295,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"4649:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2296,"name":"ACTION_DST_DEPOSIT_TO_BENTOBOX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"4659:30:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4649:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2365,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"5452:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2366,"name":"ACTION_DST_WITHDRAW_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"5462:25:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"5452:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2431,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"6042:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2432,"name":"ACTION_DST_WITHDRAW_OR_TRANSFER_FROM_BENTOBOX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"6052:45:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6042:55:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2495,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"6854:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2496,"name":"ACTION_UNWRAP_AND_TRANSFER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"6864:26:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6854:36:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2520,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"7108:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2521,"name":"ACTION_WRAP_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2098,"src":"7118:17:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7108:27:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2545,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"7356:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2546,"name":"ACTION_LEGACY_SWAP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"7366:18:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7356:28:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2609,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"8142:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2610,"name":"ACTION_TRIDENT_SWAP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"8152:19:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8142:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2629,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"8385:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2630,"name":"ACTION_TRIDENT_COMPLEX_PATH_SWAP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"8395:32:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8385:42:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2649,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"8644:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2650,"name":"ACTION_STARGATE_TELEPORT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"8654:24:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8644:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2690,"nodeType":"IfStatement","src":"8640:514:10","trueBody":{"id":2689,"nodeType":"Block","src":"8680:474:10","statements":[{"assignments":[2654,2657,2660,2663],"declarations":[{"constant":false,"id":2654,"mutability":"mutable","name":"params","nameLocation":"8750:6:10","nodeType":"VariableDeclaration","scope":2689,"src":"8720:36:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams"},"typeName":{"id":2653,"nodeType":"UserDefinedTypeName","pathNode":{"id":2652,"name":"StargateTeleportParams","nodeType":"IdentifierPath","referencedDeclaration":2852,"src":"8720:22:10"},"referencedDeclaration":2852,"src":"8720:22:10","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_storage_ptr","typeString":"struct StargateAdapter.StargateTeleportParams"}},"visibility":"internal"},{"constant":false,"id":2657,"mutability":"mutable","name":"actionsDST","nameLocation":"8793:10:10","nodeType":"VariableDeclaration","scope":2689,"src":"8778:25:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":2655,"name":"uint8","nodeType":"ElementaryTypeName","src":"8778:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2656,"nodeType":"ArrayTypeName","src":"8778:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"},{"constant":false,"id":2660,"mutability":"mutable","name":"valuesDST","nameLocation":"8842:9:10","nodeType":"VariableDeclaration","scope":2689,"src":"8825:26:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2658,"name":"uint256","nodeType":"ElementaryTypeName","src":"8825:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2659,"nodeType":"ArrayTypeName","src":"8825:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2663,"mutability":"mutable","name":"datasDST","nameLocation":"8888:8:10","nodeType":"VariableDeclaration","scope":2689,"src":"8873:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2661,"name":"bytes","nodeType":"ElementaryTypeName","src":"8873:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2662,"nodeType":"ArrayTypeName","src":"8873:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"id":2681,"initialValue":{"arguments":[{"baseExpression":{"id":2666,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"8953:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2668,"indexExpression":{"id":2667,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"8959:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8953:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2669,"name":"StargateTeleportParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"8988:22:10","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StargateTeleportParams_$2852_storage_ptr_$","typeString":"type(struct StargateAdapter.StargateTeleportParams storage pointer)"}},{"baseExpression":{"id":2671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9012:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2670,"name":"uint8","nodeType":"ElementaryTypeName","src":"9012:5:10","typeDescriptions":{}}},"id":2672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"9012:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint8_$dyn_memory_ptr_$","typeString":"type(uint8[] memory)"}},{"baseExpression":{"id":2674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9021:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2673,"name":"uint256","nodeType":"ElementaryTypeName","src":"9021:7:10","typeDescriptions":{}}},"id":2675,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"9021:9:10","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"type(uint256[] memory)"}},{"baseExpression":{"id":2677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9032:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2676,"name":"bytes","nodeType":"ElementaryTypeName","src":"9032:5:10","typeDescriptions":{}}},"id":2678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"9032:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"type(bytes memory[] memory)"}}],"id":2679,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8987:53:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_struct$_StargateTeleportParams_$2852_storage_ptr_$_$_t_type$_t_array$_t_uint8_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$_t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_$","typeString":"tuple(type(struct StargateAdapter.StargateTeleportParams storage pointer),type(uint8[] memory),type(uint256[] memory),type(bytes memory[] memory))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_struct$_StargateTeleportParams_$2852_storage_ptr_$_$_t_type$_t_array$_t_uint8_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$_t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_$","typeString":"tuple(type(struct StargateAdapter.StargateTeleportParams storage pointer),type(uint8[] memory),type(uint256[] memory),type(bytes memory[] memory))"}],"expression":{"id":2664,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"8917:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"8917:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8917:145:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_StargateTeleportParams_$2852_memory_ptr_$_t_array$_t_uint8_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"tuple(struct StargateAdapter.StargateTeleportParams memory,uint8[] memory,uint256[] memory,bytes memory[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"8698:364:10"},{"expression":{"arguments":[{"id":2683,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"9099:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},{"id":2684,"name":"actionsDST","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"9107:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},{"id":2685,"name":"valuesDST","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"9119:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2686,"name":"datasDST","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"9130:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"},{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}],"id":2682,"name":"_stargateTeleport","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"9081:17:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_StargateTeleportParams_$2852_memory_ptr_$_t_array$_t_uint8_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (struct StargateAdapter.StargateTeleportParams memory,uint8[] memory,uint256[] memory,bytes memory[] memory)"}},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9081:58:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2688,"nodeType":"ExpressionStatement","src":"9081:58:10"}]}},"id":2691,"nodeType":"IfStatement","src":"8381:773:10","trueBody":{"id":2648,"nodeType":"Block","src":"8429:205:10","statements":[{"assignments":[2634],"declarations":[{"constant":false,"id":2634,"mutability":"mutable","name":"params","nameLocation":"8472:6:10","nodeType":"VariableDeclaration","scope":2648,"src":"8447:31:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams"},"typeName":{"id":2633,"nodeType":"UserDefinedTypeName","pathNode":{"id":2632,"name":"ComplexPathParams","nodeType":"IdentifierPath","referencedDeclaration":4543,"src":"8447:17:10"},"referencedDeclaration":4543,"src":"8447:17:10","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_storage_ptr","typeString":"struct ITridentRouter.ComplexPathParams"}},"visibility":"internal"}],"id":2643,"initialValue":{"arguments":[{"baseExpression":{"id":2637,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"8513:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2639,"indexExpression":{"id":2638,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"8519:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8513:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2640,"name":"ComplexPathParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4543,"src":"8544:17:10","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ComplexPathParams_$4543_storage_ptr_$","typeString":"type(struct ITridentRouter.ComplexPathParams storage pointer)"}}],"id":2641,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8543:19:10","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ComplexPathParams_$4543_storage_ptr_$","typeString":"type(struct ITridentRouter.ComplexPathParams storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_struct$_ComplexPathParams_$4543_storage_ptr_$","typeString":"type(struct ITridentRouter.ComplexPathParams storage pointer)"}],"expression":{"id":2635,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"8481:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"8481:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8481:99:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"nodeType":"VariableDeclarationStatement","src":"8447:133:10"},{"expression":{"arguments":[{"id":2645,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"8612:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}],"id":2644,"name":"_complexPath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"8599:12:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_ComplexPathParams_$4543_memory_ptr_$returns$__$","typeString":"function (struct ITridentRouter.ComplexPathParams memory)"}},"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8599:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2647,"nodeType":"ExpressionStatement","src":"8599:20:10"}]}},"id":2692,"nodeType":"IfStatement","src":"8138:1016:10","trueBody":{"id":2628,"nodeType":"Block","src":"8173:202:10","statements":[{"assignments":[2614],"declarations":[{"constant":false,"id":2614,"mutability":"mutable","name":"params","nameLocation":"8215:6:10","nodeType":"VariableDeclaration","scope":2628,"src":"8191:30:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams"},"typeName":{"id":2613,"nodeType":"UserDefinedTypeName","pathNode":{"id":2612,"name":"ExactInputParams","nodeType":"IdentifierPath","referencedDeclaration":4494,"src":"8191:16:10"},"referencedDeclaration":4494,"src":"8191:16:10","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_storage_ptr","typeString":"struct ITridentRouter.ExactInputParams"}},"visibility":"internal"}],"id":2623,"initialValue":{"arguments":[{"baseExpression":{"id":2617,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"8256:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2619,"indexExpression":{"id":2618,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"8262:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8256:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2620,"name":"ExactInputParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"8287:16:10","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ExactInputParams_$4494_storage_ptr_$","typeString":"type(struct ITridentRouter.ExactInputParams storage pointer)"}}],"id":2621,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8286:18:10","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ExactInputParams_$4494_storage_ptr_$","typeString":"type(struct ITridentRouter.ExactInputParams storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_struct$_ExactInputParams_$4494_storage_ptr_$","typeString":"type(struct ITridentRouter.ExactInputParams storage pointer)"}],"expression":{"id":2615,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"8224:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"8224:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8224:98:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"nodeType":"VariableDeclarationStatement","src":"8191:131:10"},{"expression":{"arguments":[{"id":2625,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2614,"src":"8353:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}],"id":2624,"name":"_exactInput","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"8341:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_ExactInputParams_$4494_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct ITridentRouter.ExactInputParams memory) returns (uint256)"}},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8341:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2627,"nodeType":"ExpressionStatement","src":"8341:19:10"}]}},"id":2693,"nodeType":"IfStatement","src":"7352:1802:10","trueBody":{"id":2608,"nodeType":"Block","src":"7386:746:10","statements":[{"assignments":[2549,2551,2554,2556],"declarations":[{"constant":false,"id":2549,"mutability":"mutable","name":"amountIn","nameLocation":"7434:8:10","nodeType":"VariableDeclaration","scope":2608,"src":"7426:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2548,"name":"uint256","nodeType":"ElementaryTypeName","src":"7426:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2551,"mutability":"mutable","name":"amountOutMin","nameLocation":"7472:12:10","nodeType":"VariableDeclaration","scope":2608,"src":"7464:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2550,"name":"uint256","nodeType":"ElementaryTypeName","src":"7464:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2554,"mutability":"mutable","name":"path","nameLocation":"7523:4:10","nodeType":"VariableDeclaration","scope":2608,"src":"7506:21:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2552,"name":"address","nodeType":"ElementaryTypeName","src":"7506:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2553,"nodeType":"ArrayTypeName","src":"7506:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2556,"mutability":"mutable","name":"to","nameLocation":"7557:2:10","nodeType":"VariableDeclaration","scope":2608,"src":"7549:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2555,"name":"address","nodeType":"ElementaryTypeName","src":"7549:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2573,"initialValue":{"arguments":[{"baseExpression":{"id":2559,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"7616:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2561,"indexExpression":{"id":2560,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"7622:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7616:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7651:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2562,"name":"uint256","nodeType":"ElementaryTypeName","src":"7651:7:10","typeDescriptions":{}}},{"id":2565,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7660:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2564,"name":"uint256","nodeType":"ElementaryTypeName","src":"7660:7:10","typeDescriptions":{}}},{"baseExpression":{"id":2567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7669:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2566,"name":"address","nodeType":"ElementaryTypeName","src":"7669:7:10","typeDescriptions":{}}},"id":2568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"7669:9:10","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}},{"id":2570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7680:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2569,"name":"address","nodeType":"ElementaryTypeName","src":"7680:7:10","typeDescriptions":{}}}],"id":2571,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7650:38:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_array$_t_address_$dyn_memory_ptr_$_$_t_type$_t_address_$_$","typeString":"tuple(type(uint256),type(uint256),type(address[] memory),type(address))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_array$_t_address_$dyn_memory_ptr_$_$_t_type$_t_address_$_$","typeString":"tuple(type(uint256),type(uint256),type(address[] memory),type(address))"}],"expression":{"id":2557,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"7580:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"7580:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7580:130:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_payable_$","typeString":"tuple(uint256,uint256,address[] memory,address payable)"}},"nodeType":"VariableDeclarationStatement","src":"7404:306:10"},{"assignments":[2575],"declarations":[{"constant":false,"id":2575,"mutability":"mutable","name":"sendTokens","nameLocation":"7733:10:10","nodeType":"VariableDeclaration","scope":2608,"src":"7728:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2574,"name":"bool","nodeType":"ElementaryTypeName","src":"7728:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2576,"nodeType":"VariableDeclarationStatement","src":"7728:15:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2577,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"7765:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7777:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7765:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2599,"nodeType":"IfStatement","src":"7761:150:10","trueBody":{"id":2598,"nodeType":"Block","src":"7780:131:10","statements":[{"expression":{"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2580,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"7802:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2589,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"7847:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}],"id":2588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7839:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2587,"name":"address","nodeType":"ElementaryTypeName","src":"7839:7:10","typeDescriptions":{}}},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7839:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"baseExpression":{"id":2582,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"7820:4:10","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2584,"indexExpression":{"hexValue":"30","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7825:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7820:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2581,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"7813:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7813:15:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":624,"src":"7813:25:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7813:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7802:51:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2593,"nodeType":"ExpressionStatement","src":"7802:51:10"},{"expression":{"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2594,"name":"sendTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"7875:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7888:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7875:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2597,"nodeType":"ExpressionStatement","src":"7875:17:10"}]}},{"expression":{"arguments":[{"id":2601,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"7975:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2602,"name":"amountOutMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"8005:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2603,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"8039:4:10","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":2604,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"8065:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2605,"name":"sendTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"8089:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2600,"name":"_swapExactTokensForTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"7928:25:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint256,uint256,address[] memory,address,bool) returns (uint256)"}},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7928:189:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2607,"nodeType":"ExpressionStatement","src":"7928:189:10"}]}},"id":2694,"nodeType":"IfStatement","src":"7104:2050:10","trueBody":{"id":2544,"nodeType":"Block","src":"7137:209:10","statements":[{"assignments":[2524,2526],"declarations":[{"constant":false,"id":2524,"mutability":"mutable","name":"token","nameLocation":"7164:5:10","nodeType":"VariableDeclaration","scope":2544,"src":"7156:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2523,"name":"address","nodeType":"ElementaryTypeName","src":"7156:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2526,"mutability":"mutable","name":"amount","nameLocation":"7179:6:10","nodeType":"VariableDeclaration","scope":2544,"src":"7171:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2525,"name":"uint256","nodeType":"ElementaryTypeName","src":"7171:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2538,"initialValue":{"arguments":[{"baseExpression":{"id":2529,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"7221:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2531,"indexExpression":{"id":2530,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"7227:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7221:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7252:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2532,"name":"address","nodeType":"ElementaryTypeName","src":"7252:7:10","typeDescriptions":{}}},{"id":2535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2534,"name":"uint256","nodeType":"ElementaryTypeName","src":"7261:7:10","typeDescriptions":{}}}],"id":2536,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7251:18:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(uint256))"}],"expression":{"id":2527,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"7189:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"7189:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7189:98:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_uint256_$","typeString":"tuple(address payable,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7155:132:10"},{"expression":{"arguments":[{"id":2540,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"7317:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2541,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"7324:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2539,"name":"_wrapToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"7306:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7306:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2543,"nodeType":"ExpressionStatement","src":"7306:25:10"}]}},"id":2695,"nodeType":"IfStatement","src":"6850:2304:10","trueBody":{"id":2519,"nodeType":"Block","src":"6892:206:10","statements":[{"assignments":[2499,2501],"declarations":[{"constant":false,"id":2499,"mutability":"mutable","name":"token","nameLocation":"6919:5:10","nodeType":"VariableDeclaration","scope":2519,"src":"6911:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2498,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2501,"mutability":"mutable","name":"to","nameLocation":"6934:2:10","nodeType":"VariableDeclaration","scope":2519,"src":"6926:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2500,"name":"address","nodeType":"ElementaryTypeName","src":"6926:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2513,"initialValue":{"arguments":[{"baseExpression":{"id":2504,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"6972:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2506,"indexExpression":{"id":2505,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"6978:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6972:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7003:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2507,"name":"address","nodeType":"ElementaryTypeName","src":"7003:7:10","typeDescriptions":{}}},{"id":2510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7012:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2509,"name":"address","nodeType":"ElementaryTypeName","src":"7012:7:10","typeDescriptions":{}}}],"id":2511,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7002:18:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$","typeString":"tuple(type(address),type(address))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$","typeString":"tuple(type(address),type(address))"}],"expression":{"id":2502,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"6940:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"6940:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6940:98:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_address_payable_$","typeString":"tuple(address payable,address payable)"}},"nodeType":"VariableDeclarationStatement","src":"6910:128:10"},{"expression":{"arguments":[{"id":2515,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"7073:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2516,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"7080:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2514,"name":"_unwrapTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"7057:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7057:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2518,"nodeType":"ExpressionStatement","src":"7057:26:10"}]}},"id":2696,"nodeType":"IfStatement","src":"6021:3133:10","trueBody":{"id":2494,"nodeType":"Block","src":"6112:732:10","statements":[{"assignments":[2435,2437,2439,2441,2443],"declarations":[{"constant":false,"id":2435,"mutability":"mutable","name":"token","nameLocation":"6160:5:10","nodeType":"VariableDeclaration","scope":2494,"src":"6152:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2434,"name":"address","nodeType":"ElementaryTypeName","src":"6152:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2437,"mutability":"mutable","name":"to","nameLocation":"6195:2:10","nodeType":"VariableDeclaration","scope":2494,"src":"6187:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2436,"name":"address","nodeType":"ElementaryTypeName","src":"6187:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2439,"mutability":"mutable","name":"amount","nameLocation":"6227:6:10","nodeType":"VariableDeclaration","scope":2494,"src":"6219:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2438,"name":"uint256","nodeType":"ElementaryTypeName","src":"6219:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2441,"mutability":"mutable","name":"share","nameLocation":"6263:5:10","nodeType":"VariableDeclaration","scope":2494,"src":"6255:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2440,"name":"uint256","nodeType":"ElementaryTypeName","src":"6255:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2443,"mutability":"mutable","name":"unwrapBento","nameLocation":"6295:11:10","nodeType":"VariableDeclaration","scope":2494,"src":"6290:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2442,"name":"bool","nodeType":"ElementaryTypeName","src":"6290:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2461,"initialValue":{"arguments":[{"baseExpression":{"id":2446,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"6363:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2448,"indexExpression":{"id":2447,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"6369:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6363:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6398:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2449,"name":"address","nodeType":"ElementaryTypeName","src":"6398:7:10","typeDescriptions":{}}},{"id":2452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6407:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2451,"name":"address","nodeType":"ElementaryTypeName","src":"6407:7:10","typeDescriptions":{}}},{"id":2454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6416:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2453,"name":"uint256","nodeType":"ElementaryTypeName","src":"6416:7:10","typeDescriptions":{}}},{"id":2456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6425:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2455,"name":"uint256","nodeType":"ElementaryTypeName","src":"6425:7:10","typeDescriptions":{}}},{"id":2458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6434:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":2457,"name":"bool","nodeType":"ElementaryTypeName","src":"6434:4:10","typeDescriptions":{}}}],"id":2459,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6397:42:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_bool_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256),type(bool))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_bool_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256),type(bool))"}],"expression":{"id":2444,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"6327:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"6327:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6327:134:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_address_payable_$_t_uint256_$_t_uint256_$_t_bool_$","typeString":"tuple(address payable,address payable,uint256,uint256,bool)"}},"nodeType":"VariableDeclarationStatement","src":"6130:331:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2462,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"6483:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6493:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6483:11:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2465,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"6498:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6507:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6498:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6483:25:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2481,"nodeType":"IfStatement","src":"6479:120:10","trueBody":{"id":2480,"nodeType":"Block","src":"6510:89:10","statements":[{"expression":{"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2469,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"6532:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2472,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"6559:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2475,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"6574:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}],"id":2474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6566:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2473,"name":"address","nodeType":"ElementaryTypeName","src":"6566:7:10","typeDescriptions":{}}},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6566:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2470,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"6540:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":4046,"src":"6540:18:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6540:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6532:48:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2479,"nodeType":"ExpressionStatement","src":"6532:48:10"}]}},{"expression":{"arguments":[{"id":2483,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"6659:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2486,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"6694:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}],"id":2485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6686:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2484,"name":"address","nodeType":"ElementaryTypeName","src":"6686:7:10","typeDescriptions":{}}},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6686:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2488,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"6721:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2489,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"6745:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2490,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"6773:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2491,"name":"unwrapBento","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"6800:11:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2482,"name":"_transferFromBentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"6616:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bool)"}},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6616:213:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2493,"nodeType":"ExpressionStatement","src":"6616:213:10"}]}},"id":2697,"nodeType":"IfStatement","src":"5448:3706:10","trueBody":{"id":2430,"nodeType":"Block","src":"5489:526:10","statements":[{"assignments":[2369,2371,2373],"declarations":[{"constant":false,"id":2369,"mutability":"mutable","name":"token","nameLocation":"5516:5:10","nodeType":"VariableDeclaration","scope":2430,"src":"5508:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2368,"name":"address","nodeType":"ElementaryTypeName","src":"5508:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2371,"mutability":"mutable","name":"to","nameLocation":"5531:2:10","nodeType":"VariableDeclaration","scope":2430,"src":"5523:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2370,"name":"address","nodeType":"ElementaryTypeName","src":"5523:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2373,"mutability":"mutable","name":"amount","nameLocation":"5543:6:10","nodeType":"VariableDeclaration","scope":2430,"src":"5535:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2372,"name":"uint256","nodeType":"ElementaryTypeName","src":"5535:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2387,"initialValue":{"arguments":[{"baseExpression":{"id":2376,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"5585:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2378,"indexExpression":{"id":2377,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"5591:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5585:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5616:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2379,"name":"address","nodeType":"ElementaryTypeName","src":"5616:7:10","typeDescriptions":{}}},{"id":2382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5625:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2381,"name":"address","nodeType":"ElementaryTypeName","src":"5625:7:10","typeDescriptions":{}}},{"id":2384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5634:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2383,"name":"uint256","nodeType":"ElementaryTypeName","src":"5634:7:10","typeDescriptions":{}}}],"id":2385,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5615:27:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256))"}],"expression":{"id":2374,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"5553:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"5553:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5553:107:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_address_payable_$_t_uint256_$","typeString":"tuple(address payable,address payable,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5507:153:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2388,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"5682:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5692:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5682:11:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2421,"nodeType":"IfStatement","src":"5678:263:10","trueBody":{"id":2420,"nodeType":"Block","src":"5695:246:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2391,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"5721:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5738:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5730:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2392,"name":"address","nodeType":"ElementaryTypeName","src":"5730:7:10","typeDescriptions":{}}},"id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5730:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5721:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2418,"nodeType":"Block","src":"5844:79:10","statements":[{"expression":{"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2410,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"5870:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":2413,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"5887:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}],"id":2412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5879:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2411,"name":"address","nodeType":"ElementaryTypeName","src":"5879:7:10","typeDescriptions":{}}},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5879:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5879:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5870:30:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2417,"nodeType":"ExpressionStatement","src":"5870:30:10"}]},"id":2419,"nodeType":"IfStatement","src":"5717:206:10","trueBody":{"id":2409,"nodeType":"Block","src":"5742:96:10","statements":[{"expression":{"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2397,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"5768:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2404,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"5809:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}],"id":2403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5801:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2402,"name":"address","nodeType":"ElementaryTypeName","src":"5801:7:10","typeDescriptions":{}}},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5801:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":2399,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"5784:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2398,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"5777:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5777:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":624,"src":"5777:23:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5777:38:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5768:47:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2408,"nodeType":"ExpressionStatement","src":"5768:47:10"}]}}]}},{"expression":{"arguments":[{"arguments":[{"id":2424,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"5981:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2423,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"5974:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5974:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"id":2426,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"5989:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2427,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"5993:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2422,"name":"_transferTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3488,"src":"5958:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5958:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2429,"nodeType":"ExpressionStatement","src":"5958:42:10"}]}},"id":2698,"nodeType":"IfStatement","src":"4645:4509:10","trueBody":{"id":2364,"nodeType":"Block","src":"4691:751:10","statements":[{"assignments":[2299,2301,2303,2305],"declarations":[{"constant":false,"id":2299,"mutability":"mutable","name":"token","nameLocation":"4718:5:10","nodeType":"VariableDeclaration","scope":2364,"src":"4710:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2298,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"to","nameLocation":"4733:2:10","nodeType":"VariableDeclaration","scope":2364,"src":"4725:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2300,"name":"address","nodeType":"ElementaryTypeName","src":"4725:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2303,"mutability":"mutable","name":"amount","nameLocation":"4745:6:10","nodeType":"VariableDeclaration","scope":2364,"src":"4737:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2302,"name":"uint256","nodeType":"ElementaryTypeName","src":"4737:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2305,"mutability":"mutable","name":"share","nameLocation":"4761:5:10","nodeType":"VariableDeclaration","scope":2364,"src":"4753:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"4753:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2321,"initialValue":{"arguments":[{"baseExpression":{"id":2308,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"4802:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2310,"indexExpression":{"id":2309,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"4808:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4802:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4813:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2311,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:10","typeDescriptions":{}}},{"id":2314,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4822:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2313,"name":"address","nodeType":"ElementaryTypeName","src":"4822:7:10","typeDescriptions":{}}},{"id":2316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4831:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2315,"name":"uint256","nodeType":"ElementaryTypeName","src":"4831:7:10","typeDescriptions":{}}},{"id":2318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4840:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2317,"name":"uint256","nodeType":"ElementaryTypeName","src":"4840:7:10","typeDescriptions":{}}}],"id":2319,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4812:36:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256))"}],"expression":{"id":2306,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"4770:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2307,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"4770:31:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4770:79:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_address_payable_$_t_uint256_$_t_uint256_$","typeString":"tuple(address payable,address payable,uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4709:140:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2322,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"4872:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4882:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4872:11:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2338,"nodeType":"IfStatement","src":"4868:253:10","trueBody":{"id":2337,"nodeType":"Block","src":"4885:236:10","statements":[{"expression":{"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2325,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"4907:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2332,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"4948:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}],"id":2331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4940:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2330,"name":"address","nodeType":"ElementaryTypeName","src":"4940:7:10","typeDescriptions":{}}},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4940:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":2327,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"4923:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2326,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"4916:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4916:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":624,"src":"4916:23:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4916:38:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4907:47:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2336,"nodeType":"ExpressionStatement","src":"4907:47:10"}]}},{"expression":{"arguments":[{"arguments":[{"id":2341,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"5162:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2340,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"5155:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5155:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"arguments":[{"id":2345,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"5178:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}],"id":2344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5170:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2343,"name":"address","nodeType":"ElementaryTypeName","src":"5170:7:10","typeDescriptions":{}}},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5170:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2347,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"5189:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2339,"name":"_transferTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3488,"src":"5139:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5139:57:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2349,"nodeType":"ExpressionStatement","src":"5139:57:10"},{"expression":{"arguments":[{"id":2351,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"5255:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2354,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"5290:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}],"id":2353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5282:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2352,"name":"address","nodeType":"ElementaryTypeName","src":"5282:7:10","typeDescriptions":{}}},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5282:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2356,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"5321:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2357,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"5345:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2358,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"5373:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2359,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"5400:6:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2361,"indexExpression":{"id":2360,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"5407:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5400:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2350,"name":"_depositToBentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"5215:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256,uint256)"}},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5215:212:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2363,"nodeType":"ExpressionStatement","src":"5215:212:10"}]}},"id":2699,"nodeType":"IfStatement","src":"4348:4806:10","trueBody":{"id":2294,"nodeType":"Block","src":"4389:250:10","statements":[{"assignments":[2267,2269,2271],"declarations":[{"constant":false,"id":2267,"mutability":"mutable","name":"token","nameLocation":"4416:5:10","nodeType":"VariableDeclaration","scope":2294,"src":"4408:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2266,"name":"address","nodeType":"ElementaryTypeName","src":"4408:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2269,"mutability":"mutable","name":"to","nameLocation":"4431:2:10","nodeType":"VariableDeclaration","scope":2294,"src":"4423:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2268,"name":"address","nodeType":"ElementaryTypeName","src":"4423:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2271,"mutability":"mutable","name":"amount","nameLocation":"4443:6:10","nodeType":"VariableDeclaration","scope":2294,"src":"4435:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2270,"name":"uint256","nodeType":"ElementaryTypeName","src":"4435:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2285,"initialValue":{"arguments":[{"baseExpression":{"id":2274,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"4485:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2276,"indexExpression":{"id":2275,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"4491:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4485:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4516:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2277,"name":"address","nodeType":"ElementaryTypeName","src":"4516:7:10","typeDescriptions":{}}},{"id":2280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4525:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2279,"name":"address","nodeType":"ElementaryTypeName","src":"4525:7:10","typeDescriptions":{}}},{"id":2282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4534:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2281,"name":"uint256","nodeType":"ElementaryTypeName","src":"4534:7:10","typeDescriptions":{}}}],"id":2283,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4515:27:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256))"}],"expression":{"id":2272,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"4453:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"4453:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4453:107:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_address_payable_$_t_uint256_$","typeString":"tuple(address payable,address payable,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4407:153:10"},{"expression":{"arguments":[{"arguments":[{"id":2288,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"4605:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2287,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"4598:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4598:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"id":2290,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"4613:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2291,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"4617:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2286,"name":"_transferFromToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"4579:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4579:45:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2293,"nodeType":"ExpressionStatement","src":"4579:45:10"}]}},"id":2700,"nodeType":"IfStatement","src":"3701:5453:10","trueBody":{"id":2262,"nodeType":"Block","src":"3750:592:10","statements":[{"assignments":[2225,2227,2229,2231,2233],"declarations":[{"constant":false,"id":2225,"mutability":"mutable","name":"token","nameLocation":"3798:5:10","nodeType":"VariableDeclaration","scope":2262,"src":"3790:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2224,"name":"address","nodeType":"ElementaryTypeName","src":"3790:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2227,"mutability":"mutable","name":"to","nameLocation":"3833:2:10","nodeType":"VariableDeclaration","scope":2262,"src":"3825:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2226,"name":"address","nodeType":"ElementaryTypeName","src":"3825:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2229,"mutability":"mutable","name":"amount","nameLocation":"3865:6:10","nodeType":"VariableDeclaration","scope":2262,"src":"3857:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2228,"name":"uint256","nodeType":"ElementaryTypeName","src":"3857:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2231,"mutability":"mutable","name":"share","nameLocation":"3901:5:10","nodeType":"VariableDeclaration","scope":2262,"src":"3893:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2230,"name":"uint256","nodeType":"ElementaryTypeName","src":"3893:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2233,"mutability":"mutable","name":"unwrapBento","nameLocation":"3933:11:10","nodeType":"VariableDeclaration","scope":2262,"src":"3928:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2232,"name":"bool","nodeType":"ElementaryTypeName","src":"3928:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2251,"initialValue":{"arguments":[{"baseExpression":{"id":2236,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"4001:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2238,"indexExpression":{"id":2237,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"4007:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4001:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2240,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4036:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2239,"name":"address","nodeType":"ElementaryTypeName","src":"4036:7:10","typeDescriptions":{}}},{"id":2242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4045:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2241,"name":"address","nodeType":"ElementaryTypeName","src":"4045:7:10","typeDescriptions":{}}},{"id":2244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4054:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2243,"name":"uint256","nodeType":"ElementaryTypeName","src":"4054:7:10","typeDescriptions":{}}},{"id":2246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4063:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2245,"name":"uint256","nodeType":"ElementaryTypeName","src":"4063:7:10","typeDescriptions":{}}},{"id":2248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4072:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":2247,"name":"bool","nodeType":"ElementaryTypeName","src":"4072:4:10","typeDescriptions":{}}}],"id":2249,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4035:42:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_bool_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256),type(bool))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_bool_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256),type(bool))"}],"expression":{"id":2234,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"3965:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"3965:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3965:134:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_address_payable_$_t_uint256_$_t_uint256_$_t_bool_$","typeString":"tuple(address payable,address payable,uint256,uint256,bool)"}},"nodeType":"VariableDeclarationStatement","src":"3768:331:10"},{"expression":{"arguments":[{"id":2253,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"4160:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2254,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"4187:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4187:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2256,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"4219:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2257,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"4243:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2258,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2231,"src":"4271:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2259,"name":"unwrapBento","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"4298:11:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2252,"name":"_transferFromBentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"4117:21:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bool)"}},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4117:210:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2261,"nodeType":"ExpressionStatement","src":"4117:210:10"}]}},"id":2701,"nodeType":"IfStatement","src":"3253:5901:10","trueBody":{"id":2220,"nodeType":"Block","src":"3299:396:10","statements":[{"assignments":[2185,2187,2189,2191],"declarations":[{"constant":false,"id":2185,"mutability":"mutable","name":"token","nameLocation":"3326:5:10","nodeType":"VariableDeclaration","scope":2220,"src":"3318:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2184,"name":"address","nodeType":"ElementaryTypeName","src":"3318:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2187,"mutability":"mutable","name":"to","nameLocation":"3341:2:10","nodeType":"VariableDeclaration","scope":2220,"src":"3333:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2186,"name":"address","nodeType":"ElementaryTypeName","src":"3333:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2189,"mutability":"mutable","name":"amount","nameLocation":"3353:6:10","nodeType":"VariableDeclaration","scope":2220,"src":"3345:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2188,"name":"uint256","nodeType":"ElementaryTypeName","src":"3345:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2191,"mutability":"mutable","name":"share","nameLocation":"3369:5:10","nodeType":"VariableDeclaration","scope":2220,"src":"3361:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"3361:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2207,"initialValue":{"arguments":[{"baseExpression":{"id":2194,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"3410:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2196,"indexExpression":{"id":2195,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"3416:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3410:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3421:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2197,"name":"address","nodeType":"ElementaryTypeName","src":"3421:7:10","typeDescriptions":{}}},{"id":2200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3430:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2199,"name":"address","nodeType":"ElementaryTypeName","src":"3430:7:10","typeDescriptions":{}}},{"id":2202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3439:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2201,"name":"uint256","nodeType":"ElementaryTypeName","src":"3439:7:10","typeDescriptions":{}}},{"id":2204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3448:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2203,"name":"uint256","nodeType":"ElementaryTypeName","src":"3448:7:10","typeDescriptions":{}}}],"id":2205,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3420:36:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256))"}],"expression":{"id":2192,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"3378:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"3378:31:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3378:79:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_address_payable_$_t_uint256_$_t_uint256_$","typeString":"tuple(address payable,address payable,uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3317:140:10"},{"expression":{"arguments":[{"id":2209,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"3515:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2210,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"3542:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3542:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2212,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"3574:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2213,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"3598:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2214,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"3626:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2215,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"3653:6:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2217,"indexExpression":{"id":2216,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"3660:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3653:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2208,"name":"_depositToBentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"3475:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256,uint256)"}},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3475:205:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2219,"nodeType":"ExpressionStatement","src":"3475:205:10"}]}},"id":2702,"nodeType":"IfStatement","src":"2623:6531:10","trueBody":{"id":2180,"nodeType":"Block","src":"2670:577:10","statements":[{"assignments":[2139,2141,2143,2145,2147],"declarations":[{"constant":false,"id":2139,"mutability":"mutable","name":"user","nameLocation":"2718:4:10","nodeType":"VariableDeclaration","scope":2180,"src":"2710:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2138,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2141,"mutability":"mutable","name":"approved","nameLocation":"2749:8:10","nodeType":"VariableDeclaration","scope":2180,"src":"2744:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2140,"name":"bool","nodeType":"ElementaryTypeName","src":"2744:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2143,"mutability":"mutable","name":"v","nameLocation":"2785:1:10","nodeType":"VariableDeclaration","scope":2180,"src":"2779:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2142,"name":"uint8","nodeType":"ElementaryTypeName","src":"2779:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2145,"mutability":"mutable","name":"r","nameLocation":"2816:1:10","nodeType":"VariableDeclaration","scope":2180,"src":"2808:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2808:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2147,"mutability":"mutable","name":"s","nameLocation":"2847:1:10","nodeType":"VariableDeclaration","scope":2180,"src":"2839:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2146,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2839:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2165,"initialValue":{"arguments":[{"baseExpression":{"id":2150,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"2905:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2152,"indexExpression":{"id":2151,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"2911:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2905:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2154,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2940:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2153,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:10","typeDescriptions":{}}},{"id":2156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2949:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":2155,"name":"bool","nodeType":"ElementaryTypeName","src":"2949:4:10","typeDescriptions":{}}},{"id":2158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2955:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2157,"name":"uint8","nodeType":"ElementaryTypeName","src":"2955:5:10","typeDescriptions":{}}},{"id":2160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2962:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2962:7:10","typeDescriptions":{}}},{"id":2162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2971:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2971:7:10","typeDescriptions":{}}}],"id":2163,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2939:40:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_bool_$_$_t_type$_t_uint8_$_$_t_type$_t_bytes32_$_$_t_type$_t_bytes32_$_$","typeString":"tuple(type(address),type(bool),type(uint8),type(bytes32),type(bytes32))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_bool_$_$_t_type$_t_uint8_$_$_t_type$_t_bytes32_$_$_t_type$_t_bytes32_$_$","typeString":"tuple(type(address),type(bool),type(uint8),type(bytes32),type(bytes32))"}],"expression":{"id":2148,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2869:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"2869:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2869:132:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_bool_$_t_uint8_$_t_bytes32_$_t_bytes32_$","typeString":"tuple(address payable,bool,uint8,bytes32,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"2688:313:10"},{"expression":{"arguments":[{"id":2169,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"3076:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2172,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"3110:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiXSwap_$2712","typeString":"contract SushiXSwap"}],"id":2171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3102:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2170,"name":"address","nodeType":"ElementaryTypeName","src":"3102:7:10","typeDescriptions":{}}},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3102:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2174,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"3137:8:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2175,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"3167:1:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2176,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"3190:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2177,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2147,"src":"3213:1:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2166,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"3020:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setMasterContractApproval","nodeType":"MemberAccess","referencedDeclaration":4137,"src":"3020:34:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_bool_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,bool,uint8,bytes32,bytes32) external"}},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3020:212:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2179,"nodeType":"ExpressionStatement","src":"3020:212:10"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2120,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"2480:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2121,"name":"actionLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"2484:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2480:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2704,"initializationExpression":{"assignments":[2118],"declarations":[{"constant":false,"id":2118,"mutability":"mutable","name":"i","nameLocation":"2477:1:10","nodeType":"VariableDeclaration","scope":2704,"src":"2469:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2117,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2119,"nodeType":"VariableDeclarationStatement","src":"2469:9:10"},"loopExpression":{"expression":{"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2123,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"2498:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2125,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"2513:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2124,"name":"_increment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"2502:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2502:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2498:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2128,"nodeType":"ExpressionStatement","src":"2498:17:10"},"nodeType":"ForStatement","src":"2464:6700:10"}]},"documentation":{"id":2099,"nodeType":"StructuredDocumentation","src":"1782:481:10","text":"@notice Executes a set of actions and allows composability (contract calls) to other contracts.\n @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\n @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\n @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\n @dev The function gets invoked both at the src and dst chain."},"functionSelector":"656f3d64","id":2706,"implemented":true,"kind":"function","modifiers":[],"name":"cook","nameLocation":"2277:4:10","nodeType":"FunctionDefinition","overrides":{"id":2110,"nodeType":"OverrideSpecifier","overrides":[],"src":"2398:8:10"},"parameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"mutability":"mutable","name":"actions","nameLocation":"2306:7:10","nodeType":"VariableDeclaration","scope":2706,"src":"2291:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":2100,"name":"uint8","nodeType":"ElementaryTypeName","src":"2291:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2101,"nodeType":"ArrayTypeName","src":"2291:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"},{"constant":false,"id":2105,"mutability":"mutable","name":"values","nameLocation":"2340:6:10","nodeType":"VariableDeclaration","scope":2706,"src":"2323:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2103,"name":"uint256","nodeType":"ElementaryTypeName","src":"2323:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2104,"nodeType":"ArrayTypeName","src":"2323:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2108,"mutability":"mutable","name":"datas","nameLocation":"2371:5:10","nodeType":"VariableDeclaration","scope":2706,"src":"2356:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2106,"name":"bytes","nodeType":"ElementaryTypeName","src":"2356:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2107,"nodeType":"ArrayTypeName","src":"2356:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"2281:101:10"},"returnParameters":{"id":2111,"nodeType":"ParameterList","parameters":[],"src":"2407:0:10"},"scope":2712,"src":"2268:6902:10","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":2710,"nodeType":"Block","src":"9264:2:10","statements":[]},"documentation":{"id":2707,"nodeType":"StructuredDocumentation","src":"9176:56:10","text":"@notice Allows the contract to receive Native tokens"},"id":2711,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2708,"nodeType":"ParameterList","parameters":[],"src":"9244:2:10"},"returnParameters":{"id":2709,"nodeType":"ParameterList","parameters":[],"src":"9264:0:10"},"scope":2712,"src":"9237:29:10","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2713,"src":"292:8976:10","usedErrors":[2817,2819,3580]}],"src":"46:9222:10"},"id":10},"contracts/adapters/BentoAdapter.sol":{"ast":{"absolutePath":"contracts/adapters/BentoAdapter.sol","exportedSymbols":{"BentoAdapter":[2803],"IBentoBoxMinimal":[4138],"IImmutableState":[4244],"IStargateRouter":[4360],"IStargateWidget":[4368],"ImmutableState":[4033]},"id":2804,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2714,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:11"},{"absolutePath":"contracts/interfaces/IBentoBoxMinimal.sol","file":"../interfaces/IBentoBoxMinimal.sol","id":2715,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2804,"sourceUnit":4139,"src":"71:44:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/base/ImmutableState.sol","file":"../base/ImmutableState.sol","id":2716,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2804,"sourceUnit":4034,"src":"116:36:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2718,"name":"ImmutableState","nodeType":"IdentifierPath","referencedDeclaration":4033,"src":"491:14:11"},"id":2719,"nodeType":"InheritanceSpecifier","src":"491:14:11"}],"canonicalName":"BentoAdapter","contractDependencies":[],"contractKind":"contract","documentation":{"id":2717,"nodeType":"StructuredDocumentation","src":"154:303:11","text":"@title BentoAdapter\n @notice Adapter which provides all functions of BentoBox require by this contract.\n @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\n are passed in the from param, or else the attacker can sifu user's funds in bentobox."},"fullyImplemented":false,"id":2803,"linearizedBaseContracts":[2803,4033,4244],"name":"BentoAdapter","nameLocation":"475:12:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2747,"nodeType":"Block","src":"1303:79:11","statements":[{"expression":{"arguments":[{"id":2740,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2722,"src":"1344:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2741,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"1351:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2742,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"1357:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2743,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1361:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2744,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"1369:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2735,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"1313:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":4092,"src":"1313:16:11","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,address,uint256,uint256) payable external returns (uint256,uint256)"}},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2738,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"1337:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1313:30:11","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$value","typeString":"function (address,address,address,uint256,uint256) payable external returns (uint256,uint256)"}},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1313:62:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":2746,"nodeType":"ExpressionStatement","src":"1313:62:11"}]},"documentation":{"id":2720,"nodeType":"StructuredDocumentation","src":"512:608:11","text":"@notice Deposits the token from users wallet into the BentoBox.\n @dev Make sure, only msg.sender, address(this) and address(bentoBox)\n are passed in the from param, or else the attacker can sifu user's funds in bentobox.\n Pass either amount or share.\n @param token token to deposit. Use token as address(0) when depositing native token\n @param from sender\n @param to receiver\n @param amount amount to be deposited\n @param share share to be deposited\n @param value native token value to be deposited. Only use when token address is address(0)"},"id":2748,"implemented":true,"kind":"function","modifiers":[],"name":"_depositToBentoBox","nameLocation":"1134:18:11","nodeType":"FunctionDefinition","parameters":{"id":2733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2722,"mutability":"mutable","name":"token","nameLocation":"1170:5:11","nodeType":"VariableDeclaration","scope":2748,"src":"1162:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2721,"name":"address","nodeType":"ElementaryTypeName","src":"1162:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2724,"mutability":"mutable","name":"from","nameLocation":"1193:4:11","nodeType":"VariableDeclaration","scope":2748,"src":"1185:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2723,"name":"address","nodeType":"ElementaryTypeName","src":"1185:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2726,"mutability":"mutable","name":"to","nameLocation":"1215:2:11","nodeType":"VariableDeclaration","scope":2748,"src":"1207:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2725,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2728,"mutability":"mutable","name":"amount","nameLocation":"1235:6:11","nodeType":"VariableDeclaration","scope":2748,"src":"1227:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2727,"name":"uint256","nodeType":"ElementaryTypeName","src":"1227:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2730,"mutability":"mutable","name":"share","nameLocation":"1259:5:11","nodeType":"VariableDeclaration","scope":2748,"src":"1251:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2729,"name":"uint256","nodeType":"ElementaryTypeName","src":"1251:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2732,"mutability":"mutable","name":"value","nameLocation":"1282:5:11","nodeType":"VariableDeclaration","scope":2748,"src":"1274:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1152:141:11"},"returnParameters":{"id":2734,"nodeType":"ParameterList","parameters":[],"src":"1303:0:11"},"scope":2803,"src":"1125:257:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2801,"nodeType":"Block","src":"2172:287:11","statements":[{"condition":{"id":2764,"name":"unwrapBento","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"2186:11:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2799,"nodeType":"Block","src":"2279:174:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2776,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"2297:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2306:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2297:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2789,"nodeType":"IfStatement","src":"2293:95:11","trueBody":{"id":2788,"nodeType":"Block","src":"2309:79:11","statements":[{"expression":{"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2779,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"2327:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2782,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"2352:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2783,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"2359:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2367:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2780,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"2335:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toShare","nodeType":"MemberAccess","referencedDeclaration":4058,"src":"2335:16:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (address,uint256,bool) view external returns (uint256)"}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2335:38:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2327:46:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2787,"nodeType":"ExpressionStatement","src":"2327:46:11"}]}},{"expression":{"arguments":[{"id":2793,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"2419:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2794,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"2426:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2795,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"2432:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2796,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"2436:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2790,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"2401:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":4122,"src":"2401:17:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256) external"}},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2401:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2798,"nodeType":"ExpressionStatement","src":"2401:41:11"}]},"id":2800,"nodeType":"IfStatement","src":"2182:271:11","trueBody":{"id":2775,"nodeType":"Block","src":"2199:74:11","statements":[{"expression":{"arguments":[{"id":2768,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"2231:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2769,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"2238:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2770,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"2244:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2771,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"2248:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2772,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"2256:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2765,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"2213:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":4110,"src":"2213:17:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,address,uint256,uint256) external returns (uint256,uint256)"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2213:49:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":2774,"nodeType":"ExpressionStatement","src":"2213:49:11"}]}}]},"documentation":{"id":2749,"nodeType":"StructuredDocumentation","src":"1388:595:11","text":"@notice Transfers the token from bentobox user to another or withdraw it to another address.\n @dev Make sure, only msg.sender, address(this) and address(bentoBox)\n are passed in the from param, or else the attacker can sifu user's funds in bentobox.\n Pass either amount or share.\n @param token token to transfer. For native tokens, use wnative token address\n @param from sender\n @param to receiver\n @param amount amount to transfer\n @param share share to transfer\n @param unwrapBento use true for withdraw and false for transfer"},"id":2802,"implemented":true,"kind":"function","modifiers":[],"name":"_transferFromBentoBox","nameLocation":"1997:21:11","nodeType":"FunctionDefinition","parameters":{"id":2762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2751,"mutability":"mutable","name":"token","nameLocation":"2036:5:11","nodeType":"VariableDeclaration","scope":2802,"src":"2028:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2750,"name":"address","nodeType":"ElementaryTypeName","src":"2028:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2753,"mutability":"mutable","name":"from","nameLocation":"2059:4:11","nodeType":"VariableDeclaration","scope":2802,"src":"2051:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2752,"name":"address","nodeType":"ElementaryTypeName","src":"2051:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2755,"mutability":"mutable","name":"to","nameLocation":"2081:2:11","nodeType":"VariableDeclaration","scope":2802,"src":"2073:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2754,"name":"address","nodeType":"ElementaryTypeName","src":"2073:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2757,"mutability":"mutable","name":"amount","nameLocation":"2101:6:11","nodeType":"VariableDeclaration","scope":2802,"src":"2093:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2756,"name":"uint256","nodeType":"ElementaryTypeName","src":"2093:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2759,"mutability":"mutable","name":"share","nameLocation":"2125:5:11","nodeType":"VariableDeclaration","scope":2802,"src":"2117:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2758,"name":"uint256","nodeType":"ElementaryTypeName","src":"2117:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2761,"mutability":"mutable","name":"unwrapBento","nameLocation":"2145:11:11","nodeType":"VariableDeclaration","scope":2802,"src":"2140:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2760,"name":"bool","nodeType":"ElementaryTypeName","src":"2140:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2018:144:11"},"returnParameters":{"id":2763,"nodeType":"ParameterList","parameters":[],"src":"2172:0:11"},"scope":2803,"src":"1988:471:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2804,"src":"457:2004:11","usedErrors":[]}],"src":"46:2415:11"},"id":11},"contracts/adapters/StargateAdapter.sol":{"ast":{"absolutePath":"contracts/adapters/StargateAdapter.sol","exportedSymbols":{"Address":[1434],"IBentoBoxMinimal":[4138],"IERC20":[667],"IERC20Permit":[728],"IImmutableState":[4244],"IStargateAdapter":[4292],"IStargateReceiver":[4310],"IStargateRouter":[4360],"IStargateWidget":[4368],"ISushiXSwap":[4264],"ImmutableState":[4033],"SafeERC20":[1104],"StargateAdapter":[3223]},"id":3224,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2805,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:12"},{"absolutePath":"contracts/interfaces/stargate/IStargateAdapter.sol","file":"../interfaces/stargate/IStargateAdapter.sol","id":2806,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3224,"sourceUnit":4293,"src":"71:53:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2808,"name":"ImmutableState","nodeType":"IdentifierPath","referencedDeclaration":4033,"src":"247:14:12"},"id":2809,"nodeType":"InheritanceSpecifier","src":"247:14:12"},{"baseName":{"id":2810,"name":"IStargateReceiver","nodeType":"IdentifierPath","referencedDeclaration":4310,"src":"263:17:12"},"id":2811,"nodeType":"InheritanceSpecifier","src":"263:17:12"}],"canonicalName":"StargateAdapter","contractDependencies":[],"contractKind":"contract","documentation":{"id":2807,"nodeType":"StructuredDocumentation","src":"126:84:12","text":"@title StargateAdapter\n @notice Adapter for function used by Stargate Bridge"},"fullyImplemented":false,"id":3223,"linearizedBaseContracts":[3223,4310,4033,4244],"name":"StargateAdapter","nameLocation":"228:15:12","nodeType":"ContractDefinition","nodes":[{"id":2815,"libraryName":{"id":2812,"name":"SafeERC20","nodeType":"IdentifierPath","referencedDeclaration":1104,"src":"293:9:12"},"nodeType":"UsingForDirective","src":"287:27:12","typeName":{"id":2814,"nodeType":"UserDefinedTypeName","pathNode":{"id":2813,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"307:6:12"},"referencedDeclaration":667,"src":"307:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}}},{"id":2817,"name":"NotStargateRouter","nameLocation":"346:17:12","nodeType":"ErrorDefinition","parameters":{"id":2816,"nodeType":"ParameterList","parameters":[],"src":"363:2:12"},"src":"340:26:12"},{"id":2819,"name":"InsufficientGas","nameLocation":"377:15:12","nodeType":"ErrorDefinition","parameters":{"id":2818,"nodeType":"ParameterList","parameters":[],"src":"392:2:12"},"src":"371:24:12"},{"anonymous":false,"id":2823,"name":"StargateSushiXSwapSrc","nameLocation":"421:21:12","nodeType":"EventDefinition","parameters":{"id":2822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2821,"indexed":true,"mutability":"mutable","name":"srcContext","nameLocation":"459:10:12","nodeType":"VariableDeclaration","scope":2823,"src":"443:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2820,"name":"bytes32","nodeType":"ElementaryTypeName","src":"443:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"442:28:12"},"src":"415:56:12"},{"anonymous":false,"id":2829,"name":"StargateSushiXSwapDst","nameLocation":"482:21:12","nodeType":"EventDefinition","parameters":{"id":2828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2825,"indexed":true,"mutability":"mutable","name":"srcContext","nameLocation":"520:10:12","nodeType":"VariableDeclaration","scope":2829,"src":"504:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2824,"name":"bytes32","nodeType":"ElementaryTypeName","src":"504:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2827,"indexed":false,"mutability":"mutable","name":"failed","nameLocation":"537:6:12","nodeType":"VariableDeclaration","scope":2829,"src":"532:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2826,"name":"bool","nodeType":"ElementaryTypeName","src":"532:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"503:41:12"},"src":"476:69:12"},{"canonicalName":"StargateAdapter.StargateTeleportParams","id":2852,"members":[{"constant":false,"id":2831,"mutability":"mutable","name":"dstChainId","nameLocation":"598:10:12","nodeType":"VariableDeclaration","scope":2852,"src":"591:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2830,"name":"uint16","nodeType":"ElementaryTypeName","src":"591:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2833,"mutability":"mutable","name":"token","nameLocation":"651:5:12","nodeType":"VariableDeclaration","scope":2852,"src":"643:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2832,"name":"address","nodeType":"ElementaryTypeName","src":"643:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2835,"mutability":"mutable","name":"srcPoolId","nameLocation":"699:9:12","nodeType":"VariableDeclaration","scope":2852,"src":"691:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2834,"name":"uint256","nodeType":"ElementaryTypeName","src":"691:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2837,"mutability":"mutable","name":"dstPoolId","nameLocation":"750:9:12","nodeType":"VariableDeclaration","scope":2852,"src":"742:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2836,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2839,"mutability":"mutable","name":"amount","nameLocation":"801:6:12","nodeType":"VariableDeclaration","scope":2852,"src":"793:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"793:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2841,"mutability":"mutable","name":"amountMin","nameLocation":"845:9:12","nodeType":"VariableDeclaration","scope":2852,"src":"837:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2840,"name":"uint256","nodeType":"ElementaryTypeName","src":"837:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2843,"mutability":"mutable","name":"dustAmount","nameLocation":"900:10:12","nodeType":"VariableDeclaration","scope":2852,"src":"892:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2842,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2845,"mutability":"mutable","name":"receiver","nameLocation":"972:8:12","nodeType":"VariableDeclaration","scope":2852,"src":"964:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2844,"name":"address","nodeType":"ElementaryTypeName","src":"964:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2847,"mutability":"mutable","name":"to","nameLocation":"1025:2:12","nodeType":"VariableDeclaration","scope":2852,"src":"1017:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2846,"name":"address","nodeType":"ElementaryTypeName","src":"1017:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2849,"mutability":"mutable","name":"gas","nameLocation":"1113:3:12","nodeType":"VariableDeclaration","scope":2852,"src":"1105:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2848,"name":"uint256","nodeType":"ElementaryTypeName","src":"1105:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2851,"mutability":"mutable","name":"srcContext","nameLocation":"1183:10:12","nodeType":"VariableDeclaration","scope":2852,"src":"1175:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2850,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1175:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"StargateTeleportParams","nameLocation":"558:22:12","nodeType":"StructDefinition","scope":3223,"src":"551:685:12","visibility":"public"},{"body":{"id":2873,"nodeType":"Block","src":"1390:78:12","statements":[{"expression":{"arguments":[{"arguments":[{"id":2864,"name":"stargateRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1426:14:12","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}],"id":2863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1418:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2862,"name":"address","nodeType":"ElementaryTypeName","src":"1418:7:12","typeDescriptions":{}}},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1418:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":2868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1448:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2867,"name":"uint256","nodeType":"ElementaryTypeName","src":"1448:7:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2866,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1443:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1443:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2870,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"1443:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2859,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"1400:5:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeApprove","nodeType":"MemberAccess","referencedDeclaration":832,"src":"1400:17:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$667_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1400:61:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2872,"nodeType":"ExpressionStatement","src":"1400:61:12"}]},"documentation":{"id":2853,"nodeType":"StructuredDocumentation","src":"1242:87:12","text":"@notice Approves token to the Stargate Router\n @param token token to approve"},"functionSelector":"d1ac3535","id":2874,"implemented":true,"kind":"function","modifiers":[],"name":"approveToStargateRouter","nameLocation":"1343:23:12","nodeType":"FunctionDefinition","parameters":{"id":2857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2856,"mutability":"mutable","name":"token","nameLocation":"1374:5:12","nodeType":"VariableDeclaration","scope":2874,"src":"1367:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":2855,"nodeType":"UserDefinedTypeName","pathNode":{"id":2854,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"1367:6:12"},"referencedDeclaration":667,"src":"1367:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"1366:14:12"},"returnParameters":{"id":2858,"nodeType":"ParameterList","parameters":[],"src":"1390:0:12"},"scope":3223,"src":"1334:134:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2981,"nodeType":"Block","src":"2290:990:12","statements":[{"assignments":[2891],"declarations":[{"constant":false,"id":2891,"mutability":"mutable","name":"payload","nameLocation":"2313:7:12","nodeType":"VariableDeclaration","scope":2981,"src":"2300:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2890,"name":"bytes","nodeType":"ElementaryTypeName","src":"2300:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2902,"initialValue":{"arguments":[{"expression":{"id":2894,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2334:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2895,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"to","nodeType":"MemberAccess","referencedDeclaration":2847,"src":"2334:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2896,"name":"actions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"2345:7:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},{"id":2897,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"2354:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2898,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"2362:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"expression":{"id":2899,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2369:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2900,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"srcContext","nodeType":"MemberAccess","referencedDeclaration":2851,"src":"2369:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2892,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2323:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"2323:10:12","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2323:64:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2300:87:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2903,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2451:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2904,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"gas","nodeType":"MemberAccess","referencedDeclaration":2849,"src":"2451:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"313030303030","id":2905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2464:6:12","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},"src":"2451:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":"@dev dst gas should be more than 100k","id":2910,"nodeType":"IfStatement","src":"2448:48:12","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2907,"name":"InsufficientGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"2479:15:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2479:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2909,"nodeType":"RevertStatement","src":"2472:24:12"}},{"expression":{"arguments":[{"expression":{"id":2920,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2570:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2921,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"dstChainId","nodeType":"MemberAccess","referencedDeclaration":2831,"src":"2570:17:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":2922,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2601:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2923,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"srcPoolId","nodeType":"MemberAccess","referencedDeclaration":2835,"src":"2601:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2924,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2631:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2925,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"dstPoolId","nodeType":"MemberAccess","referencedDeclaration":2837,"src":"2631:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"expression":{"id":2928,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2669:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2669:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2661:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2926,"name":"address","nodeType":"ElementaryTypeName","src":"2661:8:12","stateMutability":"payable","typeDescriptions":{}}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2661:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2931,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2712:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2932,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":2839,"src":"2712:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2729:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2712:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[{"id":2944,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2820:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}],"id":2943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2812:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2942,"name":"address","nodeType":"ElementaryTypeName","src":"2812:7:12","typeDescriptions":{}}},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2812:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"expression":{"id":2938,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2788:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2939,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":2833,"src":"2788:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2937,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"2781:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2781:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":624,"src":"2781:30:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2781:45:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2712:114:12","trueExpression":{"expression":{"id":2935,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2749:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2936,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":2839,"src":"2749:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2948,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2840:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2949,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountMin","nodeType":"MemberAccess","referencedDeclaration":2841,"src":"2840:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"expression":{"id":2952,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2911:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2953,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"gas","nodeType":"MemberAccess","referencedDeclaration":2849,"src":"2911:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2954,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2981:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"dustAmount","nodeType":"MemberAccess","referencedDeclaration":2843,"src":"2981:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"expression":{"id":2958,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"3033:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2959,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"receiver","nodeType":"MemberAccess","referencedDeclaration":2845,"src":"3033:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2956,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"3016:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3016:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3016:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2950,"name":"IStargateRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"2870:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IStargateRouter_$4360_$","typeString":"type(contract IStargateRouter)"}},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"lzTxObj","nodeType":"MemberAccess","referencedDeclaration":4319,"src":"2870:23:12","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_lzTxObj_$4319_storage_ptr_$","typeString":"type(struct IStargateRouter.lzTxObj storage pointer)"}},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2870:193:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_lzTxObj_$4319_memory_ptr","typeString":"struct IStargateRouter.lzTxObj memory"}},{"arguments":[{"expression":{"id":2964,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"3094:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2965,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"receiver","nodeType":"MemberAccess","referencedDeclaration":2845,"src":"3094:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2962,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"3077:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3077:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3077:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2967,"name":"payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"3155:7:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_lzTxObj_$4319_memory_ptr","typeString":"struct IStargateRouter.lzTxObj memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_lzTxObj_$4319_memory_ptr","typeString":"struct IStargateRouter.lzTxObj memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2911,"name":"stargateRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"2507:14:12","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"swap","nodeType":"MemberAccess","referencedDeclaration":4341,"src":"2507:19:12","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint16_$_t_uint256_$_t_uint256_$_t_address_payable_$_t_uint256_$_t_uint256_$_t_struct$_lzTxObj_$4319_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint16,uint256,uint256,address payable,uint256,uint256,struct IStargateRouter.lzTxObj memory,bytes memory,bytes memory) payable external"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":2916,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2542:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}],"id":2915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2534:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2914,"name":"address","nodeType":"ElementaryTypeName","src":"2534:7:12","typeDescriptions":{}}},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2534:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2534:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2507:49:12","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint16_$_t_uint256_$_t_uint256_$_t_address_payable_$_t_uint256_$_t_uint256_$_t_struct$_lzTxObj_$4319_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$value","typeString":"function (uint16,uint256,uint256,address payable,uint256,uint256,struct IStargateRouter.lzTxObj memory,bytes memory,bytes memory) payable external"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2507:665:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2969,"nodeType":"ExpressionStatement","src":"2507:665:12"},{"expression":{"arguments":[{"hexValue":"307830303031","id":2973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3210:6:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x0001"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":2970,"name":"stargateWidget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"3183:14:12","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"}},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"partnerSwap","nodeType":"MemberAccess","referencedDeclaration":4367,"src":"3183:26:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes2_$returns$__$","typeString":"function (bytes2) external"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3183:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2975,"nodeType":"ExpressionStatement","src":"3183:34:12"},{"eventCall":{"arguments":[{"expression":{"id":2977,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"3255:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams memory"}},"id":2978,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"srcContext","nodeType":"MemberAccess","referencedDeclaration":2851,"src":"3255:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2976,"name":"StargateSushiXSwapSrc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2823,"src":"3233:21:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3233:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2980,"nodeType":"EmitStatement","src":"3228:45:12"}]},"documentation":{"id":2875,"nodeType":"StructuredDocumentation","src":"1474:628:12","text":"@notice Bridges the token to dst chain using Stargate Router\n @dev It is hardcoded to use all the contract balance. Only call this as the last step.\n The refund address for extra fees sent it msg.sender.\n @param params required by the Stargate, can be found at StargateTeleportParams struct.\n @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\n @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\n @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments."},"id":2982,"implemented":true,"kind":"function","modifiers":[],"name":"_stargateTeleport","nameLocation":"2116:17:12","nodeType":"FunctionDefinition","parameters":{"id":2888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2878,"mutability":"mutable","name":"params","nameLocation":"2173:6:12","nodeType":"VariableDeclaration","scope":2982,"src":"2143:36:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_memory_ptr","typeString":"struct StargateAdapter.StargateTeleportParams"},"typeName":{"id":2877,"nodeType":"UserDefinedTypeName","pathNode":{"id":2876,"name":"StargateTeleportParams","nodeType":"IdentifierPath","referencedDeclaration":2852,"src":"2143:22:12"},"referencedDeclaration":2852,"src":"2143:22:12","typeDescriptions":{"typeIdentifier":"t_struct$_StargateTeleportParams_$2852_storage_ptr","typeString":"struct StargateAdapter.StargateTeleportParams"}},"visibility":"internal"},{"constant":false,"id":2881,"mutability":"mutable","name":"actions","nameLocation":"2204:7:12","nodeType":"VariableDeclaration","scope":2982,"src":"2189:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":2879,"name":"uint8","nodeType":"ElementaryTypeName","src":"2189:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2880,"nodeType":"ArrayTypeName","src":"2189:7:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"},{"constant":false,"id":2884,"mutability":"mutable","name":"values","nameLocation":"2238:6:12","nodeType":"VariableDeclaration","scope":2982,"src":"2221:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2882,"name":"uint256","nodeType":"ElementaryTypeName","src":"2221:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2883,"nodeType":"ArrayTypeName","src":"2221:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2887,"mutability":"mutable","name":"datas","nameLocation":"2269:5:12","nodeType":"VariableDeclaration","scope":2982,"src":"2254:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2885,"name":"bytes","nodeType":"ElementaryTypeName","src":"2254:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2886,"nodeType":"ArrayTypeName","src":"2254:7:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"2133:147:12"},"returnParameters":{"id":2889,"nodeType":"ParameterList","parameters":[],"src":"2290:0:12"},"scope":3223,"src":"2107:1173:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3029,"nodeType":"Block","src":"4016:342:12","statements":[{"expression":{"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":3002,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2998,"src":"4027:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3003,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3000,"src":"4030:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3004,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"4026:6:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3007,"name":"_dstChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2985,"src":"4081:11:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":3008,"name":"_functionType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"4106:13:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"id":3011,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"4150:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3009,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"4133:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4133:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4133:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"id":3015,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2995,"src":"4185:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3013,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"4174:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"4174:10:12","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4174:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"id":3019,"name":"_gas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"4249:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3020,"name":"_dustAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"4271:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3023,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"4317:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3021,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"4300:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4300:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4300:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3017,"name":"IStargateRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"4208:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IStargateRouter_$4360_$","typeString":"type(contract IStargateRouter)"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"lzTxObj","nodeType":"MemberAccess","referencedDeclaration":4319,"src":"4208:23:12","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_lzTxObj_$4319_storage_ptr_$","typeString":"type(struct IStargateRouter.lzTxObj storage pointer)"}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4208:133:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_lzTxObj_$4319_memory_ptr","typeString":"struct IStargateRouter.lzTxObj memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_struct$_lzTxObj_$4319_memory_ptr","typeString":"struct IStargateRouter.lzTxObj memory"}],"expression":{"id":3005,"name":"stargateRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"4035:14:12","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"quoteLayerZeroFee","nodeType":"MemberAccess","referencedDeclaration":4359,"src":"4035:32:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint16_$_t_uint8_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_struct$_lzTxObj_$4319_memory_ptr_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint16,uint8,bytes memory,bytes memory,struct IStargateRouter.lzTxObj memory) view external returns (uint256,uint256)"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4035:316:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"4026:325:12","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3028,"nodeType":"ExpressionStatement","src":"4026:325:12"}]},"documentation":{"id":2983,"nodeType":"StructuredDocumentation","src":"3286:492:12","text":"@notice Get the fees to be paid in native token for the swap\n @param _dstChainId stargate dst chainId\n @param _functionType stargate Function type 1 for swap.\n See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\n @param _receiver sushiXswap on the dst chain\n @param _gas extra gas being sent\n @param _dustAmount dust amount to be received at the dst chain\n @param _payload payload being sent at the dst chain"},"functionSelector":"6ce4fe03","id":3030,"implemented":true,"kind":"function","modifiers":[],"name":"getFee","nameLocation":"3792:6:12","nodeType":"FunctionDefinition","parameters":{"id":2996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2985,"mutability":"mutable","name":"_dstChainId","nameLocation":"3815:11:12","nodeType":"VariableDeclaration","scope":3030,"src":"3808:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2984,"name":"uint16","nodeType":"ElementaryTypeName","src":"3808:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2987,"mutability":"mutable","name":"_functionType","nameLocation":"3842:13:12","nodeType":"VariableDeclaration","scope":3030,"src":"3836:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2986,"name":"uint8","nodeType":"ElementaryTypeName","src":"3836:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2989,"mutability":"mutable","name":"_receiver","nameLocation":"3873:9:12","nodeType":"VariableDeclaration","scope":3030,"src":"3865:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2988,"name":"address","nodeType":"ElementaryTypeName","src":"3865:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2991,"mutability":"mutable","name":"_gas","nameLocation":"3900:4:12","nodeType":"VariableDeclaration","scope":3030,"src":"3892:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2990,"name":"uint256","nodeType":"ElementaryTypeName","src":"3892:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2993,"mutability":"mutable","name":"_dustAmount","nameLocation":"3922:11:12","nodeType":"VariableDeclaration","scope":3030,"src":"3914:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2992,"name":"uint256","nodeType":"ElementaryTypeName","src":"3914:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2995,"mutability":"mutable","name":"_payload","nameLocation":"3956:8:12","nodeType":"VariableDeclaration","scope":3030,"src":"3943:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2994,"name":"bytes","nodeType":"ElementaryTypeName","src":"3943:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3798:172:12"},"returnParameters":{"id":3001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2998,"mutability":"mutable","name":"a","nameLocation":"4002:1:12","nodeType":"VariableDeclaration","scope":3030,"src":"3994:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2997,"name":"uint256","nodeType":"ElementaryTypeName","src":"3994:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3000,"mutability":"mutable","name":"b","nameLocation":"4013:1:12","nodeType":"VariableDeclaration","scope":3030,"src":"4005:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2999,"name":"uint256","nodeType":"ElementaryTypeName","src":"4005:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3993:22:12"},"scope":3223,"src":"3783:575:12","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4309],"body":{"id":3221,"nodeType":"Block","src":"4737:1585:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3047,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"4751:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4751:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":3051,"name":"stargateRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"4773:14:12","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}],"id":3050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4765:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3049,"name":"address","nodeType":"ElementaryTypeName","src":"4765:7:12","typeDescriptions":{}}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4765:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4751:37:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3057,"nodeType":"IfStatement","src":"4747:69:12","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3054,"name":"NotStargateRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"4797:17:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4797:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3056,"nodeType":"RevertStatement","src":"4790:26:12"}},{"assignments":[3059,3062,3065,3068,3070],"declarations":[{"constant":false,"id":3059,"mutability":"mutable","name":"to","nameLocation":"4849:2:12","nodeType":"VariableDeclaration","scope":3221,"src":"4841:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3058,"name":"address","nodeType":"ElementaryTypeName","src":"4841:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3062,"mutability":"mutable","name":"actions","nameLocation":"4880:7:12","nodeType":"VariableDeclaration","scope":3221,"src":"4865:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":3060,"name":"uint8","nodeType":"ElementaryTypeName","src":"4865:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3061,"nodeType":"ArrayTypeName","src":"4865:7:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"},{"constant":false,"id":3065,"mutability":"mutable","name":"values","nameLocation":"4918:6:12","nodeType":"VariableDeclaration","scope":3221,"src":"4901:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3063,"name":"uint256","nodeType":"ElementaryTypeName","src":"4901:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3064,"nodeType":"ArrayTypeName","src":"4901:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3068,"mutability":"mutable","name":"datas","nameLocation":"4953:5:12","nodeType":"VariableDeclaration","scope":3221,"src":"4938:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":3066,"name":"bytes","nodeType":"ElementaryTypeName","src":"4938:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":3067,"nodeType":"ArrayTypeName","src":"4938:7:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":3070,"mutability":"mutable","name":"srcContext","nameLocation":"4980:10:12","nodeType":"VariableDeclaration","scope":3221,"src":"4972:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3069,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4972:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3089,"initialValue":{"arguments":[{"id":3073,"name":"payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"5014:7:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5024:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3074,"name":"address","nodeType":"ElementaryTypeName","src":"5024:7:12","typeDescriptions":{}}},{"baseExpression":{"id":3077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5033:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3076,"name":"uint8","nodeType":"ElementaryTypeName","src":"5033:5:12","typeDescriptions":{}}},"id":3078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"5033:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint8_$dyn_memory_ptr_$","typeString":"type(uint8[] memory)"}},{"baseExpression":{"id":3080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5042:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3079,"name":"uint256","nodeType":"ElementaryTypeName","src":"5042:7:12","typeDescriptions":{}}},"id":3081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"5042:9:12","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"type(uint256[] memory)"}},{"baseExpression":{"id":3083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5053:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3082,"name":"bytes","nodeType":"ElementaryTypeName","src":"5053:5:12","typeDescriptions":{}}},"id":3084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"5053:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"type(bytes memory[] memory)"}},{"id":3086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5062:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3085,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5062:7:12","typeDescriptions":{}}}],"id":3087,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5023:47:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_array$_t_uint8_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$_t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_$_t_type$_t_bytes32_$_$","typeString":"tuple(type(address),type(uint8[] memory),type(uint256[] memory),type(bytes memory[] memory),type(bytes32))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_array$_t_uint8_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$_t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_$_t_type$_t_bytes32_$_$","typeString":"tuple(type(address),type(uint8[] memory),type(uint256[] memory),type(bytes memory[] memory),type(bytes32))"}],"expression":{"id":3071,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"5003:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"5003:10:12","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5003:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_array$_t_uint8_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_bytes32_$","typeString":"tuple(address payable,uint8[] memory,uint256[] memory,bytes memory[] memory,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"4827:244:12"},{"assignments":[3091],"declarations":[{"constant":false,"id":3091,"mutability":"mutable","name":"reserveGas","nameLocation":"5090:10:12","nodeType":"VariableDeclaration","scope":3221,"src":"5082:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3090,"name":"uint256","nodeType":"ElementaryTypeName","src":"5082:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3093,"initialValue":{"hexValue":"313030303030","id":3092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5103:6:12","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},"nodeType":"VariableDeclarationStatement","src":"5082:27:12"},{"assignments":[3095],"declarations":[{"constant":false,"id":3095,"mutability":"mutable","name":"failed","nameLocation":"5124:6:12","nodeType":"VariableDeclaration","scope":3221,"src":"5119:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3094,"name":"bool","nodeType":"ElementaryTypeName","src":"5119:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3096,"nodeType":"VariableDeclarationStatement","src":"5119:11:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3097,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967289,"src":"5144:7:12","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5144:9:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3099,"name":"reserveGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"5156:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5144:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3146,"nodeType":"IfStatement","src":"5141:439:12","trueBody":{"id":3145,"nodeType":"Block","src":"5168:412:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3101,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"5185:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3102,"name":"SGETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"5195:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5185:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3113,"nodeType":"IfStatement","src":"5182:94:12","trueBody":{"id":3112,"nodeType":"Block","src":"5202:74:12","statements":[{"expression":{"arguments":[{"id":3108,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"5248:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3109,"name":"amountLD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"5252:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3105,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"5227:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3104,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"5220:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5220:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":3107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":761,"src":"5220:27:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$667_$","typeString":"function (contract IERC20,address,uint256)"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5220:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3111,"nodeType":"ExpressionStatement","src":"5220:41:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3116,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"5383:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}],"id":3115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5375:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3114,"name":"address","nodeType":"ElementaryTypeName","src":"5375:7:12","typeDescriptions":{}}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5375:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5375:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5399:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5375:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":"@dev transfer any native token received as dust to the to address","id":3134,"nodeType":"IfStatement","src":"5371:90:12","trueBody":{"expression":{"arguments":[{"hexValue":"","id":3131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5458:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3121,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"5418:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5418:7:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"components":[{"expression":{"arguments":[{"id":3126,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"5442:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}],"id":3125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5434:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3124,"name":"address","nodeType":"ElementaryTypeName","src":"5434:7:12","typeDescriptions":{}}},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5434:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5434:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3129,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5433:23:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5418:39:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5418:43:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"id":3133,"nodeType":"ExpressionStatement","src":"5418:43:12"}},{"expression":{"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3135,"name":"failed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"5476:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5485:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5476:13:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3138,"nodeType":"ExpressionStatement","src":"5476:13:12"},{"eventCall":{"arguments":[{"id":3140,"name":"srcContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"5530:10:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3141,"name":"failed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"5542:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3139,"name":"StargateSushiXSwapDst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"5508:21:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bool_$returns$__$","typeString":"function (bytes32,bool)"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5508:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3143,"nodeType":"EmitStatement","src":"5503:46:12"},{"functionReturnParameters":3046,"id":3144,"nodeType":"Return","src":"5563:7:12"}]}},{"assignments":[3148],"declarations":[{"constant":false,"id":3148,"mutability":"mutable","name":"limit","nameLocation":"5628:5:12","nodeType":"VariableDeclaration","scope":3221,"src":"5620:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3147,"name":"uint256","nodeType":"ElementaryTypeName","src":"5620:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3153,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3149,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967289,"src":"5636:7:12","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5636:9:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3151,"name":"reserveGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"5648:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5636:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5620:38:12"},{"clauses":[{"block":{"id":3170,"nodeType":"Block","src":"5914:2:12","statements":[]},"errorName":"","id":3171,"nodeType":"TryCatchClause","src":"5914:2:12"},{"block":{"id":3192,"nodeType":"Block","src":"5938:145:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3175,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"5955:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3176,"name":"SGETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"5965:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5955:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3187,"nodeType":"IfStatement","src":"5952:94:12","trueBody":{"id":3186,"nodeType":"Block","src":"5972:74:12","statements":[{"expression":{"arguments":[{"id":3182,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"6018:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3183,"name":"amountLD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"6022:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3179,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"5997:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3178,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"5990:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5990:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":761,"src":"5990:27:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$667_$","typeString":"function (contract IERC20,address,uint256)"}},"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5990:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3185,"nodeType":"ExpressionStatement","src":"5990:41:12"}]}},{"expression":{"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3188,"name":"failed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"6059:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6068:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6059:13:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3191,"nodeType":"ExpressionStatement","src":"6059:13:12"}]},"errorName":"","id":3193,"nodeType":"TryCatchClause","parameters":{"id":3174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3193,"src":"5924:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3172,"name":"bytes","nodeType":"ElementaryTypeName","src":"5924:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5923:14:12"},"src":"5917:166:12"}],"documentation":"@dev incase the actions fail, transfer bridge token to the to address","externalCall":{"arguments":[{"id":3166,"name":"actions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"5837:7:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},{"id":3167,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"5862:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3168,"name":"datas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"5886:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}],"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3159,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"5795:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}],"id":3158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5787:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3157,"name":"address","nodeType":"ElementaryTypeName","src":"5787:7:12","typeDescriptions":{}}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5787:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5779:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3155,"name":"address","nodeType":"ElementaryTypeName","src":"5779:8:12","stateMutability":"payable","typeDescriptions":{}}},"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5779:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3154,"name":"ISushiXSwap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"5767:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISushiXSwap_$4264_$","typeString":"type(contract ISushiXSwap)"}},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5767:35:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISushiXSwap_$4264","typeString":"contract ISushiXSwap"}},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"cook","nodeType":"MemberAccess","referencedDeclaration":4263,"src":"5767:40:12","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_array$_t_uint8_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (uint8[] memory,uint256[] memory,bytes memory[] memory) payable external"}},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["gas"],"nodeType":"FunctionCallOptions","options":[{"id":3164,"name":"limit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"5813:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5767:52:12","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_array$_t_uint8_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$returns$__$gas","typeString":"function (uint8[] memory,uint256[] memory,bytes memory[] memory) payable external"}},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5767:138:12","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3194,"nodeType":"TryStatement","src":"5751:332:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3197,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"6183:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}],"id":3196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6175:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3195,"name":"address","nodeType":"ElementaryTypeName","src":"6175:7:12","typeDescriptions":{}}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6175:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"6175:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6199:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6175:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":"@dev transfer any native token received as dust to the to address","id":3215,"nodeType":"IfStatement","src":"6171:86:12","trueBody":{"expression":{"arguments":[{"hexValue":"","id":3212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6254:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3202,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"6214:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"6214:7:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"components":[{"expression":{"arguments":[{"id":3207,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"6238:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_StargateAdapter_$3223","typeString":"contract StargateAdapter"}],"id":3206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6230:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3205,"name":"address","nodeType":"ElementaryTypeName","src":"6230:7:12","typeDescriptions":{}}},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6230:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"6230:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3210,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6229:23:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"6214:39:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6214:43:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"id":3214,"nodeType":"ExpressionStatement","src":"6214:43:12"}},{"eventCall":{"arguments":[{"id":3217,"name":"srcContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"6295:10:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3218,"name":"failed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"6307:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3216,"name":"StargateSushiXSwapDst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"6273:21:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bool_$returns$__$","typeString":"function (bytes32,bool)"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6273:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3220,"nodeType":"EmitStatement","src":"6268:46:12"}]},"documentation":{"id":3031,"nodeType":"StructuredDocumentation","src":"4364:190:12","text":"@notice Receiver function on dst chain\n @param _token bridge token received\n @param amountLD amount received\n @param payload ABI-Encoded data received from src chain"},"functionSelector":"ab8236f3","id":3222,"implemented":true,"kind":"function","modifiers":[],"name":"sgReceive","nameLocation":"4568:9:12","nodeType":"FunctionDefinition","overrides":{"id":3045,"nodeType":"OverrideSpecifier","overrides":[],"src":"4728:8:12"},"parameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3222,"src":"4587:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3032,"name":"uint16","nodeType":"ElementaryTypeName","src":"4587:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3222,"src":"4603:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3034,"name":"bytes","nodeType":"ElementaryTypeName","src":"4603:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3222,"src":"4625:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3036,"name":"uint256","nodeType":"ElementaryTypeName","src":"4625:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3039,"mutability":"mutable","name":"_token","nameLocation":"4650:6:12","nodeType":"VariableDeclaration","scope":3222,"src":"4642:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3038,"name":"address","nodeType":"ElementaryTypeName","src":"4642:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3041,"mutability":"mutable","name":"amountLD","nameLocation":"4674:8:12","nodeType":"VariableDeclaration","scope":3222,"src":"4666:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3040,"name":"uint256","nodeType":"ElementaryTypeName","src":"4666:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3043,"mutability":"mutable","name":"payload","nameLocation":"4705:7:12","nodeType":"VariableDeclaration","scope":3222,"src":"4692:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3042,"name":"bytes","nodeType":"ElementaryTypeName","src":"4692:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4577:141:12"},"returnParameters":{"id":3046,"nodeType":"ParameterList","parameters":[],"src":"4737:0:12"},"scope":3223,"src":"4559:1763:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3224,"src":"210:6114:12","usedErrors":[2817,2819]}],"src":"46:6278:12"},"id":12},"contracts/adapters/SushiLegacyAdapter.sol":{"ast":{"absolutePath":"contracts/adapters/SushiLegacyAdapter.sol","exportedSymbols":{"Address":[1434],"IBentoBoxMinimal":[4138],"IERC20":[667],"IERC20Permit":[728],"IImmutableState":[4244],"IStargateRouter":[4360],"IStargateWidget":[4368],"IUniswapV2Pair":[2010],"ImmutableState":[4033],"SafeERC20":[1104],"SafeMathUniswap":[4626],"SushiLegacyAdapter":[3440],"UniswapV2Library":[5112]},"id":3441,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3225,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":3226,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3441,"sourceUnit":1105,"src":"71:65:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/libraries/UniswapV2Library.sol","file":"../libraries/UniswapV2Library.sol","id":3227,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3441,"sourceUnit":5113,"src":"137:43:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/base/ImmutableState.sol","file":"../base/ImmutableState.sol","id":3228,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3441,"sourceUnit":4034,"src":"181:36:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3230,"name":"ImmutableState","nodeType":"IdentifierPath","referencedDeclaration":4033,"src":"364:14:13"},"id":3231,"nodeType":"InheritanceSpecifier","src":"364:14:13"}],"canonicalName":"SushiLegacyAdapter","contractDependencies":[],"contractKind":"contract","documentation":{"id":3229,"nodeType":"StructuredDocumentation","src":"219:105:13","text":"@title SushiLegacyAdapter\n @notice Adapter for functions used to swap using Sushiswap Legacy AMM."},"fullyImplemented":false,"id":3440,"linearizedBaseContracts":[3440,4033,4244],"name":"SushiLegacyAdapter","nameLocation":"342:18:13","nodeType":"ContractDefinition","nodes":[{"id":3235,"libraryName":{"id":3232,"name":"SafeERC20","nodeType":"IdentifierPath","referencedDeclaration":1104,"src":"391:9:13"},"nodeType":"UsingForDirective","src":"385:27:13","typeName":{"id":3234,"nodeType":"UserDefinedTypeName","pathNode":{"id":3233,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"405:6:13"},"referencedDeclaration":667,"src":"405:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}}},{"body":{"id":3319,"nodeType":"Block","src":"628:731:13","statements":[{"assignments":[3255],"declarations":[{"constant":false,"id":3255,"mutability":"mutable","name":"amounts","nameLocation":"655:7:13","nodeType":"VariableDeclaration","scope":3319,"src":"638:24:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3253,"name":"uint256","nodeType":"ElementaryTypeName","src":"638:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3254,"nodeType":"ArrayTypeName","src":"638:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3263,"initialValue":{"arguments":[{"id":3258,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"709:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3259,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"730:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3260,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"752:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":3261,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"770:12:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3256,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"665:16:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$5112_$","typeString":"type(library UniswapV2Library)"}},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAmountsOut","nodeType":"MemberAccess","referencedDeclaration":5023,"src":"665:30:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes32_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,address[] memory,bytes32) view returns (uint256[] memory)"}},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"665:127:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"638:154:13"},{"expression":{"id":3271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3264,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"802:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3265,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"814:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3270,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3266,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"822:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"822:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"839:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"822:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"814:27:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"802:39:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3272,"nodeType":"ExpressionStatement","src":"802:39:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3274,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"860:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3275,"name":"amountOutMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3239,"src":"873:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"860:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e73756666696369656e742d616d6f756e742d6f7574","id":3277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"887:25:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_f9bba043a83225eb6b59e03a620d9be35c0c01b2645fd69986af78bab24b3d55","typeString":"literal_string \"insufficient-amount-out\""},"value":"insufficient-amount-out"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f9bba043a83225eb6b59e03a620d9be35c0c01b2645fd69986af78bab24b3d55","typeString":"literal_string \"insufficient-amount-out\""}],"id":3273,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"852:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"852:61:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3279,"nodeType":"ExpressionStatement","src":"852:61:13"},{"condition":{"id":3280,"name":"sendTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"1001:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":"@dev force sends token to the first pair if not already sent","id":3312,"nodeType":"IfStatement","src":"997:322:13","trueBody":{"id":3311,"nodeType":"Block","src":"1013:306:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":3289,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"1119:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3290,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"1148:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3292,"indexExpression":{"hexValue":"30","id":3291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1153:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1148:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3293,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"1177:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3295,"indexExpression":{"hexValue":"31","id":3294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1177:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3296,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"1206:12:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3287,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"1073:16:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$5112_$","typeString":"type(library UniswapV2Library)"}},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"pairFor","nodeType":"MemberAccess","referencedDeclaration":4727,"src":"1073:24:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_address_$","typeString":"function (address,address,address,bytes32) pure returns (address)"}},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1073:163:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"id":3306,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"1288:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_SushiLegacyAdapter_$3440","typeString":"contract SushiLegacyAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiLegacyAdapter_$3440","typeString":"contract SushiLegacyAdapter"}],"id":3305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1280:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3304,"name":"address","nodeType":"ElementaryTypeName","src":"1280:7:13","typeDescriptions":{}}},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1280:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"baseExpression":{"id":3299,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"1261:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3301,"indexExpression":{"hexValue":"30","id":3300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1266:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1261:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3298,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1254:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1254:15:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":624,"src":"1254:25:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1254:40:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"baseExpression":{"id":3282,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"1034:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3284,"indexExpression":{"hexValue":"30","id":3283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1039:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1034:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3281,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1027:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1027:15:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":761,"src":"1027:28:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$667_$","typeString":"function (contract IERC20,address,uint256)"}},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1027:281:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3310,"nodeType":"ExpressionStatement","src":"1027:281:13"}]}},{"expression":{"arguments":[{"id":3314,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"1334:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3315,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"1343:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":3316,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"1349:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3313,"name":"_swap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3439,"src":"1328:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$returns$__$","typeString":"function (uint256[] memory,address[] memory,address)"}},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1328:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3318,"nodeType":"ExpressionStatement","src":"1328:24:13"}]},"id":3320,"implemented":true,"kind":"function","modifiers":[],"name":"_swapExactTokensForTokens","nameLocation":"427:25:13","nodeType":"FunctionDefinition","parameters":{"id":3247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3237,"mutability":"mutable","name":"amountIn","nameLocation":"470:8:13","nodeType":"VariableDeclaration","scope":3320,"src":"462:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3236,"name":"uint256","nodeType":"ElementaryTypeName","src":"462:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3239,"mutability":"mutable","name":"amountOutMin","nameLocation":"496:12:13","nodeType":"VariableDeclaration","scope":3320,"src":"488:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3238,"name":"uint256","nodeType":"ElementaryTypeName","src":"488:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3242,"mutability":"mutable","name":"path","nameLocation":"535:4:13","nodeType":"VariableDeclaration","scope":3320,"src":"518:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3240,"name":"address","nodeType":"ElementaryTypeName","src":"518:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3241,"nodeType":"ArrayTypeName","src":"518:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3244,"mutability":"mutable","name":"to","nameLocation":"557:2:13","nodeType":"VariableDeclaration","scope":3320,"src":"549:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3243,"name":"address","nodeType":"ElementaryTypeName","src":"549:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3246,"mutability":"mutable","name":"sendTokens","nameLocation":"574:10:13","nodeType":"VariableDeclaration","scope":3320,"src":"569:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3245,"name":"bool","nodeType":"ElementaryTypeName","src":"569:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"452:138:13"},"returnParameters":{"id":3250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3249,"mutability":"mutable","name":"amountOut","nameLocation":"617:9:13","nodeType":"VariableDeclaration","scope":3320,"src":"609:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3248,"name":"uint256","nodeType":"ElementaryTypeName","src":"609:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"608:19:13"},"scope":3440,"src":"418:941:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3438,"nodeType":"Block","src":"1574:842:13","statements":[{"body":{"id":3436,"nodeType":"Block","src":"1626:784:13","statements":[{"assignments":[3345,3347],"declarations":[{"constant":false,"id":3345,"mutability":"mutable","name":"input","nameLocation":"1649:5:13","nodeType":"VariableDeclaration","scope":3436,"src":"1641:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3344,"name":"address","nodeType":"ElementaryTypeName","src":"1641:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3347,"mutability":"mutable","name":"output","nameLocation":"1664:6:13","nodeType":"VariableDeclaration","scope":3436,"src":"1656:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3346,"name":"address","nodeType":"ElementaryTypeName","src":"1656:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3357,"initialValue":{"components":[{"baseExpression":{"id":3348,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"1675:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3350,"indexExpression":{"id":3349,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"1680:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1675:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3351,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"1684:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3355,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3352,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"1689:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1693:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1689:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1684:11:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3356,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:22:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"1640:56:13"},{"assignments":[3359,null],"declarations":[{"constant":false,"id":3359,"mutability":"mutable","name":"token0","nameLocation":"1719:6:13","nodeType":"VariableDeclaration","scope":3436,"src":"1711:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3358,"name":"address","nodeType":"ElementaryTypeName","src":"1711:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null],"id":3365,"initialValue":{"arguments":[{"id":3362,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"1759:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3363,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"1766:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3360,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"1731:16:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$5112_$","typeString":"type(library UniswapV2Library)"}},"id":3361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sortTokens","nodeType":"MemberAccess","referencedDeclaration":4677,"src":"1731:27:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$returns$_t_address_$_t_address_$","typeString":"function (address,address) pure returns (address,address)"}},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1731:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"1710:63:13"},{"assignments":[3367],"declarations":[{"constant":false,"id":3367,"mutability":"mutable","name":"amountOut","nameLocation":"1795:9:13","nodeType":"VariableDeclaration","scope":3436,"src":"1787:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3366,"name":"uint256","nodeType":"ElementaryTypeName","src":"1787:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3373,"initialValue":{"baseExpression":{"id":3368,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"1807:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3372,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3369,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"1815:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1819:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1815:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1807:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1787:34:13"},{"assignments":[3375,3377],"declarations":[{"constant":false,"id":3375,"mutability":"mutable","name":"amount0Out","nameLocation":"1844:10:13","nodeType":"VariableDeclaration","scope":3436,"src":"1836:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3374,"name":"uint256","nodeType":"ElementaryTypeName","src":"1836:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3377,"mutability":"mutable","name":"amount1Out","nameLocation":"1864:10:13","nodeType":"VariableDeclaration","scope":3436,"src":"1856:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3376,"name":"uint256","nodeType":"ElementaryTypeName","src":"1856:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3394,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3378,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"1878:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3379,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"1887:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1878:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":3387,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"1955:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1974:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3389,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1966:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3388,"name":"uint256","nodeType":"ElementaryTypeName","src":"1966:7:13","typeDescriptions":{}}},"id":3391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1966:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3392,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1954:23:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1878:99:13","trueExpression":{"components":[{"arguments":[{"hexValue":"30","id":3383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1921:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1913:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3381,"name":"uint256","nodeType":"ElementaryTypeName","src":"1913:7:13","typeDescriptions":{}}},"id":3384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1913:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3385,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"1925:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3386,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1912:23:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"1835:142:13"},{"assignments":[3396],"declarations":[{"constant":false,"id":3396,"mutability":"mutable","name":"to","nameLocation":"1999:2:13","nodeType":"VariableDeclaration","scope":3436,"src":"1991:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3395,"name":"address","nodeType":"ElementaryTypeName","src":"1991:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3416,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3397,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"2004:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3398,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"2008:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2008:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":3400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2022:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2008:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2004:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3414,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"2227:3:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2004:226:13","trueExpression":{"arguments":[{"id":3405,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"2088:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3406,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"2117:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3407,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"2145:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3411,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3408,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"2150:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2154:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2150:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2145:11:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3412,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"2178:12:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3403,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"2042:16:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$5112_$","typeString":"type(library UniswapV2Library)"}},"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"pairFor","nodeType":"MemberAccess","referencedDeclaration":4727,"src":"2042:24:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_address_$","typeString":"function (address,address,address,bytes32) pure returns (address)"}},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2042:166:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1991:239:13"},{"expression":{"arguments":[{"id":3427,"name":"amount0Out","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"2358:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3428,"name":"amount1Out","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"2370:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3429,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"2382:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2396:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2386:9:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3430,"name":"bytes","nodeType":"ElementaryTypeName","src":"2390:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2386:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"arguments":[{"id":3420,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"2301:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3421,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"2310:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3422,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"2317:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3423,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"2325:12:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3418,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5112,"src":"2276:16:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$5112_$","typeString":"type(library UniswapV2Library)"}},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"pairFor","nodeType":"MemberAccess","referencedDeclaration":4727,"src":"2276:24:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_address_$","typeString":"function (address,address,address,bytes32) pure returns (address)"}},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2276:62:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3417,"name":"IUniswapV2Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"2244:14:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV2Pair_$2010_$","typeString":"type(contract IUniswapV2Pair)"}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2244:108:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$2010","typeString":"contract IUniswapV2Pair"}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"swap","nodeType":"MemberAccess","referencedDeclaration":1994,"src":"2244:113:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint256,uint256,address,bytes memory) external"}},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2244:155:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3435,"nodeType":"ExpressionStatement","src":"2244:155:13"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3335,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"1600:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3336,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3327,"src":"1604:4:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1604:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1618:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1604:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1600:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3437,"initializationExpression":{"assignments":[3333],"declarations":[{"constant":false,"id":3333,"mutability":"mutable","name":"i","nameLocation":"1597:1:13","nodeType":"VariableDeclaration","scope":3437,"src":"1589:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3332,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3334,"nodeType":"VariableDeclarationStatement","src":"1589:9:13"},"loopExpression":{"expression":{"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1621:3:13","subExpression":{"id":3341,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3333,"src":"1621:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3343,"nodeType":"ExpressionStatement","src":"1621:3:13"},"nodeType":"ForStatement","src":"1584:826:13"}]},"documentation":{"id":3321,"nodeType":"StructuredDocumentation","src":"1365:80:13","text":"@dev requires the initial amount to have already been sent to the first pair"},"id":3439,"implemented":true,"kind":"function","modifiers":[],"name":"_swap","nameLocation":"1459:5:13","nodeType":"FunctionDefinition","parameters":{"id":3330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3324,"mutability":"mutable","name":"amounts","nameLocation":"1491:7:13","nodeType":"VariableDeclaration","scope":3439,"src":"1474:24:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3322,"name":"uint256","nodeType":"ElementaryTypeName","src":"1474:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3323,"nodeType":"ArrayTypeName","src":"1474:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3327,"mutability":"mutable","name":"path","nameLocation":"1525:4:13","nodeType":"VariableDeclaration","scope":3439,"src":"1508:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3325,"name":"address","nodeType":"ElementaryTypeName","src":"1508:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3326,"nodeType":"ArrayTypeName","src":"1508:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3329,"mutability":"mutable","name":"_to","nameLocation":"1547:3:13","nodeType":"VariableDeclaration","scope":3439,"src":"1539:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3328,"name":"address","nodeType":"ElementaryTypeName","src":"1539:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1464:92:13"},"returnParameters":{"id":3331,"nodeType":"ParameterList","parameters":[],"src":"1574:0:13"},"scope":3440,"src":"1450:966:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3441,"src":"324:2094:13","usedErrors":[]}],"src":"46:2372:13"},"id":13},"contracts/adapters/TokenAdapter.sol":{"ast":{"absolutePath":"contracts/adapters/TokenAdapter.sol","exportedSymbols":{"Address":[1434],"IERC20":[667],"IERC20Permit":[728],"IWETH":[4284],"SafeERC20":[1104],"TokenAdapter":[3566]},"id":3567,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3442,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:14"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":3443,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3567,"sourceUnit":1105,"src":"71:65:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IWETH.sol","file":"../interfaces/IWETH.sol","id":3444,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3567,"sourceUnit":4285,"src":"137:33:14","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"TokenAdapter","contractDependencies":[],"contractKind":"contract","documentation":{"id":3445,"nodeType":"StructuredDocumentation","src":"172:69:14","text":"@title TokenAdapter\n @notice Adapter for all token operations"},"fullyImplemented":true,"id":3566,"linearizedBaseContracts":[3566],"name":"TokenAdapter","nameLocation":"259:12:14","nodeType":"ContractDefinition","nodes":[{"id":3449,"libraryName":{"id":3446,"name":"SafeERC20","nodeType":"IdentifierPath","referencedDeclaration":1104,"src":"284:9:14"},"nodeType":"UsingForDirective","src":"278:27:14","typeName":{"id":3448,"nodeType":"UserDefinedTypeName","pathNode":{"id":3447,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"298:6:14"},"referencedDeclaration":667,"src":"298:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}}},{"body":{"id":3487,"nodeType":"Block","src":"587:164:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3462,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"609:5:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}],"id":3461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"601:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3460,"name":"address","nodeType":"ElementaryTypeName","src":"601:7:14","typeDescriptions":{}}},"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"601:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"627:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3465,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"619:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3464,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:14","typeDescriptions":{}}},"id":3467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"619:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"601:28:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3485,"nodeType":"Block","src":"692:53:14","statements":[{"expression":{"arguments":[{"id":3482,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"727:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3479,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"714:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"706:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3477,"name":"address","nodeType":"ElementaryTypeName","src":"706:8:14","stateMutability":"payable","typeDescriptions":{}}},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"706:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"706:20:14","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"706:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3484,"nodeType":"ExpressionStatement","src":"706:28:14"}]},"id":3486,"nodeType":"IfStatement","src":"597:148:14","trueBody":{"id":3476,"nodeType":"Block","src":"631:55:14","statements":[{"expression":{"arguments":[{"id":3472,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"664:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3473,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3457,"src":"668:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3469,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"645:5:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":3471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":761,"src":"645:18:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$667_$","typeString":"function (contract IERC20,address,uint256)"}},"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"645:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3475,"nodeType":"ExpressionStatement","src":"645:30:14"}]}}]},"documentation":{"id":3450,"nodeType":"StructuredDocumentation","src":"311:165:14","text":"@notice Function to transfer tokens from address(this)\n @param token token to transfer\n @param to receiver\n @param amount amount to transfer"},"id":3488,"implemented":true,"kind":"function","modifiers":[],"name":"_transferTokens","nameLocation":"490:15:14","nodeType":"FunctionDefinition","parameters":{"id":3458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3453,"mutability":"mutable","name":"token","nameLocation":"522:5:14","nodeType":"VariableDeclaration","scope":3488,"src":"515:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":3452,"nodeType":"UserDefinedTypeName","pathNode":{"id":3451,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"515:6:14"},"referencedDeclaration":667,"src":"515:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3455,"mutability":"mutable","name":"to","nameLocation":"545:2:14","nodeType":"VariableDeclaration","scope":3488,"src":"537:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3454,"name":"address","nodeType":"ElementaryTypeName","src":"537:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3457,"mutability":"mutable","name":"amount","nameLocation":"565:6:14","nodeType":"VariableDeclaration","scope":3488,"src":"557:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3456,"name":"uint256","nodeType":"ElementaryTypeName","src":"557:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"505:72:14"},"returnParameters":{"id":3459,"nodeType":"ParameterList","parameters":[],"src":"587:0:14"},"scope":3566,"src":"481:270:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3508,"nodeType":"Block","src":"1045:63:14","statements":[{"expression":{"arguments":[{"expression":{"id":3502,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1078:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1078:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3504,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3494,"src":"1090:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3505,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"1094:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3499,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"1055:5:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":788,"src":"1055:22:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$667_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":3506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1055:46:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3507,"nodeType":"ExpressionStatement","src":"1055:46:14"}]},"documentation":{"id":3489,"nodeType":"StructuredDocumentation","src":"757:174:14","text":"@notice Function to transfer tokens from user to the to address\n @param token token to transfer\n @param to receiver\n @param amount amount to transfer"},"id":3509,"implemented":true,"kind":"function","modifiers":[],"name":"_transferFromToken","nameLocation":"945:18:14","nodeType":"FunctionDefinition","parameters":{"id":3497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3492,"mutability":"mutable","name":"token","nameLocation":"980:5:14","nodeType":"VariableDeclaration","scope":3509,"src":"973:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},"typeName":{"id":3491,"nodeType":"UserDefinedTypeName","pathNode":{"id":3490,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":667,"src":"973:6:14"},"referencedDeclaration":667,"src":"973:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3494,"mutability":"mutable","name":"to","nameLocation":"1003:2:14","nodeType":"VariableDeclaration","scope":3509,"src":"995:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3493,"name":"address","nodeType":"ElementaryTypeName","src":"995:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3496,"mutability":"mutable","name":"amount","nameLocation":"1023:6:14","nodeType":"VariableDeclaration","scope":3509,"src":"1015:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3495,"name":"uint256","nodeType":"ElementaryTypeName","src":"1015:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"963:72:14"},"returnParameters":{"id":3498,"nodeType":"ParameterList","parameters":[],"src":"1045:0:14"},"scope":3566,"src":"936:172:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3547,"nodeType":"Block","src":"1326:150:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3527,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"1390:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_TokenAdapter_$3566","typeString":"contract TokenAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenAdapter_$3566","typeString":"contract TokenAdapter"}],"id":3526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1382:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3525,"name":"address","nodeType":"ElementaryTypeName","src":"1382:7:14","typeDescriptions":{}}},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1382:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":3522,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"1365:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3521,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1358:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1358:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":624,"src":"1358:23:14","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1358:38:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3518,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"1342:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3517,"name":"IWETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"1336:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWETH_$4284_$","typeString":"type(contract IWETH)"}},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1336:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$4284","typeString":"contract IWETH"}},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":4283,"src":"1336:21:14","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1336:61:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3531,"nodeType":"ExpressionStatement","src":"1336:61:14"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":3536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1438:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1430:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3534,"name":"address","nodeType":"ElementaryTypeName","src":"1430:7:14","typeDescriptions":{}}},"id":3537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1430:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3533,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1423:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1423:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"id":3539,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"1443:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":3542,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"1455:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_TokenAdapter_$3566","typeString":"contract TokenAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenAdapter_$3566","typeString":"contract TokenAdapter"}],"id":3541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1447:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3540,"name":"address","nodeType":"ElementaryTypeName","src":"1447:7:14","typeDescriptions":{}}},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1447:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"1447:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3532,"name":"_transferTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3488,"src":"1407:15:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1407:62:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3546,"nodeType":"ExpressionStatement","src":"1407:62:14"}]},"documentation":{"id":3510,"nodeType":"StructuredDocumentation","src":"1114:146:14","text":"@notice Unwraps the wrapper native into native and sends it to the receiver.\n @param token token to transfer\n @param to receiver"},"id":3548,"implemented":true,"kind":"function","modifiers":[],"name":"_unwrapTransfer","nameLocation":"1274:15:14","nodeType":"FunctionDefinition","parameters":{"id":3515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3512,"mutability":"mutable","name":"token","nameLocation":"1298:5:14","nodeType":"VariableDeclaration","scope":3548,"src":"1290:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3511,"name":"address","nodeType":"ElementaryTypeName","src":"1290:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3514,"mutability":"mutable","name":"to","nameLocation":"1313:2:14","nodeType":"VariableDeclaration","scope":3548,"src":"1305:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3513,"name":"address","nodeType":"ElementaryTypeName","src":"1305:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1289:27:14"},"returnParameters":{"id":3516,"nodeType":"ParameterList","parameters":[],"src":"1326:0:14"},"scope":3566,"src":"1265:211:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3564,"nodeType":"Block","src":"1667:54:14","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3557,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"1683:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3556,"name":"IWETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"1677:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWETH_$4284_$","typeString":"type(contract IWETH)"}},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1677:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$4284","typeString":"contract IWETH"}},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":4269,"src":"1677:20:14","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$","typeString":"function () payable external"}},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3560,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"1705:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1677:35:14","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$value","typeString":"function () payable external"}},"id":3562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1677:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3563,"nodeType":"ExpressionStatement","src":"1677:37:14"}]},"documentation":{"id":3549,"nodeType":"StructuredDocumentation","src":"1482:120:14","text":"@notice Wraps the token to the wrapped token\n @param token token to wrap\n @param amount amount to wrap"},"id":3565,"implemented":true,"kind":"function","modifiers":[],"name":"_wrapToken","nameLocation":"1616:10:14","nodeType":"FunctionDefinition","parameters":{"id":3554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3551,"mutability":"mutable","name":"token","nameLocation":"1635:5:14","nodeType":"VariableDeclaration","scope":3565,"src":"1627:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3550,"name":"address","nodeType":"ElementaryTypeName","src":"1627:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3553,"mutability":"mutable","name":"amount","nameLocation":"1650:6:14","nodeType":"VariableDeclaration","scope":3565,"src":"1642:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3552,"name":"uint256","nodeType":"ElementaryTypeName","src":"1642:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1626:31:14"},"returnParameters":{"id":3555,"nodeType":"ParameterList","parameters":[],"src":"1667:0:14"},"scope":3566,"src":"1607:114:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3567,"src":"241:1482:14","usedErrors":[]}],"src":"46:1677:14"},"id":14},"contracts/adapters/TridentSwapAdapter.sol":{"ast":{"absolutePath":"contracts/adapters/TridentSwapAdapter.sol","exportedSymbols":{"Address":[1434],"BentoAdapter":[2803],"IBentoBoxMinimal":[4138],"IERC20":[667],"IERC20Permit":[728],"IImmutableState":[4244],"IPool":[4461],"IStargateRouter":[4360],"IStargateWidget":[4368],"ITridentRouter":[4544],"ITridentSwapAdapter":[4551],"IWETH":[4284],"ImmutableState":[4033],"SafeERC20":[1104],"TokenAdapter":[3566],"TridentSwapAdapter":[3956]},"id":3957,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3568,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:15"},{"absolutePath":"contracts/interfaces/trident/ITridentSwapAdapter.sol","file":"../interfaces/trident/ITridentSwapAdapter.sol","id":3569,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3957,"sourceUnit":4552,"src":"71:55:15","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3571,"name":"ITridentRouter","nodeType":"IdentifierPath","referencedDeclaration":4544,"src":"251:14:15"},"id":3572,"nodeType":"InheritanceSpecifier","src":"251:14:15"},{"baseName":{"id":3573,"name":"ImmutableState","nodeType":"IdentifierPath","referencedDeclaration":4033,"src":"271:14:15"},"id":3574,"nodeType":"InheritanceSpecifier","src":"271:14:15"},{"baseName":{"id":3575,"name":"BentoAdapter","nodeType":"IdentifierPath","referencedDeclaration":2803,"src":"291:12:15"},"id":3576,"nodeType":"InheritanceSpecifier","src":"291:12:15"},{"baseName":{"id":3577,"name":"TokenAdapter","nodeType":"IdentifierPath","referencedDeclaration":3566,"src":"309:12:15"},"id":3578,"nodeType":"InheritanceSpecifier","src":"309:12:15"}],"canonicalName":"TridentSwapAdapter","contractDependencies":[],"contractKind":"contract","documentation":{"id":3570,"nodeType":"StructuredDocumentation","src":"128:78:15","text":"@title TridentSwapAdapter\n @notice Adapter for all Trident based Swaps"},"fullyImplemented":false,"id":3956,"linearizedBaseContracts":[3956,3566,2803,4033,4244,4544],"name":"TridentSwapAdapter","nameLocation":"225:18:15","nodeType":"ContractDefinition","nodes":[{"id":3580,"name":"TooLittleReceived","nameLocation":"354:17:15","nodeType":"ErrorDefinition","parameters":{"id":3579,"nodeType":"ParameterList","parameters":[],"src":"371:2:15"},"src":"348:26:15"},{"body":{"id":3688,"nodeType":"Block","src":"870:1272:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3589,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"884:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"id":3590,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountIn","nodeType":"MemberAccess","referencedDeclaration":4487,"src":"884:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"903:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"884:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3641,"nodeType":"IfStatement","src":"880:560:15","trueBody":{"id":3640,"nodeType":"Block","src":"906:534:15","statements":[{"assignments":[3594],"declarations":[{"constant":false,"id":3594,"mutability":"mutable","name":"tokenBalance","nameLocation":"926:12:15","nodeType":"VariableDeclaration","scope":3640,"src":"918:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3593,"name":"uint256","nodeType":"ElementaryTypeName","src":"918:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3605,"initialValue":{"arguments":[{"arguments":[{"id":3602,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"999:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}],"id":3601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"991:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3600,"name":"address","nodeType":"ElementaryTypeName","src":"991:7:15","typeDescriptions":{}}},"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"991:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"expression":{"id":3596,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"948:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"id":3597,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":4485,"src":"948:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3595,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"941:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"941:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":624,"src":"941:32:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"941:77:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"918:100:15"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":3608,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"1072:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"id":3609,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":4485,"src":"1072:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3607,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"1065:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$667_$","typeString":"type(contract IERC20)"}},"id":3610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1065:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"}},{"arguments":[{"id":3613,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"1113:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}],"id":3612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1105:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3611,"name":"address","nodeType":"ElementaryTypeName","src":"1105:7:15","typeDescriptions":{}}},"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1105:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3615,"name":"tokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"1140:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$667","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3606,"name":"_transferTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3488,"src":"1032:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$667_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1032:134:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3617,"nodeType":"ExpressionStatement","src":"1032:134:15"},{"expression":{"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[null,{"expression":{"id":3618,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"1227:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"id":3620,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"amountIn","nodeType":"MemberAccess","referencedDeclaration":4487,"src":"1227:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3621,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"1224:19:15","typeDescriptions":{"typeIdentifier":"t_tuple$__$_t_uint256_$","typeString":"tuple(,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3624,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"1280:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"id":3625,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":4485,"src":"1280:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3628,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"1320:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}],"id":3627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1312:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3626,"name":"address","nodeType":"ElementaryTypeName","src":"1312:7:15","typeDescriptions":{}}},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1312:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"expression":{"id":3630,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"1347:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"id":3631,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"path","nodeType":"MemberAccess","referencedDeclaration":4493,"src":"1347:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Path_$4472_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Path memory[] memory"}},"id":3633,"indexExpression":{"hexValue":"30","id":3632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1359:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1347:14:15","typeDescriptions":{"typeIdentifier":"t_struct$_Path_$4472_memory_ptr","typeString":"struct ITridentRouter.Path memory"}},"id":3634,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":4469,"src":"1347:19:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3635,"name":"tokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"1384:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1414:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3622,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"1246:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":4092,"src":"1246:16:15","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,address,uint256,uint256) payable external returns (uint256,uint256)"}},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1246:183:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"1224:205:15","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3639,"nodeType":"ExpressionStatement","src":"1224:205:15"}]}},{"assignments":[3643],"declarations":[{"constant":false,"id":3643,"mutability":"mutable","name":"n","nameLocation":"1801:1:15","nodeType":"VariableDeclaration","scope":3688,"src":"1793:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3642,"name":"uint256","nodeType":"ElementaryTypeName","src":"1793:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3647,"initialValue":{"expression":{"expression":{"id":3644,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"1805:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"id":3645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"path","nodeType":"MemberAccess","referencedDeclaration":4493,"src":"1805:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Path_$4472_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Path memory[] memory"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1805:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1793:30:15"},{"body":{"id":3678,"nodeType":"Block","src":"1879:89:15","statements":[{"expression":{"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3661,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"1893:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3670,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"1937:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"id":3671,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"path","nodeType":"MemberAccess","referencedDeclaration":4493,"src":"1937:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Path_$4472_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Path memory[] memory"}},"id":3673,"indexExpression":{"id":3672,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"1949:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1937:14:15","typeDescriptions":{"typeIdentifier":"t_struct$_Path_$4472_memory_ptr","typeString":"struct ITridentRouter.Path memory"}},"id":3674,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","referencedDeclaration":4471,"src":"1937:19:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3663,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"1911:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"id":3664,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"path","nodeType":"MemberAccess","referencedDeclaration":4493,"src":"1911:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Path_$4472_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Path memory[] memory"}},"id":3666,"indexExpression":{"id":3665,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"1923:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1911:14:15","typeDescriptions":{"typeIdentifier":"t_struct$_Path_$4472_memory_ptr","typeString":"struct ITridentRouter.Path memory"}},"id":3667,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":4469,"src":"1911:19:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3662,"name":"IPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4461,"src":"1905:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPool_$4461_$","typeString":"type(contract IPool)"}},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1905:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPool_$4461","typeString":"contract IPool"}},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"swap","nodeType":"MemberAccess","referencedDeclaration":4379,"src":"1905:31:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory) external returns (uint256)"}},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1905:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1893:64:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3677,"nodeType":"ExpressionStatement","src":"1893:64:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3652,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"1853:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3653,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3643,"src":"1857:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1853:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3679,"initializationExpression":{"assignments":[3649],"declarations":[{"constant":false,"id":3649,"mutability":"mutable","name":"i","nameLocation":"1846:1:15","nodeType":"VariableDeclaration","scope":3679,"src":"1838:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3648,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3651,"initialValue":{"hexValue":"30","id":3650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1850:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1838:13:15"},"loopExpression":{"expression":{"id":3659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3655,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"1860:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3657,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"1875:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3656,"name":"_increment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"1864:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1864:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1860:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3660,"nodeType":"ExpressionStatement","src":"1860:17:15"},"nodeType":"ForStatement","src":"1833:135:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3680,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"2072:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3681,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"2084:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams memory"}},"id":3682,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amountOutMinimum","nodeType":"MemberAccess","referencedDeclaration":4489,"src":"2084:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2072:35:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3687,"nodeType":"IfStatement","src":"2068:67:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3684,"name":"TooLittleReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"2116:17:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2116:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3686,"nodeType":"RevertStatement","src":"2109:26:15"}}]},"documentation":{"id":3581,"nodeType":"StructuredDocumentation","src":"380:375:15","text":"@notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\n @param params This includes the address of token A, pool, amount of token A to swap,\n minimum amount of token B after the swap and data required by the pool for the swap.\n @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens."},"id":3689,"implemented":true,"kind":"function","modifiers":[],"name":"_exactInput","nameLocation":"769:11:15","nodeType":"FunctionDefinition","parameters":{"id":3585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3584,"mutability":"mutable","name":"params","nameLocation":"805:6:15","nodeType":"VariableDeclaration","scope":3689,"src":"781:30:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_memory_ptr","typeString":"struct ITridentRouter.ExactInputParams"},"typeName":{"id":3583,"nodeType":"UserDefinedTypeName","pathNode":{"id":3582,"name":"ExactInputParams","nodeType":"IdentifierPath","referencedDeclaration":4494,"src":"781:16:15"},"referencedDeclaration":4494,"src":"781:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$4494_storage_ptr","typeString":"struct ITridentRouter.ExactInputParams"}},"visibility":"internal"}],"src":"780:32:15"},"returnParameters":{"id":3588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3587,"mutability":"mutable","name":"amountOut","nameLocation":"855:9:15","nodeType":"VariableDeclaration","scope":3689,"src":"847:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3586,"name":"uint256","nodeType":"ElementaryTypeName","src":"847:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"846:19:15"},"scope":3956,"src":"760:1382:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3941,"nodeType":"Block","src":"2759:2299:15","statements":[{"assignments":[3697],"declarations":[{"constant":false,"id":3697,"mutability":"mutable","name":"n","nameLocation":"2936:1:15","nodeType":"VariableDeclaration","scope":3941,"src":"2928:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint256","nodeType":"ElementaryTypeName","src":"2928:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3701,"initialValue":{"expression":{"expression":{"id":3698,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"2940:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3699,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"initialPath","nodeType":"MemberAccess","referencedDeclaration":4534,"src":"2940:18:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InitialPath_$4512_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory[] memory"}},"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2940:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2928:37:15"},{"body":{"id":3754,"nodeType":"Block","src":"3021:304:15","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3718,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3070:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3719,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"initialPath","nodeType":"MemberAccess","referencedDeclaration":4534,"src":"3070:18:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InitialPath_$4512_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory[] memory"}},"id":3721,"indexExpression":{"id":3720,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"3089:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3070:21:15","typeDescriptions":{"typeIdentifier":"t_struct$_InitialPath_$4512_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory"}},"id":3722,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":4503,"src":"3070:29:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3725,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"3125:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}],"id":3724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3117:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3723,"name":"address","nodeType":"ElementaryTypeName","src":"3117:7:15","typeDescriptions":{}}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3117:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"expression":{"id":3727,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3148:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3728,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"initialPath","nodeType":"MemberAccess","referencedDeclaration":4534,"src":"3148:18:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InitialPath_$4512_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory[] memory"}},"id":3730,"indexExpression":{"id":3729,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"3167:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3148:21:15","typeDescriptions":{"typeIdentifier":"t_struct$_InitialPath_$4512_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory"}},"id":3731,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":4505,"src":"3148:26:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"expression":{"id":3732,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3192:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3733,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"initialPath","nodeType":"MemberAccess","referencedDeclaration":4534,"src":"3192:18:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InitialPath_$4512_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory[] memory"}},"id":3735,"indexExpression":{"id":3734,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"3211:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3192:21:15","typeDescriptions":{"typeIdentifier":"t_struct$_InitialPath_$4512_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory"}},"id":3736,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4509,"src":"3192:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3715,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"3035:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":3717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":4122,"src":"3035:17:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256) external"}},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3035:199:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3738,"nodeType":"ExpressionStatement","src":"3035:199:15"},{"expression":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3747,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3287:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3748,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"initialPath","nodeType":"MemberAccess","referencedDeclaration":4534,"src":"3287:18:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InitialPath_$4512_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory[] memory"}},"id":3750,"indexExpression":{"id":3749,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"3306:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3287:21:15","typeDescriptions":{"typeIdentifier":"t_struct$_InitialPath_$4512_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory"}},"id":3751,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","referencedDeclaration":4511,"src":"3287:26:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3740,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3254:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3741,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"initialPath","nodeType":"MemberAccess","referencedDeclaration":4534,"src":"3254:18:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InitialPath_$4512_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory[] memory"}},"id":3743,"indexExpression":{"id":3742,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"3273:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3254:21:15","typeDescriptions":{"typeIdentifier":"t_struct$_InitialPath_$4512_memory_ptr","typeString":"struct ITridentRouter.InitialPath memory"}},"id":3744,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":4505,"src":"3254:26:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3739,"name":"IPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4461,"src":"3248:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPool_$4461_$","typeString":"type(contract IPool)"}},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3248:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPool_$4461","typeString":"contract IPool"}},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"swap","nodeType":"MemberAccess","referencedDeclaration":4379,"src":"3248:38:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory) external returns (uint256)"}},"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3248:66:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3753,"nodeType":"ExpressionStatement","src":"3248:66:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3706,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"2995:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3707,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"2999:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2995:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3755,"initializationExpression":{"assignments":[3703],"declarations":[{"constant":false,"id":3703,"mutability":"mutable","name":"i","nameLocation":"2988:1:15","nodeType":"VariableDeclaration","scope":3755,"src":"2980:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3702,"name":"uint256","nodeType":"ElementaryTypeName","src":"2980:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3705,"initialValue":{"hexValue":"30","id":3704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2992:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2980:13:15"},"loopExpression":{"expression":{"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3709,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"3002:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3711,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"3017:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3710,"name":"_increment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"3006:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3006:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3002:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3714,"nodeType":"ExpressionStatement","src":"3002:17:15"},"nodeType":"ForStatement","src":"2975:350:15"},{"expression":{"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3756,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"3403:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":3757,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3407:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3758,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"percentagePath","nodeType":"MemberAccess","referencedDeclaration":4538,"src":"3407:21:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PercentagePath_$4521_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory[] memory"}},"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3407:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3403:32:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3761,"nodeType":"ExpressionStatement","src":"3403:32:15"},{"body":{"id":3843,"nodeType":"Block","src":"3491:615:15","statements":[{"assignments":[3776],"declarations":[{"constant":false,"id":3776,"mutability":"mutable","name":"balanceShares","nameLocation":"3513:13:15","nodeType":"VariableDeclaration","scope":3843,"src":"3505:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3775,"name":"uint256","nodeType":"ElementaryTypeName","src":"3505:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3789,"initialValue":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3779,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3565:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3780,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"percentagePath","nodeType":"MemberAccess","referencedDeclaration":4538,"src":"3565:21:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PercentagePath_$4521_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory[] memory"}},"id":3782,"indexExpression":{"id":3781,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"3587:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3565:24:15","typeDescriptions":{"typeIdentifier":"t_struct$_PercentagePath_$4521_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory"}},"id":3783,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":4514,"src":"3565:32:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3786,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"3623:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}],"id":3785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3615:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3784,"name":"address","nodeType":"ElementaryTypeName","src":"3615:7:15","typeDescriptions":{}}},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3615:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3777,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"3529:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":4046,"src":"3529:18:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3529:113:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3505:137:15"},{"assignments":[3791],"declarations":[{"constant":false,"id":3791,"mutability":"mutable","name":"transferShares","nameLocation":"3664:14:15","nodeType":"VariableDeclaration","scope":3843,"src":"3656:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3790,"name":"uint256","nodeType":"ElementaryTypeName","src":"3656:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3807,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3792,"name":"balanceShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"3682:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"baseExpression":{"expression":{"id":3793,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3714:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"percentagePath","nodeType":"MemberAccess","referencedDeclaration":4538,"src":"3714:21:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PercentagePath_$4521_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory[] memory"}},"id":3796,"indexExpression":{"id":3795,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"3736:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3714:24:15","typeDescriptions":{"typeIdentifier":"t_struct$_PercentagePath_$4521_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory"}},"id":3797,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"balancePercentage","nodeType":"MemberAccess","referencedDeclaration":4518,"src":"3714:42:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3682:74:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3799,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3681:76:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"hexValue":"3130","id":3802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3768:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}],"id":3801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3760:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3800,"name":"uint256","nodeType":"ElementaryTypeName","src":"3760:7:15","typeDescriptions":{}}},"id":3803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3760:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3773:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"3760:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3681:93:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3656:118:15"},{"expression":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3811,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3823:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3812,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"percentagePath","nodeType":"MemberAccess","referencedDeclaration":4538,"src":"3823:21:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PercentagePath_$4521_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory[] memory"}},"id":3814,"indexExpression":{"id":3813,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"3845:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3823:24:15","typeDescriptions":{"typeIdentifier":"t_struct$_PercentagePath_$4521_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory"}},"id":3815,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenIn","nodeType":"MemberAccess","referencedDeclaration":4514,"src":"3823:32:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3818,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"3881:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}],"id":3817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3873:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3816,"name":"address","nodeType":"ElementaryTypeName","src":"3873:7:15","typeDescriptions":{}}},"id":3819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3873:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"expression":{"id":3820,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3904:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3821,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"percentagePath","nodeType":"MemberAccess","referencedDeclaration":4538,"src":"3904:21:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PercentagePath_$4521_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory[] memory"}},"id":3823,"indexExpression":{"id":3822,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"3926:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3904:24:15","typeDescriptions":{"typeIdentifier":"t_struct$_PercentagePath_$4521_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory"}},"id":3824,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":4516,"src":"3904:29:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3825,"name":"transferShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3791,"src":"3951:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3808,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"3788:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":4122,"src":"3788:17:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256) external"}},"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3788:191:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3827,"nodeType":"ExpressionStatement","src":"3788:191:15"},{"expression":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3836,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"4052:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"percentagePath","nodeType":"MemberAccess","referencedDeclaration":4538,"src":"4052:21:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PercentagePath_$4521_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory[] memory"}},"id":3839,"indexExpression":{"id":3838,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"4074:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4052:24:15","typeDescriptions":{"typeIdentifier":"t_struct$_PercentagePath_$4521_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory"}},"id":3840,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","referencedDeclaration":4520,"src":"4052:29:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3829,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"3999:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3830,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"percentagePath","nodeType":"MemberAccess","referencedDeclaration":4538,"src":"3999:21:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PercentagePath_$4521_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory[] memory"}},"id":3832,"indexExpression":{"id":3831,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"4021:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3999:24:15","typeDescriptions":{"typeIdentifier":"t_struct$_PercentagePath_$4521_memory_ptr","typeString":"struct ITridentRouter.PercentagePath memory"}},"id":3833,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"pool","nodeType":"MemberAccess","referencedDeclaration":4516,"src":"3999:29:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3828,"name":"IPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4461,"src":"3993:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPool_$4461_$","typeString":"type(contract IPool)"}},"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3993:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPool_$4461","typeString":"contract IPool"}},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"swap","nodeType":"MemberAccess","referencedDeclaration":4379,"src":"3993:41:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory) external returns (uint256)"}},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3993:102:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3842,"nodeType":"ExpressionStatement","src":"3993:102:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3766,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"3465:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3767,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"3469:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3465:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3844,"initializationExpression":{"assignments":[3763],"declarations":[{"constant":false,"id":3763,"mutability":"mutable","name":"i","nameLocation":"3458:1:15","nodeType":"VariableDeclaration","scope":3844,"src":"3450:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3762,"name":"uint256","nodeType":"ElementaryTypeName","src":"3450:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3765,"initialValue":{"hexValue":"30","id":3764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3450:13:15"},"loopExpression":{"expression":{"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3769,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"3472:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3771,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"3487:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3770,"name":"_increment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"3476:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3476:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3472:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3774,"nodeType":"ExpressionStatement","src":"3472:17:15"},"nodeType":"ForStatement","src":"3445:661:15"},{"expression":{"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3845,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"4194:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":3846,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"4198:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"output","nodeType":"MemberAccess","referencedDeclaration":4542,"src":"4198:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$4530_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Output memory[] memory"}},"id":3848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4198:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4194:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3850,"nodeType":"ExpressionStatement","src":"4194:24:15"},{"body":{"id":3939,"nodeType":"Block","src":"4274:778:15","statements":[{"assignments":[3865],"declarations":[{"constant":false,"id":3865,"mutability":"mutable","name":"balanceShares","nameLocation":"4296:13:15","nodeType":"VariableDeclaration","scope":3939,"src":"4288:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3864,"name":"uint256","nodeType":"ElementaryTypeName","src":"4288:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3878,"initialValue":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3868,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"4348:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3869,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"output","nodeType":"MemberAccess","referencedDeclaration":4542,"src":"4348:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$4530_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Output memory[] memory"}},"id":3871,"indexExpression":{"id":3870,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4362:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4348:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_Output_$4530_memory_ptr","typeString":"struct ITridentRouter.Output memory"}},"id":3872,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4523,"src":"4348:22:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3875,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"4396:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}],"id":3874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4388:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3873,"name":"address","nodeType":"ElementaryTypeName","src":"4388:7:15","typeDescriptions":{}}},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4388:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3866,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"4312:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":4046,"src":"4312:18:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4312:103:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4288:127:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3879,"name":"balanceShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3865,"src":"4433:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"expression":{"id":3880,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"4449:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3881,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"output","nodeType":"MemberAccess","referencedDeclaration":4542,"src":"4449:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$4530_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Output memory[] memory"}},"id":3883,"indexExpression":{"id":3882,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4463:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4449:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_Output_$4530_memory_ptr","typeString":"struct ITridentRouter.Output memory"}},"id":3884,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"minAmount","nodeType":"MemberAccess","referencedDeclaration":4529,"src":"4449:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4433:42:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3889,"nodeType":"IfStatement","src":"4429:90:15","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3886,"name":"TooLittleReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"4500:17:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4500:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3888,"nodeType":"RevertStatement","src":"4493:26:15"}},{"condition":{"expression":{"baseExpression":{"expression":{"id":3890,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"4537:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3891,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"output","nodeType":"MemberAccess","referencedDeclaration":4542,"src":"4537:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$4530_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Output memory[] memory"}},"id":3893,"indexExpression":{"id":3892,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4551:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4537:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_Output_$4530_memory_ptr","typeString":"struct ITridentRouter.Output memory"}},"id":3894,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"unwrapBento","nodeType":"MemberAccess","referencedDeclaration":4527,"src":"4537:28:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3937,"nodeType":"Block","src":"4819:223:15","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3920,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"4876:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3921,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"output","nodeType":"MemberAccess","referencedDeclaration":4542,"src":"4876:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$4530_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Output memory[] memory"}},"id":3923,"indexExpression":{"id":3922,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4890:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4876:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_Output_$4530_memory_ptr","typeString":"struct ITridentRouter.Output memory"}},"id":3924,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4523,"src":"4876:22:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3927,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"4928:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}],"id":3926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4920:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3925,"name":"address","nodeType":"ElementaryTypeName","src":"4920:7:15","typeDescriptions":{}}},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4920:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"expression":{"id":3929,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"4955:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3930,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"output","nodeType":"MemberAccess","referencedDeclaration":4542,"src":"4955:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$4530_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Output memory[] memory"}},"id":3932,"indexExpression":{"id":3931,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4969:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4955:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_Output_$4530_memory_ptr","typeString":"struct ITridentRouter.Output memory"}},"id":3933,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"to","nodeType":"MemberAccess","referencedDeclaration":4525,"src":"4955:19:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3934,"name":"balanceShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3865,"src":"4996:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3917,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"4837:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":4122,"src":"4837:17:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256) external"}},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4837:190:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3936,"nodeType":"ExpressionStatement","src":"4837:190:15"}]},"id":3938,"nodeType":"IfStatement","src":"4533:509:15","trueBody":{"id":3916,"nodeType":"Block","src":"4567:246:15","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"expression":{"id":3898,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"4624:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3899,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"output","nodeType":"MemberAccess","referencedDeclaration":4542,"src":"4624:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$4530_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Output memory[] memory"}},"id":3901,"indexExpression":{"id":3900,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4638:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4624:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_Output_$4530_memory_ptr","typeString":"struct ITridentRouter.Output memory"}},"id":3902,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4523,"src":"4624:22:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3905,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"4676:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TridentSwapAdapter_$3956","typeString":"contract TridentSwapAdapter"}],"id":3904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4668:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3903,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:15","typeDescriptions":{}}},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4668:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"expression":{"id":3907,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"4703:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams memory"}},"id":3908,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"output","nodeType":"MemberAccess","referencedDeclaration":4542,"src":"4703:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$4530_memory_ptr_$dyn_memory_ptr","typeString":"struct ITridentRouter.Output memory[] memory"}},"id":3910,"indexExpression":{"id":3909,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4717:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4703:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_Output_$4530_memory_ptr","typeString":"struct ITridentRouter.Output memory"}},"id":3911,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"to","nodeType":"MemberAccess","referencedDeclaration":4525,"src":"4703:19:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4744:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3913,"name":"balanceShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3865,"src":"4767:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3895,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"4585:8:15","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":4110,"src":"4585:17:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,address,uint256,uint256) external returns (uint256,uint256)"}},"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4585:213:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":3915,"nodeType":"ExpressionStatement","src":"4585:213:15"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3855,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4248:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3856,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"4252:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3940,"initializationExpression":{"assignments":[3852],"declarations":[{"constant":false,"id":3852,"mutability":"mutable","name":"i","nameLocation":"4241:1:15","nodeType":"VariableDeclaration","scope":3940,"src":"4233:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3851,"name":"uint256","nodeType":"ElementaryTypeName","src":"4233:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3854,"initialValue":{"hexValue":"30","id":3853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4245:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4233:13:15"},"loopExpression":{"expression":{"id":3862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3858,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4255:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3860,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4270:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3859,"name":"_increment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"4259:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4259:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4255:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3863,"nodeType":"ExpressionStatement","src":"4255:17:15"},"nodeType":"ForStatement","src":"4228:824:15"}]},"documentation":{"id":3690,"nodeType":"StructuredDocumentation","src":"2148:542:15","text":"@notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\n For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\n @param params This includes everything needed for the swap.\n Look at the `ComplexPathParams` struct for more details.\n @dev This function is not optimized for single swaps and should only be used in complex cases where\n the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas."},"id":3942,"implemented":true,"kind":"function","modifiers":[],"name":"_complexPath","nameLocation":"2704:12:15","nodeType":"FunctionDefinition","parameters":{"id":3694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3693,"mutability":"mutable","name":"params","nameLocation":"2742:6:15","nodeType":"VariableDeclaration","scope":3942,"src":"2717:31:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_memory_ptr","typeString":"struct ITridentRouter.ComplexPathParams"},"typeName":{"id":3692,"nodeType":"UserDefinedTypeName","pathNode":{"id":3691,"name":"ComplexPathParams","nodeType":"IdentifierPath","referencedDeclaration":4543,"src":"2717:17:15"},"referencedDeclaration":4543,"src":"2717:17:15","typeDescriptions":{"typeIdentifier":"t_struct$_ComplexPathParams_$4543_storage_ptr","typeString":"struct ITridentRouter.ComplexPathParams"}},"visibility":"internal"}],"src":"2716:33:15"},"returnParameters":{"id":3695,"nodeType":"ParameterList","parameters":[],"src":"2759:0:15"},"scope":3956,"src":"2695:2363:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3954,"nodeType":"Block","src":"5127:63:15","statements":[{"id":3953,"nodeType":"UncheckedBlock","src":"5137:47:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3949,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"5168:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5172:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5168:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3948,"id":3952,"nodeType":"Return","src":"5161:12:15"}]}]},"id":3955,"implemented":true,"kind":"function","modifiers":[],"name":"_increment","nameLocation":"5073:10:15","nodeType":"FunctionDefinition","parameters":{"id":3945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3944,"mutability":"mutable","name":"i","nameLocation":"5092:1:15","nodeType":"VariableDeclaration","scope":3955,"src":"5084:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3943,"name":"uint256","nodeType":"ElementaryTypeName","src":"5084:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5083:11:15"},"returnParameters":{"id":3948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3955,"src":"5118:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3946,"name":"uint256","nodeType":"ElementaryTypeName","src":"5118:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5117:9:15"},"scope":3956,"src":"5064:126:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3957,"src":"207:4985:15","usedErrors":[3580]}],"src":"46:5146:15"},"id":15},"contracts/base/ImmutableState.sol":{"ast":{"absolutePath":"contracts/base/ImmutableState.sol","exportedSymbols":{"IBentoBoxMinimal":[4138],"IImmutableState":[4244],"IStargateRouter":[4360],"IStargateWidget":[4368],"ImmutableState":[4033]},"id":4034,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3958,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:16"},{"absolutePath":"contracts/interfaces/IImmutableState.sol","file":"../interfaces/IImmutableState.sol","id":3959,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4034,"sourceUnit":4245,"src":"71:43:16","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3961,"name":"IImmutableState","nodeType":"IdentifierPath","referencedDeclaration":4244,"src":"217:15:16"},"id":3962,"nodeType":"InheritanceSpecifier","src":"217:15:16"}],"canonicalName":"ImmutableState","contractDependencies":[],"contractKind":"contract","documentation":{"id":3960,"nodeType":"StructuredDocumentation","src":"116:65:16","text":"@title ImmutableState\n @notice Stores the immutable state"},"fullyImplemented":true,"id":4033,"linearizedBaseContracts":[4033,4244],"name":"ImmutableState","nameLocation":"199:14:16","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[4216],"constant":false,"documentation":{"id":3963,"nodeType":"StructuredDocumentation","src":"239:32:16","text":"@notice BentoBox token vault"},"functionSelector":"6b2ace87","id":3967,"mutability":"immutable","name":"bentoBox","nameLocation":"319:8:16","nodeType":"VariableDeclaration","overrides":{"id":3966,"nodeType":"OverrideSpecifier","overrides":[],"src":"310:8:16"},"scope":4033,"src":"276:51:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"},"typeName":{"id":3965,"nodeType":"UserDefinedTypeName","pathNode":{"id":3964,"name":"IBentoBoxMinimal","nodeType":"IdentifierPath","referencedDeclaration":4138,"src":"276:16:16"},"referencedDeclaration":4138,"src":"276:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"visibility":"public"},{"baseFunctions":[4222],"constant":false,"documentation":{"id":3968,"nodeType":"StructuredDocumentation","src":"334:55:16","text":"@notice Stargate Router for cross chain interaction"},"functionSelector":"a9e56f3c","id":3972,"mutability":"immutable","name":"stargateRouter","nameLocation":"436:14:16","nodeType":"VariableDeclaration","overrides":{"id":3971,"nodeType":"OverrideSpecifier","overrides":[],"src":"427:8:16"},"scope":4033,"src":"394:56:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"},"typeName":{"id":3970,"nodeType":"UserDefinedTypeName","pathNode":{"id":3969,"name":"IStargateRouter","nodeType":"IdentifierPath","referencedDeclaration":4360,"src":"394:15:16"},"referencedDeclaration":4360,"src":"394:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}},"visibility":"public"},{"baseFunctions":[4228],"constant":false,"documentation":{"id":3973,"nodeType":"StructuredDocumentation","src":"457:52:16","text":"@notice Stargate Widget for stargate partner fee"},"functionSelector":"6f435ac2","id":3977,"mutability":"immutable","name":"stargateWidget","nameLocation":"556:14:16","nodeType":"VariableDeclaration","overrides":{"id":3976,"nodeType":"OverrideSpecifier","overrides":[],"src":"547:8:16"},"scope":4033,"src":"514:56:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"},"typeName":{"id":3975,"nodeType":"UserDefinedTypeName","pathNode":{"id":3974,"name":"IStargateWidget","nodeType":"IdentifierPath","referencedDeclaration":4368,"src":"514:15:16"},"referencedDeclaration":4368,"src":"514:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"}},"visibility":"public"},{"baseFunctions":[4233],"constant":false,"documentation":{"id":3978,"nodeType":"StructuredDocumentation","src":"577:40:16","text":"@notice Sushiswap Legacy AMM Factory"},"functionSelector":"c45a0155","id":3981,"mutability":"immutable","name":"factory","nameLocation":"656:7:16","nodeType":"VariableDeclaration","overrides":{"id":3980,"nodeType":"OverrideSpecifier","overrides":[],"src":"647:8:16"},"scope":4033,"src":"622:41:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3979,"name":"address","nodeType":"ElementaryTypeName","src":"622:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"baseFunctions":[4238],"constant":false,"documentation":{"id":3982,"nodeType":"StructuredDocumentation","src":"670:45:16","text":"@notice Sushiswap Legacy AMM PairCodeHash"},"functionSelector":"9aab9248","id":3985,"mutability":"immutable","name":"pairCodeHash","nameLocation":"754:12:16","nodeType":"VariableDeclaration","overrides":{"id":3984,"nodeType":"OverrideSpecifier","overrides":[],"src":"745:8:16"},"scope":4033,"src":"720:46:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3983,"name":"bytes32","nodeType":"ElementaryTypeName","src":"720:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"baseFunctions":[4243],"constant":false,"documentation":{"id":3986,"nodeType":"StructuredDocumentation","src":"773:45:16","text":"@notice Address of the Stargate ETH Vault"},"functionSelector":"cf36fd24","id":3989,"mutability":"immutable","name":"SGETH","nameLocation":"857:5:16","nodeType":"VariableDeclaration","overrides":{"id":3988,"nodeType":"OverrideSpecifier","overrides":[],"src":"848:8:16"},"scope":4033,"src":"823:39:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3987,"name":"address","nodeType":"ElementaryTypeName","src":"823:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":4031,"nodeType":"Block","src":"1086:211:16","statements":[{"expression":{"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4007,"name":"bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"1096:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4008,"name":"_bentoBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3992,"src":"1107:9:16","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"src":"1096:20:16","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"id":4010,"nodeType":"ExpressionStatement","src":"1096:20:16"},{"expression":{"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4011,"name":"stargateRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1126:14:16","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4012,"name":"_stargateRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"1143:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}},"src":"1126:32:16","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}},"id":4014,"nodeType":"ExpressionStatement","src":"1126:32:16"},{"expression":{"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4015,"name":"stargateWidget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"1168:14:16","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4016,"name":"_stargateWidget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"1185:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"}},"src":"1168:32:16","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"}},"id":4018,"nodeType":"ExpressionStatement","src":"1168:32:16"},{"expression":{"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4019,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"1210:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4020,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3997,"src":"1220:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1210:18:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4022,"nodeType":"ExpressionStatement","src":"1210:18:16"},{"expression":{"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4023,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3985,"src":"1238:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4024,"name":"_pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3999,"src":"1253:13:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1238:28:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4026,"nodeType":"ExpressionStatement","src":"1238:28:16"},{"expression":{"id":4029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4027,"name":"SGETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"1276:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4028,"name":"_SGETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"1284:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1276:14:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4030,"nodeType":"ExpressionStatement","src":"1276:14:16"}]},"id":4032,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3992,"mutability":"mutable","name":"_bentoBox","nameLocation":"907:9:16","nodeType":"VariableDeclaration","scope":4032,"src":"890:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"},"typeName":{"id":3991,"nodeType":"UserDefinedTypeName","pathNode":{"id":3990,"name":"IBentoBoxMinimal","nodeType":"IdentifierPath","referencedDeclaration":4138,"src":"890:16:16"},"referencedDeclaration":4138,"src":"890:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"visibility":"internal"},{"constant":false,"id":3995,"mutability":"mutable","name":"_stargateRouter","nameLocation":"942:15:16","nodeType":"VariableDeclaration","scope":4032,"src":"926:31:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"},"typeName":{"id":3994,"nodeType":"UserDefinedTypeName","pathNode":{"id":3993,"name":"IStargateRouter","nodeType":"IdentifierPath","referencedDeclaration":4360,"src":"926:15:16"},"referencedDeclaration":4360,"src":"926:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}},"visibility":"internal"},{"constant":false,"id":3997,"mutability":"mutable","name":"_factory","nameLocation":"975:8:16","nodeType":"VariableDeclaration","scope":4032,"src":"967:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3996,"name":"address","nodeType":"ElementaryTypeName","src":"967:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3999,"mutability":"mutable","name":"_pairCodeHash","nameLocation":"1001:13:16","nodeType":"VariableDeclaration","scope":4032,"src":"993:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3998,"name":"bytes32","nodeType":"ElementaryTypeName","src":"993:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4002,"mutability":"mutable","name":"_stargateWidget","nameLocation":"1040:15:16","nodeType":"VariableDeclaration","scope":4032,"src":"1024:31:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"},"typeName":{"id":4001,"nodeType":"UserDefinedTypeName","pathNode":{"id":4000,"name":"IStargateWidget","nodeType":"IdentifierPath","referencedDeclaration":4368,"src":"1024:15:16"},"referencedDeclaration":4368,"src":"1024:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"}},"visibility":"internal"},{"constant":false,"id":4004,"mutability":"mutable","name":"_SGETH","nameLocation":"1073:6:16","nodeType":"VariableDeclaration","scope":4032,"src":"1065:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4003,"name":"address","nodeType":"ElementaryTypeName","src":"1065:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"880:205:16"},"returnParameters":{"id":4006,"nodeType":"ParameterList","parameters":[],"src":"1086:0:16"},"scope":4033,"src":"869:428:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":4034,"src":"181:1118:16","usedErrors":[]}],"src":"46:1253:16"},"id":16},"contracts/interfaces/IBentoBoxMinimal.sol":{"ast":{"absolutePath":"contracts/interfaces/IBentoBoxMinimal.sol","exportedSymbols":{"IBentoBoxMinimal":[4138]},"id":4139,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4035,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IBentoBoxMinimal","contractDependencies":[],"contractKind":"interface","documentation":{"id":4036,"nodeType":"StructuredDocumentation","src":"71:117:17","text":"@notice Minimal BentoBox vault interface.\n @dev `token` is aliased as `address` from `IERC20` for simplicity."},"fullyImplemented":false,"id":4138,"linearizedBaseContracts":[4138],"name":"IBentoBoxMinimal","nameLocation":"198:16:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4037,"nodeType":"StructuredDocumentation","src":"221:59:17","text":"@notice Balance per ERC-20 token per account in shares."},"functionSelector":"f7888aec","id":4046,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"294:9:17","nodeType":"FunctionDefinition","parameters":{"id":4042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4039,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4046,"src":"304:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4038,"name":"address","nodeType":"ElementaryTypeName","src":"304:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4041,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4046,"src":"313:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4040,"name":"address","nodeType":"ElementaryTypeName","src":"313:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"303:18:17"},"returnParameters":{"id":4045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4046,"src":"345:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4043,"name":"uint256","nodeType":"ElementaryTypeName","src":"345:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"344:9:17"},"scope":4138,"src":"285:69:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4047,"nodeType":"StructuredDocumentation","src":"360:281:17","text":"@dev Helper function to represent an `amount` of `token` in shares.\n @param token The ERC-20 token.\n @param amount The `token` amount.\n @param roundUp If the result `share` should be rounded up.\n @return share The token amount represented in shares."},"functionSelector":"da5139ca","id":4058,"implemented":false,"kind":"function","modifiers":[],"name":"toShare","nameLocation":"655:7:17","nodeType":"FunctionDefinition","parameters":{"id":4054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4049,"mutability":"mutable","name":"token","nameLocation":"680:5:17","nodeType":"VariableDeclaration","scope":4058,"src":"672:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4048,"name":"address","nodeType":"ElementaryTypeName","src":"672:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4051,"mutability":"mutable","name":"amount","nameLocation":"703:6:17","nodeType":"VariableDeclaration","scope":4058,"src":"695:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4050,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4053,"mutability":"mutable","name":"roundUp","nameLocation":"724:7:17","nodeType":"VariableDeclaration","scope":4058,"src":"719:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4052,"name":"bool","nodeType":"ElementaryTypeName","src":"719:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"662:75:17"},"returnParameters":{"id":4057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4056,"mutability":"mutable","name":"share","nameLocation":"769:5:17","nodeType":"VariableDeclaration","scope":4058,"src":"761:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4055,"name":"uint256","nodeType":"ElementaryTypeName","src":"761:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"760:15:17"},"scope":4138,"src":"646:130:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4059,"nodeType":"StructuredDocumentation","src":"782:288:17","text":"@dev Helper function to represent shares back into the `token` amount.\n @param token The ERC-20 token.\n @param share The amount of shares.\n @param roundUp If the result should be rounded up.\n @return amount The share amount back into native representation."},"functionSelector":"56623118","id":4070,"implemented":false,"kind":"function","modifiers":[],"name":"toAmount","nameLocation":"1084:8:17","nodeType":"FunctionDefinition","parameters":{"id":4066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4061,"mutability":"mutable","name":"token","nameLocation":"1110:5:17","nodeType":"VariableDeclaration","scope":4070,"src":"1102:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4060,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4063,"mutability":"mutable","name":"share","nameLocation":"1133:5:17","nodeType":"VariableDeclaration","scope":4070,"src":"1125:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4062,"name":"uint256","nodeType":"ElementaryTypeName","src":"1125:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4065,"mutability":"mutable","name":"roundUp","nameLocation":"1153:7:17","nodeType":"VariableDeclaration","scope":4070,"src":"1148:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4064,"name":"bool","nodeType":"ElementaryTypeName","src":"1148:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1092:74:17"},"returnParameters":{"id":4069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4068,"mutability":"mutable","name":"amount","nameLocation":"1198:6:17","nodeType":"VariableDeclaration","scope":4070,"src":"1190:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4067,"name":"uint256","nodeType":"ElementaryTypeName","src":"1190:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1189:16:17"},"scope":4138,"src":"1075:131:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4071,"nodeType":"StructuredDocumentation","src":"1212:78:17","text":"@notice Registers this contract so that users can approve it for BentoBox."},"functionSelector":"aee4d1b2","id":4074,"implemented":false,"kind":"function","modifiers":[],"name":"registerProtocol","nameLocation":"1304:16:17","nodeType":"FunctionDefinition","parameters":{"id":4072,"nodeType":"ParameterList","parameters":[],"src":"1320:2:17"},"returnParameters":{"id":4073,"nodeType":"ParameterList","parameters":[],"src":"1331:0:17"},"scope":4138,"src":"1295:37:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4075,"nodeType":"StructuredDocumentation","src":"1338:529:17","text":"@notice Deposit an amount of `token` represented in either `amount` or `share`.\n @param token_ The ERC-20 token to deposit.\n @param from which account to pull the tokens.\n @param to which account to push the tokens.\n @param amount Token amount in native representation to deposit.\n @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\n @return amountOut The amount deposited.\n @return shareOut The deposited amount represented in shares."},"functionSelector":"02b9446c","id":4092,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"1881:7:17","nodeType":"FunctionDefinition","parameters":{"id":4086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4077,"mutability":"mutable","name":"token_","nameLocation":"1906:6:17","nodeType":"VariableDeclaration","scope":4092,"src":"1898:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4076,"name":"address","nodeType":"ElementaryTypeName","src":"1898:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4079,"mutability":"mutable","name":"from","nameLocation":"1930:4:17","nodeType":"VariableDeclaration","scope":4092,"src":"1922:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4078,"name":"address","nodeType":"ElementaryTypeName","src":"1922:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4081,"mutability":"mutable","name":"to","nameLocation":"1952:2:17","nodeType":"VariableDeclaration","scope":4092,"src":"1944:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4080,"name":"address","nodeType":"ElementaryTypeName","src":"1944:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4083,"mutability":"mutable","name":"amount","nameLocation":"1972:6:17","nodeType":"VariableDeclaration","scope":4092,"src":"1964:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4082,"name":"uint256","nodeType":"ElementaryTypeName","src":"1964:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4085,"mutability":"mutable","name":"share","nameLocation":"1996:5:17","nodeType":"VariableDeclaration","scope":4092,"src":"1988:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4084,"name":"uint256","nodeType":"ElementaryTypeName","src":"1988:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1888:119:17"},"returnParameters":{"id":4091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4088,"mutability":"mutable","name":"amountOut","nameLocation":"2042:9:17","nodeType":"VariableDeclaration","scope":4092,"src":"2034:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4087,"name":"uint256","nodeType":"ElementaryTypeName","src":"2034:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4090,"mutability":"mutable","name":"shareOut","nameLocation":"2061:8:17","nodeType":"VariableDeclaration","scope":4092,"src":"2053:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4089,"name":"uint256","nodeType":"ElementaryTypeName","src":"2053:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2033:37:17"},"scope":4138,"src":"1872:199:17","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":4093,"nodeType":"StructuredDocumentation","src":"2077:381:17","text":"@notice Withdraws an amount of `token` from a user account.\n @param token_ The ERC-20 token to withdraw.\n @param from which user to pull the tokens.\n @param to which user to push the tokens.\n @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n @param share Like above, but `share` takes precedence over `amount`."},"functionSelector":"97da6d30","id":4110,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"2472:8:17","nodeType":"FunctionDefinition","parameters":{"id":4104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4095,"mutability":"mutable","name":"token_","nameLocation":"2498:6:17","nodeType":"VariableDeclaration","scope":4110,"src":"2490:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4094,"name":"address","nodeType":"ElementaryTypeName","src":"2490:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4097,"mutability":"mutable","name":"from","nameLocation":"2522:4:17","nodeType":"VariableDeclaration","scope":4110,"src":"2514:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4096,"name":"address","nodeType":"ElementaryTypeName","src":"2514:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4099,"mutability":"mutable","name":"to","nameLocation":"2544:2:17","nodeType":"VariableDeclaration","scope":4110,"src":"2536:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4098,"name":"address","nodeType":"ElementaryTypeName","src":"2536:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4101,"mutability":"mutable","name":"amount","nameLocation":"2564:6:17","nodeType":"VariableDeclaration","scope":4110,"src":"2556:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4100,"name":"uint256","nodeType":"ElementaryTypeName","src":"2556:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4103,"mutability":"mutable","name":"share","nameLocation":"2588:5:17","nodeType":"VariableDeclaration","scope":4110,"src":"2580:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4102,"name":"uint256","nodeType":"ElementaryTypeName","src":"2580:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2480:119:17"},"returnParameters":{"id":4109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4106,"mutability":"mutable","name":"amountOut","nameLocation":"2626:9:17","nodeType":"VariableDeclaration","scope":4110,"src":"2618:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4105,"name":"uint256","nodeType":"ElementaryTypeName","src":"2618:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4108,"mutability":"mutable","name":"shareOut","nameLocation":"2645:8:17","nodeType":"VariableDeclaration","scope":4110,"src":"2637:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4107,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2617:37:17"},"scope":4138,"src":"2463:192:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4111,"nodeType":"StructuredDocumentation","src":"2661:268:17","text":"@notice Transfer shares from a user account to another one.\n @param token The ERC-20 token to transfer.\n @param from which user to pull the tokens.\n @param to which user to push the tokens.\n @param share The amount of `token` in shares."},"functionSelector":"f18d03cc","id":4122,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"2943:8:17","nodeType":"FunctionDefinition","parameters":{"id":4120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4113,"mutability":"mutable","name":"token","nameLocation":"2969:5:17","nodeType":"VariableDeclaration","scope":4122,"src":"2961:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4112,"name":"address","nodeType":"ElementaryTypeName","src":"2961:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4115,"mutability":"mutable","name":"from","nameLocation":"2992:4:17","nodeType":"VariableDeclaration","scope":4122,"src":"2984:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4114,"name":"address","nodeType":"ElementaryTypeName","src":"2984:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4117,"mutability":"mutable","name":"to","nameLocation":"3014:2:17","nodeType":"VariableDeclaration","scope":4122,"src":"3006:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4116,"name":"address","nodeType":"ElementaryTypeName","src":"3006:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4119,"mutability":"mutable","name":"share","nameLocation":"3034:5:17","nodeType":"VariableDeclaration","scope":4122,"src":"3026:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4118,"name":"uint256","nodeType":"ElementaryTypeName","src":"3026:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2951:94:17"},"returnParameters":{"id":4121,"nodeType":"ParameterList","parameters":[],"src":"3054:0:17"},"scope":4138,"src":"2934:121:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c0a47c93","id":4137,"implemented":false,"kind":"function","modifiers":[],"name":"setMasterContractApproval","nameLocation":"3070:25:17","nodeType":"FunctionDefinition","parameters":{"id":4135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4124,"mutability":"mutable","name":"user","nameLocation":"3113:4:17","nodeType":"VariableDeclaration","scope":4137,"src":"3105:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4123,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4126,"mutability":"mutable","name":"masterContract","nameLocation":"3135:14:17","nodeType":"VariableDeclaration","scope":4137,"src":"3127:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4125,"name":"address","nodeType":"ElementaryTypeName","src":"3127:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4128,"mutability":"mutable","name":"approved","nameLocation":"3164:8:17","nodeType":"VariableDeclaration","scope":4137,"src":"3159:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4127,"name":"bool","nodeType":"ElementaryTypeName","src":"3159:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4130,"mutability":"mutable","name":"v","nameLocation":"3188:1:17","nodeType":"VariableDeclaration","scope":4137,"src":"3182:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4129,"name":"uint8","nodeType":"ElementaryTypeName","src":"3182:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4132,"mutability":"mutable","name":"r","nameLocation":"3207:1:17","nodeType":"VariableDeclaration","scope":4137,"src":"3199:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4131,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3199:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4134,"mutability":"mutable","name":"s","nameLocation":"3226:1:17","nodeType":"VariableDeclaration","scope":4137,"src":"3218:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3218:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3095:138:17"},"returnParameters":{"id":4136,"nodeType":"ParameterList","parameters":[],"src":"3242:0:17"},"scope":4138,"src":"3061:182:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4139,"src":"188:3057:17","usedErrors":[]}],"src":"46:3200:17"},"id":17},"contracts/interfaces/IERC20Permit.sol":{"ast":{"absolutePath":"contracts/interfaces/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[4205]},"id":4206,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4140,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"32:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4205,"linearizedBaseContracts":[4205],"name":"IERC20Permit","nameLocation":"67:12:18","nodeType":"ContractDefinition","nodes":[{"functionSelector":"18160ddd","id":4145,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"95:11:18","nodeType":"FunctionDefinition","parameters":{"id":4141,"nodeType":"ParameterList","parameters":[],"src":"106:2:18"},"returnParameters":{"id":4144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4145,"src":"132:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4142,"name":"uint256","nodeType":"ElementaryTypeName","src":"132:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"131:9:18"},"scope":4205,"src":"86:55:18","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":4152,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"156:9:18","nodeType":"FunctionDefinition","parameters":{"id":4148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4147,"mutability":"mutable","name":"account","nameLocation":"174:7:18","nodeType":"VariableDeclaration","scope":4152,"src":"166:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4146,"name":"address","nodeType":"ElementaryTypeName","src":"166:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"165:17:18"},"returnParameters":{"id":4151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4152,"src":"206:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4149,"name":"uint256","nodeType":"ElementaryTypeName","src":"206:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"205:9:18"},"scope":4205,"src":"147:68:18","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dd62ed3e","id":4161,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"230:9:18","nodeType":"FunctionDefinition","parameters":{"id":4157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4154,"mutability":"mutable","name":"owner","nameLocation":"248:5:18","nodeType":"VariableDeclaration","scope":4161,"src":"240:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4153,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4156,"mutability":"mutable","name":"spender","nameLocation":"263:7:18","nodeType":"VariableDeclaration","scope":4161,"src":"255:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4155,"name":"address","nodeType":"ElementaryTypeName","src":"255:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:32:18"},"returnParameters":{"id":4160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4161,"src":"319:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4158,"name":"uint256","nodeType":"ElementaryTypeName","src":"319:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"318:9:18"},"scope":4205,"src":"221:107:18","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":4170,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"343:7:18","nodeType":"FunctionDefinition","parameters":{"id":4166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4163,"mutability":"mutable","name":"spender","nameLocation":"359:7:18","nodeType":"VariableDeclaration","scope":4170,"src":"351:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4162,"name":"address","nodeType":"ElementaryTypeName","src":"351:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4165,"mutability":"mutable","name":"amount","nameLocation":"376:6:18","nodeType":"VariableDeclaration","scope":4170,"src":"368:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4164,"name":"uint256","nodeType":"ElementaryTypeName","src":"368:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"350:33:18"},"returnParameters":{"id":4169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4168,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4170,"src":"402:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4167,"name":"bool","nodeType":"ElementaryTypeName","src":"402:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"401:6:18"},"scope":4205,"src":"334:74:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"id":4178,"name":"Transfer","nameLocation":"420:8:18","nodeType":"EventDefinition","parameters":{"id":4177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4172,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"445:4:18","nodeType":"VariableDeclaration","scope":4178,"src":"429:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4171,"name":"address","nodeType":"ElementaryTypeName","src":"429:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4174,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"467:2:18","nodeType":"VariableDeclaration","scope":4178,"src":"451:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4173,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4176,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"479:5:18","nodeType":"VariableDeclaration","scope":4178,"src":"471:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4175,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"428:57:18"},"src":"414:72:18"},{"anonymous":false,"id":4186,"name":"Approval","nameLocation":"497:8:18","nodeType":"EventDefinition","parameters":{"id":4185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4180,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"531:5:18","nodeType":"VariableDeclaration","scope":4186,"src":"515:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4179,"name":"address","nodeType":"ElementaryTypeName","src":"515:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4182,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"562:7:18","nodeType":"VariableDeclaration","scope":4186,"src":"546:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4181,"name":"address","nodeType":"ElementaryTypeName","src":"546:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4184,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"587:5:18","nodeType":"VariableDeclaration","scope":4186,"src":"579:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4183,"name":"uint256","nodeType":"ElementaryTypeName","src":"579:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"505:93:18"},"src":"491:108:18"},{"documentation":{"id":4187,"nodeType":"StructuredDocumentation","src":"605:20:18","text":"@notice EIP 2612"},"functionSelector":"d505accf","id":4204,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"639:6:18","nodeType":"FunctionDefinition","parameters":{"id":4202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4189,"mutability":"mutable","name":"owner","nameLocation":"663:5:18","nodeType":"VariableDeclaration","scope":4204,"src":"655:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4188,"name":"address","nodeType":"ElementaryTypeName","src":"655:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4191,"mutability":"mutable","name":"spender","nameLocation":"686:7:18","nodeType":"VariableDeclaration","scope":4204,"src":"678:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4190,"name":"address","nodeType":"ElementaryTypeName","src":"678:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4193,"mutability":"mutable","name":"value","nameLocation":"711:5:18","nodeType":"VariableDeclaration","scope":4204,"src":"703:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4192,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4195,"mutability":"mutable","name":"deadline","nameLocation":"734:8:18","nodeType":"VariableDeclaration","scope":4204,"src":"726:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4194,"name":"uint256","nodeType":"ElementaryTypeName","src":"726:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4197,"mutability":"mutable","name":"v","nameLocation":"758:1:18","nodeType":"VariableDeclaration","scope":4204,"src":"752:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4196,"name":"uint8","nodeType":"ElementaryTypeName","src":"752:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4199,"mutability":"mutable","name":"r","nameLocation":"777:1:18","nodeType":"VariableDeclaration","scope":4204,"src":"769:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4198,"name":"bytes32","nodeType":"ElementaryTypeName","src":"769:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4201,"mutability":"mutable","name":"s","nameLocation":"796:1:18","nodeType":"VariableDeclaration","scope":4204,"src":"788:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4200,"name":"bytes32","nodeType":"ElementaryTypeName","src":"788:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"645:158:18"},"returnParameters":{"id":4203,"nodeType":"ParameterList","parameters":[],"src":"812:0:18"},"scope":4205,"src":"630:183:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4206,"src":"57:758:18","usedErrors":[]}],"src":"32:783:18"},"id":18},"contracts/interfaces/IImmutableState.sol":{"ast":{"absolutePath":"contracts/interfaces/IImmutableState.sol","exportedSymbols":{"IBentoBoxMinimal":[4138],"IImmutableState":[4244],"IStargateRouter":[4360],"IStargateWidget":[4368]},"id":4245,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4207,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:19"},{"absolutePath":"contracts/interfaces/IBentoBoxMinimal.sol","file":"./IBentoBoxMinimal.sol","id":4208,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4245,"sourceUnit":4139,"src":"71:32:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/stargate/IStargateRouter.sol","file":"./stargate/IStargateRouter.sol","id":4209,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4245,"sourceUnit":4361,"src":"104:40:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/stargate/IStargateWidget.sol","file":"./stargate/IStargateWidget.sol","id":4210,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4245,"sourceUnit":4369,"src":"145:40:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IImmutableState","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4244,"linearizedBaseContracts":[4244],"name":"IImmutableState","nameLocation":"197:15:19","nodeType":"ContractDefinition","nodes":[{"functionSelector":"6b2ace87","id":4216,"implemented":false,"kind":"function","modifiers":[],"name":"bentoBox","nameLocation":"228:8:19","nodeType":"FunctionDefinition","parameters":{"id":4211,"nodeType":"ParameterList","parameters":[],"src":"236:2:19"},"returnParameters":{"id":4215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4216,"src":"262:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"},"typeName":{"id":4213,"nodeType":"UserDefinedTypeName","pathNode":{"id":4212,"name":"IBentoBoxMinimal","nodeType":"IdentifierPath","referencedDeclaration":4138,"src":"262:16:19"},"referencedDeclaration":4138,"src":"262:16:19","typeDescriptions":{"typeIdentifier":"t_contract$_IBentoBoxMinimal_$4138","typeString":"contract IBentoBoxMinimal"}},"visibility":"internal"}],"src":"261:18:19"},"scope":4244,"src":"219:61:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a9e56f3c","id":4222,"implemented":false,"kind":"function","modifiers":[],"name":"stargateRouter","nameLocation":"295:14:19","nodeType":"FunctionDefinition","parameters":{"id":4217,"nodeType":"ParameterList","parameters":[],"src":"309:2:19"},"returnParameters":{"id":4221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4222,"src":"335:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"},"typeName":{"id":4219,"nodeType":"UserDefinedTypeName","pathNode":{"id":4218,"name":"IStargateRouter","nodeType":"IdentifierPath","referencedDeclaration":4360,"src":"335:15:19"},"referencedDeclaration":4360,"src":"335:15:19","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateRouter_$4360","typeString":"contract IStargateRouter"}},"visibility":"internal"}],"src":"334:17:19"},"scope":4244,"src":"286:66:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6f435ac2","id":4228,"implemented":false,"kind":"function","modifiers":[],"name":"stargateWidget","nameLocation":"367:14:19","nodeType":"FunctionDefinition","parameters":{"id":4223,"nodeType":"ParameterList","parameters":[],"src":"381:2:19"},"returnParameters":{"id":4227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4228,"src":"407:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"},"typeName":{"id":4225,"nodeType":"UserDefinedTypeName","pathNode":{"id":4224,"name":"IStargateWidget","nodeType":"IdentifierPath","referencedDeclaration":4368,"src":"407:15:19"},"referencedDeclaration":4368,"src":"407:15:19","typeDescriptions":{"typeIdentifier":"t_contract$_IStargateWidget_$4368","typeString":"contract IStargateWidget"}},"visibility":"internal"}],"src":"406:17:19"},"scope":4244,"src":"358:66:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c45a0155","id":4233,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nameLocation":"439:7:19","nodeType":"FunctionDefinition","parameters":{"id":4229,"nodeType":"ParameterList","parameters":[],"src":"446:2:19"},"returnParameters":{"id":4232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4233,"src":"472:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4230,"name":"address","nodeType":"ElementaryTypeName","src":"472:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"471:9:19"},"scope":4244,"src":"430:51:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9aab9248","id":4238,"implemented":false,"kind":"function","modifiers":[],"name":"pairCodeHash","nameLocation":"496:12:19","nodeType":"FunctionDefinition","parameters":{"id":4234,"nodeType":"ParameterList","parameters":[],"src":"508:2:19"},"returnParameters":{"id":4237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4238,"src":"534:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:9:19"},"scope":4244,"src":"487:56:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cf36fd24","id":4243,"implemented":false,"kind":"function","modifiers":[],"name":"SGETH","nameLocation":"558:5:19","nodeType":"FunctionDefinition","parameters":{"id":4239,"nodeType":"ParameterList","parameters":[],"src":"563:2:19"},"returnParameters":{"id":4242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4241,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4243,"src":"588:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4240,"name":"address","nodeType":"ElementaryTypeName","src":"588:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"587:9:19"},"scope":4244,"src":"549:48:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4245,"src":"187:412:19","usedErrors":[]}],"src":"46:553:19"},"id":19},"contracts/interfaces/ISushiXSwap.sol":{"ast":{"absolutePath":"contracts/interfaces/ISushiXSwap.sol","exportedSymbols":{"Address":[1434],"BentoAdapter":[2803],"IBentoBoxMinimal":[4138],"IERC20":[667],"IERC20Permit":[728],"IImmutableState":[4244],"IPool":[4461],"IStargateAdapter":[4292],"IStargateReceiver":[4310],"IStargateRouter":[4360],"IStargateWidget":[4368],"ISushiXSwap":[4264],"ITridentRouter":[4544],"ITridentSwapAdapter":[4551],"IUniswapV2Pair":[2010],"IWETH":[4284],"ImmutableState":[4033],"SafeERC20":[1104],"SafeMathUniswap":[4626],"StargateAdapter":[3223],"SushiLegacyAdapter":[3440],"TokenAdapter":[3566],"TridentSwapAdapter":[3956],"UniswapV2Library":[5112]},"id":4265,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4246,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:20"},{"absolutePath":"contracts/adapters/BentoAdapter.sol","file":"../adapters/BentoAdapter.sol","id":4247,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4265,"sourceUnit":2804,"src":"71:38:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/adapters/TokenAdapter.sol","file":"../adapters/TokenAdapter.sol","id":4248,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4265,"sourceUnit":3567,"src":"110:38:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/adapters/SushiLegacyAdapter.sol","file":"../adapters/SushiLegacyAdapter.sol","id":4249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4265,"sourceUnit":3441,"src":"149:44:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/adapters/TridentSwapAdapter.sol","file":"../adapters/TridentSwapAdapter.sol","id":4250,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4265,"sourceUnit":3957,"src":"194:44:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/adapters/StargateAdapter.sol","file":"../adapters/StargateAdapter.sol","id":4251,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4265,"sourceUnit":3224,"src":"239:41:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ISushiXSwap","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4264,"linearizedBaseContracts":[4264],"name":"ISushiXSwap","nameLocation":"292:11:20","nodeType":"ContractDefinition","nodes":[{"functionSelector":"656f3d64","id":4263,"implemented":false,"kind":"function","modifiers":[],"name":"cook","nameLocation":"319:4:20","nodeType":"FunctionDefinition","parameters":{"id":4261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4254,"mutability":"mutable","name":"actions","nameLocation":"348:7:20","nodeType":"VariableDeclaration","scope":4263,"src":"333:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":4252,"name":"uint8","nodeType":"ElementaryTypeName","src":"333:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4253,"nodeType":"ArrayTypeName","src":"333:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"},{"constant":false,"id":4257,"mutability":"mutable","name":"values","nameLocation":"382:6:20","nodeType":"VariableDeclaration","scope":4263,"src":"365:23:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4255,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4256,"nodeType":"ArrayTypeName","src":"365:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4260,"mutability":"mutable","name":"datas","nameLocation":"413:5:20","nodeType":"VariableDeclaration","scope":4263,"src":"398:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":4258,"name":"bytes","nodeType":"ElementaryTypeName","src":"398:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":4259,"nodeType":"ArrayTypeName","src":"398:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"323:101:20"},"returnParameters":{"id":4262,"nodeType":"ParameterList","parameters":[],"src":"441:0:20"},"scope":4264,"src":"310:132:20","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":4265,"src":"282:162:20","usedErrors":[]}],"src":"46:398:20"},"id":20},"contracts/interfaces/IWETH.sol":{"ast":{"absolutePath":"contracts/interfaces/IWETH.sol","exportedSymbols":{"IWETH":[4284]},"id":4285,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4266,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IWETH","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4284,"linearizedBaseContracts":[4284],"name":"IWETH","nameLocation":"81:5:21","nodeType":"ContractDefinition","nodes":[{"functionSelector":"d0e30db0","id":4269,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"102:7:21","nodeType":"FunctionDefinition","parameters":{"id":4267,"nodeType":"ParameterList","parameters":[],"src":"109:2:21"},"returnParameters":{"id":4268,"nodeType":"ParameterList","parameters":[],"src":"128:0:21"},"scope":4284,"src":"93:36:21","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":4278,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"144:8:21","nodeType":"FunctionDefinition","parameters":{"id":4274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4271,"mutability":"mutable","name":"to","nameLocation":"161:2:21","nodeType":"VariableDeclaration","scope":4278,"src":"153:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4270,"name":"address","nodeType":"ElementaryTypeName","src":"153:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4273,"mutability":"mutable","name":"value","nameLocation":"173:5:21","nodeType":"VariableDeclaration","scope":4278,"src":"165:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4272,"name":"uint256","nodeType":"ElementaryTypeName","src":"165:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"152:27:21"},"returnParameters":{"id":4277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4278,"src":"198:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4275,"name":"bool","nodeType":"ElementaryTypeName","src":"198:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"197:6:21"},"scope":4284,"src":"135:69:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2e1a7d4d","id":4283,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"219:8:21","nodeType":"FunctionDefinition","parameters":{"id":4281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4283,"src":"228:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4279,"name":"uint256","nodeType":"ElementaryTypeName","src":"228:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"227:9:21"},"returnParameters":{"id":4282,"nodeType":"ParameterList","parameters":[],"src":"245:0:21"},"scope":4284,"src":"210:36:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4285,"src":"71:177:21","usedErrors":[]}],"src":"46:202:21"},"id":21},"contracts/interfaces/stargate/IStargateAdapter.sol":{"ast":{"absolutePath":"contracts/interfaces/stargate/IStargateAdapter.sol","exportedSymbols":{"Address":[1434],"IBentoBoxMinimal":[4138],"IERC20":[667],"IERC20Permit":[728],"IImmutableState":[4244],"IStargateAdapter":[4292],"IStargateReceiver":[4310],"IStargateRouter":[4360],"IStargateWidget":[4368],"ISushiXSwap":[4264],"ImmutableState":[4033],"SafeERC20":[1104]},"id":4293,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":4286,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"37:23:22"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":4287,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4293,"sourceUnit":1105,"src":"62:65:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/base/ImmutableState.sol","file":"../../base/ImmutableState.sol","id":4288,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4293,"sourceUnit":4034,"src":"128:39:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISushiXSwap.sol","file":"../ISushiXSwap.sol","id":4289,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4293,"sourceUnit":4265,"src":"168:28:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/stargate/IStargateReceiver.sol","file":"./IStargateReceiver.sol","id":4290,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4293,"sourceUnit":4311,"src":"197:33:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/stargate/IStargateWidget.sol","file":"./IStargateWidget.sol","id":4291,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4293,"sourceUnit":4369,"src":"231:31:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IStargateAdapter","contractDependencies":[],"contractKind":"interface","fullyImplemented":true,"id":4292,"linearizedBaseContracts":[4292],"name":"IStargateAdapter","nameLocation":"274:16:22","nodeType":"ContractDefinition","nodes":[],"scope":4293,"src":"264:29:22","usedErrors":[]}],"src":"37:256:22"},"id":22},"contracts/interfaces/stargate/IStargateReceiver.sol":{"ast":{"absolutePath":"contracts/interfaces/stargate/IStargateReceiver.sol","exportedSymbols":{"IStargateReceiver":[4310]},"id":4311,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":4294,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"37:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IStargateReceiver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4310,"linearizedBaseContracts":[4310],"name":"IStargateReceiver","nameLocation":"72:17:23","nodeType":"ContractDefinition","nodes":[{"functionSelector":"ab8236f3","id":4309,"implemented":false,"kind":"function","modifiers":[],"name":"sgReceive","nameLocation":"105:9:23","nodeType":"FunctionDefinition","parameters":{"id":4307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4296,"mutability":"mutable","name":"_chainId","nameLocation":"131:8:23","nodeType":"VariableDeclaration","scope":4309,"src":"124:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4295,"name":"uint16","nodeType":"ElementaryTypeName","src":"124:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4298,"mutability":"mutable","name":"_srcAddress","nameLocation":"162:11:23","nodeType":"VariableDeclaration","scope":4309,"src":"149:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4297,"name":"bytes","nodeType":"ElementaryTypeName","src":"149:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4300,"mutability":"mutable","name":"_nonce","nameLocation":"191:6:23","nodeType":"VariableDeclaration","scope":4309,"src":"183:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4299,"name":"uint256","nodeType":"ElementaryTypeName","src":"183:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4302,"mutability":"mutable","name":"_token","nameLocation":"215:6:23","nodeType":"VariableDeclaration","scope":4309,"src":"207:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4301,"name":"address","nodeType":"ElementaryTypeName","src":"207:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4304,"mutability":"mutable","name":"amountLD","nameLocation":"239:8:23","nodeType":"VariableDeclaration","scope":4309,"src":"231:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4303,"name":"uint256","nodeType":"ElementaryTypeName","src":"231:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4306,"mutability":"mutable","name":"payload","nameLocation":"270:7:23","nodeType":"VariableDeclaration","scope":4309,"src":"257:20:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4305,"name":"bytes","nodeType":"ElementaryTypeName","src":"257:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"114:169:23"},"returnParameters":{"id":4308,"nodeType":"ParameterList","parameters":[],"src":"292:0:23"},"scope":4310,"src":"96:197:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4311,"src":"62:233:23","usedErrors":[]}],"src":"37:258:23"},"id":23},"contracts/interfaces/stargate/IStargateRouter.sol":{"ast":{"absolutePath":"contracts/interfaces/stargate/IStargateRouter.sol","exportedSymbols":{"IStargateRouter":[4360]},"id":4361,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":4312,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"37:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"IStargateRouter","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4360,"linearizedBaseContracts":[4360],"name":"IStargateRouter","nameLocation":"72:15:24","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IStargateRouter.lzTxObj","id":4319,"members":[{"constant":false,"id":4314,"mutability":"mutable","name":"dstGasForCall","nameLocation":"128:13:24","nodeType":"VariableDeclaration","scope":4319,"src":"120:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4313,"name":"uint256","nodeType":"ElementaryTypeName","src":"120:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4316,"mutability":"mutable","name":"dstNativeAmount","nameLocation":"159:15:24","nodeType":"VariableDeclaration","scope":4319,"src":"151:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4315,"name":"uint256","nodeType":"ElementaryTypeName","src":"151:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4318,"mutability":"mutable","name":"dstNativeAddr","nameLocation":"190:13:24","nodeType":"VariableDeclaration","scope":4319,"src":"184:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4317,"name":"bytes","nodeType":"ElementaryTypeName","src":"184:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"lzTxObj","nameLocation":"102:7:24","nodeType":"StructDefinition","scope":4360,"src":"95:115:24","visibility":"public"},{"functionSelector":"9fbf10fc","id":4341,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"225:4:24","nodeType":"FunctionDefinition","parameters":{"id":4339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4321,"mutability":"mutable","name":"_dstChainId","nameLocation":"246:11:24","nodeType":"VariableDeclaration","scope":4341,"src":"239:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4320,"name":"uint16","nodeType":"ElementaryTypeName","src":"239:6:24","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4323,"mutability":"mutable","name":"_srcPoolId","nameLocation":"275:10:24","nodeType":"VariableDeclaration","scope":4341,"src":"267:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4322,"name":"uint256","nodeType":"ElementaryTypeName","src":"267:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4325,"mutability":"mutable","name":"_dstPoolId","nameLocation":"303:10:24","nodeType":"VariableDeclaration","scope":4341,"src":"295:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4324,"name":"uint256","nodeType":"ElementaryTypeName","src":"295:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4327,"mutability":"mutable","name":"_refundAddress","nameLocation":"339:14:24","nodeType":"VariableDeclaration","scope":4341,"src":"323:30:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4326,"name":"address","nodeType":"ElementaryTypeName","src":"323:15:24","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4329,"mutability":"mutable","name":"_amountLD","nameLocation":"371:9:24","nodeType":"VariableDeclaration","scope":4341,"src":"363:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4328,"name":"uint256","nodeType":"ElementaryTypeName","src":"363:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4331,"mutability":"mutable","name":"_minAmountLD","nameLocation":"398:12:24","nodeType":"VariableDeclaration","scope":4341,"src":"390:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4330,"name":"uint256","nodeType":"ElementaryTypeName","src":"390:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4334,"mutability":"mutable","name":"_lzTxParams","nameLocation":"435:11:24","nodeType":"VariableDeclaration","scope":4341,"src":"420:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_lzTxObj_$4319_memory_ptr","typeString":"struct IStargateRouter.lzTxObj"},"typeName":{"id":4333,"nodeType":"UserDefinedTypeName","pathNode":{"id":4332,"name":"lzTxObj","nodeType":"IdentifierPath","referencedDeclaration":4319,"src":"420:7:24"},"referencedDeclaration":4319,"src":"420:7:24","typeDescriptions":{"typeIdentifier":"t_struct$_lzTxObj_$4319_storage_ptr","typeString":"struct IStargateRouter.lzTxObj"}},"visibility":"internal"},{"constant":false,"id":4336,"mutability":"mutable","name":"_to","nameLocation":"471:3:24","nodeType":"VariableDeclaration","scope":4341,"src":"456:18:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4335,"name":"bytes","nodeType":"ElementaryTypeName","src":"456:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4338,"mutability":"mutable","name":"_payload","nameLocation":"499:8:24","nodeType":"VariableDeclaration","scope":4341,"src":"484:23:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4337,"name":"bytes","nodeType":"ElementaryTypeName","src":"484:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"229:284:24"},"returnParameters":{"id":4340,"nodeType":"ParameterList","parameters":[],"src":"530:0:24"},"scope":4360,"src":"216:315:24","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"0a512369","id":4359,"implemented":false,"kind":"function","modifiers":[],"name":"quoteLayerZeroFee","nameLocation":"546:17:24","nodeType":"FunctionDefinition","parameters":{"id":4353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4343,"mutability":"mutable","name":"_dstChainId","nameLocation":"580:11:24","nodeType":"VariableDeclaration","scope":4359,"src":"573:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4342,"name":"uint16","nodeType":"ElementaryTypeName","src":"573:6:24","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4345,"mutability":"mutable","name":"_functionType","nameLocation":"607:13:24","nodeType":"VariableDeclaration","scope":4359,"src":"601:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4344,"name":"uint8","nodeType":"ElementaryTypeName","src":"601:5:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4347,"mutability":"mutable","name":"_toAddress","nameLocation":"645:10:24","nodeType":"VariableDeclaration","scope":4359,"src":"630:25:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4346,"name":"bytes","nodeType":"ElementaryTypeName","src":"630:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4349,"mutability":"mutable","name":"_transferAndCallPayload","nameLocation":"680:23:24","nodeType":"VariableDeclaration","scope":4359,"src":"665:38:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4348,"name":"bytes","nodeType":"ElementaryTypeName","src":"665:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4352,"mutability":"mutable","name":"_lzTxParams","nameLocation":"728:11:24","nodeType":"VariableDeclaration","scope":4359,"src":"713:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_lzTxObj_$4319_memory_ptr","typeString":"struct IStargateRouter.lzTxObj"},"typeName":{"id":4351,"nodeType":"UserDefinedTypeName","pathNode":{"id":4350,"name":"lzTxObj","nodeType":"IdentifierPath","referencedDeclaration":4319,"src":"713:7:24"},"referencedDeclaration":4319,"src":"713:7:24","typeDescriptions":{"typeIdentifier":"t_struct$_lzTxObj_$4319_storage_ptr","typeString":"struct IStargateRouter.lzTxObj"}},"visibility":"internal"}],"src":"563:182:24"},"returnParameters":{"id":4358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4359,"src":"769:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4354,"name":"uint256","nodeType":"ElementaryTypeName","src":"769:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4359,"src":"778:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4356,"name":"uint256","nodeType":"ElementaryTypeName","src":"778:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"768:18:24"},"scope":4360,"src":"537:250:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4361,"src":"62:727:24","usedErrors":[]}],"src":"37:752:24"},"id":24},"contracts/interfaces/stargate/IStargateWidget.sol":{"ast":{"absolutePath":"contracts/interfaces/stargate/IStargateWidget.sol","exportedSymbols":{"IStargateWidget":[4368]},"id":4369,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":4362,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"37:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IStargateWidget","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4368,"linearizedBaseContracts":[4368],"name":"IStargateWidget","nameLocation":"72:15:25","nodeType":"ContractDefinition","nodes":[{"functionSelector":"a87376e9","id":4367,"implemented":false,"kind":"function","modifiers":[],"name":"partnerSwap","nameLocation":"103:11:25","nodeType":"FunctionDefinition","parameters":{"id":4365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4364,"mutability":"mutable","name":"_partnerId","nameLocation":"122:10:25","nodeType":"VariableDeclaration","scope":4367,"src":"115:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"},"typeName":{"id":4363,"name":"bytes2","nodeType":"ElementaryTypeName","src":"115:6:25","typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}},"visibility":"internal"}],"src":"114:19:25"},"returnParameters":{"id":4366,"nodeType":"ParameterList","parameters":[],"src":"142:0:25"},"scope":4368,"src":"94:49:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4369,"src":"62:83:25","usedErrors":[]}],"src":"37:108:25"},"id":25},"contracts/interfaces/trident/IPool.sol":{"ast":{"absolutePath":"contracts/interfaces/trident/IPool.sol","exportedSymbols":{"IPool":[4461]},"id":4462,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4370,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IPool","contractDependencies":[],"contractKind":"interface","documentation":{"id":4371,"nodeType":"StructuredDocumentation","src":"71:36:26","text":"@notice Trident pool interface."},"fullyImplemented":false,"id":4461,"linearizedBaseContracts":[4461],"name":"IPool","nameLocation":"117:5:26","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4372,"nodeType":"StructuredDocumentation","src":"129:273:26","text":"@notice Executes a swap from one token to another.\n @dev The input tokens must've already been sent to the pool.\n @param data ABI-encoded params that the pool requires.\n @return finalAmountOut The amount of output tokens that were sent to the user."},"functionSelector":"627dd56a","id":4379,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"416:4:26","nodeType":"FunctionDefinition","parameters":{"id":4375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4374,"mutability":"mutable","name":"data","nameLocation":"436:4:26","nodeType":"VariableDeclaration","scope":4379,"src":"421:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4373,"name":"bytes","nodeType":"ElementaryTypeName","src":"421:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"420:21:26"},"returnParameters":{"id":4378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4377,"mutability":"mutable","name":"finalAmountOut","nameLocation":"484:14:26","nodeType":"VariableDeclaration","scope":4379,"src":"476:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4376,"name":"uint256","nodeType":"ElementaryTypeName","src":"476:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"475:24:26"},"scope":4461,"src":"407:93:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4380,"nodeType":"StructuredDocumentation","src":"506:328:26","text":"@notice Executes a swap from one token to another with a callback.\n @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\n @param data ABI-encoded params that the pool requires.\n @return finalAmountOut The amount of output tokens that were sent to the user."},"functionSelector":"053da1c8","id":4387,"implemented":false,"kind":"function","modifiers":[],"name":"flashSwap","nameLocation":"848:9:26","nodeType":"FunctionDefinition","parameters":{"id":4383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4382,"mutability":"mutable","name":"data","nameLocation":"873:4:26","nodeType":"VariableDeclaration","scope":4387,"src":"858:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4381,"name":"bytes","nodeType":"ElementaryTypeName","src":"858:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:21:26"},"returnParameters":{"id":4386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4385,"mutability":"mutable","name":"finalAmountOut","nameLocation":"921:14:26","nodeType":"VariableDeclaration","scope":4387,"src":"913:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4384,"name":"uint256","nodeType":"ElementaryTypeName","src":"913:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"912:24:26"},"scope":4461,"src":"839:98:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4388,"nodeType":"StructuredDocumentation","src":"943:186:26","text":"@notice Mints liquidity tokens.\n @param data ABI-encoded params that the pool requires.\n @return liquidity The amount of liquidity tokens that were minted for the user."},"functionSelector":"7ba0e2e7","id":4395,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1143:4:26","nodeType":"FunctionDefinition","parameters":{"id":4391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4390,"mutability":"mutable","name":"data","nameLocation":"1163:4:26","nodeType":"VariableDeclaration","scope":4395,"src":"1148:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4389,"name":"bytes","nodeType":"ElementaryTypeName","src":"1148:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1147:21:26"},"returnParameters":{"id":4394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4393,"mutability":"mutable","name":"liquidity","nameLocation":"1195:9:26","nodeType":"VariableDeclaration","scope":4395,"src":"1187:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4392,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:19:26"},"scope":4461,"src":"1134:72:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4396,"nodeType":"StructuredDocumentation","src":"1212:267:26","text":"@notice Burns liquidity tokens.\n @dev The input LP tokens must've already been sent to the pool.\n @param data ABI-encoded params that the pool requires.\n @return withdrawnAmounts The amount of various output tokens that were sent to the user."},"functionSelector":"2a07b6c7","id":4405,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"1493:4:26","nodeType":"FunctionDefinition","parameters":{"id":4399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4398,"mutability":"mutable","name":"data","nameLocation":"1513:4:26","nodeType":"VariableDeclaration","scope":4405,"src":"1498:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4397,"name":"bytes","nodeType":"ElementaryTypeName","src":"1498:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1497:21:26"},"returnParameters":{"id":4404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4403,"mutability":"mutable","name":"withdrawnAmounts","nameLocation":"1574:16:26","nodeType":"VariableDeclaration","scope":4405,"src":"1553:37:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenAmount_$4460_memory_ptr_$dyn_memory_ptr","typeString":"struct IPool.TokenAmount[]"},"typeName":{"baseType":{"id":4401,"nodeType":"UserDefinedTypeName","pathNode":{"id":4400,"name":"TokenAmount","nodeType":"IdentifierPath","referencedDeclaration":4460,"src":"1553:11:26"},"referencedDeclaration":4460,"src":"1553:11:26","typeDescriptions":{"typeIdentifier":"t_struct$_TokenAmount_$4460_storage_ptr","typeString":"struct IPool.TokenAmount"}},"id":4402,"nodeType":"ArrayTypeName","src":"1553:13:26","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenAmount_$4460_storage_$dyn_storage_ptr","typeString":"struct IPool.TokenAmount[]"}},"visibility":"internal"}],"src":"1552:39:26"},"scope":4461,"src":"1484:108:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4406,"nodeType":"StructuredDocumentation","src":"1598:278:26","text":"@notice Burns liquidity tokens for a single output token.\n @dev The input LP tokens must've already been sent to the pool.\n @param data ABI-encoded params that the pool requires.\n @return amountOut The amount of output tokens that were sent to the user."},"functionSelector":"af8c09bf","id":4413,"implemented":false,"kind":"function","modifiers":[],"name":"burnSingle","nameLocation":"1890:10:26","nodeType":"FunctionDefinition","parameters":{"id":4409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4408,"mutability":"mutable","name":"data","nameLocation":"1916:4:26","nodeType":"VariableDeclaration","scope":4413,"src":"1901:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4407,"name":"bytes","nodeType":"ElementaryTypeName","src":"1901:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1900:21:26"},"returnParameters":{"id":4412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4411,"mutability":"mutable","name":"amountOut","nameLocation":"1964:9:26","nodeType":"VariableDeclaration","scope":4413,"src":"1956:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4410,"name":"uint256","nodeType":"ElementaryTypeName","src":"1956:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1955:19:26"},"scope":4461,"src":"1881:94:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4414,"nodeType":"StructuredDocumentation","src":"1981:50:26","text":"@return A unique identifier for the pool type."},"functionSelector":"a69840a8","id":4419,"implemented":false,"kind":"function","modifiers":[],"name":"poolIdentifier","nameLocation":"2045:14:26","nodeType":"FunctionDefinition","parameters":{"id":4415,"nodeType":"ParameterList","parameters":[],"src":"2059:2:26"},"returnParameters":{"id":4418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4419,"src":"2085:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2085:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2084:9:26"},"scope":4461,"src":"2036:58:26","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":4420,"nodeType":"StructuredDocumentation","src":"2100:53:26","text":"@return An array of tokens supported by the pool."},"functionSelector":"67e4ac2c","id":4426,"implemented":false,"kind":"function","modifiers":[],"name":"getAssets","nameLocation":"2167:9:26","nodeType":"FunctionDefinition","parameters":{"id":4421,"nodeType":"ParameterList","parameters":[],"src":"2176:2:26"},"returnParameters":{"id":4425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4426,"src":"2202:16:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4422,"name":"address","nodeType":"ElementaryTypeName","src":"2202:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4423,"nodeType":"ArrayTypeName","src":"2202:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2201:18:26"},"scope":4461,"src":"2158:62:26","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4427,"nodeType":"StructuredDocumentation","src":"2226:348:26","text":"@notice Simulates a trade and returns the expected output.\n @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\n @param data ABI-encoded params that the pool requires.\n @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed."},"functionSelector":"a8f1f52e","id":4434,"implemented":false,"kind":"function","modifiers":[],"name":"getAmountOut","nameLocation":"2588:12:26","nodeType":"FunctionDefinition","parameters":{"id":4430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4429,"mutability":"mutable","name":"data","nameLocation":"2616:4:26","nodeType":"VariableDeclaration","scope":4434,"src":"2601:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4428,"name":"bytes","nodeType":"ElementaryTypeName","src":"2601:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2600:21:26"},"returnParameters":{"id":4433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4432,"mutability":"mutable","name":"finalAmountOut","nameLocation":"2677:14:26","nodeType":"VariableDeclaration","scope":4434,"src":"2669:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4431,"name":"uint256","nodeType":"ElementaryTypeName","src":"2669:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2668:24:26"},"scope":4461,"src":"2579:114:26","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4435,"nodeType":"StructuredDocumentation","src":"2699:348:26","text":"@notice Simulates a trade and returns the expected output.\n @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\n @param data ABI-encoded params that the pool requires.\n @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed."},"functionSelector":"499a3c50","id":4442,"implemented":false,"kind":"function","modifiers":[],"name":"getAmountIn","nameLocation":"3061:11:26","nodeType":"FunctionDefinition","parameters":{"id":4438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4437,"mutability":"mutable","name":"data","nameLocation":"3088:4:26","nodeType":"VariableDeclaration","scope":4442,"src":"3073:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4436,"name":"bytes","nodeType":"ElementaryTypeName","src":"3073:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3072:21:26"},"returnParameters":{"id":4441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4440,"mutability":"mutable","name":"finalAmountIn","nameLocation":"3149:13:26","nodeType":"VariableDeclaration","scope":4442,"src":"3141:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4439,"name":"uint256","nodeType":"ElementaryTypeName","src":"3141:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3140:23:26"},"scope":4461,"src":"3052:112:26","stateMutability":"view","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":4443,"nodeType":"StructuredDocumentation","src":"3170:49:26","text":"@dev This event must be emitted on all swaps."},"id":4455,"name":"Swap","nameLocation":"3230:4:26","nodeType":"EventDefinition","parameters":{"id":4454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4445,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"3260:9:26","nodeType":"VariableDeclaration","scope":4455,"src":"3244:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4444,"name":"address","nodeType":"ElementaryTypeName","src":"3244:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4447,"indexed":true,"mutability":"mutable","name":"tokenIn","nameLocation":"3295:7:26","nodeType":"VariableDeclaration","scope":4455,"src":"3279:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4446,"name":"address","nodeType":"ElementaryTypeName","src":"3279:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4449,"indexed":true,"mutability":"mutable","name":"tokenOut","nameLocation":"3328:8:26","nodeType":"VariableDeclaration","scope":4455,"src":"3312:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4448,"name":"address","nodeType":"ElementaryTypeName","src":"3312:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4451,"indexed":false,"mutability":"mutable","name":"amountIn","nameLocation":"3354:8:26","nodeType":"VariableDeclaration","scope":4455,"src":"3346:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4450,"name":"uint256","nodeType":"ElementaryTypeName","src":"3346:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4453,"indexed":false,"mutability":"mutable","name":"amountOut","nameLocation":"3380:9:26","nodeType":"VariableDeclaration","scope":4455,"src":"3372:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4452,"name":"uint256","nodeType":"ElementaryTypeName","src":"3372:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3234:161:26"},"src":"3224:172:26"},{"canonicalName":"IPool.TokenAmount","id":4460,"members":[{"constant":false,"id":4457,"mutability":"mutable","name":"token","nameLocation":"3496:5:26","nodeType":"VariableDeclaration","scope":4460,"src":"3488:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4456,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4459,"mutability":"mutable","name":"amount","nameLocation":"3519:6:26","nodeType":"VariableDeclaration","scope":4460,"src":"3511:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4458,"name":"uint256","nodeType":"ElementaryTypeName","src":"3511:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TokenAmount","nameLocation":"3466:11:26","nodeType":"StructDefinition","scope":4461,"src":"3459:73:26","visibility":"public"}],"scope":4462,"src":"107:3427:26","usedErrors":[]}],"src":"46:3488:26"},"id":26},"contracts/interfaces/trident/ITridentRouter.sol":{"ast":{"absolutePath":"contracts/interfaces/trident/ITridentRouter.sol","exportedSymbols":{"IBentoBoxMinimal":[4138],"IERC20":[667],"IPool":[4461],"ITridentRouter":[4544]},"id":4545,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4463,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:27"},{"absolutePath":"contracts/interfaces/trident/IPool.sol","file":"./IPool.sol","id":4464,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4545,"sourceUnit":4462,"src":"71:21:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IBentoBoxMinimal.sol","file":"../IBentoBoxMinimal.sol","id":4465,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4545,"sourceUnit":4139,"src":"93:33:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":4466,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4545,"sourceUnit":3,"src":"127:55:27","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ITridentRouter","contractDependencies":[],"contractKind":"interface","documentation":{"id":4467,"nodeType":"StructuredDocumentation","src":"184:43:27","text":"@notice Trident pool router interface."},"fullyImplemented":true,"id":4544,"linearizedBaseContracts":[4544],"name":"ITridentRouter","nameLocation":"237:14:27","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ITridentRouter.Path","id":4472,"members":[{"constant":false,"id":4469,"mutability":"mutable","name":"pool","nameLocation":"288:4:27","nodeType":"VariableDeclaration","scope":4472,"src":"280:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4468,"name":"address","nodeType":"ElementaryTypeName","src":"280:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4471,"mutability":"mutable","name":"data","nameLocation":"308:4:27","nodeType":"VariableDeclaration","scope":4472,"src":"302:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4470,"name":"bytes","nodeType":"ElementaryTypeName","src":"302:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"Path","nameLocation":"265:4:27","nodeType":"StructDefinition","scope":4544,"src":"258:61:27","visibility":"public"},{"canonicalName":"ITridentRouter.ExactInputSingleParams","id":4483,"members":[{"constant":false,"id":4474,"mutability":"mutable","name":"amountIn","nameLocation":"373:8:27","nodeType":"VariableDeclaration","scope":4483,"src":"365:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4473,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4476,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"399:16:27","nodeType":"VariableDeclaration","scope":4483,"src":"391:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4475,"name":"uint256","nodeType":"ElementaryTypeName","src":"391:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4478,"mutability":"mutable","name":"pool","nameLocation":"433:4:27","nodeType":"VariableDeclaration","scope":4483,"src":"425:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4477,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4480,"mutability":"mutable","name":"tokenIn","nameLocation":"455:7:27","nodeType":"VariableDeclaration","scope":4483,"src":"447:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4479,"name":"address","nodeType":"ElementaryTypeName","src":"447:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4482,"mutability":"mutable","name":"data","nameLocation":"478:4:27","nodeType":"VariableDeclaration","scope":4483,"src":"472:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4481,"name":"bytes","nodeType":"ElementaryTypeName","src":"472:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"ExactInputSingleParams","nameLocation":"332:22:27","nodeType":"StructDefinition","scope":4544,"src":"325:164:27","visibility":"public"},{"canonicalName":"ITridentRouter.ExactInputParams","id":4494,"members":[{"constant":false,"id":4485,"mutability":"mutable","name":"tokenIn","nameLocation":"537:7:27","nodeType":"VariableDeclaration","scope":4494,"src":"529:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4484,"name":"address","nodeType":"ElementaryTypeName","src":"529:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4487,"mutability":"mutable","name":"amountIn","nameLocation":"562:8:27","nodeType":"VariableDeclaration","scope":4494,"src":"554:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4486,"name":"uint256","nodeType":"ElementaryTypeName","src":"554:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4489,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"588:16:27","nodeType":"VariableDeclaration","scope":4494,"src":"580:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4488,"name":"uint256","nodeType":"ElementaryTypeName","src":"580:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4493,"mutability":"mutable","name":"path","nameLocation":"621:4:27","nodeType":"VariableDeclaration","scope":4494,"src":"614:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Path_$4472_storage_$dyn_storage_ptr","typeString":"struct ITridentRouter.Path[]"},"typeName":{"baseType":{"id":4491,"nodeType":"UserDefinedTypeName","pathNode":{"id":4490,"name":"Path","nodeType":"IdentifierPath","referencedDeclaration":4472,"src":"614:4:27"},"referencedDeclaration":4472,"src":"614:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Path_$4472_storage_ptr","typeString":"struct ITridentRouter.Path"}},"id":4492,"nodeType":"ArrayTypeName","src":"614:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Path_$4472_storage_$dyn_storage_ptr","typeString":"struct ITridentRouter.Path[]"}},"visibility":"internal"}],"name":"ExactInputParams","nameLocation":"502:16:27","nodeType":"StructDefinition","scope":4544,"src":"495:137:27","visibility":"public"},{"canonicalName":"ITridentRouter.TokenInput","id":4501,"members":[{"constant":false,"id":4496,"mutability":"mutable","name":"token","nameLocation":"674:5:27","nodeType":"VariableDeclaration","scope":4501,"src":"666:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4495,"name":"address","nodeType":"ElementaryTypeName","src":"666:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4498,"mutability":"mutable","name":"native","nameLocation":"694:6:27","nodeType":"VariableDeclaration","scope":4501,"src":"689:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4497,"name":"bool","nodeType":"ElementaryTypeName","src":"689:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4500,"mutability":"mutable","name":"amount","nameLocation":"718:6:27","nodeType":"VariableDeclaration","scope":4501,"src":"710:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4499,"name":"uint256","nodeType":"ElementaryTypeName","src":"710:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TokenInput","nameLocation":"645:10:27","nodeType":"StructDefinition","scope":4544,"src":"638:93:27","visibility":"public"},{"canonicalName":"ITridentRouter.InitialPath","id":4512,"members":[{"constant":false,"id":4503,"mutability":"mutable","name":"tokenIn","nameLocation":"774:7:27","nodeType":"VariableDeclaration","scope":4512,"src":"766:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4502,"name":"address","nodeType":"ElementaryTypeName","src":"766:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4505,"mutability":"mutable","name":"pool","nameLocation":"799:4:27","nodeType":"VariableDeclaration","scope":4512,"src":"791:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4504,"name":"address","nodeType":"ElementaryTypeName","src":"791:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4507,"mutability":"mutable","name":"native","nameLocation":"818:6:27","nodeType":"VariableDeclaration","scope":4512,"src":"813:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4506,"name":"bool","nodeType":"ElementaryTypeName","src":"813:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4509,"mutability":"mutable","name":"amount","nameLocation":"842:6:27","nodeType":"VariableDeclaration","scope":4512,"src":"834:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4508,"name":"uint256","nodeType":"ElementaryTypeName","src":"834:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4511,"mutability":"mutable","name":"data","nameLocation":"864:4:27","nodeType":"VariableDeclaration","scope":4512,"src":"858:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4510,"name":"bytes","nodeType":"ElementaryTypeName","src":"858:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"InitialPath","nameLocation":"744:11:27","nodeType":"StructDefinition","scope":4544,"src":"737:138:27","visibility":"public"},{"canonicalName":"ITridentRouter.PercentagePath","id":4521,"members":[{"constant":false,"id":4514,"mutability":"mutable","name":"tokenIn","nameLocation":"921:7:27","nodeType":"VariableDeclaration","scope":4521,"src":"913:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4513,"name":"address","nodeType":"ElementaryTypeName","src":"913:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4516,"mutability":"mutable","name":"pool","nameLocation":"946:4:27","nodeType":"VariableDeclaration","scope":4521,"src":"938:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4515,"name":"address","nodeType":"ElementaryTypeName","src":"938:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4518,"mutability":"mutable","name":"balancePercentage","nameLocation":"967:17:27","nodeType":"VariableDeclaration","scope":4521,"src":"960:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4517,"name":"uint64","nodeType":"ElementaryTypeName","src":"960:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4520,"mutability":"mutable","name":"data","nameLocation":"1042:4:27","nodeType":"VariableDeclaration","scope":4521,"src":"1036:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4519,"name":"bytes","nodeType":"ElementaryTypeName","src":"1036:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"PercentagePath","nameLocation":"888:14:27","nodeType":"StructDefinition","scope":4544,"src":"881:172:27","visibility":"public"},{"canonicalName":"ITridentRouter.Output","id":4530,"members":[{"constant":false,"id":4523,"mutability":"mutable","name":"token","nameLocation":"1091:5:27","nodeType":"VariableDeclaration","scope":4530,"src":"1083:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4522,"name":"address","nodeType":"ElementaryTypeName","src":"1083:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4525,"mutability":"mutable","name":"to","nameLocation":"1114:2:27","nodeType":"VariableDeclaration","scope":4530,"src":"1106:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4524,"name":"address","nodeType":"ElementaryTypeName","src":"1106:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4527,"mutability":"mutable","name":"unwrapBento","nameLocation":"1131:11:27","nodeType":"VariableDeclaration","scope":4530,"src":"1126:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4526,"name":"bool","nodeType":"ElementaryTypeName","src":"1126:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4529,"mutability":"mutable","name":"minAmount","nameLocation":"1160:9:27","nodeType":"VariableDeclaration","scope":4530,"src":"1152:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4528,"name":"uint256","nodeType":"ElementaryTypeName","src":"1152:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Output","nameLocation":"1066:6:27","nodeType":"StructDefinition","scope":4544,"src":"1059:117:27","visibility":"public"},{"canonicalName":"ITridentRouter.ComplexPathParams","id":4543,"members":[{"constant":false,"id":4534,"mutability":"mutable","name":"initialPath","nameLocation":"1231:11:27","nodeType":"VariableDeclaration","scope":4543,"src":"1217:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InitialPath_$4512_storage_$dyn_storage_ptr","typeString":"struct ITridentRouter.InitialPath[]"},"typeName":{"baseType":{"id":4532,"nodeType":"UserDefinedTypeName","pathNode":{"id":4531,"name":"InitialPath","nodeType":"IdentifierPath","referencedDeclaration":4512,"src":"1217:11:27"},"referencedDeclaration":4512,"src":"1217:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_InitialPath_$4512_storage_ptr","typeString":"struct ITridentRouter.InitialPath"}},"id":4533,"nodeType":"ArrayTypeName","src":"1217:13:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_InitialPath_$4512_storage_$dyn_storage_ptr","typeString":"struct ITridentRouter.InitialPath[]"}},"visibility":"internal"},{"constant":false,"id":4538,"mutability":"mutable","name":"percentagePath","nameLocation":"1269:14:27","nodeType":"VariableDeclaration","scope":4543,"src":"1252:31:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PercentagePath_$4521_storage_$dyn_storage_ptr","typeString":"struct ITridentRouter.PercentagePath[]"},"typeName":{"baseType":{"id":4536,"nodeType":"UserDefinedTypeName","pathNode":{"id":4535,"name":"PercentagePath","nodeType":"IdentifierPath","referencedDeclaration":4521,"src":"1252:14:27"},"referencedDeclaration":4521,"src":"1252:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_PercentagePath_$4521_storage_ptr","typeString":"struct ITridentRouter.PercentagePath"}},"id":4537,"nodeType":"ArrayTypeName","src":"1252:16:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PercentagePath_$4521_storage_$dyn_storage_ptr","typeString":"struct ITridentRouter.PercentagePath[]"}},"visibility":"internal"},{"constant":false,"id":4542,"mutability":"mutable","name":"output","nameLocation":"1302:6:27","nodeType":"VariableDeclaration","scope":4543,"src":"1293:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$4530_storage_$dyn_storage_ptr","typeString":"struct ITridentRouter.Output[]"},"typeName":{"baseType":{"id":4540,"nodeType":"UserDefinedTypeName","pathNode":{"id":4539,"name":"Output","nodeType":"IdentifierPath","referencedDeclaration":4530,"src":"1293:6:27"},"referencedDeclaration":4530,"src":"1293:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_Output_$4530_storage_ptr","typeString":"struct ITridentRouter.Output"}},"id":4541,"nodeType":"ArrayTypeName","src":"1293:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Output_$4530_storage_$dyn_storage_ptr","typeString":"struct ITridentRouter.Output[]"}},"visibility":"internal"}],"name":"ComplexPathParams","nameLocation":"1189:17:27","nodeType":"StructDefinition","scope":4544,"src":"1182:133:27","visibility":"public"}],"scope":4545,"src":"227:1090:27","usedErrors":[]}],"src":"46:1271:27"},"id":27},"contracts/interfaces/trident/ITridentSwapAdapter.sol":{"ast":{"absolutePath":"contracts/interfaces/trident/ITridentSwapAdapter.sol","exportedSymbols":{"Address":[1434],"BentoAdapter":[2803],"IBentoBoxMinimal":[4138],"IERC20":[667],"IERC20Permit":[728],"IImmutableState":[4244],"IPool":[4461],"IStargateRouter":[4360],"IStargateWidget":[4368],"ITridentRouter":[4544],"ITridentSwapAdapter":[4551],"IWETH":[4284],"ImmutableState":[4033],"SafeERC20":[1104],"TokenAdapter":[3566]},"id":4552,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4546,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:28"},{"absolutePath":"contracts/interfaces/trident/ITridentRouter.sol","file":"./ITridentRouter.sol","id":4547,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4552,"sourceUnit":4545,"src":"71:30:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/adapters/BentoAdapter.sol","file":"../../adapters/BentoAdapter.sol","id":4548,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4552,"sourceUnit":2804,"src":"102:41:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/adapters/TokenAdapter.sol","file":"../../adapters/TokenAdapter.sol","id":4549,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4552,"sourceUnit":3567,"src":"144:41:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/base/ImmutableState.sol","file":"../../base/ImmutableState.sol","id":4550,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4552,"sourceUnit":4034,"src":"186:39:28","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ITridentSwapAdapter","contractDependencies":[],"contractKind":"interface","fullyImplemented":true,"id":4551,"linearizedBaseContracts":[4551],"name":"ITridentSwapAdapter","nameLocation":"237:19:28","nodeType":"ContractDefinition","nodes":[],"scope":4552,"src":"227:32:28","usedErrors":[]}],"src":"46:213:28"},"id":28},"contracts/libraries/SafeMath.sol":{"ast":{"absolutePath":"contracts/libraries/SafeMath.sol","exportedSymbols":{"SafeMathUniswap":[4626]},"id":4627,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":4553,"literals":["solidity",">=","0.6",".12"],"nodeType":"PragmaDirective","src":"37:25:29"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMathUniswap","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4626,"linearizedBaseContracts":[4626],"name":"SafeMathUniswap","nameLocation":"178:15:29","nodeType":"ContractDefinition","nodes":[{"body":{"id":4574,"nodeType":"Block","src":"269:66:29","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4563,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4560,"src":"288:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4564,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4555,"src":"292:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4565,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4557,"src":"296:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"292:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"288:9:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4568,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"287:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4569,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4555,"src":"302:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"287:16:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"64732d6d6174682d6164642d6f766572666c6f77","id":4571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"305:22:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db","typeString":"literal_string \"ds-math-add-overflow\""},"value":"ds-math-add-overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db","typeString":"literal_string \"ds-math-add-overflow\""}],"id":4562,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"279:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"279:49:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4573,"nodeType":"ExpressionStatement","src":"279:49:29"}]},"id":4575,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"209:3:29","nodeType":"FunctionDefinition","parameters":{"id":4558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4555,"mutability":"mutable","name":"x","nameLocation":"221:1:29","nodeType":"VariableDeclaration","scope":4575,"src":"213:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4554,"name":"uint256","nodeType":"ElementaryTypeName","src":"213:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4557,"mutability":"mutable","name":"y","nameLocation":"232:1:29","nodeType":"VariableDeclaration","scope":4575,"src":"224:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4556,"name":"uint256","nodeType":"ElementaryTypeName","src":"224:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"212:22:29"},"returnParameters":{"id":4561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4560,"mutability":"mutable","name":"z","nameLocation":"266:1:29","nodeType":"VariableDeclaration","scope":4575,"src":"258:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4559,"name":"uint256","nodeType":"ElementaryTypeName","src":"258:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"257:11:29"},"scope":4626,"src":"200:135:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4596,"nodeType":"Block","src":"410:67:29","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4585,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4582,"src":"429:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4586,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4577,"src":"433:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4587,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4579,"src":"437:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"433:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"429:9:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4590,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"428:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4591,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4577,"src":"443:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"428:16:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"64732d6d6174682d7375622d756e646572666c6f77","id":4593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"446:23:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590","typeString":"literal_string \"ds-math-sub-underflow\""},"value":"ds-math-sub-underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590","typeString":"literal_string \"ds-math-sub-underflow\""}],"id":4584,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"420:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"420:50:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4595,"nodeType":"ExpressionStatement","src":"420:50:29"}]},"id":4597,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"350:3:29","nodeType":"FunctionDefinition","parameters":{"id":4580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4577,"mutability":"mutable","name":"x","nameLocation":"362:1:29","nodeType":"VariableDeclaration","scope":4597,"src":"354:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4576,"name":"uint256","nodeType":"ElementaryTypeName","src":"354:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4579,"mutability":"mutable","name":"y","nameLocation":"373:1:29","nodeType":"VariableDeclaration","scope":4597,"src":"365:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4578,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"353:22:29"},"returnParameters":{"id":4583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4582,"mutability":"mutable","name":"z","nameLocation":"407:1:29","nodeType":"VariableDeclaration","scope":4597,"src":"399:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4581,"name":"uint256","nodeType":"ElementaryTypeName","src":"399:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"398:11:29"},"scope":4626,"src":"341:136:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4624,"nodeType":"Block","src":"552:80:29","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4607,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"570:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"575:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"570:6:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":4614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4610,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4604,"src":"581:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4611,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"585:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4612,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"589:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"585:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"581:9:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4615,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"580:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4616,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"594:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"580:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4618,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"599:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"580:20:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"570:30:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"64732d6d6174682d6d756c2d6f766572666c6f77","id":4621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"602:22:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd","typeString":"literal_string \"ds-math-mul-overflow\""},"value":"ds-math-mul-overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd","typeString":"literal_string \"ds-math-mul-overflow\""}],"id":4606,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"562:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"562:63:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4623,"nodeType":"ExpressionStatement","src":"562:63:29"}]},"id":4625,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"492:3:29","nodeType":"FunctionDefinition","parameters":{"id":4602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4599,"mutability":"mutable","name":"x","nameLocation":"504:1:29","nodeType":"VariableDeclaration","scope":4625,"src":"496:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4598,"name":"uint256","nodeType":"ElementaryTypeName","src":"496:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4601,"mutability":"mutable","name":"y","nameLocation":"515:1:29","nodeType":"VariableDeclaration","scope":4625,"src":"507:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4600,"name":"uint256","nodeType":"ElementaryTypeName","src":"507:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"495:22:29"},"returnParameters":{"id":4605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4604,"mutability":"mutable","name":"z","nameLocation":"549:1:29","nodeType":"VariableDeclaration","scope":4625,"src":"541:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4603,"name":"uint256","nodeType":"ElementaryTypeName","src":"541:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"540:11:29"},"scope":4626,"src":"483:149:29","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4627,"src":"170:464:29","usedErrors":[]}],"src":"37:597:29"},"id":29},"contracts/libraries/UniswapV2Library.sol":{"ast":{"absolutePath":"contracts/libraries/UniswapV2Library.sol","exportedSymbols":{"IUniswapV2Pair":[2010],"SafeMathUniswap":[4626],"UniswapV2Library":[5112]},"id":5113,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":4628,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"37:24:30"},{"absolutePath":"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol","file":"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol","id":4629,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5113,"sourceUnit":2011,"src":"63:75:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/libraries/SafeMath.sol","file":"./SafeMath.sol","id":4630,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5113,"sourceUnit":4627,"src":"140:24:30","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"UniswapV2Library","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":5112,"linearizedBaseContracts":[5112],"name":"UniswapV2Library","nameLocation":"174:16:30","nodeType":"ContractDefinition","nodes":[{"id":4633,"libraryName":{"id":4631,"name":"SafeMathUniswap","nodeType":"IdentifierPath","referencedDeclaration":4626,"src":"203:15:30"},"nodeType":"UsingForDirective","src":"197:34:30","typeName":{"id":4632,"name":"uint256","nodeType":"ElementaryTypeName","src":"223:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"body":{"id":4676,"nodeType":"Block","src":"472:262:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4645,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"490:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4646,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"500:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"490:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553","id":4648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"508:39:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_4ddc3ca35a8b7ccaa016ab70252fdf3396ded4f4fd8375f95b1e9d99790fcdca","typeString":"literal_string \"UniswapV2Library: IDENTICAL_ADDRESSES\""},"value":"UniswapV2Library: IDENTICAL_ADDRESSES"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4ddc3ca35a8b7ccaa016ab70252fdf3396ded4f4fd8375f95b1e9d99790fcdca","typeString":"literal_string \"UniswapV2Library: IDENTICAL_ADDRESSES\""}],"id":4644,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"482:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"482:66:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4650,"nodeType":"ExpressionStatement","src":"482:66:30"},{"expression":{"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4651,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4640,"src":"559:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4652,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"567:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4653,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"558:16:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4654,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"577:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4655,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"586:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"577:15:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4660,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"639:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4661,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"647:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4662,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"638:16:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":4663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"577:77:30","trueExpression":{"components":[{"id":4657,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"608:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4658,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"616:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4659,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"607:16:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"src":"558:96:30","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4665,"nodeType":"ExpressionStatement","src":"558:96:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4667,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4640,"src":"672:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"690:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"682:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4668,"name":"address","nodeType":"ElementaryTypeName","src":"682:7:30","typeDescriptions":{}}},"id":4671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"682:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"672:20:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a205a45524f5f41444452455353","id":4673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"694:32:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_db0dda5a73ac3122e17df097fa2cbce2c5161b45d20c7d6cf363d3b147392c83","typeString":"literal_string \"UniswapV2Library: ZERO_ADDRESS\""},"value":"UniswapV2Library: ZERO_ADDRESS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_db0dda5a73ac3122e17df097fa2cbce2c5161b45d20c7d6cf363d3b147392c83","typeString":"literal_string \"UniswapV2Library: ZERO_ADDRESS\""}],"id":4666,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"664:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"664:63:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4675,"nodeType":"ExpressionStatement","src":"664:63:30"}]},"id":4677,"implemented":true,"kind":"function","modifiers":[],"name":"sortTokens","nameLocation":"346:10:30","nodeType":"FunctionDefinition","parameters":{"id":4638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4635,"mutability":"mutable","name":"tokenA","nameLocation":"365:6:30","nodeType":"VariableDeclaration","scope":4677,"src":"357:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4634,"name":"address","nodeType":"ElementaryTypeName","src":"357:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4637,"mutability":"mutable","name":"tokenB","nameLocation":"381:6:30","nodeType":"VariableDeclaration","scope":4677,"src":"373:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4636,"name":"address","nodeType":"ElementaryTypeName","src":"373:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"356:32:30"},"returnParameters":{"id":4643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4640,"mutability":"mutable","name":"token0","nameLocation":"444:6:30","nodeType":"VariableDeclaration","scope":4677,"src":"436:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4639,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4642,"mutability":"mutable","name":"token1","nameLocation":"460:6:30","nodeType":"VariableDeclaration","scope":4677,"src":"452:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4641,"name":"address","nodeType":"ElementaryTypeName","src":"452:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"435:32:30"},"scope":5112,"src":"337:397:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4726,"nodeType":"Block","src":"986:518:30","statements":[{"assignments":[4691,4693],"declarations":[{"constant":false,"id":4691,"mutability":"mutable","name":"token0","nameLocation":"1005:6:30","nodeType":"VariableDeclaration","scope":4726,"src":"997:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4690,"name":"address","nodeType":"ElementaryTypeName","src":"997:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4693,"mutability":"mutable","name":"token1","nameLocation":"1021:6:30","nodeType":"VariableDeclaration","scope":4726,"src":"1013:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4692,"name":"address","nodeType":"ElementaryTypeName","src":"1013:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4698,"initialValue":{"arguments":[{"id":4695,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"1042:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4696,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4683,"src":"1050:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4694,"name":"sortTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4677,"src":"1031:10:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$returns$_t_address_$_t_address_$","typeString":"function (address,address) pure returns (address,address)"}},"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1031:26:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"996:61:30"},{"expression":{"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4699,"name":"pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"1067:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"ff","id":4709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"1230:7:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string hex\"ff\""}},{"id":4710,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4679,"src":"1267:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"id":4714,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4691,"src":"1331:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4715,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4693,"src":"1339:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4712,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"1314:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4713,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1314:16:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1314:32:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4711,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"1304:9:30","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1304:43:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4718,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"1377:12:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string hex\"ff\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4707,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"1184:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1184:16:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1184:249:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4706,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"1149:9:30","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1149:306:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1120:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4704,"name":"uint256","nodeType":"ElementaryTypeName","src":"1120:7:30","typeDescriptions":{}}},"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1120:353:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1095:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4702,"name":"uint160","nodeType":"ElementaryTypeName","src":"1095:7:30","typeDescriptions":{}}},"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1095:392:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1074:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4700,"name":"address","nodeType":"ElementaryTypeName","src":"1074:7:30","typeDescriptions":{}}},"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1074:423:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1067:430:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4725,"nodeType":"ExpressionStatement","src":"1067:430:30"}]},"id":4727,"implemented":true,"kind":"function","modifiers":[],"name":"pairFor","nameLocation":"832:7:30","nodeType":"FunctionDefinition","parameters":{"id":4686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4679,"mutability":"mutable","name":"factory","nameLocation":"857:7:30","nodeType":"VariableDeclaration","scope":4727,"src":"849:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4678,"name":"address","nodeType":"ElementaryTypeName","src":"849:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4681,"mutability":"mutable","name":"tokenA","nameLocation":"882:6:30","nodeType":"VariableDeclaration","scope":4727,"src":"874:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4680,"name":"address","nodeType":"ElementaryTypeName","src":"874:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4683,"mutability":"mutable","name":"tokenB","nameLocation":"906:6:30","nodeType":"VariableDeclaration","scope":4727,"src":"898:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4682,"name":"address","nodeType":"ElementaryTypeName","src":"898:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4685,"mutability":"mutable","name":"pairCodeHash","nameLocation":"930:12:30","nodeType":"VariableDeclaration","scope":4727,"src":"922:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4684,"name":"bytes32","nodeType":"ElementaryTypeName","src":"922:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"839:109:30"},"returnParameters":{"id":4689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4688,"mutability":"mutable","name":"pair","nameLocation":"980:4:30","nodeType":"VariableDeclaration","scope":4727,"src":"972:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4687,"name":"address","nodeType":"ElementaryTypeName","src":"972:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"971:14:30"},"scope":5112,"src":"823:681:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4779,"nodeType":"Block","src":"1748:332:30","statements":[{"assignments":[4743,null],"declarations":[{"constant":false,"id":4743,"mutability":"mutable","name":"token0","nameLocation":"1767:6:30","nodeType":"VariableDeclaration","scope":4779,"src":"1759:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4742,"name":"address","nodeType":"ElementaryTypeName","src":"1759:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null],"id":4748,"initialValue":{"arguments":[{"id":4745,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"1790:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4746,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4733,"src":"1798:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4744,"name":"sortTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4677,"src":"1779:10:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$returns$_t_address_$_t_address_$","typeString":"function (address,address) pure returns (address,address)"}},"id":4747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1779:26:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"1758:47:30"},{"assignments":[4750,4752,null],"declarations":[{"constant":false,"id":4750,"mutability":"mutable","name":"reserve0","nameLocation":"1824:8:30","nodeType":"VariableDeclaration","scope":4779,"src":"1816:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4749,"name":"uint256","nodeType":"ElementaryTypeName","src":"1816:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4752,"mutability":"mutable","name":"reserve1","nameLocation":"1842:8:30","nodeType":"VariableDeclaration","scope":4779,"src":"1834:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4751,"name":"uint256","nodeType":"ElementaryTypeName","src":"1834:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":4763,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"arguments":[{"id":4755,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"1892:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4756,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"1901:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4757,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4733,"src":"1909:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4758,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4735,"src":"1917:12:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4754,"name":"pairFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"1884:7:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_address_$","typeString":"function (address,address,address,bytes32) pure returns (address)"}},"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1884:46:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4753,"name":"IUniswapV2Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"1856:14:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV2Pair_$2010_$","typeString":"type(contract IUniswapV2Pair)"}},"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1856:84:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$2010","typeString":"contract IUniswapV2Pair"}},"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getReserves","nodeType":"MemberAccess","referencedDeclaration":1952,"src":"1856:96:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"function () view external returns (uint112,uint112,uint32)"}},"id":4762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1856:98:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"tuple(uint112,uint112,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"1815:139:30"},{"expression":{"id":4777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4764,"name":"reserveA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4738,"src":"1965:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4765,"name":"reserveB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"1975:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4766,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"1964:20:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4767,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"1987:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4768,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4743,"src":"1997:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1987:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4773,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"2054:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4774,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4750,"src":"2064:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4775,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2053:20:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1987:86:30","trueExpression":{"components":[{"id":4770,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4750,"src":"2019:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4771,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"2029:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4772,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2018:20:30","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"1964:109:30","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4778,"nodeType":"ExpressionStatement","src":"1964:109:30"}]},"id":4780,"implemented":true,"kind":"function","modifiers":[],"name":"getReserves","nameLocation":"1568:11:30","nodeType":"FunctionDefinition","parameters":{"id":4736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4729,"mutability":"mutable","name":"factory","nameLocation":"1597:7:30","nodeType":"VariableDeclaration","scope":4780,"src":"1589:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4728,"name":"address","nodeType":"ElementaryTypeName","src":"1589:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4731,"mutability":"mutable","name":"tokenA","nameLocation":"1622:6:30","nodeType":"VariableDeclaration","scope":4780,"src":"1614:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4730,"name":"address","nodeType":"ElementaryTypeName","src":"1614:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4733,"mutability":"mutable","name":"tokenB","nameLocation":"1646:6:30","nodeType":"VariableDeclaration","scope":4780,"src":"1638:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4732,"name":"address","nodeType":"ElementaryTypeName","src":"1638:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4735,"mutability":"mutable","name":"pairCodeHash","nameLocation":"1670:12:30","nodeType":"VariableDeclaration","scope":4780,"src":"1662:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4734,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1662:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1579:109:30"},"returnParameters":{"id":4741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4738,"mutability":"mutable","name":"reserveA","nameLocation":"1720:8:30","nodeType":"VariableDeclaration","scope":4780,"src":"1712:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4737,"name":"uint256","nodeType":"ElementaryTypeName","src":"1712:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4740,"mutability":"mutable","name":"reserveB","nameLocation":"1738:8:30","nodeType":"VariableDeclaration","scope":4780,"src":"1730:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4739,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1711:36:30"},"scope":5112,"src":"1559:521:30","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4818,"nodeType":"Block","src":"2328:255:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4792,"name":"amountA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"2346:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2356:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2346:11:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f414d4f554e54","id":4795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2359:39:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_b3ea0cd729028efbc737ad3cde1d4d854e6f2c136b354fbaea9389d68bc3a146","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_AMOUNT\""},"value":"UniswapV2Library: INSUFFICIENT_AMOUNT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b3ea0cd729028efbc737ad3cde1d4d854e6f2c136b354fbaea9389d68bc3a146","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_AMOUNT\""}],"id":4791,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2338:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2338:61:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4797,"nodeType":"ExpressionStatement","src":"2338:61:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4799,"name":"reserveA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"2430:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2441:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2430:12:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4802,"name":"reserveB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"2446:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2457:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2446:12:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2430:28:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459","id":4806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2472:42:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""},"value":"UniswapV2Library: INSUFFICIENT_LIQUIDITY"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""}],"id":4798,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2409:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2409:115:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4808,"nodeType":"ExpressionStatement","src":"2409:115:30"},{"expression":{"id":4816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4809,"name":"amountB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4789,"src":"2534:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4812,"name":"reserveB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4786,"src":"2556:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4810,"name":"amountA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"2544:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4625,"src":"2544:11:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2544:21:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4814,"name":"reserveA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4784,"src":"2568:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2544:32:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2534:42:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4817,"nodeType":"ExpressionStatement","src":"2534:42:30"}]},"id":4819,"implemented":true,"kind":"function","modifiers":[],"name":"quote","nameLocation":"2199:5:30","nodeType":"FunctionDefinition","parameters":{"id":4787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4782,"mutability":"mutable","name":"amountA","nameLocation":"2222:7:30","nodeType":"VariableDeclaration","scope":4819,"src":"2214:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4781,"name":"uint256","nodeType":"ElementaryTypeName","src":"2214:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4784,"mutability":"mutable","name":"reserveA","nameLocation":"2247:8:30","nodeType":"VariableDeclaration","scope":4819,"src":"2239:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4783,"name":"uint256","nodeType":"ElementaryTypeName","src":"2239:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4786,"mutability":"mutable","name":"reserveB","nameLocation":"2273:8:30","nodeType":"VariableDeclaration","scope":4819,"src":"2265:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4785,"name":"uint256","nodeType":"ElementaryTypeName","src":"2265:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2204:83:30"},"returnParameters":{"id":4790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4789,"mutability":"mutable","name":"amountB","nameLocation":"2319:7:30","nodeType":"VariableDeclaration","scope":4819,"src":"2311:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4788,"name":"uint256","nodeType":"ElementaryTypeName","src":"2311:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2310:17:30"},"scope":5112,"src":"2190:393:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4878,"nodeType":"Block","src":"2853:444:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4831,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"2871:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2882:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2871:12:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54","id":4834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2885:45:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_ec21b006eb37ef20d0f4abcabd34de6854fa68af48294244e0263dc05c1dbbae","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\""},"value":"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ec21b006eb37ef20d0f4abcabd34de6854fa68af48294244e0263dc05c1dbbae","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\""}],"id":4830,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2863:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2863:68:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4836,"nodeType":"ExpressionStatement","src":"2863:68:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4838,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4823,"src":"2962:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2974:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2962:13:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4841,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"2979:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2992:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2979:14:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2962:31:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459","id":4845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3007:42:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""},"value":"UniswapV2Library: INSUFFICIENT_LIQUIDITY"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""}],"id":4837,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2941:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2941:118:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4847,"nodeType":"ExpressionStatement","src":"2941:118:30"},{"assignments":[4849],"declarations":[{"constant":false,"id":4849,"mutability":"mutable","name":"amountInWithFee","nameLocation":"3077:15:30","nodeType":"VariableDeclaration","scope":4878,"src":"3069:23:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4848,"name":"uint256","nodeType":"ElementaryTypeName","src":"3069:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4854,"initialValue":{"arguments":[{"hexValue":"393937","id":4852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3108:3:30","typeDescriptions":{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"},"value":"997"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"}],"expression":{"id":4850,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"3095:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4625,"src":"3095:12:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3095:17:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3069:43:30"},{"assignments":[4856],"declarations":[{"constant":false,"id":4856,"mutability":"mutable","name":"numerator","nameLocation":"3130:9:30","nodeType":"VariableDeclaration","scope":4878,"src":"3122:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4855,"name":"uint256","nodeType":"ElementaryTypeName","src":"3122:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4861,"initialValue":{"arguments":[{"id":4859,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"3162:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4857,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"3142:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4625,"src":"3142:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3142:31:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3122:51:30"},{"assignments":[4863],"declarations":[{"constant":false,"id":4863,"mutability":"mutable","name":"denominator","nameLocation":"3191:11:30","nodeType":"VariableDeclaration","scope":4878,"src":"3183:19:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4862,"name":"uint256","nodeType":"ElementaryTypeName","src":"3183:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4871,"initialValue":{"arguments":[{"id":4869,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"3229:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"hexValue":"31303030","id":4866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3219:4:30","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"}],"expression":{"id":4864,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4823,"src":"3205:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4625,"src":"3205:13:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3205:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4575,"src":"3205:23:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3205:40:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3183:62:30"},{"expression":{"id":4876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4872,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"3255:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4873,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4856,"src":"3267:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4874,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4863,"src":"3279:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3267:23:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3255:35:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4877,"nodeType":"ExpressionStatement","src":"3255:35:30"}]},"id":4879,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOut","nameLocation":"2711:12:30","nodeType":"FunctionDefinition","parameters":{"id":4826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4821,"mutability":"mutable","name":"amountIn","nameLocation":"2741:8:30","nodeType":"VariableDeclaration","scope":4879,"src":"2733:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4820,"name":"uint256","nodeType":"ElementaryTypeName","src":"2733:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4823,"mutability":"mutable","name":"reserveIn","nameLocation":"2767:9:30","nodeType":"VariableDeclaration","scope":4879,"src":"2759:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4822,"name":"uint256","nodeType":"ElementaryTypeName","src":"2759:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4825,"mutability":"mutable","name":"reserveOut","nameLocation":"2794:10:30","nodeType":"VariableDeclaration","scope":4879,"src":"2786:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4824,"name":"uint256","nodeType":"ElementaryTypeName","src":"2786:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2723:87:30"},"returnParameters":{"id":4829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4828,"mutability":"mutable","name":"amountOut","nameLocation":"2842:9:30","nodeType":"VariableDeclaration","scope":4879,"src":"2834:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4827,"name":"uint256","nodeType":"ElementaryTypeName","src":"2834:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2833:19:30"},"scope":5112,"src":"2702:595:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4938,"nodeType":"Block","src":"3565:398:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4891,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"3583:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3595:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3583:13:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54","id":4894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3598:46:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_35fb781059090c30aacad20e29b2e40e67f217617fc46f86031ed4eb14923a82","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\""},"value":"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_35fb781059090c30aacad20e29b2e40e67f217617fc46f86031ed4eb14923a82","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\""}],"id":4890,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"3575:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3575:70:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4896,"nodeType":"ExpressionStatement","src":"3575:70:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4898,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"3676:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3688:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3676:13:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4901,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4885,"src":"3693:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3706:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3693:14:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3676:31:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459","id":4905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3721:42:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""},"value":"UniswapV2Library: INSUFFICIENT_LIQUIDITY"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""}],"id":4897,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"3655:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3655:118:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4907,"nodeType":"ExpressionStatement","src":"3655:118:30"},{"assignments":[4909],"declarations":[{"constant":false,"id":4909,"mutability":"mutable","name":"numerator","nameLocation":"3791:9:30","nodeType":"VariableDeclaration","scope":4938,"src":"3783:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4908,"name":"uint256","nodeType":"ElementaryTypeName","src":"3783:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4917,"initialValue":{"arguments":[{"hexValue":"31303030","id":4915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3832:4:30","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"}],"expression":{"arguments":[{"id":4912,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"3817:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4910,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"3803:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4625,"src":"3803:13:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3803:24:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4625,"src":"3803:28:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3803:34:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3783:54:30"},{"assignments":[4919],"declarations":[{"constant":false,"id":4919,"mutability":"mutable","name":"denominator","nameLocation":"3855:11:30","nodeType":"VariableDeclaration","scope":4938,"src":"3847:19:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4918,"name":"uint256","nodeType":"ElementaryTypeName","src":"3847:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4927,"initialValue":{"arguments":[{"hexValue":"393937","id":4925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3899:3:30","typeDescriptions":{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"},"value":"997"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"}],"expression":{"arguments":[{"id":4922,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4881,"src":"3884:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4920,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4885,"src":"3869:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":4597,"src":"3869:14:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3869:25:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4625,"src":"3869:29:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3869:34:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3847:56:30"},{"expression":{"id":4936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4928,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4888,"src":"3913:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":4934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3954:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4929,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"3925:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4930,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4919,"src":"3937:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:23:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4932,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3924:25:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":4575,"src":"3924:29:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3924:32:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3913:43:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4937,"nodeType":"ExpressionStatement","src":"3913:43:30"}]},"id":4939,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountIn","nameLocation":"3424:11:30","nodeType":"FunctionDefinition","parameters":{"id":4886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4881,"mutability":"mutable","name":"amountOut","nameLocation":"3453:9:30","nodeType":"VariableDeclaration","scope":4939,"src":"3445:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4880,"name":"uint256","nodeType":"ElementaryTypeName","src":"3445:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4883,"mutability":"mutable","name":"reserveIn","nameLocation":"3480:9:30","nodeType":"VariableDeclaration","scope":4939,"src":"3472:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4882,"name":"uint256","nodeType":"ElementaryTypeName","src":"3472:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4885,"mutability":"mutable","name":"reserveOut","nameLocation":"3507:10:30","nodeType":"VariableDeclaration","scope":4939,"src":"3499:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4884,"name":"uint256","nodeType":"ElementaryTypeName","src":"3499:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3435:88:30"},"returnParameters":{"id":4889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4888,"mutability":"mutable","name":"amountIn","nameLocation":"3555:8:30","nodeType":"VariableDeclaration","scope":4939,"src":"3547:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4887,"name":"uint256","nodeType":"ElementaryTypeName","src":"3547:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3546:18:30"},"scope":5112,"src":"3415:548:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5022,"nodeType":"Block","src":"4232:483:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4955,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"4250:4:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4250:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"32","id":4957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4265:1:30","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4250:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e56414c49445f50415448","id":4959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4268:32:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222","typeString":"literal_string \"UniswapV2Library: INVALID_PATH\""},"value":"UniswapV2Library: INVALID_PATH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222","typeString":"literal_string \"UniswapV2Library: INVALID_PATH\""}],"id":4954,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"4242:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4242:59:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4961,"nodeType":"ExpressionStatement","src":"4242:59:30"},{"expression":{"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4962,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"4311:7:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":4966,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"4335:4:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4335:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4321:13:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4963,"name":"uint256","nodeType":"ElementaryTypeName","src":"4325:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4964,"nodeType":"ArrayTypeName","src":"4325:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4321:26:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"4311:36:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4970,"nodeType":"ExpressionStatement","src":"4311:36:30"},{"expression":{"id":4975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4971,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"4357:7:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4973,"indexExpression":{"hexValue":"30","id":4972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4365:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4357:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4974,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4943,"src":"4370:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4357:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4976,"nodeType":"ExpressionStatement","src":"4357:21:30"},{"body":{"id":5020,"nodeType":"Block","src":"4430:279:30","statements":[{"assignments":[4990,4992],"declarations":[{"constant":false,"id":4990,"mutability":"mutable","name":"reserveIn","nameLocation":"4453:9:30","nodeType":"VariableDeclaration","scope":5020,"src":"4445:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4989,"name":"uint256","nodeType":"ElementaryTypeName","src":"4445:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4992,"mutability":"mutable","name":"reserveOut","nameLocation":"4472:10:30","nodeType":"VariableDeclaration","scope":5020,"src":"4464:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4991,"name":"uint256","nodeType":"ElementaryTypeName","src":"4464:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5005,"initialValue":{"arguments":[{"id":4994,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4941,"src":"4515:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":4995,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"4540:4:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4997,"indexExpression":{"id":4996,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4978,"src":"4545:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4540:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":4998,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"4565:4:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5002,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4999,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4978,"src":"4570:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4574:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4570:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4565:11:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5003,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4948,"src":"4594:12:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4993,"name":"getReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4780,"src":"4486:11:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,address,bytes32) view returns (uint256,uint256)"}},"id":5004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4486:134:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4444:176:30"},{"expression":{"id":5018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5006,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"4634:7:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5010,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5007,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4978,"src":"4642:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4646:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4642:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4634:14:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":5012,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"4664:7:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5014,"indexExpression":{"id":5013,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4978,"src":"4672:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4664:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5015,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4990,"src":"4676:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5016,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4992,"src":"4687:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5011,"name":"getAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4879,"src":"4651:12:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":5017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4651:47:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4634:64:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5019,"nodeType":"ExpressionStatement","src":"4634:64:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4980,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4978,"src":"4404:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4981,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"4408:4:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4408:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4422:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4408:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4404:19:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5021,"initializationExpression":{"assignments":[4978],"declarations":[{"constant":false,"id":4978,"mutability":"mutable","name":"i","nameLocation":"4401:1:30","nodeType":"VariableDeclaration","scope":5021,"src":"4393:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4977,"name":"uint256","nodeType":"ElementaryTypeName","src":"4393:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4979,"nodeType":"VariableDeclarationStatement","src":"4393:9:30"},"loopExpression":{"expression":{"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4425:3:30","subExpression":{"id":4986,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4978,"src":"4425:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4988,"nodeType":"ExpressionStatement","src":"4425:3:30"},"nodeType":"ForStatement","src":"4388:321:30"}]},"id":5023,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountsOut","nameLocation":"4051:13:30","nodeType":"FunctionDefinition","parameters":{"id":4949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4941,"mutability":"mutable","name":"factory","nameLocation":"4082:7:30","nodeType":"VariableDeclaration","scope":5023,"src":"4074:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4940,"name":"address","nodeType":"ElementaryTypeName","src":"4074:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4943,"mutability":"mutable","name":"amountIn","nameLocation":"4107:8:30","nodeType":"VariableDeclaration","scope":5023,"src":"4099:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4942,"name":"uint256","nodeType":"ElementaryTypeName","src":"4099:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4946,"mutability":"mutable","name":"path","nameLocation":"4142:4:30","nodeType":"VariableDeclaration","scope":5023,"src":"4125:21:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4944,"name":"address","nodeType":"ElementaryTypeName","src":"4125:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4945,"nodeType":"ArrayTypeName","src":"4125:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4948,"mutability":"mutable","name":"pairCodeHash","nameLocation":"4164:12:30","nodeType":"VariableDeclaration","scope":5023,"src":"4156:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4156:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4064:118:30"},"returnParameters":{"id":4953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4952,"mutability":"mutable","name":"amounts","nameLocation":"4223:7:30","nodeType":"VariableDeclaration","scope":5023,"src":"4206:24:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4950,"name":"uint256","nodeType":"ElementaryTypeName","src":"4206:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4951,"nodeType":"ArrayTypeName","src":"4206:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4205:26:30"},"scope":5112,"src":"4042:673:30","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5110,"nodeType":"Block","src":"4983:504:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5039,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5030,"src":"5001:4:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5001:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"32","id":5041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5016:1:30","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5001:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e56414c49445f50415448","id":5043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5019:32:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222","typeString":"literal_string \"UniswapV2Library: INVALID_PATH\""},"value":"UniswapV2Library: INVALID_PATH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222","typeString":"literal_string \"UniswapV2Library: INVALID_PATH\""}],"id":5038,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"4993:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4993:59:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5045,"nodeType":"ExpressionStatement","src":"4993:59:30"},{"expression":{"id":5053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5046,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"5062:7:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5050,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5030,"src":"5086:4:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5086:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5072:13:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5047,"name":"uint256","nodeType":"ElementaryTypeName","src":"5076:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5048,"nodeType":"ArrayTypeName","src":"5076:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5072:26:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"5062:36:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5054,"nodeType":"ExpressionStatement","src":"5062:36:30"},{"expression":{"id":5062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5055,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"5108:7:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5060,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5056,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"5116:7:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5116:14:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5133:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5116:18:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5108:27:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5061,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5027,"src":"5138:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5108:39:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5063,"nodeType":"ExpressionStatement","src":"5108:39:30"},{"body":{"id":5108,"nodeType":"Block","src":"5203:278:30","statements":[{"assignments":[5078,5080],"declarations":[{"constant":false,"id":5078,"mutability":"mutable","name":"reserveIn","nameLocation":"5226:9:30","nodeType":"VariableDeclaration","scope":5108,"src":"5218:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5077,"name":"uint256","nodeType":"ElementaryTypeName","src":"5218:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5080,"mutability":"mutable","name":"reserveOut","nameLocation":"5245:10:30","nodeType":"VariableDeclaration","scope":5108,"src":"5237:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5079,"name":"uint256","nodeType":"ElementaryTypeName","src":"5237:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5093,"initialValue":{"arguments":[{"id":5082,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5025,"src":"5288:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":5083,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5030,"src":"5313:4:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5087,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5084,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"5318:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5322:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5318:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5313:11:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":5088,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5030,"src":"5342:4:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5090,"indexExpression":{"id":5089,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"5347:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5342:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5091,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"5367:12:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5081,"name":"getReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4780,"src":"5259:11:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,address,bytes32) view returns (uint256,uint256)"}},"id":5092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5259:134:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5217:176:30"},{"expression":{"id":5106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5094,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"5407:7:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5098,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5095,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"5415:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5419:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5415:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5407:14:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":5100,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5036,"src":"5436:7:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5102,"indexExpression":{"id":5101,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"5444:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5436:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5103,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"5448:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5104,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5080,"src":"5459:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5099,"name":"getAmountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4939,"src":"5424:11:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":5105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5424:46:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5407:63:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5107,"nodeType":"ExpressionStatement","src":"5407:63:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5071,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"5191:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5195:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5191:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5109,"initializationExpression":{"assignments":[5065],"declarations":[{"constant":false,"id":5065,"mutability":"mutable","name":"i","nameLocation":"5170:1:30","nodeType":"VariableDeclaration","scope":5109,"src":"5162:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5064,"name":"uint256","nodeType":"ElementaryTypeName","src":"5162:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5070,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5066,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5030,"src":"5174:4:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5174:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5188:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5174:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5162:27:30"},"loopExpression":{"expression":{"id":5075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"5198:3:30","subExpression":{"id":5074,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"5198:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5076,"nodeType":"ExpressionStatement","src":"5198:3:30"},"nodeType":"ForStatement","src":"5157:324:30"}]},"id":5111,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountsIn","nameLocation":"4802:12:30","nodeType":"FunctionDefinition","parameters":{"id":5033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5025,"mutability":"mutable","name":"factory","nameLocation":"4832:7:30","nodeType":"VariableDeclaration","scope":5111,"src":"4824:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5024,"name":"address","nodeType":"ElementaryTypeName","src":"4824:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5027,"mutability":"mutable","name":"amountOut","nameLocation":"4857:9:30","nodeType":"VariableDeclaration","scope":5111,"src":"4849:17:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5026,"name":"uint256","nodeType":"ElementaryTypeName","src":"4849:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5030,"mutability":"mutable","name":"path","nameLocation":"4893:4:30","nodeType":"VariableDeclaration","scope":5111,"src":"4876:21:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5028,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5029,"nodeType":"ArrayTypeName","src":"4876:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5032,"mutability":"mutable","name":"pairCodeHash","nameLocation":"4915:12:30","nodeType":"VariableDeclaration","scope":5111,"src":"4907:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5031,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4907:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4814:119:30"},"returnParameters":{"id":5037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5036,"mutability":"mutable","name":"amounts","nameLocation":"4974:7:30","nodeType":"VariableDeclaration","scope":5111,"src":"4957:24:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5034,"name":"uint256","nodeType":"ElementaryTypeName","src":"4957:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5035,"nodeType":"ArrayTypeName","src":"4957:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4956:26:30"},"scope":5112,"src":"4793:694:30","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":5113,"src":"166:5323:30","usedErrors":[]}],"src":"37:5452:30"},"id":30},"contracts/misc/StargateFeeV04Extraction.sol":{"ast":{"absolutePath":"contracts/misc/StargateFeeV04Extraction.sol","exportedSymbols":{"BridgeState":[5128],"Fees":[5137],"SafeMath":[1768],"StargateFeeV04Extraction":[5733]},"id":5734,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":5114,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"38:23:31"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":5115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5734,"sourceUnit":1769,"src":"63:57:31","symbolAliases":[],"unitAlias":""},{"canonicalName":"BridgeState","id":5128,"members":[{"constant":false,"id":5117,"mutability":"mutable","name":"currentAssetSD","nameLocation":"155:14:31","nodeType":"VariableDeclaration","scope":5128,"src":"147:22:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5116,"name":"uint256","nodeType":"ElementaryTypeName","src":"147:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5119,"mutability":"mutable","name":"lpAsset","nameLocation":"183:7:31","nodeType":"VariableDeclaration","scope":5128,"src":"175:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5118,"name":"uint256","nodeType":"ElementaryTypeName","src":"175:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5121,"mutability":"mutable","name":"eqFeePool","nameLocation":"204:9:31","nodeType":"VariableDeclaration","scope":5128,"src":"196:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5120,"name":"uint256","nodeType":"ElementaryTypeName","src":"196:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5123,"mutability":"mutable","name":"idealBalance","nameLocation":"227:12:31","nodeType":"VariableDeclaration","scope":5128,"src":"219:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5122,"name":"uint256","nodeType":"ElementaryTypeName","src":"219:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5125,"mutability":"mutable","name":"currentBalance","nameLocation":"253:14:31","nodeType":"VariableDeclaration","scope":5128,"src":"245:22:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5124,"name":"uint256","nodeType":"ElementaryTypeName","src":"245:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5127,"mutability":"mutable","name":"allocPointIsPositive","nameLocation":"278:20:31","nodeType":"VariableDeclaration","scope":5128,"src":"273:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5126,"name":"bool","nodeType":"ElementaryTypeName","src":"273:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BridgeState","nameLocation":"129:11:31","nodeType":"StructDefinition","scope":5734,"src":"122:179:31","visibility":"public"},{"canonicalName":"Fees","id":5137,"members":[{"constant":false,"id":5130,"mutability":"mutable","name":"eqFee","nameLocation":"329:5:31","nodeType":"VariableDeclaration","scope":5137,"src":"321:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5129,"name":"uint256","nodeType":"ElementaryTypeName","src":"321:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5132,"mutability":"mutable","name":"eqReward","nameLocation":"348:8:31","nodeType":"VariableDeclaration","scope":5137,"src":"340:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5131,"name":"uint256","nodeType":"ElementaryTypeName","src":"340:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5134,"mutability":"mutable","name":"lpFee","nameLocation":"370:5:31","nodeType":"VariableDeclaration","scope":5137,"src":"362:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5133,"name":"uint256","nodeType":"ElementaryTypeName","src":"362:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5136,"mutability":"mutable","name":"protocolFee","nameLocation":"389:11:31","nodeType":"VariableDeclaration","scope":5137,"src":"381:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5135,"name":"uint256","nodeType":"ElementaryTypeName","src":"381:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Fees","nameLocation":"310:4:31","nodeType":"StructDefinition","scope":5734,"src":"303:100:31","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"StargateFeeV04Extraction","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5733,"linearizedBaseContracts":[5733],"name":"StargateFeeV04Extraction","nameLocation":"414:24:31","nodeType":"ContractDefinition","nodes":[{"id":5140,"libraryName":{"id":5138,"name":"SafeMath","nodeType":"IdentifierPath","referencedDeclaration":1768,"src":"451:8:31"},"nodeType":"UsingForDirective","src":"445:27:31","typeName":{"id":5139,"name":"uint256","nodeType":"ElementaryTypeName","src":"464:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"functionSelector":"918f8674","id":5143,"mutability":"constant","name":"DENOMINATOR","nameLocation":"679:11:31","nodeType":"VariableDeclaration","scope":5733,"src":"655:42:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5141,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653138","id":5142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"693:4:31","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"public"},{"constant":true,"functionSelector":"3dad0dd5","id":5148,"mutability":"constant","name":"DELTA_1","nameLocation":"727:7:31","nodeType":"VariableDeclaration","scope":5733,"src":"703:45:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5144,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_600000000000000000_by_1","typeString":"int_const 600000000000000000"},"id":5147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"36303030","id":5145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"737:4:31","typeDescriptions":{"typeIdentifier":"t_rational_6000_by_1","typeString":"int_const 6000"},"value":"6000"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653134","id":5146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"744:4:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000_by_1","typeString":"int_const 100000000000000"},"value":"1e14"},"src":"737:11:31","typeDescriptions":{"typeIdentifier":"t_rational_600000000000000000_by_1","typeString":"int_const 600000000000000000"}},"visibility":"public"},{"constant":true,"functionSelector":"518a9f9f","id":5153,"mutability":"constant","name":"DELTA_2","nameLocation":"778:7:31","nodeType":"VariableDeclaration","scope":5733,"src":"754:44:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5149,"name":"uint256","nodeType":"ElementaryTypeName","src":"754:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_50000000000000000_by_1","typeString":"int_const 50000000000000000"},"id":5152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"353030","id":5150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"788:3:31","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653134","id":5151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"794:4:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000_by_1","typeString":"int_const 100000000000000"},"value":"1e14"},"src":"788:10:31","typeDescriptions":{"typeIdentifier":"t_rational_50000000000000000_by_1","typeString":"int_const 50000000000000000"}},"visibility":"public"},{"constant":true,"functionSelector":"a810de6c","id":5158,"mutability":"constant","name":"LAMBDA_1","nameLocation":"828:8:31","nodeType":"VariableDeclaration","scope":5733,"src":"804:44:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5154,"name":"uint256","nodeType":"ElementaryTypeName","src":"804:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_4000000000000000_by_1","typeString":"int_const 4000000000000000"},"id":5157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3430","id":5155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"839:2:31","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653134","id":5156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"844:4:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000_by_1","typeString":"int_const 100000000000000"},"value":"1e14"},"src":"839:9:31","typeDescriptions":{"typeIdentifier":"t_rational_4000000000000000_by_1","typeString":"int_const 4000000000000000"}},"visibility":"public"},{"constant":true,"functionSelector":"012a1c2d","id":5163,"mutability":"constant","name":"LAMBDA_2","nameLocation":"878:8:31","nodeType":"VariableDeclaration","scope":5733,"src":"854:46:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5159,"name":"uint256","nodeType":"ElementaryTypeName","src":"854:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_996000000000000000_by_1","typeString":"int_const 996000000000000000"},"id":5162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"39393630","id":5160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"889:4:31","typeDescriptions":{"typeIdentifier":"t_rational_9960_by_1","typeString":"int_const 9960"},"value":"9960"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653134","id":5161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"896:4:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000_by_1","typeString":"int_const 100000000000000"},"value":"1e14"},"src":"889:11:31","typeDescriptions":{"typeIdentifier":"t_rational_996000000000000000_by_1","typeString":"int_const 996000000000000000"}},"visibility":"public"},{"constant":true,"functionSelector":"5e3f2727","id":5168,"mutability":"constant","name":"LP_FEE","nameLocation":"930:6:31","nodeType":"VariableDeclaration","scope":5733,"src":"906:42:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5164,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_100000000000000_by_1","typeString":"int_const 100000000000000"},"id":5167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"939:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653133","id":5166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"944:4:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000_by_1","typeString":"int_const 10000000000000"},"value":"1e13"},"src":"939:9:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000_by_1","typeString":"int_const 100000000000000"}},"visibility":"public"},{"constant":true,"functionSelector":"0b4501fd","id":5173,"mutability":"constant","name":"PROTOCOL_FEE","nameLocation":"978:12:31","nodeType":"VariableDeclaration","scope":5733,"src":"954:48:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5169,"name":"uint256","nodeType":"ElementaryTypeName","src":"954:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_500000000000000_by_1","typeString":"int_const 500000000000000"},"id":5172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3530","id":5170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"993:2:31","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653133","id":5171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"998:4:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000_by_1","typeString":"int_const 10000000000000"},"value":"1e13"},"src":"993:9:31","typeDescriptions":{"typeIdentifier":"t_rational_500000000000000_by_1","typeString":"int_const 500000000000000"}},"visibility":"public"},{"constant":true,"functionSelector":"7ba5c12f","id":5178,"mutability":"constant","name":"PROTOCOL_SUBSIDY","nameLocation":"1032:16:31","nodeType":"VariableDeclaration","scope":5733,"src":"1008:51:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1008:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_30000000000000_by_1","typeString":"int_const 30000000000000"},"id":5177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":5175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1051:1:31","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653133","id":5176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1055:4:31","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000_by_1","typeString":"int_const 10000000000000"},"value":"1e13"},"src":"1051:8:31","typeDescriptions":{"typeIdentifier":"t_rational_30000000000000_by_1","typeString":"int_const 30000000000000"}},"visibility":"public"},{"constant":true,"functionSelector":"1e04cbf3","id":5183,"mutability":"constant","name":"FIFTY_PERCENT","nameLocation":"1090:13:31","nodeType":"VariableDeclaration","scope":5733,"src":"1066:48:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5179,"name":"uint256","nodeType":"ElementaryTypeName","src":"1066:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_500000000000000000_by_1","typeString":"int_const 500000000000000000"},"id":5182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"35","id":5180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1106:1:31","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653137","id":5181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1110:4:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000_by_1","typeString":"int_const 100000000000000000"},"value":"1e17"},"src":"1106:8:31","typeDescriptions":{"typeIdentifier":"t_rational_500000000000000000_by_1","typeString":"int_const 500000000000000000"}},"visibility":"public"},{"constant":true,"functionSelector":"886a9c50","id":5188,"mutability":"constant","name":"SIXTY_PERCENT","nameLocation":"1144:13:31","nodeType":"VariableDeclaration","scope":5733,"src":"1120:48:31","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5184,"name":"uint256","nodeType":"ElementaryTypeName","src":"1120:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_600000000000000000_by_1","typeString":"int_const 600000000000000000"},"id":5187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"36","id":5185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1160:1:31","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653137","id":5186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1164:4:31","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000_by_1","typeString":"int_const 100000000000000000"},"value":"1e17"},"src":"1160:8:31","typeDescriptions":{"typeIdentifier":"t_rational_600000000000000000_by_1","typeString":"int_const 600000000000000000"}},"visibility":"public"},{"body":{"id":5191,"nodeType":"Block","src":"1189:2:31","statements":[]},"id":5192,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5189,"nodeType":"ParameterList","parameters":[],"src":"1186:2:31"},"returnParameters":{"id":5190,"nodeType":"ParameterList","parameters":[],"src":"1189:0:31"},"scope":5733,"src":"1175:16:31","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5248,"nodeType":"Block","src":"2381:532:31","statements":[{"expression":{"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5205,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"2435:1:31","typeDescriptions":{"typeIdentifier":"t_struct$_Fees_$5137_memory_ptr","typeString":"struct Fees memory"}},"id":5207,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"eqReward","nodeType":"MemberAccess","referencedDeclaration":5132,"src":"2435:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5209,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5195,"src":"2461:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},{"id":5210,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5199,"src":"2468:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5208,"name":"_getEqReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5328,"src":"2448:12:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_BridgeState_$5128_memory_ptr_$_t_uint256_$returns$_t_uint256_$","typeString":"function (struct BridgeState memory,uint256) pure returns (uint256)"}},"id":5211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2448:29:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2435:42:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5213,"nodeType":"ExpressionStatement","src":"2435:42:31"},{"assignments":[5215],"declarations":[{"constant":false,"id":5215,"mutability":"mutable","name":"protocolSubsidy","nameLocation":"2537:15:31","nodeType":"VariableDeclaration","scope":5248,"src":"2529:23:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5214,"name":"uint256","nodeType":"ElementaryTypeName","src":"2529:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5216,"nodeType":"VariableDeclarationStatement","src":"2529:23:31"},{"expression":{"id":5226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"id":5217,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"2563:1:31","typeDescriptions":{"typeIdentifier":"t_struct$_Fees_$5137_memory_ptr","typeString":"struct Fees memory"}},"id":5219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"eqFee","nodeType":"MemberAccess","referencedDeclaration":5130,"src":"2563:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5220,"name":"protocolSubsidy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5215,"src":"2572:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5221,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"2562:26:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5223,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5195,"src":"2610:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},{"id":5224,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5199,"src":"2617:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5222,"name":"_getEquilibriumFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5499,"src":"2591:18:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_BridgeState_$5128_memory_ptr_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct BridgeState memory,uint256) pure returns (uint256,uint256)"}},"id":5225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2591:35:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"2562:64:31","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5227,"nodeType":"ExpressionStatement","src":"2562:64:31"},{"condition":{"id":5228,"name":"whitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5197,"src":"2709:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5232,"nodeType":"IfStatement","src":"2705:50:31","trueBody":{"id":5231,"nodeType":"Block","src":"2722:33:31","statements":[{"expression":{"id":5229,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"2743:1:31","typeDescriptions":{"typeIdentifier":"t_struct$_Fees_$5137_memory_ptr","typeString":"struct Fees memory"}},"functionReturnParameters":5204,"id":5230,"nodeType":"Return","src":"2736:8:31"}]}},{"expression":{"id":5244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"id":5233,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"2807:1:31","typeDescriptions":{"typeIdentifier":"t_struct$_Fees_$5137_memory_ptr","typeString":"struct Fees memory"}},"id":5235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":5136,"src":"2807:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5236,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"2822:1:31","typeDescriptions":{"typeIdentifier":"t_struct$_Fees_$5137_memory_ptr","typeString":"struct Fees memory"}},"id":5237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"lpFee","nodeType":"MemberAccess","referencedDeclaration":5134,"src":"2822:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5238,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"2806:24:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5240,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5195,"src":"2854:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},{"id":5241,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5199,"src":"2861:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5242,"name":"protocolSubsidy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5215,"src":"2871:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5239,"name":"_getProtocolAndLpFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5643,"src":"2833:20:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_BridgeState_$5128_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct BridgeState memory,uint256,uint256) pure returns (uint256,uint256)"}},"id":5243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2833:54:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"2806:81:31","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5245,"nodeType":"ExpressionStatement","src":"2806:81:31"},{"expression":{"id":5246,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"2905:1:31","typeDescriptions":{"typeIdentifier":"t_struct$_Fees_$5137_memory_ptr","typeString":"struct Fees memory"}},"functionReturnParameters":5204,"id":5247,"nodeType":"Return","src":"2898:8:31"}]},"functionSelector":"8afbd378","id":5249,"implemented":true,"kind":"function","modifiers":[],"name":"getFees","nameLocation":"2243:7:31","nodeType":"FunctionDefinition","parameters":{"id":5200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5195,"mutability":"mutable","name":"state","nameLocation":"2279:5:31","nodeType":"VariableDeclaration","scope":5249,"src":"2260:24:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState"},"typeName":{"id":5194,"nodeType":"UserDefinedTypeName","pathNode":{"id":5193,"name":"BridgeState","nodeType":"IdentifierPath","referencedDeclaration":5128,"src":"2260:11:31"},"referencedDeclaration":5128,"src":"2260:11:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_storage_ptr","typeString":"struct BridgeState"}},"visibility":"internal"},{"constant":false,"id":5197,"mutability":"mutable","name":"whitelisted","nameLocation":"2299:11:31","nodeType":"VariableDeclaration","scope":5249,"src":"2294:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5196,"name":"bool","nodeType":"ElementaryTypeName","src":"2294:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5199,"mutability":"mutable","name":"amountSD","nameLocation":"2328:8:31","nodeType":"VariableDeclaration","scope":5249,"src":"2320:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5198,"name":"uint256","nodeType":"ElementaryTypeName","src":"2320:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2250:92:31"},"returnParameters":{"id":5204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5203,"mutability":"mutable","name":"s","nameLocation":"2378:1:31","nodeType":"VariableDeclaration","scope":5249,"src":"2366:13:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Fees_$5137_memory_ptr","typeString":"struct Fees"},"typeName":{"id":5202,"nodeType":"UserDefinedTypeName","pathNode":{"id":5201,"name":"Fees","nodeType":"IdentifierPath","referencedDeclaration":5137,"src":"2366:4:31"},"referencedDeclaration":5137,"src":"2366:4:31","typeDescriptions":{"typeIdentifier":"t_struct$_Fees_$5137_storage_ptr","typeString":"struct Fees"}},"visibility":"internal"}],"src":"2365:15:31"},"scope":5733,"src":"2234:679:31","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":5327,"nodeType":"Block","src":"3049:650:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5259,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"3063:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lpAsset","nodeType":"MemberAccess","referencedDeclaration":5119,"src":"3063:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":5261,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"3080:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5262,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"currentAssetSD","nodeType":"MemberAccess","referencedDeclaration":5117,"src":"3080:20:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3063:37:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5267,"nodeType":"IfStatement","src":"3059:76:31","trueBody":{"id":5266,"nodeType":"Block","src":"3102:33:31","statements":[{"expression":{"hexValue":"30","id":5264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3123:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5258,"id":5265,"nodeType":"Return","src":"3116:8:31"}]}},{"assignments":[5269],"declarations":[{"constant":false,"id":5269,"mutability":"mutable","name":"poolDeficit","nameLocation":"3153:11:31","nodeType":"VariableDeclaration","scope":5327,"src":"3145:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5268,"name":"uint256","nodeType":"ElementaryTypeName","src":"3145:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5276,"initialValue":{"arguments":[{"expression":{"id":5273,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"3185:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"currentAssetSD","nodeType":"MemberAccess","referencedDeclaration":5117,"src":"3185:20:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":5270,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"3167:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5271,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lpAsset","nodeType":"MemberAccess","referencedDeclaration":5119,"src":"3167:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1647,"src":"3167:17:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3167:39:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3145:61:31"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":5283,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"3354:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5284,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lpAsset","nodeType":"MemberAccess","referencedDeclaration":5119,"src":"3354:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"hexValue":"313030","id":5280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3345:3:31","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}],"expression":{"expression":{"id":5277,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"3320:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5278,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"currentAssetSD","nodeType":"MemberAccess","referencedDeclaration":5117,"src":"3320:20:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"3320:24:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3320:29:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"3320:33:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3320:48:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3735","id":5286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3371:2:31","typeDescriptions":{"typeIdentifier":"t_rational_75_by_1","typeString":"int_const 75"},"value":"75"},"src":"3320:53:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"hexValue":"313030","id":5290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3390:3:31","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}],"expression":{"id":5288,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5254,"src":"3377:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"3377:12:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3377:17:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"hexValue":"32","id":5294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3413:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"id":5292,"name":"poolDeficit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5269,"src":"3397:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"3397:15:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3397:18:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3377:38:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3320:95:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5325,"nodeType":"Block","src":"3656:37:31","statements":[{"expression":{"id":5323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5321,"name":"eqReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"3670:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3681:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3670:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5324,"nodeType":"ExpressionStatement","src":"3670:12:31"}]},"id":5326,"nodeType":"IfStatement","src":"3316:377:31","trueBody":{"id":5320,"nodeType":"Block","src":"3417:233:31","statements":[{"expression":{"id":5307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5298,"name":"eqReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"3478:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5305,"name":"poolDeficit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5269,"src":"3523:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5302,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5254,"src":"3509:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":5299,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"3489:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5300,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"eqFeePool","nodeType":"MemberAccess","referencedDeclaration":5121,"src":"3489:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"3489:19:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3489:29:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"3489:33:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3489:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3478:57:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5308,"nodeType":"ExpressionStatement","src":"3478:57:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5309,"name":"eqReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"3553:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":5310,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"3564:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5311,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"eqFeePool","nodeType":"MemberAccess","referencedDeclaration":5121,"src":"3564:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3553:26:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5319,"nodeType":"IfStatement","src":"3549:91:31","trueBody":{"id":5318,"nodeType":"Block","src":"3581:59:31","statements":[{"expression":{"id":5316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5313,"name":"eqReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"3599:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5314,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"3610:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5315,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"eqFeePool","nodeType":"MemberAccess","referencedDeclaration":5121,"src":"3610:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3599:26:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5317,"nodeType":"ExpressionStatement","src":"3599:26:31"}]}}]}}]},"id":5328,"implemented":true,"kind":"function","modifiers":[],"name":"_getEqReward","nameLocation":"2929:12:31","nodeType":"FunctionDefinition","parameters":{"id":5255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5252,"mutability":"mutable","name":"state","nameLocation":"2970:5:31","nodeType":"VariableDeclaration","scope":5328,"src":"2951:24:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState"},"typeName":{"id":5251,"nodeType":"UserDefinedTypeName","pathNode":{"id":5250,"name":"BridgeState","nodeType":"IdentifierPath","referencedDeclaration":5128,"src":"2951:11:31"},"referencedDeclaration":5128,"src":"2951:11:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_storage_ptr","typeString":"struct BridgeState"}},"visibility":"internal"},{"constant":false,"id":5254,"mutability":"mutable","name":"amountSD","nameLocation":"2993:8:31","nodeType":"VariableDeclaration","scope":5328,"src":"2985:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5253,"name":"uint256","nodeType":"ElementaryTypeName","src":"2985:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2941:66:31"},"returnParameters":{"id":5258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5257,"mutability":"mutable","name":"eqReward","nameLocation":"3039:8:31","nodeType":"VariableDeclaration","scope":5328,"src":"3031:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5256,"name":"uint256","nodeType":"ElementaryTypeName","src":"3031:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3030:18:31"},"scope":5733,"src":"2920:779:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5498,"nodeType":"Block","src":"3840:1756:31","statements":[{"assignments":[5341],"declarations":[{"constant":false,"id":5341,"mutability":"mutable","name":"beforeBalance","nameLocation":"3858:13:31","nodeType":"VariableDeclaration","scope":5498,"src":"3850:21:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5340,"name":"uint256","nodeType":"ElementaryTypeName","src":"3850:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5344,"initialValue":{"expression":{"id":5342,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5331,"src":"3874:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"currentBalance","nodeType":"MemberAccess","referencedDeclaration":5125,"src":"3874:20:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3850:44:31"},{"assignments":[5346],"declarations":[{"constant":false,"id":5346,"mutability":"mutable","name":"idealBalance","nameLocation":"3912:12:31","nodeType":"VariableDeclaration","scope":5498,"src":"3904:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5345,"name":"uint256","nodeType":"ElementaryTypeName","src":"3904:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5349,"initialValue":{"expression":{"id":5347,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5331,"src":"3927:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5348,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"idealBalance","nodeType":"MemberAccess","referencedDeclaration":5123,"src":"3927:18:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3904:41:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5351,"name":"beforeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"3964:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5352,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5333,"src":"3981:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3964:25:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53746172676174653a206e6f7420656e6f7567682062616c616e6365","id":5354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3991:30:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_52bbb3c40124075312477fad1dc400b4bf82afa864a6f9b935fbf33a9f2833cc","typeString":"literal_string \"Stargate: not enough balance\""},"value":"Stargate: not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52bbb3c40124075312477fad1dc400b4bf82afa864a6f9b935fbf33a9f2833cc","typeString":"literal_string \"Stargate: not enough balance\""}],"id":5350,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"3956:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3956:66:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5356,"nodeType":"ExpressionStatement","src":"3956:66:31"},{"assignments":[5358],"declarations":[{"constant":false,"id":5358,"mutability":"mutable","name":"afterBalance","nameLocation":"4040:12:31","nodeType":"VariableDeclaration","scope":5498,"src":"4032:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5357,"name":"uint256","nodeType":"ElementaryTypeName","src":"4032:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5363,"initialValue":{"arguments":[{"id":5361,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5333,"src":"4073:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5359,"name":"beforeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"4055:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1647,"src":"4055:17:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4055:27:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4032:50:31"},{"assignments":[5365],"declarations":[{"constant":false,"id":5365,"mutability":"mutable","name":"safeZoneMax","nameLocation":"4101:11:31","nodeType":"VariableDeclaration","scope":5498,"src":"4093:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5364,"name":"uint256","nodeType":"ElementaryTypeName","src":"4093:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5373,"initialValue":{"arguments":[{"id":5371,"name":"DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"4145:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5368,"name":"DELTA_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5148,"src":"4132:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5366,"name":"idealBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"4115:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"4115:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4115:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"4115:29:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4115:42:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4093:64:31"},{"assignments":[5375],"declarations":[{"constant":false,"id":5375,"mutability":"mutable","name":"safeZoneMin","nameLocation":"4175:11:31","nodeType":"VariableDeclaration","scope":5498,"src":"4167:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5374,"name":"uint256","nodeType":"ElementaryTypeName","src":"4167:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5383,"initialValue":{"arguments":[{"id":5381,"name":"DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"4219:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5378,"name":"DELTA_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5153,"src":"4206:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5376,"name":"idealBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"4189:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"4189:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4189:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"4189:29:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4189:42:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4167:64:31"},{"assignments":[5385],"declarations":[{"constant":false,"id":5385,"mutability":"mutable","name":"eqFee","nameLocation":"4250:5:31","nodeType":"VariableDeclaration","scope":5498,"src":"4242:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5384,"name":"uint256","nodeType":"ElementaryTypeName","src":"4242:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5387,"initialValue":{"hexValue":"30","id":5386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4258:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4242:17:31"},{"assignments":[5389],"declarations":[{"constant":false,"id":5389,"mutability":"mutable","name":"protocolSubsidy","nameLocation":"4277:15:31","nodeType":"VariableDeclaration","scope":5498,"src":"4269:23:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5388,"name":"uint256","nodeType":"ElementaryTypeName","src":"4269:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5391,"initialValue":{"hexValue":"30","id":5390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4295:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4269:27:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5392,"name":"afterBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5358,"src":"4311:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5393,"name":"safeZoneMax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"4327:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4311:27:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5410,"name":"afterBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5358,"src":"4518:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5411,"name":"safeZoneMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"4534:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4518:27:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5491,"nodeType":"Block","src":"4801:748:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5434,"name":"beforeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"4846:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5435,"name":"safeZoneMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"4863:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4846:28:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5489,"nodeType":"Block","src":"5335:204:31","statements":[{"expression":{"id":5487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5475,"name":"eqFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"5423:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":5479,"name":"LAMBDA_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5163,"src":"5459:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5480,"name":"LAMBDA_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"5469:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5481,"name":"safeZoneMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"5479:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5492:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5483,"name":"beforeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"5495:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5484,"name":"afterBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5358,"src":"5510:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5478,"name":"_getTrapezoidArea","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"5441:17:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256,uint256,uint256) pure returns (uint256)"}},"id":5485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5441:82:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5476,"name":"eqFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"5431:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1632,"src":"5431:9:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5431:93:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5423:101:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5488,"nodeType":"ExpressionStatement","src":"5423:101:31"}]},"id":5490,"nodeType":"IfStatement","src":"4842:697:31","trueBody":{"id":5474,"nodeType":"Block","src":"4876:453:31","statements":[{"assignments":[5438],"declarations":[{"constant":false,"id":5438,"mutability":"mutable","name":"proxyBeforeBalance","nameLocation":"4967:18:31","nodeType":"VariableDeclaration","scope":5474,"src":"4959:26:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5437,"name":"uint256","nodeType":"ElementaryTypeName","src":"4959:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5445,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5439,"name":"beforeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"4988:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5440,"name":"safeZoneMax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"5004:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4988:27:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5443,"name":"safeZoneMax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"5034:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4988:57:31","trueExpression":{"id":5442,"name":"beforeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"5018:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4959:86:31"},{"expression":{"id":5458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5446,"name":"eqFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"5063:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":5450,"name":"LAMBDA_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"5099:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5109:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5452,"name":"safeZoneMax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"5112:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5453,"name":"safeZoneMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"5125:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5454,"name":"proxyBeforeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5438,"src":"5138:18:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5455,"name":"safeZoneMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"5158:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5449,"name":"_getTrapezoidArea","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"5081:17:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256,uint256,uint256) pure returns (uint256)"}},"id":5456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5081:89:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5447,"name":"eqFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"5071:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1632,"src":"5071:9:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5071:100:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5063:108:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5459,"nodeType":"ExpressionStatement","src":"5063:108:31"},{"expression":{"id":5472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5460,"name":"eqFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"5215:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":5464,"name":"LAMBDA_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5163,"src":"5251:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5465,"name":"LAMBDA_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"5261:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5466,"name":"safeZoneMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"5271:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5284:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5468,"name":"safeZoneMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"5287:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5469,"name":"afterBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5358,"src":"5300:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5463,"name":"_getTrapezoidArea","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"5233:17:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256,uint256,uint256) pure returns (uint256)"}},"id":5470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5233:80:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5461,"name":"eqFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"5223:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1632,"src":"5223:9:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5223:91:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5215:99:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5473,"nodeType":"ExpressionStatement","src":"5215:99:31"}]}}]},"id":5492,"nodeType":"IfStatement","src":"4514:1035:31","trueBody":{"id":5433,"nodeType":"Block","src":"4547:248:31","statements":[{"assignments":[5414],"declarations":[{"constant":false,"id":5414,"mutability":"mutable","name":"proxyBeforeBalance","nameLocation":"4594:18:31","nodeType":"VariableDeclaration","scope":5433,"src":"4586:26:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5413,"name":"uint256","nodeType":"ElementaryTypeName","src":"4586:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5421,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5415,"name":"beforeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"4615:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5416,"name":"safeZoneMax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"4631:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4615:27:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5419,"name":"safeZoneMax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"4661:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4615:57:31","trueExpression":{"id":5418,"name":"beforeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"4645:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4586:86:31"},{"expression":{"id":5431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5422,"name":"eqFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"4686:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5424,"name":"LAMBDA_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5158,"src":"4712:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4722:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5426,"name":"safeZoneMax","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"4725:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5427,"name":"safeZoneMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"4738:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5428,"name":"proxyBeforeBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5414,"src":"4751:18:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5429,"name":"afterBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5358,"src":"4771:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5423,"name":"_getTrapezoidArea","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5732,"src":"4694:17:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256,uint256,uint256) pure returns (uint256)"}},"id":5430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4694:90:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4686:98:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5432,"nodeType":"ExpressionStatement","src":"4686:98:31"}]}},"id":5493,"nodeType":"IfStatement","src":"4307:1242:31","trueBody":{"id":5409,"nodeType":"Block","src":"4340:168:31","statements":[{"expression":{"id":5403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5395,"name":"eqFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"4405:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5401,"name":"DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"4448:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5398,"name":"PROTOCOL_SUBSIDY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5178,"src":"4426:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5396,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5333,"src":"4413:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"4413:12:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4413:30:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"4413:34:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4413:47:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4405:55:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5404,"nodeType":"ExpressionStatement","src":"4405:55:31"},{"expression":{"id":5407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5405,"name":"protocolSubsidy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"4474:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5406,"name":"eqFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"4492:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4474:23:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5408,"nodeType":"ExpressionStatement","src":"4474:23:31"}]}},{"expression":{"components":[{"id":5494,"name":"eqFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5385,"src":"5566:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5495,"name":"protocolSubsidy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"5573:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5496,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5565:24:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":5339,"id":5497,"nodeType":"Return","src":"5558:31:31"}]},"id":5499,"implemented":true,"kind":"function","modifiers":[],"name":"_getEquilibriumFee","nameLocation":"3714:18:31","nodeType":"FunctionDefinition","parameters":{"id":5334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5331,"mutability":"mutable","name":"state","nameLocation":"3761:5:31","nodeType":"VariableDeclaration","scope":5499,"src":"3742:24:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState"},"typeName":{"id":5330,"nodeType":"UserDefinedTypeName","pathNode":{"id":5329,"name":"BridgeState","nodeType":"IdentifierPath","referencedDeclaration":5128,"src":"3742:11:31"},"referencedDeclaration":5128,"src":"3742:11:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_storage_ptr","typeString":"struct BridgeState"}},"visibility":"internal"},{"constant":false,"id":5333,"mutability":"mutable","name":"amountSD","nameLocation":"3784:8:31","nodeType":"VariableDeclaration","scope":5499,"src":"3776:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5332,"name":"uint256","nodeType":"ElementaryTypeName","src":"3776:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3732:66:31"},"returnParameters":{"id":5339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5499,"src":"3822:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5335,"name":"uint256","nodeType":"ElementaryTypeName","src":"3822:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5499,"src":"3831:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5337,"name":"uint256","nodeType":"ElementaryTypeName","src":"3831:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3821:18:31"},"scope":5733,"src":"3705:1891:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5642,"nodeType":"Block","src":"5790:1603:31","statements":[{"expression":{"id":5524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5513,"name":"protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"5800:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5522,"name":"protocolSubsidy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5506,"src":"5862:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5519,"name":"DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"5845:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5516,"name":"PROTOCOL_FEE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"5827:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5514,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5504,"src":"5814:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"5814:12:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5814:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"5814:30:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5814:43:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1647,"src":"5814:47:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5814:64:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5800:78:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5525,"nodeType":"ExpressionStatement","src":"5800:78:31"},{"expression":{"id":5534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5526,"name":"lpFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"5888:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5532,"name":"DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"5921:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5529,"name":"LP_FEE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5168,"src":"5909:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5527,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5504,"src":"5896:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"5896:12:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5896:20:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"5896:24:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5896:37:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5888:45:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5535,"nodeType":"ExpressionStatement","src":"5888:45:31"},{"condition":{"expression":{"id":5536,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5502,"src":"6024:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5537,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"allocPointIsPositive","nodeType":"MemberAccess","referencedDeclaration":5127,"src":"6024:26:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5550,"nodeType":"IfStatement","src":"6020:116:31","trueBody":{"id":5549,"nodeType":"Block","src":"6052:84:31","statements":[{"expression":{"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5538,"name":"protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"6066:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5541,"name":"lpFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"6096:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5539,"name":"protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"6080:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1632,"src":"6080:15:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6080:22:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6066:36:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5544,"nodeType":"ExpressionStatement","src":"6066:36:31"},{"expression":{"id":5547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5545,"name":"lpFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"6116:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6124:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6116:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5548,"nodeType":"ExpressionStatement","src":"6116:9:31"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5551,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5502,"src":"6150:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5552,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lpAsset","nodeType":"MemberAccess","referencedDeclaration":5119,"src":"6150:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6167:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6150:18:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5560,"nodeType":"IfStatement","src":"6146:76:31","trueBody":{"id":5559,"nodeType":"Block","src":"6170:52:31","statements":[{"expression":{"components":[{"id":5555,"name":"protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"6192:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5556,"name":"lpFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"6205:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5557,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6191:20:31","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":5512,"id":5558,"nodeType":"Return","src":"6184:27:31"}]}},{"assignments":[5562],"declarations":[{"constant":false,"id":5562,"mutability":"mutable","name":"isAboveIdeal","nameLocation":"6237:12:31","nodeType":"VariableDeclaration","scope":5642,"src":"6232:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5561,"name":"bool","nodeType":"ElementaryTypeName","src":"6232:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5577,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5566,"name":"amountSD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5504,"src":"6277:8:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":5563,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5502,"src":"6252:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5564,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"currentBalance","nodeType":"MemberAccess","referencedDeclaration":5125,"src":"6252:20:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1647,"src":"6252:24:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6252:34:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"id":5574,"name":"DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"6331:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5571,"name":"SIXTY_PERCENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5188,"src":"6312:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":5568,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5502,"src":"6289:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5569,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"idealBalance","nodeType":"MemberAccess","referencedDeclaration":5123,"src":"6289:18:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"6289:22:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6289:37:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"6289:41:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6289:54:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6252:91:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"6232:111:31"},{"assignments":[5579],"declarations":[{"constant":false,"id":5579,"mutability":"mutable","name":"currentAssetNumerated","nameLocation":"6361:21:31","nodeType":"VariableDeclaration","scope":5642,"src":"6353:29:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5578,"name":"uint256","nodeType":"ElementaryTypeName","src":"6353:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5589,"initialValue":{"arguments":[{"expression":{"id":5586,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5502,"src":"6427:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5587,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lpAsset","nodeType":"MemberAccess","referencedDeclaration":5119,"src":"6427:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5583,"name":"DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"6410:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":5580,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5502,"src":"6385:5:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState memory"}},"id":5581,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"currentAssetSD","nodeType":"MemberAccess","referencedDeclaration":5117,"src":"6385:20:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"6385:24:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6385:37:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"6385:41:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6385:56:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6353:88:31"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5590,"name":"currentAssetNumerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"6455:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5591,"name":"FIFTY_PERCENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5183,"src":"6480:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6455:38:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":5593,"name":"isAboveIdeal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5562,"src":"6497:12:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6455:54:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5604,"name":"currentAssetNumerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"6620:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5605,"name":"SIXTY_PERCENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5188,"src":"6644:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6620:37:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":5607,"name":"isAboveIdeal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5562,"src":"6661:12:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6620:53:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5640,"nodeType":"IfStatement","src":"6615:739:31","trueBody":{"id":5639,"nodeType":"Block","src":"6675:679:31","statements":[{"assignments":[5610],"declarations":[{"constant":false,"id":5610,"mutability":"mutable","name":"haircut","nameLocation":"7129:7:31","nodeType":"VariableDeclaration","scope":5639,"src":"7121:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5609,"name":"uint256","nodeType":"ElementaryTypeName","src":"7121:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5618,"initialValue":{"arguments":[{"hexValue":"3130","id":5616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7184:2:31","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}],"expression":{"arguments":[{"id":5613,"name":"FIFTY_PERCENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5183,"src":"7165:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5611,"name":"currentAssetNumerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"7139:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1647,"src":"7139:25:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7139:40:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"7139:44:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7139:48:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7121:66:31"},{"expression":{"id":5627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5619,"name":"protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"7231:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5625,"name":"DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"7274:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5622,"name":"haircut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5610,"src":"7261:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5620,"name":"protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"7245:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"7245:15:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7245:24:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"7245:28:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7245:41:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7231:55:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5628,"nodeType":"ExpressionStatement","src":"7231:55:31"},{"expression":{"id":5637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5629,"name":"lpFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"7300:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5635,"name":"DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"7331:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5632,"name":"haircut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5610,"src":"7318:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5630,"name":"lpFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"7308:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"7308:9:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7308:18:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"7308:22:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7308:35:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7300:43:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5638,"nodeType":"ExpressionStatement","src":"7300:43:31"}]}},"id":5641,"nodeType":"IfStatement","src":"6451:903:31","trueBody":{"id":5603,"nodeType":"Block","src":"6511:98:31","statements":[{"expression":{"id":5597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5595,"name":"protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"6560:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6574:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6560:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5598,"nodeType":"ExpressionStatement","src":"6560:15:31"},{"expression":{"id":5601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5599,"name":"lpFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"6589:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6597:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6589:9:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5602,"nodeType":"ExpressionStatement","src":"6589:9:31"}]}}]},"id":5643,"implemented":true,"kind":"function","modifiers":[],"name":"_getProtocolAndLpFee","nameLocation":"5611:20:31","nodeType":"FunctionDefinition","parameters":{"id":5507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5502,"mutability":"mutable","name":"state","nameLocation":"5660:5:31","nodeType":"VariableDeclaration","scope":5643,"src":"5641:24:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_memory_ptr","typeString":"struct BridgeState"},"typeName":{"id":5501,"nodeType":"UserDefinedTypeName","pathNode":{"id":5500,"name":"BridgeState","nodeType":"IdentifierPath","referencedDeclaration":5128,"src":"5641:11:31"},"referencedDeclaration":5128,"src":"5641:11:31","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeState_$5128_storage_ptr","typeString":"struct BridgeState"}},"visibility":"internal"},{"constant":false,"id":5504,"mutability":"mutable","name":"amountSD","nameLocation":"5683:8:31","nodeType":"VariableDeclaration","scope":5643,"src":"5675:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5503,"name":"uint256","nodeType":"ElementaryTypeName","src":"5675:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5506,"mutability":"mutable","name":"protocolSubsidy","nameLocation":"5709:15:31","nodeType":"VariableDeclaration","scope":5643,"src":"5701:23:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5505,"name":"uint256","nodeType":"ElementaryTypeName","src":"5701:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5631:99:31"},"returnParameters":{"id":5512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5509,"mutability":"mutable","name":"protocolFee","nameLocation":"5762:11:31","nodeType":"VariableDeclaration","scope":5643,"src":"5754:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5508,"name":"uint256","nodeType":"ElementaryTypeName","src":"5754:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5511,"mutability":"mutable","name":"lpFee","nameLocation":"5783:5:31","nodeType":"VariableDeclaration","scope":5643,"src":"5775:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5510,"name":"uint256","nodeType":"ElementaryTypeName","src":"5775:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5753:36:31"},"scope":5733,"src":"5602:1791:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5731,"nodeType":"Block","src":"7617:582:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5661,"name":"xEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5655,"src":"7635:4:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5662,"name":"xLowerBound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5651,"src":"7643:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7635:19:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5664,"name":"xStart","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5653,"src":"7658:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5665,"name":"xUpperBound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"7668:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7658:21:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7635:44:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53746172676174653a2062616c616e6365206f7574206f6620626f756e64","id":5668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7681:32:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_4f8489e1ed900cc7a11e9afc2d03fb718a9d8bf33dd95deb11c5aac3f737ff19","typeString":"literal_string \"Stargate: balance out of bound\""},"value":"Stargate: balance out of bound"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4f8489e1ed900cc7a11e9afc2d03fb718a9d8bf33dd95deb11c5aac3f737ff19","typeString":"literal_string \"Stargate: balance out of bound\""}],"id":5660,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"7627:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7627:87:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5670,"nodeType":"ExpressionStatement","src":"7627:87:31"},{"assignments":[5672],"declarations":[{"constant":false,"id":5672,"mutability":"mutable","name":"xBoundWidth","nameLocation":"7732:11:31","nodeType":"VariableDeclaration","scope":5731,"src":"7724:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5671,"name":"uint256","nodeType":"ElementaryTypeName","src":"7724:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5677,"initialValue":{"arguments":[{"id":5675,"name":"xLowerBound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5651,"src":"7762:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5673,"name":"xUpperBound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"7746:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1647,"src":"7746:15:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7746:28:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7724:50:31"},{"assignments":[5679],"declarations":[{"constant":false,"id":5679,"mutability":"mutable","name":"yStart","nameLocation":"7843:6:31","nodeType":"VariableDeclaration","scope":5731,"src":"7835:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5678,"name":"uint256","nodeType":"ElementaryTypeName","src":"7835:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5693,"initialValue":{"arguments":[{"id":5691,"name":"yOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5647,"src":"7909:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5688,"name":"xBoundWidth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5672,"src":"7892:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5685,"name":"lambda","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"7880:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5682,"name":"xStart","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5653,"src":"7868:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5680,"name":"xUpperBound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"7852:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1647,"src":"7852:15:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7852:23:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"7852:27:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7852:35:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"7852:39:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7852:52:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1632,"src":"7852:56:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7852:65:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7835:82:31"},{"assignments":[5695],"declarations":[{"constant":false,"id":5695,"mutability":"mutable","name":"yEnd","nameLocation":"7981:4:31","nodeType":"VariableDeclaration","scope":5731,"src":"7973:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5694,"name":"uint256","nodeType":"ElementaryTypeName","src":"7973:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5709,"initialValue":{"arguments":[{"id":5707,"name":"yOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5647,"src":"8043:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5704,"name":"xBoundWidth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5672,"src":"8026:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5701,"name":"lambda","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"8014:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5698,"name":"xEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5655,"src":"8004:4:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5696,"name":"xUpperBound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"7988:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1647,"src":"7988:15:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7988:21:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"7988:25:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7988:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"7988:37:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7988:50:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1632,"src":"7988:54:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7988:63:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7973:78:31"},{"assignments":[5711],"declarations":[{"constant":false,"id":5711,"mutability":"mutable","name":"deltaX","nameLocation":"8098:6:31","nodeType":"VariableDeclaration","scope":5731,"src":"8090:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5710,"name":"uint256","nodeType":"ElementaryTypeName","src":"8090:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5716,"initialValue":{"arguments":[{"id":5714,"name":"xEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5655,"src":"8118:4:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5712,"name":"xStart","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5653,"src":"8107:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1647,"src":"8107:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8107:16:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8090:33:31"},{"expression":{"arguments":[{"id":5728,"name":"DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"8180:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"hexValue":"32","id":5725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8173:1:31","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"arguments":[{"id":5722,"name":"deltaX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5711,"src":"8161:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5719,"name":"yEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5695,"src":"8151:4:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5717,"name":"yStart","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5679,"src":"8140:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1632,"src":"8140:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8140:16:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1662,"src":"8140:20:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8140:28:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"8140:32:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8140:35:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1677,"src":"8140:39:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8140:52:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5659,"id":5730,"nodeType":"Return","src":"8133:59:31"}]},"id":5732,"implemented":true,"kind":"function","modifiers":[],"name":"_getTrapezoidArea","nameLocation":"7408:17:31","nodeType":"FunctionDefinition","parameters":{"id":5656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5645,"mutability":"mutable","name":"lambda","nameLocation":"7443:6:31","nodeType":"VariableDeclaration","scope":5732,"src":"7435:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5644,"name":"uint256","nodeType":"ElementaryTypeName","src":"7435:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5647,"mutability":"mutable","name":"yOffset","nameLocation":"7467:7:31","nodeType":"VariableDeclaration","scope":5732,"src":"7459:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5646,"name":"uint256","nodeType":"ElementaryTypeName","src":"7459:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5649,"mutability":"mutable","name":"xUpperBound","nameLocation":"7492:11:31","nodeType":"VariableDeclaration","scope":5732,"src":"7484:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5648,"name":"uint256","nodeType":"ElementaryTypeName","src":"7484:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5651,"mutability":"mutable","name":"xLowerBound","nameLocation":"7521:11:31","nodeType":"VariableDeclaration","scope":5732,"src":"7513:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5650,"name":"uint256","nodeType":"ElementaryTypeName","src":"7513:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5653,"mutability":"mutable","name":"xStart","nameLocation":"7550:6:31","nodeType":"VariableDeclaration","scope":5732,"src":"7542:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5652,"name":"uint256","nodeType":"ElementaryTypeName","src":"7542:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5655,"mutability":"mutable","name":"xEnd","nameLocation":"7574:4:31","nodeType":"VariableDeclaration","scope":5732,"src":"7566:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5654,"name":"uint256","nodeType":"ElementaryTypeName","src":"7566:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7425:159:31"},"returnParameters":{"id":5659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5658,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5732,"src":"7608:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5657,"name":"uint256","nodeType":"ElementaryTypeName","src":"7608:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7607:9:31"},"scope":5733,"src":"7399:800:31","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5734,"src":"405:7796:31","usedErrors":[]}],"src":"38:8163:31"},"id":31},"contracts/mocks/MockERC20.sol":{"ast":{"absolutePath":"contracts/mocks/MockERC20.sol","exportedSymbols":{"Context":[1456],"ERC20":[589],"IERC20":[667],"IERC20Metadata":[692],"MockERC20":[5741]},"id":5742,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":5735,"literals":["solidity","0.8",".11"],"nodeType":"PragmaDirective","src":"46:23:32"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":5736,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5742,"sourceUnit":590,"src":"71:55:32","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"arguments":[{"hexValue":"546f6b656e2031","id":5738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"156:9:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_5eacce6c95f6838cd10e92f48b0d82f4df03d4ad1e947ebc0e9a235c5ef43194","typeString":"literal_string \"Token 1\""},"value":"Token 1"},{"hexValue":"544f4b","id":5739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"167:5:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_92ec8c068e88c9c67ad1e93c5fb28a0afc1877fa1cdd216a8e4e432482417ddd","typeString":"literal_string \"TOK\""},"value":"TOK"}],"baseName":{"id":5737,"name":"ERC20","nodeType":"IdentifierPath","referencedDeclaration":589,"src":"150:5:32"},"id":5740,"nodeType":"InheritanceSpecifier","src":"150:23:32"}],"canonicalName":"MockERC20","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5741,"linearizedBaseContracts":[5741,589,692,667,1456],"name":"MockERC20","nameLocation":"137:9:32","nodeType":"ContractDefinition","nodes":[],"scope":5742,"src":"128:51:32","usedErrors":[]}],"src":"46:133:32"},"id":32}},"contracts":{"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_47":{"entryPoint":null,"id":47,"parameterSlots":2,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":292,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":475,"id":null,"parameterSlots":2,"returnSlots":2},"extract_byte_array_length":{"entryPoint":581,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":270,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1985:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:33"},"nodeType":"YulFunctionCall","src":"66:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:33"},"nodeType":"YulFunctionCall","src":"56:31:33"},"nodeType":"YulExpressionStatement","src":"56:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:33"},"nodeType":"YulFunctionCall","src":"96:15:33"},"nodeType":"YulExpressionStatement","src":"96:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:33"},"nodeType":"YulFunctionCall","src":"120:15:33"},"nodeType":"YulExpressionStatement","src":"120:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:33"},{"body":{"nodeType":"YulBlock","src":"210:821:33","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:33"},"nodeType":"YulFunctionCall","src":"261:12:33"},"nodeType":"YulExpressionStatement","src":"261:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:33"},"nodeType":"YulFunctionCall","src":"234:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:33"},"nodeType":"YulFunctionCall","src":"230:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:33"},"nodeType":"YulFunctionCall","src":"223:35:33"},"nodeType":"YulIf","src":"220:55:33"},{"nodeType":"YulVariableDeclaration","src":"284:23:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:33"},"nodeType":"YulFunctionCall","src":"294:13:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:33"},"nodeType":"YulFunctionCall","src":"330:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:33"},"nodeType":"YulFunctionCall","src":"326:18:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:33"},"nodeType":"YulFunctionCall","src":"369:18:33"},"nodeType":"YulExpressionStatement","src":"369:18:33"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:33"},"nodeType":"YulFunctionCall","src":"356:10:33"},"nodeType":"YulIf","src":"353:36:33"},{"nodeType":"YulVariableDeclaration","src":"398:17:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:33","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:33"},"nodeType":"YulFunctionCall","src":"408:7:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:33"},"nodeType":"YulFunctionCall","src":"438:9:33"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:33"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:33"},"nodeType":"YulFunctionCall","src":"498:13:33"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:33"},"nodeType":"YulFunctionCall","src":"494:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:33","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:33"},"nodeType":"YulFunctionCall","src":"490:31:33"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:33"},"nodeType":"YulFunctionCall","src":"486:40:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:33"},"nodeType":"YulFunctionCall","src":"474:53:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:33"},"nodeType":"YulFunctionCall","src":"588:18:33"},"nodeType":"YulExpressionStatement","src":"588:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:33"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:33"},"nodeType":"YulFunctionCall","src":"542:18:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:33"},"nodeType":"YulFunctionCall","src":"562:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:33"},"nodeType":"YulFunctionCall","src":"539:46:33"},"nodeType":"YulIf","src":"536:72:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:33"},"nodeType":"YulFunctionCall","src":"617:22:33"},"nodeType":"YulExpressionStatement","src":"617:22:33"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:33"},"nodeType":"YulFunctionCall","src":"648:18:33"},"nodeType":"YulExpressionStatement","src":"648:18:33"},{"nodeType":"YulVariableDeclaration","src":"675:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:33","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:33"},"nodeType":"YulFunctionCall","src":"737:12:33"},"nodeType":"YulExpressionStatement","src":"737:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:33"},"nodeType":"YulFunctionCall","src":"708:15:33"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:33"},"nodeType":"YulFunctionCall","src":"704:24:33"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:33"},"nodeType":"YulFunctionCall","src":"701:33:33"},"nodeType":"YulIf","src":"698:53:33"},{"nodeType":"YulVariableDeclaration","src":"760:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:33","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:33"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:33"},"nodeType":"YulFunctionCall","src":"850:14:33"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:33"},"nodeType":"YulFunctionCall","src":"846:23:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:33"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:33"},"nodeType":"YulFunctionCall","src":"881:14:33"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:33"},"nodeType":"YulFunctionCall","src":"877:23:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:33"},"nodeType":"YulFunctionCall","src":"871:30:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:33"},"nodeType":"YulFunctionCall","src":"839:63:33"},"nodeType":"YulExpressionStatement","src":"839:63:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:33"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:33"},"nodeType":"YulFunctionCall","src":"787:9:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:33","statements":[{"nodeType":"YulAssignment","src":"799:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:33"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:33"},"nodeType":"YulFunctionCall","src":"804:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:33","statements":[]},"src":"779:133:33"},{"body":{"nodeType":"YulBlock","src":"942:59:33","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"971:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"979:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:33"},"nodeType":"YulFunctionCall","src":"967:15:33"},{"name":"_4","nodeType":"YulIdentifier","src":"984:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"963:3:33"},"nodeType":"YulFunctionCall","src":"963:24:33"},{"kind":"number","nodeType":"YulLiteral","src":"989:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"956:6:33"},"nodeType":"YulFunctionCall","src":"956:35:33"},"nodeType":"YulExpressionStatement","src":"956:35:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"927:1:33"},{"name":"_1","nodeType":"YulIdentifier","src":"930:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"924:2:33"},"nodeType":"YulFunctionCall","src":"924:9:33"},"nodeType":"YulIf","src":"921:80:33"},{"nodeType":"YulAssignment","src":"1010:15:33","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1019:6:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1010:5:33"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:33","type":""}],"src":"146:885:33"},{"body":{"nodeType":"YulBlock","src":"1154:444:33","statements":[{"body":{"nodeType":"YulBlock","src":"1200:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1209:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1212:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1202:6:33"},"nodeType":"YulFunctionCall","src":"1202:12:33"},"nodeType":"YulExpressionStatement","src":"1202:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1175:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1184:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1171:3:33"},"nodeType":"YulFunctionCall","src":"1171:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1196:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1167:3:33"},"nodeType":"YulFunctionCall","src":"1167:32:33"},"nodeType":"YulIf","src":"1164:52:33"},{"nodeType":"YulVariableDeclaration","src":"1225:30:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1245:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1239:5:33"},"nodeType":"YulFunctionCall","src":"1239:16:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1229:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1264:28:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1282:2:33","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1278:3:33"},"nodeType":"YulFunctionCall","src":"1278:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1290:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1274:3:33"},"nodeType":"YulFunctionCall","src":"1274:18:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1268:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1319:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1328:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1331:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1321:6:33"},"nodeType":"YulFunctionCall","src":"1321:12:33"},"nodeType":"YulExpressionStatement","src":"1321:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1307:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1315:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1304:2:33"},"nodeType":"YulFunctionCall","src":"1304:14:33"},"nodeType":"YulIf","src":"1301:34:33"},{"nodeType":"YulAssignment","src":"1344:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1387:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"1398:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1383:3:33"},"nodeType":"YulFunctionCall","src":"1383:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1407:7:33"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1354:28:33"},"nodeType":"YulFunctionCall","src":"1354:61:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1344:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1424:41:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1450:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1461:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1446:3:33"},"nodeType":"YulFunctionCall","src":"1446:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1440:5:33"},"nodeType":"YulFunctionCall","src":"1440:25:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1428:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1494:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1503:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1506:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1496:6:33"},"nodeType":"YulFunctionCall","src":"1496:12:33"},"nodeType":"YulExpressionStatement","src":"1496:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1480:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"1490:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1477:2:33"},"nodeType":"YulFunctionCall","src":"1477:16:33"},"nodeType":"YulIf","src":"1474:36:33"},{"nodeType":"YulAssignment","src":"1519:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1562:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1573:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1558:3:33"},"nodeType":"YulFunctionCall","src":"1558:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1584:7:33"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1529:28:33"},"nodeType":"YulFunctionCall","src":"1529:63:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1519:6:33"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1112:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1123:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1135:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1143:6:33","type":""}],"src":"1036:562:33"},{"body":{"nodeType":"YulBlock","src":"1658:325:33","statements":[{"nodeType":"YulAssignment","src":"1668:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1682:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1685:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1678:3:33"},"nodeType":"YulFunctionCall","src":"1678:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1668:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1699:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1729:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"1735:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1725:3:33"},"nodeType":"YulFunctionCall","src":"1725:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1703:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1776:31:33","statements":[{"nodeType":"YulAssignment","src":"1778:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1792:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1800:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1788:3:33"},"nodeType":"YulFunctionCall","src":"1788:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1778:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1756:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1749:6:33"},"nodeType":"YulFunctionCall","src":"1749:26:33"},"nodeType":"YulIf","src":"1746:61:33"},{"body":{"nodeType":"YulBlock","src":"1866:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1887:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1894:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1899:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1890:3:33"},"nodeType":"YulFunctionCall","src":"1890:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1880:6:33"},"nodeType":"YulFunctionCall","src":"1880:31:33"},"nodeType":"YulExpressionStatement","src":"1880:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1931:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1934:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1924:6:33"},"nodeType":"YulFunctionCall","src":"1924:15:33"},"nodeType":"YulExpressionStatement","src":"1924:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1959:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1962:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1952:6:33"},"nodeType":"YulFunctionCall","src":"1952:15:33"},"nodeType":"YulExpressionStatement","src":"1952:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1822:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1845:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1853:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1842:2:33"},"nodeType":"YulFunctionCall","src":"1842:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1819:2:33"},"nodeType":"YulFunctionCall","src":"1819:38:33"},"nodeType":"YulIf","src":"1816:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1638:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1647:6:33","type":""}],"src":"1603:380:33"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162000db838038062000db88339810160408190526200003491620001db565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000282565b828054620000769062000245565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010e565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010e565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b60008060408385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b620002158683870162000124565b935060208501519150808211156200022c57600080fd5b506200023b8582860162000124565b9150509250929050565b600181811c908216806200025a57607f821691505b602082108114156200027c57634e487b7160e01b600052602260045260246000fd5b50919050565b610b2680620002926000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e39190610906565b60405180910390f35b6100ff6100fa3660046109a2565b610292565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046109cc565b6102aa565b604051601281526020016100e3565b6100ff6101513660046109a2565b6102ce565b610113610164366004610a08565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100d661031a565b6100ff6101a23660046109a2565b610329565b6100ff6101b53660046109a2565b6103ff565b6101136101c8366004610a2a565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461020f90610a5d565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610a5d565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b6000336102a081858561040d565b5060019392505050565b6000336102b88582856105c0565b6102c3858585610697565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102a09082908690610315908790610ab1565b61040d565b60606004805461020f90610a5d565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156103f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c3828686840361040d565b6000336102a0818585610697565b73ffffffffffffffffffffffffffffffffffffffff83166104af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff8216610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106915781811015610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103e9565b610691848484840361040d565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff82166107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610691565b600060208083528351808285015260005b8181101561093357858101830151858201604001528201610917565b81811115610945576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461099d57600080fd5b919050565b600080604083850312156109b557600080fd5b6109be83610979565b946020939093013593505050565b6000806000606084860312156109e157600080fd5b6109ea84610979565b92506109f860208501610979565b9150604084013590509250925092565b600060208284031215610a1a57600080fd5b610a2382610979565b9392505050565b60008060408385031215610a3d57600080fd5b610a4683610979565b9150610a5460208401610979565b90509250929050565b600181811c90821680610a7157607f821691505b60208210811415610aab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008219821115610aeb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220c5e79ee4192ff7c6d59b3069b79be9f29e6a277a316e38f28d5858b4c300aaac64736f6c634300080b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xDB8 CODESIZE SUB DUP1 PUSH3 0xDB8 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DB JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x282 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x245 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x153 JUMPI PUSH3 0x153 PUSH3 0x10E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x17E JUMPI PUSH3 0x17E PUSH3 0x10E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1BF JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A0 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D1 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x215 DUP7 DUP4 DUP8 ADD PUSH3 0x124 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23B DUP6 DUP3 DUP7 ADD PUSH3 0x124 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x27C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB26 DUP1 PUSH3 0x292 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x906 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x9CC JUMP JUMPDEST PUSH2 0x2AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x2CE JUMP JUMPDEST PUSH2 0x113 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x31A JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x329 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x3FF JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0xA2A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x20F SWAP1 PUSH2 0xA5D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x23B SWAP1 PUSH2 0xA5D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x288 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x25D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x288 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x26B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP2 DUP6 DUP6 PUSH2 0x40D JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2B8 DUP6 DUP3 DUP6 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C3 DUP6 DUP6 DUP6 PUSH2 0x697 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x2A0 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x315 SWAP1 DUP8 SWAP1 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x40D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x20F SWAP1 PUSH2 0xA5D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2C3 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x40D JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP2 DUP6 DUP6 PUSH2 0x697 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x4AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x691 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x684 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH2 0x691 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x40D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x73A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x893 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x691 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x933 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x917 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x99D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9BE DUP4 PUSH2 0x979 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9EA DUP5 PUSH2 0x979 JUMP JUMPDEST SWAP3 POP PUSH2 0x9F8 PUSH1 0x20 DUP6 ADD PUSH2 0x979 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA23 DUP3 PUSH2 0x979 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA46 DUP4 PUSH2 0x979 JUMP JUMPDEST SWAP2 POP PUSH2 0xA54 PUSH1 0x20 DUP5 ADD PUSH2 0x979 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xA71 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xAAB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xAEB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0xE7 SWAP15 0xE4 NOT 0x2F 0xF7 0xC6 0xD5 SWAP12 ADDRESS PUSH10 0xB79BE9F29E6A277A316E CODESIZE CALLCODE DUP14 PC PC 0xB4 0xC3 STOP 0xAA 0xAC PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ","sourceMap":"1532:11312:1:-:0;;;1980:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2046:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2069:17:1;;;;:7;;:17;;;;;:::i;:::-;;1980:113;;1532:11312;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:1;;;-1:-1:-1;1532:11312:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:33;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:33;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:33;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:33:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:33;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;1532:11312:1;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_588":{"entryPoint":null,"id":588,"parameterSlots":3,"returnSlots":0},"@_approve_523":{"entryPoint":1037,"id":523,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_577":{"entryPoint":null,"id":577,"parameterSlots":3,"returnSlots":0},"@_msgSender_1446":{"entryPoint":null,"id":1446,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_566":{"entryPoint":1472,"id":566,"parameterSlots":3,"returnSlots":0},"@_transfer_349":{"entryPoint":1687,"id":349,"parameterSlots":3,"returnSlots":0},"@allowance_144":{"entryPoint":null,"id":144,"parameterSlots":2,"returnSlots":1},"@approve_169":{"entryPoint":658,"id":169,"parameterSlots":2,"returnSlots":1},"@balanceOf_101":{"entryPoint":null,"id":101,"parameterSlots":1,"returnSlots":1},"@decimals_77":{"entryPoint":null,"id":77,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_272":{"entryPoint":809,"id":272,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_231":{"entryPoint":718,"id":231,"parameterSlots":2,"returnSlots":1},"@name_57":{"entryPoint":512,"id":57,"parameterSlots":0,"returnSlots":1},"@symbol_67":{"entryPoint":794,"id":67,"parameterSlots":0,"returnSlots":1},"@totalSupply_87":{"entryPoint":null,"id":87,"parameterSlots":0,"returnSlots":1},"@transferFrom_202":{"entryPoint":682,"id":202,"parameterSlots":3,"returnSlots":1},"@transfer_126":{"entryPoint":1023,"id":126,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":2425,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2568,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":2602,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":2508,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2466,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2310,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2737,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":2653,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6002:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"135:535:33","statements":[{"nodeType":"YulVariableDeclaration","src":"145:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"155:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"149:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"184:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"166:6:33"},"nodeType":"YulFunctionCall","src":"166:21:33"},"nodeType":"YulExpressionStatement","src":"166:21:33"},{"nodeType":"YulVariableDeclaration","src":"196:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"216:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:33"},"nodeType":"YulFunctionCall","src":"210:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"200:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"243:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"254:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"239:3:33"},"nodeType":"YulFunctionCall","src":"239:18:33"},{"name":"length","nodeType":"YulIdentifier","src":"259:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"232:6:33"},"nodeType":"YulFunctionCall","src":"232:34:33"},"nodeType":"YulExpressionStatement","src":"232:34:33"},{"nodeType":"YulVariableDeclaration","src":"275:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"284:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"279:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"344:90:33","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"373:9:33"},{"name":"i","nodeType":"YulIdentifier","src":"384:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"369:3:33"},"nodeType":"YulFunctionCall","src":"369:17:33"},{"kind":"number","nodeType":"YulLiteral","src":"388:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"365:3:33"},"nodeType":"YulFunctionCall","src":"365:26:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:33"},{"name":"i","nodeType":"YulIdentifier","src":"415:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"403:3:33"},"nodeType":"YulFunctionCall","src":"403:14:33"},{"name":"_1","nodeType":"YulIdentifier","src":"419:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"399:3:33"},"nodeType":"YulFunctionCall","src":"399:23:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"393:5:33"},"nodeType":"YulFunctionCall","src":"393:30:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"358:6:33"},"nodeType":"YulFunctionCall","src":"358:66:33"},"nodeType":"YulExpressionStatement","src":"358:66:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"305:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"308:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"302:2:33"},"nodeType":"YulFunctionCall","src":"302:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"316:19:33","statements":[{"nodeType":"YulAssignment","src":"318:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"327:1:33"},{"name":"_1","nodeType":"YulIdentifier","src":"330:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"323:3:33"},"nodeType":"YulFunctionCall","src":"323:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"318:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"298:3:33","statements":[]},"src":"294:140:33"},{"body":{"nodeType":"YulBlock","src":"468:66:33","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"497:9:33"},{"name":"length","nodeType":"YulIdentifier","src":"508:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"493:3:33"},"nodeType":"YulFunctionCall","src":"493:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"517:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"489:3:33"},"nodeType":"YulFunctionCall","src":"489:31:33"},{"kind":"number","nodeType":"YulLiteral","src":"522:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"482:6:33"},"nodeType":"YulFunctionCall","src":"482:42:33"},"nodeType":"YulExpressionStatement","src":"482:42:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"449:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"452:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"446:2:33"},"nodeType":"YulFunctionCall","src":"446:13:33"},"nodeType":"YulIf","src":"443:91:33"},{"nodeType":"YulAssignment","src":"543:121:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"559:9:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"578:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"586:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"574:3:33"},"nodeType":"YulFunctionCall","src":"574:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"591:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"570:3:33"},"nodeType":"YulFunctionCall","src":"570:88:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"555:3:33"},"nodeType":"YulFunctionCall","src":"555:104:33"},{"kind":"number","nodeType":"YulLiteral","src":"661:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"551:3:33"},"nodeType":"YulFunctionCall","src":"551:113:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"543:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"104:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"115:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"126:4:33","type":""}],"src":"14:656:33"},{"body":{"nodeType":"YulBlock","src":"724:147:33","statements":[{"nodeType":"YulAssignment","src":"734:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"756:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"743:12:33"},"nodeType":"YulFunctionCall","src":"743:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"734:5:33"}]},{"body":{"nodeType":"YulBlock","src":"849:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"858:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"861:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"851:6:33"},"nodeType":"YulFunctionCall","src":"851:12:33"},"nodeType":"YulExpressionStatement","src":"851:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"785:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"796:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"803:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"792:3:33"},"nodeType":"YulFunctionCall","src":"792:54:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"782:2:33"},"nodeType":"YulFunctionCall","src":"782:65:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"775:6:33"},"nodeType":"YulFunctionCall","src":"775:73:33"},"nodeType":"YulIf","src":"772:93:33"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"703:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"714:5:33","type":""}],"src":"675:196:33"},{"body":{"nodeType":"YulBlock","src":"963:167:33","statements":[{"body":{"nodeType":"YulBlock","src":"1009:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1018:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1021:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1011:6:33"},"nodeType":"YulFunctionCall","src":"1011:12:33"},"nodeType":"YulExpressionStatement","src":"1011:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"984:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"993:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"980:3:33"},"nodeType":"YulFunctionCall","src":"980:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1005:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"976:3:33"},"nodeType":"YulFunctionCall","src":"976:32:33"},"nodeType":"YulIf","src":"973:52:33"},{"nodeType":"YulAssignment","src":"1034:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1063:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1044:18:33"},"nodeType":"YulFunctionCall","src":"1044:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1034:6:33"}]},{"nodeType":"YulAssignment","src":"1082:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1109:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1120:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1105:3:33"},"nodeType":"YulFunctionCall","src":"1105:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1092:12:33"},"nodeType":"YulFunctionCall","src":"1092:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1082:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"921:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"932:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"944:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"952:6:33","type":""}],"src":"876:254:33"},{"body":{"nodeType":"YulBlock","src":"1230:92:33","statements":[{"nodeType":"YulAssignment","src":"1240:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1252:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1263:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1248:3:33"},"nodeType":"YulFunctionCall","src":"1248:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1240:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1282:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1307:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1300:6:33"},"nodeType":"YulFunctionCall","src":"1300:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1293:6:33"},"nodeType":"YulFunctionCall","src":"1293:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1275:6:33"},"nodeType":"YulFunctionCall","src":"1275:41:33"},"nodeType":"YulExpressionStatement","src":"1275:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1199:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1210:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1221:4:33","type":""}],"src":"1135:187:33"},{"body":{"nodeType":"YulBlock","src":"1428:76:33","statements":[{"nodeType":"YulAssignment","src":"1438:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1450:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1461:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1446:3:33"},"nodeType":"YulFunctionCall","src":"1446:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1438:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1480:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"1491:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1473:6:33"},"nodeType":"YulFunctionCall","src":"1473:25:33"},"nodeType":"YulExpressionStatement","src":"1473:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1397:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1408:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1419:4:33","type":""}],"src":"1327:177:33"},{"body":{"nodeType":"YulBlock","src":"1613:224:33","statements":[{"body":{"nodeType":"YulBlock","src":"1659:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1668:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1671:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1661:6:33"},"nodeType":"YulFunctionCall","src":"1661:12:33"},"nodeType":"YulExpressionStatement","src":"1661:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1634:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1643:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1630:3:33"},"nodeType":"YulFunctionCall","src":"1630:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1655:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1626:3:33"},"nodeType":"YulFunctionCall","src":"1626:32:33"},"nodeType":"YulIf","src":"1623:52:33"},{"nodeType":"YulAssignment","src":"1684:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1713:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1694:18:33"},"nodeType":"YulFunctionCall","src":"1694:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1684:6:33"}]},{"nodeType":"YulAssignment","src":"1732:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1765:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1776:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1761:3:33"},"nodeType":"YulFunctionCall","src":"1761:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1742:18:33"},"nodeType":"YulFunctionCall","src":"1742:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1732:6:33"}]},{"nodeType":"YulAssignment","src":"1789:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1816:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1827:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1812:3:33"},"nodeType":"YulFunctionCall","src":"1812:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1799:12:33"},"nodeType":"YulFunctionCall","src":"1799:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1789:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1563:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1574:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1586:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1594:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1602:6:33","type":""}],"src":"1509:328:33"},{"body":{"nodeType":"YulBlock","src":"1939:87:33","statements":[{"nodeType":"YulAssignment","src":"1949:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1961:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1972:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1957:3:33"},"nodeType":"YulFunctionCall","src":"1957:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1949:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1991:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2006:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2014:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2002:3:33"},"nodeType":"YulFunctionCall","src":"2002:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1984:6:33"},"nodeType":"YulFunctionCall","src":"1984:36:33"},"nodeType":"YulExpressionStatement","src":"1984:36:33"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1908:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1919:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1930:4:33","type":""}],"src":"1842:184:33"},{"body":{"nodeType":"YulBlock","src":"2101:116:33","statements":[{"body":{"nodeType":"YulBlock","src":"2147:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2156:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2159:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2149:6:33"},"nodeType":"YulFunctionCall","src":"2149:12:33"},"nodeType":"YulExpressionStatement","src":"2149:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2122:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2131:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2118:3:33"},"nodeType":"YulFunctionCall","src":"2118:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2143:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2114:3:33"},"nodeType":"YulFunctionCall","src":"2114:32:33"},"nodeType":"YulIf","src":"2111:52:33"},{"nodeType":"YulAssignment","src":"2172:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2201:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2182:18:33"},"nodeType":"YulFunctionCall","src":"2182:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2172:6:33"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2067:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2078:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2090:6:33","type":""}],"src":"2031:186:33"},{"body":{"nodeType":"YulBlock","src":"2309:173:33","statements":[{"body":{"nodeType":"YulBlock","src":"2355:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2364:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2367:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2357:6:33"},"nodeType":"YulFunctionCall","src":"2357:12:33"},"nodeType":"YulExpressionStatement","src":"2357:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2330:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2339:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2326:3:33"},"nodeType":"YulFunctionCall","src":"2326:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2351:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2322:3:33"},"nodeType":"YulFunctionCall","src":"2322:32:33"},"nodeType":"YulIf","src":"2319:52:33"},{"nodeType":"YulAssignment","src":"2380:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2409:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2390:18:33"},"nodeType":"YulFunctionCall","src":"2390:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2380:6:33"}]},{"nodeType":"YulAssignment","src":"2428:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2461:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2472:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2457:3:33"},"nodeType":"YulFunctionCall","src":"2457:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2438:18:33"},"nodeType":"YulFunctionCall","src":"2438:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2428:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2267:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2278:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2290:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2298:6:33","type":""}],"src":"2222:260:33"},{"body":{"nodeType":"YulBlock","src":"2542:382:33","statements":[{"nodeType":"YulAssignment","src":"2552:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2566:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2569:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2562:3:33"},"nodeType":"YulFunctionCall","src":"2562:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2552:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"2583:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2613:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"2619:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2609:3:33"},"nodeType":"YulFunctionCall","src":"2609:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2587:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2660:31:33","statements":[{"nodeType":"YulAssignment","src":"2662:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2676:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2684:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2672:3:33"},"nodeType":"YulFunctionCall","src":"2672:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2662:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2640:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2633:6:33"},"nodeType":"YulFunctionCall","src":"2633:26:33"},"nodeType":"YulIf","src":"2630:61:33"},{"body":{"nodeType":"YulBlock","src":"2750:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2774:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2764:6:33"},"nodeType":"YulFunctionCall","src":"2764:88:33"},"nodeType":"YulExpressionStatement","src":"2764:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2872:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2875:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2865:6:33"},"nodeType":"YulFunctionCall","src":"2865:15:33"},"nodeType":"YulExpressionStatement","src":"2865:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2900:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2903:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2893:6:33"},"nodeType":"YulFunctionCall","src":"2893:15:33"},"nodeType":"YulExpressionStatement","src":"2893:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2706:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2729:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2737:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2726:2:33"},"nodeType":"YulFunctionCall","src":"2726:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2703:2:33"},"nodeType":"YulFunctionCall","src":"2703:38:33"},"nodeType":"YulIf","src":"2700:218:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2522:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2531:6:33","type":""}],"src":"2487:437:33"},{"body":{"nodeType":"YulBlock","src":"2977:234:33","statements":[{"body":{"nodeType":"YulBlock","src":"3012:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3033:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3036:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3026:6:33"},"nodeType":"YulFunctionCall","src":"3026:88:33"},"nodeType":"YulExpressionStatement","src":"3026:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3134:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3137:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3127:6:33"},"nodeType":"YulFunctionCall","src":"3127:15:33"},"nodeType":"YulExpressionStatement","src":"3127:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3162:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3165:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3155:6:33"},"nodeType":"YulFunctionCall","src":"3155:15:33"},"nodeType":"YulExpressionStatement","src":"3155:15:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2993:1:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3000:1:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2996:3:33"},"nodeType":"YulFunctionCall","src":"2996:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2990:2:33"},"nodeType":"YulFunctionCall","src":"2990:13:33"},"nodeType":"YulIf","src":"2987:193:33"},{"nodeType":"YulAssignment","src":"3189:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3200:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"3203:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3196:3:33"},"nodeType":"YulFunctionCall","src":"3196:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"3189:3:33"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2960:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"2963:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"2969:3:33","type":""}],"src":"2929:282:33"},{"body":{"nodeType":"YulBlock","src":"3390:227:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3407:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3418:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3400:6:33"},"nodeType":"YulFunctionCall","src":"3400:21:33"},"nodeType":"YulExpressionStatement","src":"3400:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3441:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3452:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3437:3:33"},"nodeType":"YulFunctionCall","src":"3437:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"3457:2:33","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3430:6:33"},"nodeType":"YulFunctionCall","src":"3430:30:33"},"nodeType":"YulExpressionStatement","src":"3430:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3480:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3491:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3476:3:33"},"nodeType":"YulFunctionCall","src":"3476:18:33"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"3496:34:33","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3469:6:33"},"nodeType":"YulFunctionCall","src":"3469:62:33"},"nodeType":"YulExpressionStatement","src":"3469:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3551:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3562:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3547:3:33"},"nodeType":"YulFunctionCall","src":"3547:18:33"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"3567:7:33","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3540:6:33"},"nodeType":"YulFunctionCall","src":"3540:35:33"},"nodeType":"YulExpressionStatement","src":"3540:35:33"},{"nodeType":"YulAssignment","src":"3584:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3596:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3607:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3592:3:33"},"nodeType":"YulFunctionCall","src":"3592:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3584:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3367:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3381:4:33","type":""}],"src":"3216:401:33"},{"body":{"nodeType":"YulBlock","src":"3796:226:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3813:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3824:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3806:6:33"},"nodeType":"YulFunctionCall","src":"3806:21:33"},"nodeType":"YulExpressionStatement","src":"3806:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3847:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3858:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3843:3:33"},"nodeType":"YulFunctionCall","src":"3843:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"3863:2:33","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3836:6:33"},"nodeType":"YulFunctionCall","src":"3836:30:33"},"nodeType":"YulExpressionStatement","src":"3836:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3886:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3897:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3882:3:33"},"nodeType":"YulFunctionCall","src":"3882:18:33"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"3902:34:33","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3875:6:33"},"nodeType":"YulFunctionCall","src":"3875:62:33"},"nodeType":"YulExpressionStatement","src":"3875:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3957:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3968:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3953:3:33"},"nodeType":"YulFunctionCall","src":"3953:18:33"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"3973:6:33","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3946:6:33"},"nodeType":"YulFunctionCall","src":"3946:34:33"},"nodeType":"YulExpressionStatement","src":"3946:34:33"},{"nodeType":"YulAssignment","src":"3989:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4001:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4012:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3997:3:33"},"nodeType":"YulFunctionCall","src":"3997:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3989:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3773:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3787:4:33","type":""}],"src":"3622:400:33"},{"body":{"nodeType":"YulBlock","src":"4201:224:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4218:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4229:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4211:6:33"},"nodeType":"YulFunctionCall","src":"4211:21:33"},"nodeType":"YulExpressionStatement","src":"4211:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4252:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4263:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4248:3:33"},"nodeType":"YulFunctionCall","src":"4248:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"4268:2:33","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4241:6:33"},"nodeType":"YulFunctionCall","src":"4241:30:33"},"nodeType":"YulExpressionStatement","src":"4241:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4291:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4302:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4287:3:33"},"nodeType":"YulFunctionCall","src":"4287:18:33"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"4307:34:33","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4280:6:33"},"nodeType":"YulFunctionCall","src":"4280:62:33"},"nodeType":"YulExpressionStatement","src":"4280:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4362:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4373:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4358:3:33"},"nodeType":"YulFunctionCall","src":"4358:18:33"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"4378:4:33","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4351:6:33"},"nodeType":"YulFunctionCall","src":"4351:32:33"},"nodeType":"YulExpressionStatement","src":"4351:32:33"},{"nodeType":"YulAssignment","src":"4392:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4404:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4415:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4400:3:33"},"nodeType":"YulFunctionCall","src":"4400:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4392:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4178:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4192:4:33","type":""}],"src":"4027:398:33"},{"body":{"nodeType":"YulBlock","src":"4604:179:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4621:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4632:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4614:6:33"},"nodeType":"YulFunctionCall","src":"4614:21:33"},"nodeType":"YulExpressionStatement","src":"4614:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4655:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4666:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4651:3:33"},"nodeType":"YulFunctionCall","src":"4651:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"4671:2:33","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4644:6:33"},"nodeType":"YulFunctionCall","src":"4644:30:33"},"nodeType":"YulExpressionStatement","src":"4644:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4694:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4705:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4690:3:33"},"nodeType":"YulFunctionCall","src":"4690:18:33"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"4710:31:33","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4683:6:33"},"nodeType":"YulFunctionCall","src":"4683:59:33"},"nodeType":"YulExpressionStatement","src":"4683:59:33"},{"nodeType":"YulAssignment","src":"4751:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4763:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4774:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4759:3:33"},"nodeType":"YulFunctionCall","src":"4759:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4751:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4581:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4595:4:33","type":""}],"src":"4430:353:33"},{"body":{"nodeType":"YulBlock","src":"4962:227:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4979:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4990:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4972:6:33"},"nodeType":"YulFunctionCall","src":"4972:21:33"},"nodeType":"YulExpressionStatement","src":"4972:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5013:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5024:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5009:3:33"},"nodeType":"YulFunctionCall","src":"5009:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5029:2:33","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5002:6:33"},"nodeType":"YulFunctionCall","src":"5002:30:33"},"nodeType":"YulExpressionStatement","src":"5002:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5052:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5063:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5048:3:33"},"nodeType":"YulFunctionCall","src":"5048:18:33"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"5068:34:33","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5041:6:33"},"nodeType":"YulFunctionCall","src":"5041:62:33"},"nodeType":"YulExpressionStatement","src":"5041:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5123:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5134:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5119:3:33"},"nodeType":"YulFunctionCall","src":"5119:18:33"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"5139:7:33","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5112:6:33"},"nodeType":"YulFunctionCall","src":"5112:35:33"},"nodeType":"YulExpressionStatement","src":"5112:35:33"},{"nodeType":"YulAssignment","src":"5156:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5168:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5179:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5164:3:33"},"nodeType":"YulFunctionCall","src":"5164:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5156:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4939:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4953:4:33","type":""}],"src":"4788:401:33"},{"body":{"nodeType":"YulBlock","src":"5368:225:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5385:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5396:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5378:6:33"},"nodeType":"YulFunctionCall","src":"5378:21:33"},"nodeType":"YulExpressionStatement","src":"5378:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5419:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5430:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5415:3:33"},"nodeType":"YulFunctionCall","src":"5415:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5435:2:33","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5408:6:33"},"nodeType":"YulFunctionCall","src":"5408:30:33"},"nodeType":"YulExpressionStatement","src":"5408:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5458:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5469:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5454:3:33"},"nodeType":"YulFunctionCall","src":"5454:18:33"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"5474:34:33","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5447:6:33"},"nodeType":"YulFunctionCall","src":"5447:62:33"},"nodeType":"YulExpressionStatement","src":"5447:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5529:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5540:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5525:3:33"},"nodeType":"YulFunctionCall","src":"5525:18:33"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"5545:5:33","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5518:6:33"},"nodeType":"YulFunctionCall","src":"5518:33:33"},"nodeType":"YulExpressionStatement","src":"5518:33:33"},{"nodeType":"YulAssignment","src":"5560:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5572:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5583:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5568:3:33"},"nodeType":"YulFunctionCall","src":"5568:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5560:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5345:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5359:4:33","type":""}],"src":"5194:399:33"},{"body":{"nodeType":"YulBlock","src":"5772:228:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5789:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5800:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5782:6:33"},"nodeType":"YulFunctionCall","src":"5782:21:33"},"nodeType":"YulExpressionStatement","src":"5782:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5823:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5834:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5819:3:33"},"nodeType":"YulFunctionCall","src":"5819:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5839:2:33","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5812:6:33"},"nodeType":"YulFunctionCall","src":"5812:30:33"},"nodeType":"YulExpressionStatement","src":"5812:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5862:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5873:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5858:3:33"},"nodeType":"YulFunctionCall","src":"5858:18:33"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"5878:34:33","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5851:6:33"},"nodeType":"YulFunctionCall","src":"5851:62:33"},"nodeType":"YulExpressionStatement","src":"5851:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5933:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5944:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5929:3:33"},"nodeType":"YulFunctionCall","src":"5929:18:33"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"5949:8:33","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5922:6:33"},"nodeType":"YulFunctionCall","src":"5922:36:33"},"nodeType":"YulExpressionStatement","src":"5922:36:33"},{"nodeType":"YulAssignment","src":"5967:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5979:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5990:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5975:3:33"},"nodeType":"YulFunctionCall","src":"5975:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5967:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5749:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5763:4:33","type":""}],"src":"5598:402:33"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e39190610906565b60405180910390f35b6100ff6100fa3660046109a2565b610292565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046109cc565b6102aa565b604051601281526020016100e3565b6100ff6101513660046109a2565b6102ce565b610113610164366004610a08565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100d661031a565b6100ff6101a23660046109a2565b610329565b6100ff6101b53660046109a2565b6103ff565b6101136101c8366004610a2a565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461020f90610a5d565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610a5d565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b6000336102a081858561040d565b5060019392505050565b6000336102b88582856105c0565b6102c3858585610697565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102a09082908690610315908790610ab1565b61040d565b60606004805461020f90610a5d565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156103f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c3828686840361040d565b6000336102a0818585610697565b73ffffffffffffffffffffffffffffffffffffffff83166104af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff8216610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106915781811015610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103e9565b610691848484840361040d565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff82166107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610691565b600060208083528351808285015260005b8181101561093357858101830151858201604001528201610917565b81811115610945576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461099d57600080fd5b919050565b600080604083850312156109b557600080fd5b6109be83610979565b946020939093013593505050565b6000806000606084860312156109e157600080fd5b6109ea84610979565b92506109f860208501610979565b9150604084013590509250925092565b600060208284031215610a1a57600080fd5b610a2382610979565b9392505050565b60008060408385031215610a3d57600080fd5b610a4683610979565b9150610a5460208401610979565b90509250929050565b600181811c90821680610a7157607f821691505b60208210811415610aab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008219821115610aeb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220c5e79ee4192ff7c6d59b3069b79be9f29e6a277a316e38f28d5858b4c300aaac64736f6c634300080b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x906 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x9CC JUMP JUMPDEST PUSH2 0x2AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x2CE JUMP JUMPDEST PUSH2 0x113 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x31A JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x329 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x3FF JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0xA2A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x20F SWAP1 PUSH2 0xA5D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x23B SWAP1 PUSH2 0xA5D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x288 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x25D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x288 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x26B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP2 DUP6 DUP6 PUSH2 0x40D JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2B8 DUP6 DUP3 DUP6 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C3 DUP6 DUP6 DUP6 PUSH2 0x697 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x2A0 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x315 SWAP1 DUP8 SWAP1 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x40D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x20F SWAP1 PUSH2 0xA5D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2C3 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x40D JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP2 DUP6 DUP6 PUSH2 0x697 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x4AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x691 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x684 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH2 0x691 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x40D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x73A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x893 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x691 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x933 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x917 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x99D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9BE DUP4 PUSH2 0x979 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9EA DUP5 PUSH2 0x979 JUMP JUMPDEST SWAP3 POP PUSH2 0x9F8 PUSH1 0x20 DUP6 ADD PUSH2 0x979 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA23 DUP3 PUSH2 0x979 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA46 DUP4 PUSH2 0x979 JUMP JUMPDEST SWAP2 POP PUSH2 0xA54 PUSH1 0x20 DUP5 ADD PUSH2 0x979 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xA71 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xAAB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xAEB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0xE7 SWAP15 0xE4 NOT 0x2F 0xF7 0xC6 0xD5 SWAP12 ADDRESS PUSH10 0xB79BE9F29E6A277A316E CODESIZE CALLCODE DUP14 PC PC 0xB4 0xC3 STOP 0xAA 0xAC PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ","sourceMap":"1532:11312:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4444:197;;;;;;:::i;:::-;;:::i;:::-;;;1300:14:33;;1293:22;1275:41;;1263:2;1248:18;4444:197:1;1135:187:33;3255:106:1;3342:12;;3255:106;;;1473:25:33;;;1461:2;1446:18;3255:106:1;1327:177:33;5203:256:1;;;;;;:::i;:::-;;:::i;3104:91::-;;;3186:2;1984:36:33;;1972:2;1957:18;3104:91:1;1842:184:33;5854:234:1;;;;;;:::i;:::-;;:::i;3419:125::-;;;;;;:::i;:::-;3519:18;;3493:7;3519:18;;;;;;;;;;;;3419:125;2369:102;;;:::i;6575:427::-;;;;;;:::i;:::-;;:::i;3740:189::-;;;;;;:::i;:::-;;:::i;3987:149::-;;;;;;:::i;:::-;4102:18;;;;4076:7;4102:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3987:149;2158:98;2212:13;2244:5;2237:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98;:::o;4444:197::-;4527:4;719:10:7;4581:32:1;719:10:7;4597:7:1;4606:6;4581:8;:32::i;:::-;-1:-1:-1;4630:4:1;;4444:197;-1:-1:-1;;;4444:197:1:o;5203:256::-;5300:4;719:10:7;5356:38:1;5372:4;719:10:7;5387:6:1;5356:15;:38::i;:::-;5404:27;5414:4;5420:2;5424:6;5404:9;:27::i;:::-;-1:-1:-1;5448:4:1;;5203:256;-1:-1:-1;;;;5203:256:1:o;5854:234::-;719:10:7;5942:4:1;4102:18;;;:11;:18;;;;;;;;;:27;;;;;;;;;;5942:4;;719:10:7;5996:64:1;;719:10:7;;4102:27:1;;6021:38;;6049:10;;6021:38;:::i;:::-;5996:8;:64::i;2369:102::-;2425:13;2457:7;2450:14;;;;;:::i;6575:427::-;719:10:7;6668:4:1;4102:18;;;:11;:18;;;;;;;;;:27;;;;;;;;;;6668:4;;719:10:7;6812:15:1;6792:16;:35;;6784:85;;;;;;;3418:2:33;6784:85:1;;;3400:21:33;3457:2;3437:18;;;3430:30;3496:34;3476:18;;;3469:62;3567:7;3547:18;;;3540:35;3592:19;;6784:85:1;;;;;;;;;6903:60;6912:5;6919:7;6947:15;6928:16;:34;6903:8;:60::i;3740:189::-;3819:4;719:10:7;3873:28:1;719:10:7;3890:2:1;3894:6;3873:9;:28::i;10457:340::-;10558:19;;;10550:68;;;;;;;3824:2:33;10550:68:1;;;3806:21:33;3863:2;3843:18;;;3836:30;3902:34;3882:18;;;3875:62;3973:6;3953:18;;;3946:34;3997:19;;10550:68:1;3622:400:33;10550:68:1;10636:21;;;10628:68;;;;;;;4229:2:33;10628:68:1;;;4211:21:33;4268:2;4248:18;;;4241:30;4307:34;4287:18;;;4280:62;4378:4;4358:18;;;4351:32;4400:19;;10628:68:1;4027:398:33;10628:68:1;10707:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10758:32;;1473:25:33;;;10758:32:1;;1446:18:33;10758:32:1;;;;;;;10457:340;;;:::o;11078:411::-;4102:18;;;;11178:24;4102:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;11264:17;11244:37;;11240:243;;11325:6;11305:16;:26;;11297:68;;;;;;;4632:2:33;11297:68:1;;;4614:21:33;4671:2;4651:18;;;4644:30;4710:31;4690:18;;;4683:59;4759:18;;11297:68:1;4430:353:33;11297:68:1;11407:51;11416:5;11423:7;11451:6;11432:16;:25;11407:8;:51::i;:::-;11168:321;11078:411;;;:::o;7456:788::-;7552:18;;;7544:68;;;;;;;4990:2:33;7544:68:1;;;4972:21:33;5029:2;5009:18;;;5002:30;5068:34;5048:18;;;5041:62;5139:7;5119:18;;;5112:35;5164:19;;7544:68:1;4788:401:33;7544:68:1;7630:16;;;7622:64;;;;;;;5396:2:33;7622:64:1;;;5378:21:33;5435:2;5415:18;;;5408:30;5474:34;5454:18;;;5447:62;5545:5;5525:18;;;5518:33;5568:19;;7622:64:1;5194:399:33;7622:64:1;7768:15;;;7746:19;7768:15;;;;;;;;;;;7801:21;;;;7793:72;;;;;;;5800:2:33;7793:72:1;;;5782:21:33;5839:2;5819:18;;;5812:30;5878:34;5858:18;;;5851:62;5949:8;5929:18;;;5922:36;5975:19;;7793:72:1;5598:402:33;7793:72:1;7899:15;;;;:9;:15;;;;;;;;;;;7917:20;;;7899:38;;8114:13;;;;;;;;;;:23;;;;;;8163:26;;1473:25:33;;;8114:13:1;;8163:26;;1446:18:33;8163:26:1;;;;;;;8200:37;12073:91;14:656:33;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;586:2:33;574:15;591:66;570:88;555:104;;;;661:2;551:113;;14:656;-1:-1:-1;;;14:656:33:o;675:196::-;743:20;;803:42;792:54;;782:65;;772:93;;861:1;858;851:12;772:93;675:196;;;:::o;876:254::-;944:6;952;1005:2;993:9;984:7;980:23;976:32;973:52;;;1021:1;1018;1011:12;973:52;1044:29;1063:9;1044:29;:::i;:::-;1034:39;1120:2;1105:18;;;;1092:32;;-1:-1:-1;;;876:254:33:o;1509:328::-;1586:6;1594;1602;1655:2;1643:9;1634:7;1630:23;1626:32;1623:52;;;1671:1;1668;1661:12;1623:52;1694:29;1713:9;1694:29;:::i;:::-;1684:39;;1742:38;1776:2;1765:9;1761:18;1742:38;:::i;:::-;1732:48;;1827:2;1816:9;1812:18;1799:32;1789:42;;1509:328;;;;;:::o;2031:186::-;2090:6;2143:2;2131:9;2122:7;2118:23;2114:32;2111:52;;;2159:1;2156;2149:12;2111:52;2182:29;2201:9;2182:29;:::i;:::-;2172:39;2031:186;-1:-1:-1;;;2031:186:33:o;2222:260::-;2290:6;2298;2351:2;2339:9;2330:7;2326:23;2322:32;2319:52;;;2367:1;2364;2357:12;2319:52;2390:29;2409:9;2390:29;:::i;:::-;2380:39;;2438:38;2472:2;2461:9;2457:18;2438:38;:::i;:::-;2428:48;;2222:260;;;;;:::o;2487:437::-;2566:1;2562:12;;;;2609;;;2630:61;;2684:4;2676:6;2672:17;2662:27;;2630:61;2737:2;2729:6;2726:14;2706:18;2703:38;2700:218;;;2774:77;2771:1;2764:88;2875:4;2872:1;2865:15;2903:4;2900:1;2893:15;2700:218;;2487:437;;;:::o;2929:282::-;2969:3;3000:1;2996:6;2993:1;2990:13;2987:193;;;3036:77;3033:1;3026:88;3137:4;3134:1;3127:15;3165:4;3162:1;3155:15;2987:193;-1:-1:-1;3196:9:33;;2929:282::o"},"gasEstimates":{"creation":{"codeDepositCost":"570800","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"24599","balanceOf(address)":"2561","decimals()":"244","decreaseAllowance(address,uint256)":"26862","increaseAllowance(address,uint256)":"26908","name()":"infinite","symbol()":"infinite","totalSupply()":"2304","transfer(address,uint256)":"51030","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":18,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":24,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":26,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":28,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":30,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220722c7eafc24ed87f27d8e2c2f8fc5c05fe47b1fb9b33f793365f700e32d5f02f64736f6c634300080b0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x2C7EAFC24ED87F27D8E2C2F8FC5C05FE47B1FB SWAP12 CALLER 0xF7 SWAP4 CALLDATASIZE 0x5F PUSH17 0xE32D5F02F64736F6C634300080B003300 ","sourceMap":"701:6211:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6211:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220722c7eafc24ed87f27d8e2c2f8fc5c05fe47b1fb9b33f793365f700e32d5f02f64736f6c634300080b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x2C7EAFC24ED87F27D8E2C2F8FC5C05FE47B1FB SWAP12 CALLER 0xF7 SWAP4 CALLDATASIZE 0x5F PUSH17 0xE32D5F02F64736F6C634300080B003300 ","sourceMap":"701:6211:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e1f9963704861a06336571543810c602c30f62b7e7112bab32fec25f6d353d2a64736f6c634300080b0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0xF9 SWAP7 CALLDATACOPY DIV DUP7 BYTE MOD CALLER PUSH6 0x71543810C602 0xC3 0xF PUSH3 0xB7E711 0x2B 0xAB ORIGIN INVALID 0xC2 0x5F PUSH14 0x353D2A64736F6C634300080B0033 ","sourceMap":"194:9169:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e1f9963704861a06336571543810c602c30f62b7e7112bab32fec25f6d353d2a64736f6c634300080b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0xF9 SWAP7 CALLDATACOPY DIV DUP7 BYTE MOD CALLER PUSH6 0x71543810C602 0xC3 0xF PUSH3 0xB7E711 0x2B 0xAB ORIGIN INVALID 0xC2 0x5F PUSH14 0x353D2A64736F6C634300080B0033 ","sourceMap":"194:9169:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122021b2347f6860002683d520784b172d265604b57d47bffcf54812afa7ab0c429564736f6c634300080b0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 0xB2 CALLVALUE PUSH32 0x6860002683D520784B172D265604B57D47BFFCF54812AFA7AB0C429564736F6C PUSH4 0x4300080B STOP CALLER ","sourceMap":"482:6210:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:6210:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122021b2347f6860002683d520784b172d265604b57d47bffcf54812afa7ab0c429564736f6c634300080b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 0xB2 CALLVALUE PUSH32 0x6860002683D520784B172D265604B57D47BFFCF54812AFA7AB0C429564736F6C PUSH4 0x4300080B STOP CALLER ","sourceMap":"482:6210:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol":{"IUniswapV2Pair":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount0Out","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1Out","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint112","name":"reserve0","type":"uint112"},{"indexed":false,"internalType":"uint112","name":"reserve1","type":"uint112"}],"name":"Sync","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINIMUM_LIQUIDITY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReserves","outputs":[{"internalType":"uint112","name":"reserve0","type":"uint112"},{"internalType":"uint112","name":"reserve1","type":"uint112"},{"internalType":"uint32","name":"blockTimestampLast","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"kLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"price0CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price1CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"skim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"sync","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","MINIMUM_LIQUIDITY()":"ba9a7a56","PERMIT_TYPEHASH()":"30adf81f","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(address)":"89afcb44","decimals()":"313ce567","factory()":"c45a0155","getReserves()":"0902f1ac","initialize(address,address)":"485cc955","kLast()":"7464fc3d","mint(address)":"6a627842","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","price0CumulativeLast()":"5909c0d5","price1CumulativeLast()":"5a3d5493","skim(address)":"bc25cf77","swap(uint256,uint256,address,bytes)":"022c0d9f","symbol()":"95d89b41","sync()":"fff6cae9","token0()":"0dfe1681","token1()":"d21220a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":\"IUniswapV2Pair\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SushiXSwap.sol":{"SushiXSwap":{"abi":[{"inputs":[{"internalType":"contract IBentoBoxMinimal","name":"_bentoBox","type":"address"},{"internalType":"contract IStargateRouter","name":"_stargateRouter","type":"address"},{"internalType":"address","name":"_factory","type":"address"},{"internalType":"bytes32","name":"_pairCodeHash","type":"bytes32"},{"internalType":"contract IStargateWidget","name":"_stargateWidget","type":"address"},{"internalType":"address","name":"_SGETH","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InsufficientGas","type":"error"},{"inputs":[],"name":"NotStargateRouter","type":"error"},{"inputs":[],"name":"TooLittleReceived","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"srcContext","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"failed","type":"bool"}],"name":"StargateSushiXSwapDst","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"srcContext","type":"bytes32"}],"name":"StargateSushiXSwapSrc","type":"event"},{"inputs":[],"name":"SGETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"approveToStargateRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"bentoBox","outputs":[{"internalType":"contract IBentoBoxMinimal","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8[]","name":"actions","type":"uint8[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes[]","name":"datas","type":"bytes[]"}],"name":"cook","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint8","name":"_functionType","type":"uint8"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint256","name":"_gas","type":"uint256"},{"internalType":"uint256","name":"_dustAmount","type":"uint256"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"getFee","outputs":[{"internalType":"uint256","name":"a","type":"uint256"},{"internalType":"uint256","name":"b","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pairCodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"amountLD","type":"uint256"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"sgReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stargateRouter","outputs":[{"internalType":"contract IStargateRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateWidget","outputs":[{"internalType":"contract IStargateWidget","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"Supports both BentoBox and Wallet. Supports both Trident and Legacy AMM. Uses Stargate as bridge.","kind":"dev","methods":{"approveToStargateRouter(address)":{"params":{"token":"token to approve"}},"cook(uint8[],uint256[],bytes[])":{"details":"The function gets invoked both at the src and dst chain.","params":{"actions":"An array with a sequence of actions to execute (see ACTION_ declarations).","datas":"A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.","values":"A one-to-one mapped array to `actions`. Native token amount to send along action."}},"getFee(uint16,uint8,address,uint256,uint256,bytes)":{"params":{"_dstChainId":"stargate dst chainId","_dustAmount":"dust amount to be received at the dst chain","_functionType":"stargate Function type 1 for swap. See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types","_gas":"extra gas being sent","_payload":"payload being sent at the dst chain","_receiver":"sushiXswap on the dst chain"}},"sgReceive(uint16,bytes,uint256,address,uint256,bytes)":{"params":{"_token":"bridge token received","amountLD":"amount received","payload":"ABI-Encoded data received from src chain"}}},"title":"SushiXSwap","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2058":{"entryPoint":null,"id":2058,"parameterSlots":6,"returnSlots":0},"@_4032":{"entryPoint":null,"id":4032,"parameterSlots":6,"returnSlots":0},"abi_decode_tuple_t_contract$_IBentoBoxMinimal_$4138t_contract$_IStargateRouter_$4360t_addresst_bytes32t_contract$_IStargateWidget_$4368t_address_fromMemory":{"entryPoint":218,"id":null,"parameterSlots":2,"returnSlots":6},"validator_revert_contract_IBentoBoxMinimal":{"entryPoint":193,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1184:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"77:86:33","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:33"},"nodeType":"YulFunctionCall","src":"143:12:33"},"nodeType":"YulExpressionStatement","src":"143:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"100:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"111:5:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"126:3:33","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"131:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"122:3:33"},"nodeType":"YulFunctionCall","src":"122:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:33","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"118:3:33"},"nodeType":"YulFunctionCall","src":"118:19:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"107:3:33"},"nodeType":"YulFunctionCall","src":"107:31:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"97:2:33"},"nodeType":"YulFunctionCall","src":"97:42:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"90:6:33"},"nodeType":"YulFunctionCall","src":"90:50:33"},"nodeType":"YulIf","src":"87:70:33"}]},"name":"validator_revert_contract_IBentoBoxMinimal","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"66:5:33","type":""}],"src":"14:149:33"},{"body":{"nodeType":"YulBlock","src":"407:775:33","statements":[{"body":{"nodeType":"YulBlock","src":"454:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"463:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"466:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"456:6:33"},"nodeType":"YulFunctionCall","src":"456:12:33"},"nodeType":"YulExpressionStatement","src":"456:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"428:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"437:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"424:3:33"},"nodeType":"YulFunctionCall","src":"424:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"449:3:33","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"420:3:33"},"nodeType":"YulFunctionCall","src":"420:33:33"},"nodeType":"YulIf","src":"417:53:33"},{"nodeType":"YulVariableDeclaration","src":"479:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"498:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"492:5:33"},"nodeType":"YulFunctionCall","src":"492:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"483:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"560:5:33"}],"functionName":{"name":"validator_revert_contract_IBentoBoxMinimal","nodeType":"YulIdentifier","src":"517:42:33"},"nodeType":"YulFunctionCall","src":"517:49:33"},"nodeType":"YulExpressionStatement","src":"517:49:33"},{"nodeType":"YulAssignment","src":"575:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"585:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"575:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"599:40:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"624:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"635:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"620:3:33"},"nodeType":"YulFunctionCall","src":"620:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"614:5:33"},"nodeType":"YulFunctionCall","src":"614:25:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"603:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"691:7:33"}],"functionName":{"name":"validator_revert_contract_IBentoBoxMinimal","nodeType":"YulIdentifier","src":"648:42:33"},"nodeType":"YulFunctionCall","src":"648:51:33"},"nodeType":"YulExpressionStatement","src":"648:51:33"},{"nodeType":"YulAssignment","src":"708:17:33","value":{"name":"value_1","nodeType":"YulIdentifier","src":"718:7:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"708:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"734:40:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"759:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"770:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"755:3:33"},"nodeType":"YulFunctionCall","src":"755:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"749:5:33"},"nodeType":"YulFunctionCall","src":"749:25:33"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"738:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"826:7:33"}],"functionName":{"name":"validator_revert_contract_IBentoBoxMinimal","nodeType":"YulIdentifier","src":"783:42:33"},"nodeType":"YulFunctionCall","src":"783:51:33"},"nodeType":"YulExpressionStatement","src":"783:51:33"},{"nodeType":"YulAssignment","src":"843:17:33","value":{"name":"value_2","nodeType":"YulIdentifier","src":"853:7:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"843:6:33"}]},{"nodeType":"YulAssignment","src":"869:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"889:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"900:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"885:3:33"},"nodeType":"YulFunctionCall","src":"885:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"879:5:33"},"nodeType":"YulFunctionCall","src":"879:25:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"869:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"913:41:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"938:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"949:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"934:3:33"},"nodeType":"YulFunctionCall","src":"934:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"928:5:33"},"nodeType":"YulFunctionCall","src":"928:26:33"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"917:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"1006:7:33"}],"functionName":{"name":"validator_revert_contract_IBentoBoxMinimal","nodeType":"YulIdentifier","src":"963:42:33"},"nodeType":"YulFunctionCall","src":"963:51:33"},"nodeType":"YulExpressionStatement","src":"963:51:33"},{"nodeType":"YulAssignment","src":"1023:17:33","value":{"name":"value_3","nodeType":"YulIdentifier","src":"1033:7:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1023:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1049:41:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1074:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1085:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1070:3:33"},"nodeType":"YulFunctionCall","src":"1070:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1064:5:33"},"nodeType":"YulFunctionCall","src":"1064:26:33"},"variables":[{"name":"value_4","nodeType":"YulTypedName","src":"1053:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_4","nodeType":"YulIdentifier","src":"1142:7:33"}],"functionName":{"name":"validator_revert_contract_IBentoBoxMinimal","nodeType":"YulIdentifier","src":"1099:42:33"},"nodeType":"YulFunctionCall","src":"1099:51:33"},"nodeType":"YulExpressionStatement","src":"1099:51:33"},{"nodeType":"YulAssignment","src":"1159:17:33","value":{"name":"value_4","nodeType":"YulIdentifier","src":"1169:7:33"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1159:6:33"}]}]},"name":"abi_decode_tuple_t_contract$_IBentoBoxMinimal_$4138t_contract$_IStargateRouter_$4360t_addresst_bytes32t_contract$_IStargateWidget_$4368t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"333:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"344:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"356:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"364:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"372:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"380:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"388:6:33","type":""},{"name":"value5","nodeType":"YulTypedName","src":"396:6:33","type":""}],"src":"168:1014:33"}]},"contents":"{\n    { }\n    function validator_revert_contract_IBentoBoxMinimal(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IBentoBoxMinimal_$4138t_contract$_IStargateRouter_$4360t_addresst_bytes32t_contract$_IStargateWidget_$4368t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IBentoBoxMinimal(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IBentoBoxMinimal(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_IBentoBoxMinimal(value_2)\n        value2 := value_2\n        value3 := mload(add(headStart, 96))\n        let value_3 := mload(add(headStart, 128))\n        validator_revert_contract_IBentoBoxMinimal(value_3)\n        value4 := value_3\n        let value_4 := mload(add(headStart, 160))\n        validator_revert_contract_IBentoBoxMinimal(value_4)\n        value5 := value_4\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101406040523480156200001257600080fd5b50604051620051aa380380620051aa8339810160408190526200003591620000da565b6001600160a01b03808716608081905281871660a05281841660c05281861660e052610100859052908216610120526040805163577268d960e11b8152905163aee4d1b29160048082019260009290919082900301818387803b1580156200009c57600080fd5b505af1158015620000b1573d6000803e3d6000fd5b5050505050505050505062000162565b6001600160a01b0381168114620000d757600080fd5b50565b60008060008060008060c08789031215620000f457600080fd5b86516200010181620000c1565b60208801519096506200011481620000c1565b60408801519095506200012781620000c1565b6060880151608089015191955093506200014181620000c1565b60a08801519092506200015481620000c1565b809150509295509295509295565b60805160a05160c05160e0516101005161012051614f206200028a6000396000818161027901528181610d8b0152610f5c0152600081816101af0152818161165b0152818161177e0152612f61015260008181610245015281816116380152818161172701528181612efb0152612f3e01526000818161017b01526127de0152600081816101f101528181610b6901528181610cfc015281816110a2015261258001526000818160e8015281816103a1015281816106210152818161064c015281816108350152818161114d0152818161122e015281816112fa015281816113c40152818161195101528181611978015281816119b901528181611bde01528181611df501528181611f3901528181612139015281816122ae01526123e50152614f206000f3fe6080604052600436106100b55760003560e01c8063a9e56f3c11610069578063c45a01551161004e578063c45a015514610233578063cf36fd2414610267578063d1ac35351461029b57600080fd5b8063a9e56f3c146101df578063ab8236f31461021357600080fd5b80636ce4fe031161009a5780636ce4fe03146101345780636f435ac2146101695780639aab92481461019d57600080fd5b8063656f3d64146100c15780636b2ace87146100d657600080fd5b366100bc57005b600080fd5b6100d46100cf366004613b37565b6102bb565b005b3480156100e257600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561014057600080fd5b5061015461014f366004613c4f565b610b64565b6040805192835260208301919091520161012b565b34801561017557600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101a957600080fd5b506101d17f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161012b565b3480156101eb57600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561021f57600080fd5b506100d461022e366004613cd6565b610ce4565b34801561023f57600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561027357600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a757600080fd5b506100d46102b6366004613d66565b611086565b825160005b81811015610b5d5760008582815181106102dc576102dc613d8a565b60200260200101519050600060ff168160ff16141561040957600080600080600088878151811061030f5761030f613d8a565b602002602001015180602001905181019061032a9190613dd9565b6040517fc0a47c9300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152306024830152851515604483015260ff851660648301526084820184905260a48201839052959a50939850919650945092507f00000000000000000000000000000000000000000000000000000000000000009091169063c0a47c939060c401600060405180830381600087803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b505050505050505050610b54565b60ff8116600114156104805760008060008087868151811061042d5761042d613d8a565b60200260200101518060200190518101906104489190613e33565b935093509350935061047784338585858e8c8151811061046a5761046a613d8a565b60200260200101516110ea565b50505050610b54565b60ff8116600214156104e35760008060008060008887815181106104a6576104a6613d8a565b60200260200101518060200190518101906104c19190613e7b565b945094509450945094506104d98533868686866111c5565b5050505050610b54565b60ff8116600b141561053a57600080600086858151811061050657610506613d8a565b60200260200101518060200190518101906105219190613ed8565b925092509250610532838383611428565b505050610b54565b60ff8116600314156106805760008060008087868151811061055e5761055e613d8a565b60200260200101518060200190518101906105799190613e33565b9350935093509350816000141561061b576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156105f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106189190613f1b565b91505b610646847f00000000000000000000000000000000000000000000000000000000000000008461144f565b610477847f00000000000000000000000000000000000000000000000000000000000000008585858e8c8151811061046a5761046a613d8a565b60ff81166004141561078c5760008060008685815181106106a3576106a3613d8a565b60200260200101518060200190518101906106be9190613ed8565b92509250925080600014156107815773ffffffffffffffffffffffffffffffffffffffff83161561077e576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190613f1b565b9050610781565b50475b61053283838361144f565b60ff8116600514156108b15760008060008060008887815181106107b2576107b2613d8a565b60200260200101518060200190518101906107cd9190613e7b565b945094509450945094508260001480156107e5575081155b156108a3576040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190613f1b565b91505b6104d98530868686866111c5565b60ff811660061415610902576000808584815181106108d2576108d2613d8a565b60200260200101518060200190518101906108ed9190613f34565b915091506108fb82826114d5565b5050610b54565b60ff8116600c141561094c5760008085848151811061092357610923613d8a565b602002602001015180602001905181019061093e9190613f6e565b915091506108fb82826115cb565b60ff811660071415610a6a5760008060008087868151811061097057610970613d8a565b602002602001015180602001905181019061098b9190613f9c565b935093509350935060008460001415610a5257826000815181106109b1576109b1613d8a565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b9190613f1b565b9450600190505b610a5f8585858585611630565b505050505050610b54565b60ff811660081415610ab0576000848381518110610a8a57610a8a613d8a565b6020026020010151806020019051810190610aa591906140cd565b90506108fb816118a4565b60ff811660091415610afc576000848381518110610ad057610ad0613d8a565b6020026020010151806020019051810190610aeb91906143fa565b9050610af681611bce565b50610b54565b60ff8116600a1415610b5457600080600080878681518110610b2057610b20613d8a565b6020026020010151806020019051810190610b3b91906146f7565b9350935093509350610b4f84848484612506565b505050505b506001016102c0565b5050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630a512369898989604051602001610be1919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b60405160208183030381529060405287604051602001610c019190614875565b60405160208183030381529060405260405180606001604052808c81526020018b81526020018d604051602001610c63919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528152506040518663ffffffff1660e01b8152600401610c959594939291906148b1565b6040805180830381865afa158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd59190614909565b90999098509650505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d53576040517f8c66bf5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600080600085806020019051810190610d6f919061492d565b939850919650945092509050620186a06000815a1015610ea7577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614610dfd57610dfd73ffffffffffffffffffffffffffffffffffffffff8b16888b612889565b4715610e625760405173ffffffffffffffffffffffffffffffffffffffff8816904790600081818185875af1925050503d8060008114610e59576040519150601f19603f3d011682016040523d82523d6000602084013e610e5e565b606091505b5050505b5060405160018082529083907fd02bbeba90c0a3636769d1b8c9f07e2b5e4131b8fbcc2d6ba56054e20b98d75d9060200160405180910390a25050505050505061107e565b6000825a610eb59190614a02565b6040517f656f3d64000000000000000000000000000000000000000000000000000000008152909150309063656f3d64908390610efa908b908b908b90600401614adc565b600060405180830381600088803b158015610f1457600080fd5b5087f193505050508015610f26575060015b610fd4573d808015610f54576040519150601f19603f3d011682016040523d82523d6000602084013e610f59565b606091505b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614610fce57610fce73ffffffffffffffffffffffffffffffffffffffff8d168a8d612889565b60019250505b47156110395760405173ffffffffffffffffffffffffffffffffffffffff8916904790600081818185875af1925050503d8060008114611030576040519150601f19603f3d011682016040523d82523d6000602084013e611035565b606091505b5050505b837fd02bbeba90c0a3636769d1b8c9f07e2b5e4131b8fbcc2d6ba56054e20b98d75d8360405161106d911515815260200190565b60405180910390a250505050505050505b505050505050565b6110e773ffffffffffffffffffffffffffffffffffffffff82167f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61295d565b50565b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c90839060a401604080518083038185885af1158015611196573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111bb9190614909565b5050505050505050565b80156112a1576040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af1158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190614909565b505061107e565b8215611368576040517fda5139ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201859052600060448301527f0000000000000000000000000000000000000000000000000000000000000000169063da5139ca90606401602060405180830381865afa158015611341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113659190613f1b565b91505b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015286811660248301528581166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b15801561140857600080fd5b505af115801561141c573d6000803e3d6000fd5b50505050505050505050565b61144a73ffffffffffffffffffffffffffffffffffffffff8416338484612adf565b505050565b73ffffffffffffffffffffffffffffffffffffffff83161561148c5761144a73ffffffffffffffffffffffffffffffffffffffff84168383612889565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f193505050501580156114cf573d6000803e3d6000fd5b50505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d9082906370a0823190602401602060405180830381865afa158015611547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156b9190613f1b565b6040518263ffffffff1660e01b815260040161158991815260200190565b600060405180830381600087803b1580156115a357600080fd5b505af11580156115b7573d6000803e3d6000fd5b505050506115c76000824761144f565b5050565b8173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561161357600080fd5b505af1158015611627573d6000803e3d6000fd5b50505050505050565b60008061167f7f000000000000000000000000000000000000000000000000000000000000000088877f0000000000000000000000000000000000000000000000000000000000000000612b3d565b905080600182516116909190614a02565b815181106116a0576116a0613d8a565b6020026020010151915085821015611719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e73756666696369656e742d616d6f756e742d6f757400000000000000000060448201526064015b60405180910390fd5b821561188f5761188f6117a27f00000000000000000000000000000000000000000000000000000000000000008760008151811061175957611759613d8a565b60200260200101518860018151811061177457611774613d8a565b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000612ce4565b866000815181106117b5576117b5613d8a565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561182b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184f9190613f1b565b8760008151811061186257611862613d8a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166128899092919063ffffffff16565b61189a818686612dfe565b5095945050505050565b6000816020015160001415611ab05781516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119459190613f1b565b905061197683600001517f00000000000000000000000000000000000000000000000000000000000000008361144f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166302b9446c84600001517f000000000000000000000000000000000000000000000000000000000000000086606001516000815181106119ef576119ef613d8a565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152919091166044820152606481018490526000608482015260a40160408051808303816000875af1158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa89190614909565b602085015250505b60608201515160005b81811015611b895783606001518181518110611ad757611ad7613d8a565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a85606001518381518110611b1457611b14613d8a565b6020026020010151602001516040518263ffffffff1660e01b8152600401611b3c9190614875565b6020604051808303816000875af1158015611b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7f9190613f1b565b9250600101611ab9565b508260400151821015611bc8576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b80515160005b81811015611dde577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc84600001518381518110611c2e57611c2e613d8a565b6020026020010151600001513086600001518581518110611c5157611c51613d8a565b60200260200101516020015187600001518681518110611c7357611c73613d8a565b6020908102919091010151606001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152921660448201526064810191909152608401600060405180830381600087803b158015611cff57600080fd5b505af1158015611d13573d6000803e3d6000fd5b5050505082600001518181518110611d2d57611d2d613d8a565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a84600001518381518110611d6a57611d6a613d8a565b6020026020010151608001516040518263ffffffff1660e01b8152600401611d929190614875565b6020604051808303816000875af1158015611db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd59190613f1b565b50600101611bd4565b505060208101515160005b818110156121225760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec85602001518481518110611e4557611e45613d8a565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015611ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee49190613f1b565b90506000611ef46008600a614c3f565b85602001518481518110611f0a57611f0a613d8a565b60200260200101516040015167ffffffffffffffff1683611f2b9190614c4e565b611f359190614c8b565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc86602001518581518110611f8957611f89613d8a565b6020026020010151600001513088602001518781518110611fac57611fac613d8a565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b15801561203857600080fd5b505af115801561204c573d6000803e3d6000fd5b505050508460200151838151811061206657612066613d8a565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a866020015185815181106120a3576120a3613d8a565b6020026020010151606001516040518263ffffffff1660e01b81526004016120cb9190614875565b6020604051808303816000875af11580156120ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210e9190613f1b565b50505061211b8160010190565b9050611de9565b505060408101515160005b8181101561144a5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec8560400151848151811061218957612189613d8a565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015612204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122289190613f1b565b90508360400151828151811061224057612240613d8a565b602002602001015160600151811015612285576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360400151828151811061229b5761229b613d8a565b602002602001015160400151156123e3577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166397da6d30856040015184815181106122fe576122fe613d8a565b602002602001015160000151308760400151868151811061232157612321613d8a565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152919091166044820152600060648201526084810184905260a40160408051808303816000875af11580156123b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dc9190614909565b50506124fd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc8560400151848151811061243557612435613d8a565b602002602001015160000151308760400151868151811061245857612458613d8a565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b1580156124e457600080fd5b505af11580156124f8573d6000803e3d6000fd5b505050505b5060010161212d565b600084610100015184848488610140015160405160200161252b959493929190614cc6565b6040516020818303038152906040529050620186a0856101200151101561257e576040517f1c26714c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639fbf10fc47876000015188604001518960600151338b60800151600014156126715760208c01516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266c9190613f1b565b612677565b8b608001515b8c60a0015160405180606001604052808f610120015181526020018f60c0015181526020018f60e001516040516020016126dc919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528152508e60e0015160405160200161272e919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528b6040518b63ffffffff1660e01b815260040161276299989796959493929190614d2e565b6000604051808303818588803b15801561277b57600080fd5b505af115801561278f573d6000803e3d6000fd5b50506040517fa87376e90000000000000000000000000000000000000000000000000000000081527e0100000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16935063a87376e992506024019050600060405180830381600087803b15801561283b57600080fd5b505af115801561284f573d6000803e3d6000fd5b505050506101408501516040517fef89f27cad105cfe7c63f4a5c70e6b1392b571ff544a83de4bf71ceb46bacfee90600090a25050505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261144a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261303b565b8015806129fd57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156129d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fb9190613f1b565b155b612a89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401611710565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261144a9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064016128db565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526114cf9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016128db565b6060600283511015612bab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152606401611710565b825167ffffffffffffffff811115612bc557612bc561384e565b604051908082528060200260200182016040528015612bee578160200160208202803683370190505b5090508381600081518110612c0557612c05613d8a565b60200260200101818152505060005b60018451612c229190614a02565b811015612cdb57600080612c7688878581518110612c4257612c42613d8a565b602002602001015188866001612c589190614db9565b81518110612c6857612c68613d8a565b60200260200101518861314a565b91509150612c9e848481518110612c8f57612c8f613d8a565b6020026020010151838361324b565b84612caa856001614db9565b81518110612cba57612cba613d8a565b60200260200101818152505050508080612cd390614dd1565b915050612c14565b50949350505050565b6000806000612cf386866133c5565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b166034820152919350915087906048016040516020818303038152906040528051906020012085604051602001612dbd939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120979650505050505050565b60005b60018351612e0f9190614a02565b8110156114cf57600080848381518110612e2b57612e2b613d8a565b602002602001015185846001612e419190614db9565b81518110612e5157612e51613d8a565b6020026020010151915091506000612e6983836133c5565b509050600087612e7a866001614db9565b81518110612e8a57612e8a613d8a565b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612ed257826000612ed6565b6000835b91509150600060028a51612eea9190614a02565b8810612ef65788612f37565b612f377f0000000000000000000000000000000000000000000000000000000000000000878c612f278c6002614db9565b8151811061177457611774613d8a565b9050612f857f000000000000000000000000000000000000000000000000000000000000000088887f0000000000000000000000000000000000000000000000000000000000000000612ce4565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612fcf576020820181803683370190505b506040518563ffffffff1660e01b8152600401612fef9493929190614e0a565b600060405180830381600087803b15801561300957600080fd5b505af115801561301d573d6000803e3d6000fd5b5050505050505050505050808061303390614dd1565b915050612e01565b600061309d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661354a9092919063ffffffff16565b90508051600014806130be5750808060200190518101906130be9190614e45565b61144a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401611710565b600080600061315986866133c5565b50905060008061316b89898989612ce4565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156131b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d99190614e7e565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461323857808261323b565b81815b909a909950975050505050505050565b60008084116132dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608401611710565b6000831180156132ec5750600082115b613378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152608401611710565b6000613386856103e5613561565b905060006133948285613561565b905060006133ae836133a8886103e8613561565b906135f1565b90506133ba8183614c8b565b979650505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608401611710565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106134be5782846134c1565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216613543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401611710565b9250929050565b60606135598484600085613669565b949350505050565b6000811580613585575082826135778183614c4e565b92506135839083614c8b565b145b6135eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606401611710565b92915050565b6000826135fe8382614db9565b91508110156135eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401611710565b6060824710156136fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401611710565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516137249190614ece565b60006040518083038185875af1925050503d8060008114613761576040519150601f19603f3d011682016040523d82523d6000602084013e613766565b606091505b50915091506133ba87838387606083156138055782516137fe5773ffffffffffffffffffffffffffffffffffffffff85163b6137fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611710565b5081613559565b613559838381511561381a5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117109190614875565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156138a0576138a061384e565b60405290565b6040805190810167ffffffffffffffff811182821017156138a0576138a061384e565b6040516060810167ffffffffffffffff811182821017156138a0576138a061384e565b60405160a0810167ffffffffffffffff811182821017156138a0576138a061384e565b604051610160810167ffffffffffffffff811182821017156138a0576138a061384e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561397a5761397a61384e565b604052919050565b600067ffffffffffffffff82111561399c5761399c61384e565b5060051b60200190565b60ff811681146110e757600080fd5b600082601f8301126139c657600080fd5b813560206139db6139d683613982565b613933565b82815260059290921b840181019181810190868411156139fa57600080fd5b8286015b84811015613a1557803583529183019183016139fe565b509695505050505050565b600067ffffffffffffffff821115613a3a57613a3a61384e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112613a7757600080fd5b8135613a856139d682613a20565b818152846020838601011115613a9a57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613ac857600080fd5b81356020613ad86139d683613982565b82815260059290921b84018101918181019086841115613af757600080fd5b8286015b84811015613a1557803567ffffffffffffffff811115613b1b5760008081fd5b613b298986838b0101613a66565b845250918301918301613afb565b600080600060608486031215613b4c57600080fd5b833567ffffffffffffffff80821115613b6457600080fd5b818601915086601f830112613b7857600080fd5b81356020613b886139d683613982565b82815260059290921b8401810191818101908a841115613ba757600080fd5b948201945b83861015613bce578535613bbf816139a6565b82529482019490820190613bac565b97505087013592505080821115613be457600080fd5b613bf0878388016139b5565b93506040860135915080821115613c0657600080fd5b50613c1386828701613ab7565b9150509250925092565b61ffff811681146110e757600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146110e757600080fd5b60008060008060008060c08789031215613c6857600080fd5b8635613c7381613c1d565b95506020870135613c83816139a6565b94506040870135613c9381613c2d565b9350606087013592506080870135915060a087013567ffffffffffffffff811115613cbd57600080fd5b613cc989828a01613a66565b9150509295509295509295565b60008060008060008060c08789031215613cef57600080fd5b8635613cfa81613c1d565b9550602087013567ffffffffffffffff80821115613d1757600080fd5b613d238a838b01613a66565b96506040890135955060608901359150613d3c82613c2d565b9093506080880135925060a08801359080821115613d5957600080fd5b50613cc989828a01613a66565b600060208284031215613d7857600080fd5b8135613d8381613c2d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8051613dc481613c2d565b919050565b80518015158114613dc457600080fd5b600080600080600060a08688031215613df157600080fd5b8551613dfc81613c2d565b9450613e0a60208701613dc9565b93506040860151613e1a816139a6565b6060870151608090970151959894975095949392505050565b60008060008060808587031215613e4957600080fd5b8451613e5481613c2d565b6020860151909450613e6581613c2d565b6040860151606090960151949790965092505050565b600080600080600060a08688031215613e9357600080fd5b8551613e9e81613c2d565b6020870151909550613eaf81613c2d565b6040870151606088015191955093509150613ecc60808701613dc9565b90509295509295909350565b600080600060608486031215613eed57600080fd5b8351613ef881613c2d565b6020850151909350613f0981613c2d565b80925050604084015190509250925092565b600060208284031215613f2d57600080fd5b5051919050565b60008060408385031215613f4757600080fd5b8251613f5281613c2d565b6020840151909250613f6381613c2d565b809150509250929050565b60008060408385031215613f8157600080fd5b8251613f8c81613c2d565b6020939093015192949293505050565b60008060008060808587031215613fb257600080fd5b845193506020808601519350604086015167ffffffffffffffff811115613fd857600080fd5b8601601f81018813613fe957600080fd5b8051613ff76139d682613982565b81815260059190911b8201830190838101908a83111561401657600080fd5b928401925b8284101561403d57835161402e81613c2d565b8252928401929084019061401b565b809650505050505061405160608601613db9565b905092959194509250565b60005b8381101561407757818101518382015260200161405f565b838111156114cf5750506000910152565b600082601f83011261409957600080fd5b81516140a76139d682613a20565b8181528460208386010111156140bc57600080fd5b61355982602083016020870161405c565b600060208083850312156140e057600080fd5b825167ffffffffffffffff808211156140f857600080fd5b908401906080828703121561410c57600080fd5b61411461387d565b825161411f81613c2d565b815282840151848201526040808401518183015260608401518381111561414557600080fd5b80850194505087601f85011261415a57600080fd5b83516141686139d682613982565b81815260059190911b8501860190868101908a83111561418757600080fd5b8787015b83811015614221578051878111156141a35760008081fd5b8801808d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018613156141d75760008081fd5b6141df6138a6565b8a8201516141ec81613c2d565b815281870151898111156142005760008081fd5b61420e8f8d83860101614088565b828d01525084525091880191880161418b565b506060850152509198975050505050505050565b600082601f83011261424657600080fd5b815160206142566139d683613982565b82815260059290921b8401810191818101908684111561427557600080fd5b8286015b84811015613a1557805167ffffffffffffffff8082111561429a5760008081fd5b81890191506080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156142d35760008081fd5b6142db61387d565b878401516142e881613c2d565b81526040848101516142f981613c2d565b828a015260608581015185811681146143125760008081fd5b8383015292850151928484111561432b57600091508182fd5b6143398e8b86890101614088565b90830152508652505050918301918301614279565b600082601f83011261435f57600080fd5b8151602061436f6139d683613982565b82815260079290921b8401810191818101908684111561438e57600080fd5b8286015b84811015613a1557608081890312156143ab5760008081fd5b6143b361387d565b81516143be81613c2d565b8152818501516143cd81613c2d565b8186015260406143de838201613dc9565b9082015260608281015190820152835291830191608001614392565b6000602080838503121561440d57600080fd5b825167ffffffffffffffff8082111561442557600080fd5b908401906060828703121561443957600080fd5b6144416138c9565b82518281111561445057600080fd5b8301601f8101881361446157600080fd5b805161446f6139d682613982565b81815260059190911b8201860190868101908a83111561448e57600080fd5b8784015b83811015614556578051878111156144a957600080fd5b850160a0818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00112156144dd57600080fd5b6144e56138ec565b8a8201516144f281613c2d565b8152604082015161450281613c2d565b818c015261451260608301613dc9565b60408201526080820151606082015260a0820151898111156145345760008081fd5b6145428f8d83860101614088565b608083015250845250918801918801614492565b508452505050828401518281111561456d57600080fd5b61457988828601614235565b8583015250604083015193508184111561459257600080fd5b61459e8785850161434e565b60408201529695505050505050565b8051613dc481613c1d565b600082601f8301126145c957600080fd5b815160206145d96139d683613982565b82815260059290921b840181019181810190868411156145f857600080fd5b8286015b84811015613a1557805161460f816139a6565b83529183019183016145fc565b600082601f83011261462d57600080fd5b8151602061463d6139d683613982565b82815260059290921b8401810191818101908684111561465c57600080fd5b8286015b84811015613a155780518352918301918301614660565b600082601f83011261468857600080fd5b815160206146986139d683613982565b82815260059290921b840181019181810190868411156146b757600080fd5b8286015b84811015613a1557805167ffffffffffffffff8111156146db5760008081fd5b6146e98986838b0101614088565b8452509183019183016146bb565b6000806000808486036101c081121561470f57600080fd5b6101608082121561471f57600080fd5b61472761390f565b9150614732876145ad565b825261474060208801613db9565b602083015260408701516040830152606087015160608301526080870151608083015260a087015160a083015260c087015160c083015261478360e08801613db9565b60e0830152610100614796818901613db9565b908301526101208781015190830152610140808801519083015286015190945067ffffffffffffffff808211156147cc57600080fd5b6147d8888389016145b8565b94506101808701519150808211156147ef57600080fd5b6147fb8883890161461c565b93506101a087015191508082111561481257600080fd5b5061481f87828801614677565b91505092959194509250565b6000815180845261484381602086016020860161405c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000613d83602083018461482b565b80518252602081015160208301526000604082015160606040850152613559606085018261482b565b61ffff8616815260ff8516602082015260a0604082015260006148d760a083018661482b565b82810360608401526148e9818661482b565b905082810360808401526148fd8185614888565b98975050505050505050565b6000806040838503121561491c57600080fd5b505080516020909101519092909150565b600080600080600060a0868803121561494557600080fd5b855161495081613c2d565b602087015190955067ffffffffffffffff8082111561496e57600080fd5b61497a89838a016145b8565b9550604088015191508082111561499057600080fd5b61499c89838a0161461c565b945060608801519150808211156149b257600080fd5b506149bf88828901614677565b925050608086015190509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614a1457614a146149d3565b500390565b600081518084526020808501945080840160005b83811015614a4c57815160ff1687529582019590820190600101614a2d565b509495945050505050565b600081518084526020808501945080840160005b83811015614a4c57815187529582019590820190600101614a6b565b600081518084526020808501808196508360051b8101915082860160005b85811015614acf578284038952614abd84835161482b565b98850198935090840190600101614aa5565b5091979650505050505050565b606081526000614aef6060830186614a19565b8281036020840152614b018186614a57565b90508281036040840152614b158185614a87565b9695505050505050565b600181815b80851115614b7857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614b5e57614b5e6149d3565b80851615614b6b57918102915b93841c9390800290614b24565b509250929050565b600082614b8f575060016135eb565b81614b9c575060006135eb565b8160018114614bb25760028114614bbc57614bd8565b60019150506135eb565b60ff841115614bcd57614bcd6149d3565b50506001821b6135eb565b5060208310610133831016604e8410600b8410161715614bfb575081810a6135eb565b614c058383614b1f565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614c3757614c376149d3565b029392505050565b6000613d8360ff841683614b80565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c8657614c866149d3565b500290565b600082614cc1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b73ffffffffffffffffffffffffffffffffffffffff8616815260a060208201526000614cf560a0830187614a19565b8281036040840152614d078187614a57565b90508281036060840152614d1b8186614a87565b9150508260808301529695505050505050565b600061012061ffff8c1683528a602084015289604084015273ffffffffffffffffffffffffffffffffffffffff891660608401528760808401528660a08401528060c0840152614d8081840187614888565b905082810360e0840152614d94818661482b565b9050828103610100840152614da9818561482b565b9c9b505050505050505050505050565b60008219821115614dcc57614dcc6149d3565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614e0357614e036149d3565b5060010190565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000614b15608083018461482b565b600060208284031215614e5757600080fd5b613d8382613dc9565b80516dffffffffffffffffffffffffffff81168114613dc457600080fd5b600080600060608486031215614e9357600080fd5b614e9c84614e60565b9250614eaa60208501614e60565b9150604084015163ffffffff81168114614ec357600080fd5b809150509250925092565b60008251614ee081846020870161405c565b919091019291505056fea2646970667358221220fa7fdcc95e227b45d7c24ec942b5be111b48c74b23f3dfeca040f109ed95abc564736f6c634300080b0033","opcodes":"PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x51AA CODESIZE SUB DUP1 PUSH3 0x51AA DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0xDA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x80 DUP2 SWAP1 MSTORE DUP2 DUP8 AND PUSH1 0xA0 MSTORE DUP2 DUP5 AND PUSH1 0xC0 MSTORE DUP2 DUP7 AND PUSH1 0xE0 MSTORE PUSH2 0x100 DUP6 SWAP1 MSTORE SWAP1 DUP3 AND PUSH2 0x120 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x577268D9 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH4 0xAEE4D1B2 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP PUSH3 0x162 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0xF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x101 DUP2 PUSH3 0xC1 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD SWAP1 SWAP7 POP PUSH3 0x114 DUP2 PUSH3 0xC1 JUMP JUMPDEST PUSH1 0x40 DUP9 ADD MLOAD SWAP1 SWAP6 POP PUSH3 0x127 DUP2 PUSH3 0xC1 JUMP JUMPDEST PUSH1 0x60 DUP9 ADD MLOAD PUSH1 0x80 DUP10 ADD MLOAD SWAP2 SWAP6 POP SWAP4 POP PUSH3 0x141 DUP2 PUSH3 0xC1 JUMP JUMPDEST PUSH1 0xA0 DUP9 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x154 DUP2 PUSH3 0xC1 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x4F20 PUSH3 0x28A PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x279 ADD MSTORE DUP2 DUP2 PUSH2 0xD8B ADD MSTORE PUSH2 0xF5C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1AF ADD MSTORE DUP2 DUP2 PUSH2 0x165B ADD MSTORE DUP2 DUP2 PUSH2 0x177E ADD MSTORE PUSH2 0x2F61 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x245 ADD MSTORE DUP2 DUP2 PUSH2 0x1638 ADD MSTORE DUP2 DUP2 PUSH2 0x1727 ADD MSTORE DUP2 DUP2 PUSH2 0x2EFB ADD MSTORE PUSH2 0x2F3E ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x17B ADD MSTORE PUSH2 0x27DE ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1F1 ADD MSTORE DUP2 DUP2 PUSH2 0xB69 ADD MSTORE DUP2 DUP2 PUSH2 0xCFC ADD MSTORE DUP2 DUP2 PUSH2 0x10A2 ADD MSTORE PUSH2 0x2580 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0xE8 ADD MSTORE DUP2 DUP2 PUSH2 0x3A1 ADD MSTORE DUP2 DUP2 PUSH2 0x621 ADD MSTORE DUP2 DUP2 PUSH2 0x64C ADD MSTORE DUP2 DUP2 PUSH2 0x835 ADD MSTORE DUP2 DUP2 PUSH2 0x114D ADD MSTORE DUP2 DUP2 PUSH2 0x122E ADD MSTORE DUP2 DUP2 PUSH2 0x12FA ADD MSTORE DUP2 DUP2 PUSH2 0x13C4 ADD MSTORE DUP2 DUP2 PUSH2 0x1951 ADD MSTORE DUP2 DUP2 PUSH2 0x1978 ADD MSTORE DUP2 DUP2 PUSH2 0x19B9 ADD MSTORE DUP2 DUP2 PUSH2 0x1BDE ADD MSTORE DUP2 DUP2 PUSH2 0x1DF5 ADD MSTORE DUP2 DUP2 PUSH2 0x1F39 ADD MSTORE DUP2 DUP2 PUSH2 0x2139 ADD MSTORE DUP2 DUP2 PUSH2 0x22AE ADD MSTORE PUSH2 0x23E5 ADD MSTORE PUSH2 0x4F20 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA9E56F3C GT PUSH2 0x69 JUMPI DUP1 PUSH4 0xC45A0155 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0xCF36FD24 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xD1AC3535 EQ PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9E56F3C EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0xAB8236F3 EQ PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6CE4FE03 GT PUSH2 0x9A JUMPI DUP1 PUSH4 0x6CE4FE03 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x6F435AC2 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x9AAB9248 EQ PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x656F3D64 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x6B2ACE87 EQ PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xBC JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD4 PUSH2 0xCF CALLDATASIZE PUSH1 0x4 PUSH2 0x3B37 JUMP JUMPDEST PUSH2 0x2BB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0x3C4F JUMP JUMPDEST PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x12B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D1 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD4 PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0x3CD6 JUMP JUMPDEST PUSH2 0xCE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD4 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x1086 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB5D JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2DC JUMPI PUSH2 0x2DC PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0xFF AND DUP2 PUSH1 0xFF AND EQ ISZERO PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x30F JUMPI PUSH2 0x30F PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x3DD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xC0A47C9300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE DUP6 ISZERO ISZERO PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0xA4 DUP3 ADD DUP4 SWAP1 MSTORE SWAP6 SWAP11 POP SWAP4 SWAP9 POP SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xC0A47C93 SWAP1 PUSH1 0xC4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x1 EQ ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x42D JUMPI PUSH2 0x42D PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x448 SWAP2 SWAP1 PUSH2 0x3E33 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH2 0x477 DUP5 CALLER DUP6 DUP6 DUP6 DUP15 DUP13 DUP2 MLOAD DUP2 LT PUSH2 0x46A JUMPI PUSH2 0x46A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x10EA JUMP JUMPDEST POP POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x2 EQ ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4A6 JUMPI PUSH2 0x4A6 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4C1 SWAP2 SWAP1 PUSH2 0x3E7B JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH2 0x4D9 DUP6 CALLER DUP7 DUP7 DUP7 DUP7 PUSH2 0x11C5 JUMP JUMPDEST POP POP POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0xB EQ ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x506 JUMPI PUSH2 0x506 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x521 SWAP2 SWAP1 PUSH2 0x3ED8 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x532 DUP4 DUP4 DUP4 PUSH2 0x1428 JUMP JUMPDEST POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x3 EQ ISZERO PUSH2 0x680 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x55E JUMPI PUSH2 0x55E PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x579 SWAP2 SWAP1 PUSH2 0x3E33 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x0 EQ ISZERO PUSH2 0x61B JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x618 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x646 DUP5 PUSH32 0x0 DUP5 PUSH2 0x144F JUMP JUMPDEST PUSH2 0x477 DUP5 PUSH32 0x0 DUP6 DUP6 DUP6 DUP15 DUP13 DUP2 MLOAD DUP2 LT PUSH2 0x46A JUMPI PUSH2 0x46A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x4 EQ ISZERO PUSH2 0x78C JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6A3 JUMPI PUSH2 0x6A3 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6BE SWAP2 SWAP1 PUSH2 0x3ED8 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 PUSH1 0x0 EQ ISZERO PUSH2 0x781 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO PUSH2 0x77E JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x753 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x777 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP1 POP PUSH2 0x781 JUMP JUMPDEST POP SELFBALANCE JUMPDEST PUSH2 0x532 DUP4 DUP4 DUP4 PUSH2 0x144F JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x5 EQ ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x7B2 JUMPI PUSH2 0x7B2 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7CD SWAP2 SWAP1 PUSH2 0x3E7B JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP DUP3 PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x7E5 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x8A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF7888AEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xF7888AEC SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x87C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8A0 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x4D9 DUP6 ADDRESS DUP7 DUP7 DUP7 DUP7 PUSH2 0x11C5 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x6 EQ ISZERO PUSH2 0x902 JUMPI PUSH1 0x0 DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8D2 JUMPI PUSH2 0x8D2 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8ED SWAP2 SWAP1 PUSH2 0x3F34 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x8FB DUP3 DUP3 PUSH2 0x14D5 JUMP JUMPDEST POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0xC EQ ISZERO PUSH2 0x94C JUMPI PUSH1 0x0 DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x923 JUMPI PUSH2 0x923 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x93E SWAP2 SWAP1 PUSH2 0x3F6E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x8FB DUP3 DUP3 PUSH2 0x15CB JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x7 EQ ISZERO PUSH2 0xA6A JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x970 JUMPI PUSH2 0x970 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x98B SWAP2 SWAP1 PUSH2 0x3F9C JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH1 0x0 DUP5 PUSH1 0x0 EQ ISZERO PUSH2 0xA52 JUMPI DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9B1 JUMPI PUSH2 0x9B1 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA4B SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP5 POP PUSH1 0x1 SWAP1 POP JUMPDEST PUSH2 0xA5F DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1630 JUMP JUMPDEST POP POP POP POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x8 EQ ISZERO PUSH2 0xAB0 JUMPI PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA8A JUMPI PUSH2 0xA8A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xAA5 SWAP2 SWAP1 PUSH2 0x40CD JUMP JUMPDEST SWAP1 POP PUSH2 0x8FB DUP2 PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x9 EQ ISZERO PUSH2 0xAFC JUMPI PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD0 JUMPI PUSH2 0xAD0 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xAEB SWAP2 SWAP1 PUSH2 0x43FA JUMP JUMPDEST SWAP1 POP PUSH2 0xAF6 DUP2 PUSH2 0x1BCE JUMP JUMPDEST POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0xA EQ ISZERO PUSH2 0xB54 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xB20 JUMPI PUSH2 0xB20 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xB3B SWAP2 SWAP1 PUSH2 0x46F7 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH2 0xB4F DUP5 DUP5 DUP5 DUP5 PUSH2 0x2506 JUMP JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2C0 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA512369 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBE1 SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC01 SWAP2 SWAP1 PUSH2 0x4875 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC63 SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC95 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x48B1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCD5 SWAP2 SWAP1 PUSH2 0x4909 JUMP JUMPDEST SWAP1 SWAP10 SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xD53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C66BF5600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD6F SWAP2 SWAP1 PUSH2 0x492D JUMP JUMPDEST SWAP4 SWAP9 POP SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP PUSH3 0x186A0 PUSH1 0x0 DUP2 GAS LT ISZERO PUSH2 0xEA7 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDFD JUMPI PUSH2 0xDFD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND DUP9 DUP12 PUSH2 0x2889 JUMP JUMPDEST SELFBALANCE ISZERO PUSH2 0xE62 JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 SELFBALANCE SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE59 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE5E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 PUSH32 0xD02BBEBA90C0A3636769D1B8C9F07E2B5E4131B8FBCC2D6BA56054E20B98D75D SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP PUSH2 0x107E JUMP JUMPDEST PUSH1 0x0 DUP3 GAS PUSH2 0xEB5 SWAP2 SWAP1 PUSH2 0x4A02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x656F3D6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0x656F3D64 SWAP1 DUP4 SWAP1 PUSH2 0xEFA SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x4ADC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xF26 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0xFD4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xF54 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF59 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xFCE JUMPI PUSH2 0xFCE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND DUP11 DUP14 PUSH2 0x2889 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP JUMPDEST SELFBALANCE ISZERO PUSH2 0x1039 JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 SELFBALANCE SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1030 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1035 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP JUMPDEST DUP4 PUSH32 0xD02BBEBA90C0A3636769D1B8C9F07E2B5E4131B8FBCC2D6BA56054E20B98D75D DUP4 PUSH1 0x40 MLOAD PUSH2 0x106D SWAP2 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x10E7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH32 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x295D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2B9446C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x84 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x2B9446C SWAP1 DUP4 SWAP1 PUSH1 0xA4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1196 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11BB SWAP2 SWAP1 PUSH2 0x4909 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x97DA6D3000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x84 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x97DA6D30 SWAP1 PUSH1 0xA4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1276 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x129A SWAP2 SWAP1 PUSH2 0x4909 JUMP JUMPDEST POP POP PUSH2 0x107E JUMP JUMPDEST DUP3 ISZERO PUSH2 0x1368 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDA5139CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xDA5139CA SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1341 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1365 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF18D03CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xF18D03CC SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x141C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x144A PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND CALLER DUP5 DUP5 PUSH2 0x2ADF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO PUSH2 0x148C JUMPI PUSH2 0x144A PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP4 DUP4 PUSH2 0x2889 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x14CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1547 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x156B SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1589 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x15C7 PUSH1 0x0 DUP3 SELFBALANCE PUSH2 0x144F JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1627 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x167F PUSH32 0x0 DUP9 DUP8 PUSH32 0x0 PUSH2 0x2B3D JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0x1690 SWAP2 SWAP1 PUSH2 0x4A02 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x16A0 JUMPI PUSH2 0x16A0 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP DUP6 DUP3 LT ISZERO PUSH2 0x1719 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E742D616D6F756E742D6F7574000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 ISZERO PUSH2 0x188F JUMPI PUSH2 0x188F PUSH2 0x17A2 PUSH32 0x0 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1759 JUMPI PUSH2 0x1759 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1774 JUMPI PUSH2 0x1774 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH32 0x0 PUSH2 0x2CE4 JUMP JUMPDEST DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x17B5 JUMPI PUSH2 0x17B5 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x182B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x184F SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1862 JUMPI PUSH2 0x1862 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2889 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x189A DUP2 DUP7 DUP7 PUSH2 0x2DFE JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1AB0 JUMPI DUP2 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1921 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1945 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP1 POP PUSH2 0x1976 DUP4 PUSH1 0x0 ADD MLOAD PUSH32 0x0 DUP4 PUSH2 0x144F JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2B9446C DUP5 PUSH1 0x0 ADD MLOAD PUSH32 0x0 DUP7 PUSH1 0x60 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x19EF JUMPI PUSH2 0x19EF PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A84 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AA8 SWAP2 SWAP1 PUSH2 0x4909 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE POP POP JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1B89 JUMPI DUP4 PUSH1 0x60 ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1AD7 JUMPI PUSH2 0x1AD7 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x627DD56A DUP6 PUSH1 0x60 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1B14 JUMPI PUSH2 0x1B14 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3C SWAP2 SWAP1 PUSH2 0x4875 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B5B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B7F SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP3 POP PUSH1 0x1 ADD PUSH2 0x1AB9 JUMP JUMPDEST POP DUP3 PUSH1 0x40 ADD MLOAD DUP3 LT ISZERO PUSH2 0x1BC8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC9F52C7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DDE JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF18D03CC DUP5 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1C2E JUMPI PUSH2 0x1C2E PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD ADDRESS DUP7 PUSH1 0x0 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1C51 JUMPI PUSH2 0x1C51 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1C73 JUMPI PUSH2 0x1C73 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP8 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP5 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D13 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 PUSH1 0x0 ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1D2D JUMPI PUSH2 0x1D2D PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x627DD56A DUP5 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D6A JUMPI PUSH2 0x1D6A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D92 SWAP2 SWAP1 PUSH2 0x4875 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1DB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DD5 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1BD4 JUMP JUMPDEST POP POP PUSH1 0x20 DUP2 ADD MLOAD MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2122 JUMPI PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF7888AEC DUP6 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E45 JUMPI PUSH2 0x1E45 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1EE4 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EF4 PUSH1 0x8 PUSH1 0xA PUSH2 0x4C3F JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1F0A JUMPI PUSH2 0x1F0A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x1F2B SWAP2 SWAP1 PUSH2 0x4C4E JUMP JUMPDEST PUSH2 0x1F35 SWAP2 SWAP1 PUSH2 0x4C8B JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF18D03CC DUP7 PUSH1 0x20 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1F89 JUMPI PUSH2 0x1F89 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD ADDRESS DUP9 PUSH1 0x20 ADD MLOAD DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x1FAC JUMPI PUSH2 0x1FAC PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2038 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x204C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2066 JUMPI PUSH2 0x2066 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x627DD56A DUP7 PUSH1 0x20 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x20A3 JUMPI PUSH2 0x20A3 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20CB SWAP2 SWAP1 PUSH2 0x4875 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x210E SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST POP POP POP PUSH2 0x211B DUP2 PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1DE9 JUMP JUMPDEST POP POP PUSH1 0x40 DUP2 ADD MLOAD MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x144A JUMPI PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF7888AEC DUP6 PUSH1 0x40 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2189 JUMPI PUSH2 0x2189 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2204 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2228 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x40 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2240 JUMPI PUSH2 0x2240 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD DUP2 LT ISZERO PUSH2 0x2285 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC9F52C7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x229B JUMPI PUSH2 0x229B PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x23E3 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x97DA6D30 DUP6 PUSH1 0x40 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22FE JUMPI PUSH2 0x22FE PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD ADDRESS DUP8 PUSH1 0x40 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2321 JUMPI PUSH2 0x2321 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x23B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23DC SWAP2 SWAP1 PUSH2 0x4909 JUMP JUMPDEST POP POP PUSH2 0x24FD JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF18D03CC DUP6 PUSH1 0x40 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2435 JUMPI PUSH2 0x2435 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD ADDRESS DUP8 PUSH1 0x40 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2458 JUMPI PUSH2 0x2458 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x24F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x212D JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x100 ADD MLOAD DUP5 DUP5 DUP5 DUP9 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x252B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4CC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH3 0x186A0 DUP6 PUSH2 0x120 ADD MLOAD LT ISZERO PUSH2 0x257E JUMPI PUSH1 0x40 MLOAD PUSH32 0x1C26714C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9FBF10FC SELFBALANCE DUP8 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD CALLER DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2671 JUMPI PUSH1 0x20 DUP13 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2648 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x266C SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST PUSH2 0x2677 JUMP JUMPDEST DUP12 PUSH1 0x80 ADD MLOAD JUMPDEST DUP13 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP16 PUSH2 0x120 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x26DC SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE POP DUP15 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x272E SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP12 PUSH1 0x40 MLOAD DUP12 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2762 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4D2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x277B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x278F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xA87376E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH31 0x1000000000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP4 POP PUSH4 0xA87376E9 SWAP3 POP PUSH1 0x24 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x283B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x284F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x140 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xEF89F27CAD105CFE7C63F4A5C70E6B1392B571FF544A83DE4BF71CEB46BACFEE SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x144A SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x303B JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x29FD JUMPI POP PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x29FB SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0x2A89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20746F206E6F6E2D7A65726F20616C6C6F77616E636500000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x144A SWAP1 DUP5 SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD PUSH2 0x28DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x14CF SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD PUSH2 0x28DB JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO PUSH2 0x2BAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E56414C49445F504154480000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1710 JUMP JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BC5 JUMPI PUSH2 0x2BC5 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2BEE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2C05 JUMPI PUSH2 0x2C05 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 MLOAD PUSH2 0x2C22 SWAP2 SWAP1 PUSH2 0x4A02 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x2CDB JUMPI PUSH1 0x0 DUP1 PUSH2 0x2C76 DUP9 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2C42 JUMPI PUSH2 0x2C42 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 PUSH2 0x2C58 SWAP2 SWAP1 PUSH2 0x4DB9 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2C68 JUMPI PUSH2 0x2C68 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH2 0x314A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2C9E DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2C8F JUMPI PUSH2 0x2C8F PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 PUSH2 0x324B JUMP JUMPDEST DUP5 PUSH2 0x2CAA DUP6 PUSH1 0x1 PUSH2 0x4DB9 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2CBA JUMPI PUSH2 0x2CBA PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP DUP1 DUP1 PUSH2 0x2CD3 SWAP1 PUSH2 0x4DD1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2C14 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2CF3 DUP7 DUP7 PUSH2 0x33C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP5 DUP2 SHL DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP4 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE SWAP2 SWAP4 POP SWAP2 POP DUP8 SWAP1 PUSH1 0x48 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2DBD SWAP4 SWAP3 SWAP2 SWAP1 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 MLOAD PUSH2 0x2E0F SWAP2 SWAP1 PUSH2 0x4A02 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x14CF JUMPI PUSH1 0x0 DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2E2B JUMPI PUSH2 0x2E2B PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 PUSH1 0x1 PUSH2 0x2E41 SWAP2 SWAP1 PUSH2 0x4DB9 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2E51 JUMPI PUSH2 0x2E51 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2E69 DUP4 DUP4 PUSH2 0x33C5 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP8 PUSH2 0x2E7A DUP7 PUSH1 0x1 PUSH2 0x4DB9 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2E8A JUMPI PUSH2 0x2E8A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2ED2 JUMPI DUP3 PUSH1 0x0 PUSH2 0x2ED6 JUMP JUMPDEST PUSH1 0x0 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x2 DUP11 MLOAD PUSH2 0x2EEA SWAP2 SWAP1 PUSH2 0x4A02 JUMP JUMPDEST DUP9 LT PUSH2 0x2EF6 JUMPI DUP9 PUSH2 0x2F37 JUMP JUMPDEST PUSH2 0x2F37 PUSH32 0x0 DUP8 DUP13 PUSH2 0x2F27 DUP13 PUSH1 0x2 PUSH2 0x4DB9 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1774 JUMPI PUSH2 0x1774 PUSH2 0x3D8A JUMP JUMPDEST SWAP1 POP PUSH2 0x2F85 PUSH32 0x0 DUP9 DUP9 PUSH32 0x0 PUSH2 0x2CE4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x22C0D9F DUP5 DUP5 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2FCF JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2FEF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4E0A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x301D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP DUP1 DUP1 PUSH2 0x3033 SWAP1 PUSH2 0x4DD1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2E01 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x309D DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x354A SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x30BE JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x30BE SWAP2 SWAP1 PUSH2 0x4E45 JUMP JUMPDEST PUSH2 0x144A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3159 DUP7 DUP7 PUSH2 0x33C5 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x316B DUP10 DUP10 DUP10 DUP10 PUSH2 0x2CE4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31D9 SWAP2 SWAP1 PUSH2 0x4E7E JUMP JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3238 JUMPI DUP1 DUP3 PUSH2 0x323B JUMP JUMPDEST DUP2 DUP2 JUMPDEST SWAP1 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x32DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F49 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4E5055545F414D4F554E54000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x0 DUP4 GT DUP1 ISZERO PUSH2 0x32EC JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST PUSH2 0x3378 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F4C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4951554944495459000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3386 DUP6 PUSH2 0x3E5 PUSH2 0x3561 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3394 DUP3 DUP6 PUSH2 0x3561 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x33AE DUP4 PUSH2 0x33A8 DUP9 PUSH2 0x3E8 PUSH2 0x3561 JUMP JUMPDEST SWAP1 PUSH2 0x35F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x33BA DUP2 DUP4 PUSH2 0x4C8B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3484 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A204944454E544943414C5F41444452 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4553534553000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x34BE JUMPI DUP3 DUP5 PUSH2 0x34C1 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x3543 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A205A45524F5F414444524553530000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1710 JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3559 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x3669 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x3585 JUMPI POP DUP3 DUP3 PUSH2 0x3577 DUP2 DUP4 PUSH2 0x4C4E JUMP JUMPDEST SWAP3 POP PUSH2 0x3583 SWAP1 DUP4 PUSH2 0x4C8B JUMP JUMPDEST EQ JUMPDEST PUSH2 0x35EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x64732D6D6174682D6D756C2D6F766572666C6F77000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1710 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x35FE DUP4 DUP3 PUSH2 0x4DB9 JUMP JUMPDEST SWAP2 POP DUP2 LT ISZERO PUSH2 0x35EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x64732D6D6174682D6164642D6F766572666C6F77000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x36FB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3724 SWAP2 SWAP1 PUSH2 0x4ECE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3761 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3766 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x33BA DUP8 DUP4 DUP4 DUP8 PUSH1 0x60 DUP4 ISZERO PUSH2 0x3805 JUMPI DUP3 MLOAD PUSH2 0x37FE JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x37FE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1710 JUMP JUMPDEST POP DUP2 PUSH2 0x3559 JUMP JUMPDEST PUSH2 0x3559 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x381A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1710 SWAP2 SWAP1 PUSH2 0x4875 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x38A0 JUMPI PUSH2 0x38A0 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x38A0 JUMPI PUSH2 0x38A0 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x38A0 JUMPI PUSH2 0x38A0 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x38A0 JUMPI PUSH2 0x38A0 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x38A0 JUMPI PUSH2 0x38A0 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x397A JUMPI PUSH2 0x397A PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x399C JUMPI PUSH2 0x399C PUSH2 0x384E JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x10E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x39C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x39DB PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST PUSH2 0x3933 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x39FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x39FE JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3A3A JUMPI PUSH2 0x3A3A PUSH2 0x384E JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3A77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3A85 PUSH2 0x39D6 DUP3 PUSH2 0x3A20 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x3A9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3AC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x3AD8 PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x3AF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B1B JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3B29 DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x3A66 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3AFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3B4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3B64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3B78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x3B88 PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP11 DUP5 GT ISZERO PUSH2 0x3BA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x3BCE JUMPI DUP6 CALLDATALOAD PUSH2 0x3BBF DUP2 PUSH2 0x39A6 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x3BAC JUMP JUMPDEST SWAP8 POP POP DUP8 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x3BE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BF0 DUP8 DUP4 DUP9 ADD PUSH2 0x39B5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3C06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C13 DUP7 DUP3 DUP8 ADD PUSH2 0x3AB7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x10E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x10E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3C68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x3C73 DUP2 PUSH2 0x3C1D JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x3C83 DUP2 PUSH2 0x39A6 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x3C93 DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3CC9 DUP10 DUP3 DUP11 ADD PUSH2 0x3A66 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3CEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x3CFA DUP2 PUSH2 0x3C1D JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3D17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D23 DUP11 DUP4 DUP12 ADD PUSH2 0x3A66 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH2 0x3D3C DUP3 PUSH2 0x3C2D JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x3D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CC9 DUP10 DUP3 DUP11 ADD PUSH2 0x3A66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3D83 DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x3DC4 DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3DC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3DF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH2 0x3DFC DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP5 POP PUSH2 0x3E0A PUSH1 0x20 DUP8 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x3E1A DUP2 PUSH2 0x39A6 JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3E49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x3E54 DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x3E65 DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3E93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH2 0x3E9E DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH2 0x3EAF DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x60 DUP9 ADD MLOAD SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0x3ECC PUSH1 0x80 DUP8 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3EED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x3EF8 DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x3F09 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x3F52 DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x3F63 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x3F8C DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3FB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP1 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3FD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x3FE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x3FF7 PUSH2 0x39D6 DUP3 PUSH2 0x3982 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH2 0x4016 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x403D JUMPI DUP4 MLOAD PUSH2 0x402E DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x401B JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP PUSH2 0x4051 PUSH1 0x60 DUP7 ADD PUSH2 0x3DB9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4077 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x405F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x14CF JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4099 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x40A7 PUSH2 0x39D6 DUP3 PUSH2 0x3A20 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x40BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3559 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x405C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x40E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x40F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0x80 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x410C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4114 PUSH2 0x387D JUMP JUMPDEST DUP3 MLOAD PUSH2 0x411F DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 MSTORE DUP3 DUP5 ADD MLOAD DUP5 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x4145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP6 ADD SWAP5 POP POP DUP8 PUSH1 0x1F DUP6 ADD SLT PUSH2 0x415A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x4168 PUSH2 0x39D6 DUP3 PUSH2 0x3982 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP6 ADD DUP7 ADD SWAP1 DUP7 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH2 0x4187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 DUP8 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4221 JUMPI DUP1 MLOAD DUP8 DUP2 GT ISZERO PUSH2 0x41A3 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP9 ADD DUP1 DUP14 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP7 SGT ISZERO PUSH2 0x41D7 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x41DF PUSH2 0x38A6 JUMP JUMPDEST DUP11 DUP3 ADD MLOAD PUSH2 0x41EC DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 MSTORE DUP2 DUP8 ADD MLOAD DUP10 DUP2 GT ISZERO PUSH2 0x4200 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x420E DUP16 DUP14 DUP4 DUP7 ADD ADD PUSH2 0x4088 JUMP JUMPDEST DUP3 DUP14 ADD MSTORE POP DUP5 MSTORE POP SWAP2 DUP9 ADD SWAP2 DUP9 ADD PUSH2 0x418B JUMP JUMPDEST POP PUSH1 0x60 DUP6 ADD MSTORE POP SWAP2 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x4256 PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x4275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x429A JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP PUSH1 0x80 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP5 DUP14 SUB ADD SLT ISZERO PUSH2 0x42D3 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x42DB PUSH2 0x387D JUMP JUMPDEST DUP8 DUP5 ADD MLOAD PUSH2 0x42E8 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP5 DUP2 ADD MLOAD PUSH2 0x42F9 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP3 DUP11 ADD MSTORE PUSH1 0x60 DUP6 DUP2 ADD MLOAD DUP6 DUP2 AND DUP2 EQ PUSH2 0x4312 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP4 DUP4 ADD MSTORE SWAP3 DUP6 ADD MLOAD SWAP3 DUP5 DUP5 GT ISZERO PUSH2 0x432B JUMPI PUSH1 0x0 SWAP2 POP DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4339 DUP15 DUP12 DUP7 DUP10 ADD ADD PUSH2 0x4088 JUMP JUMPDEST SWAP1 DUP4 ADD MSTORE POP DUP7 MSTORE POP POP POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x4279 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x435F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x436F PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x7 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x438E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI PUSH1 0x80 DUP2 DUP10 SUB SLT ISZERO PUSH2 0x43AB JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x43B3 PUSH2 0x387D JUMP JUMPDEST DUP2 MLOAD PUSH2 0x43BE DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 MSTORE DUP2 DUP6 ADD MLOAD PUSH2 0x43CD DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 DUP7 ADD MSTORE PUSH1 0x40 PUSH2 0x43DE DUP4 DUP3 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP3 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 PUSH1 0x80 ADD PUSH2 0x4392 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x440D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0x60 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x4439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4441 PUSH2 0x38C9 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x4461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x446F PUSH2 0x39D6 DUP3 PUSH2 0x3982 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP7 ADD SWAP1 DUP7 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH2 0x448E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 DUP5 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4556 JUMPI DUP1 MLOAD DUP8 DUP2 GT ISZERO PUSH2 0x44A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0xA0 DUP2 DUP15 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD SLT ISZERO PUSH2 0x44DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x44E5 PUSH2 0x38EC JUMP JUMPDEST DUP11 DUP3 ADD MLOAD PUSH2 0x44F2 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x4502 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 DUP13 ADD MSTORE PUSH2 0x4512 PUSH1 0x60 DUP4 ADD PUSH2 0x3DC9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP10 DUP2 GT ISZERO PUSH2 0x4534 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4542 DUP16 DUP14 DUP4 DUP7 ADD ADD PUSH2 0x4088 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP5 MSTORE POP SWAP2 DUP9 ADD SWAP2 DUP9 ADD PUSH2 0x4492 JUMP JUMPDEST POP DUP5 MSTORE POP POP POP DUP3 DUP5 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x456D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4579 DUP9 DUP3 DUP7 ADD PUSH2 0x4235 JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD SWAP4 POP DUP2 DUP5 GT ISZERO PUSH2 0x4592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x459E DUP8 DUP6 DUP6 ADD PUSH2 0x434E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x3DC4 DUP2 PUSH2 0x3C1D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x45C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x45D9 PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x45F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 MLOAD PUSH2 0x460F DUP2 PUSH2 0x39A6 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x45FC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x462D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x463D PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x465C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x4660 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4688 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x4698 PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x46B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x46DB JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x46E9 DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x4088 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x46BB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH2 0x1C0 DUP2 SLT ISZERO PUSH2 0x470F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x160 DUP1 DUP3 SLT ISZERO PUSH2 0x471F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4727 PUSH2 0x390F JUMP JUMPDEST SWAP2 POP PUSH2 0x4732 DUP8 PUSH2 0x45AD JUMP JUMPDEST DUP3 MSTORE PUSH2 0x4740 PUSH1 0x20 DUP9 ADD PUSH2 0x3DB9 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x4783 PUSH1 0xE0 DUP9 ADD PUSH2 0x3DB9 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 PUSH2 0x4796 DUP2 DUP10 ADD PUSH2 0x3DB9 JUMP JUMPDEST SWAP1 DUP4 ADD MSTORE PUSH2 0x120 DUP8 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP9 ADD MLOAD SWAP1 DUP4 ADD MSTORE DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x47CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x47D8 DUP9 DUP4 DUP10 ADD PUSH2 0x45B8 JUMP JUMPDEST SWAP5 POP PUSH2 0x180 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x47EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x47FB DUP9 DUP4 DUP10 ADD PUSH2 0x461C JUMP JUMPDEST SWAP4 POP PUSH2 0x1A0 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4812 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x481F DUP8 DUP3 DUP9 ADD PUSH2 0x4677 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4843 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x405C JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3D83 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x482B JUMP JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x3559 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x482B JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND DUP2 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x48D7 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x482B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x48E9 DUP2 DUP7 PUSH2 0x482B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x48FD DUP2 DUP6 PUSH2 0x4888 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x491C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH2 0x4950 DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x496E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x497A DUP10 DUP4 DUP11 ADD PUSH2 0x45B8 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4990 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x499C DUP10 DUP4 DUP11 ADD PUSH2 0x461C JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x49B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49BF DUP9 DUP3 DUP10 ADD PUSH2 0x4677 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD MLOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x4A14 JUMPI PUSH2 0x4A14 PUSH2 0x49D3 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A4C JUMPI DUP2 MLOAD PUSH1 0xFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4A2D JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A4C JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4A6B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP4 PUSH1 0x5 SHL DUP2 ADD SWAP2 POP DUP3 DUP7 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x4ACF JUMPI DUP3 DUP5 SUB DUP10 MSTORE PUSH2 0x4ABD DUP5 DUP4 MLOAD PUSH2 0x482B JUMP JUMPDEST SWAP9 DUP6 ADD SWAP9 SWAP4 POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4AA5 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4AEF PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x4A19 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4B01 DUP2 DUP7 PUSH2 0x4A57 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x4B15 DUP2 DUP6 PUSH2 0x4A87 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x4B78 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP3 GT ISZERO PUSH2 0x4B5E JUMPI PUSH2 0x4B5E PUSH2 0x49D3 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x4B6B JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x4B24 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4B8F JUMPI POP PUSH1 0x1 PUSH2 0x35EB JUMP JUMPDEST DUP2 PUSH2 0x4B9C JUMPI POP PUSH1 0x0 PUSH2 0x35EB JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x4BB2 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x4BBC JUMPI PUSH2 0x4BD8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x35EB JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x4BCD JUMPI PUSH2 0x4BCD PUSH2 0x49D3 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x35EB JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x4BFB JUMPI POP DUP2 DUP2 EXP PUSH2 0x35EB JUMP JUMPDEST PUSH2 0x4C05 DUP4 DUP4 PUSH2 0x4B1F JUMP JUMPDEST DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP3 GT ISZERO PUSH2 0x4C37 JUMPI PUSH2 0x4C37 PUSH2 0x49D3 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D83 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x4B80 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x4C86 JUMPI PUSH2 0x4C86 PUSH2 0x49D3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4CC1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x4CF5 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x4A19 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x4D07 DUP2 DUP8 PUSH2 0x4A57 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x4D1B DUP2 DUP7 PUSH2 0x4A87 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 PUSH2 0xFFFF DUP13 AND DUP4 MSTORE DUP11 PUSH1 0x20 DUP5 ADD MSTORE DUP10 PUSH1 0x40 DUP5 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x60 DUP5 ADD MSTORE DUP8 PUSH1 0x80 DUP5 ADD MSTORE DUP7 PUSH1 0xA0 DUP5 ADD MSTORE DUP1 PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x4D80 DUP2 DUP5 ADD DUP8 PUSH2 0x4888 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x4D94 DUP2 DUP7 PUSH2 0x482B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x4DA9 DUP2 DUP6 PUSH2 0x482B JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x4DCC JUMPI PUSH2 0x4DCC PUSH2 0x49D3 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x4E03 JUMPI PUSH2 0x4E03 PUSH2 0x49D3 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP5 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x4B15 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x482B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D83 DUP3 PUSH2 0x3DC9 JUMP JUMPDEST DUP1 MLOAD PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3DC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4E93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E9C DUP5 PUSH2 0x4E60 JUMP JUMPDEST SWAP3 POP PUSH2 0x4EAA PUSH1 0x20 DUP6 ADD PUSH2 0x4E60 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4EC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x4EE0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x405C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL PUSH32 0xDCC95E227B45D7C24EC942B5BE111B48C74B23F3DFECA040F109ED95ABC56473 PUSH16 0x6C634300080B00330000000000000000 ","sourceMap":"292:8976:10:-:0;;;442:387;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1096:20:16;;;;;;;1126:32;;;;;1168;;;;;1210:18;;;;;1238:28;;;;1276:14;;;;;794:28:10::1;::::0;;-1:-1:-1;;;794:28:10;;;;:26:::1;::::0;:28:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;;1096:20:16;794:28:10;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;442:387:::0;;;;;;292:8976;;14:149:33;-1:-1:-1;;;;;107:31:33;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:1014::-;356:6;364;372;380;388;396;449:3;437:9;428:7;424:23;420:33;417:53;;;466:1;463;456:12;417:53;498:9;492:16;517:49;560:5;517:49;:::i;:::-;635:2;620:18;;614:25;585:5;;-1:-1:-1;648:51:33;614:25;648:51;:::i;:::-;770:2;755:18;;749:25;718:7;;-1:-1:-1;783:51:33;749:25;783:51;:::i;:::-;900:2;885:18;;879:25;949:3;934:19;;928:26;853:7;;-1:-1:-1;879:25:33;-1:-1:-1;963:51:33;928:26;963:51;:::i;:::-;1085:3;1070:19;;1064:26;1033:7;;-1:-1:-1;1099:51:33;1064:26;1099:51;:::i;:::-;1169:7;1159:17;;;168:1014;;;;;;;;:::o;:::-;292:8976:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@SGETH_3989":{"entryPoint":null,"id":3989,"parameterSlots":0,"returnSlots":0},"@_2711":{"entryPoint":null,"id":2711,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_1055":{"entryPoint":12347,"id":1055,"parameterSlots":2,"returnSlots":0},"@_complexPath_3942":{"entryPoint":7118,"id":3942,"parameterSlots":1,"returnSlots":0},"@_depositToBentoBox_2748":{"entryPoint":4330,"id":2748,"parameterSlots":6,"returnSlots":0},"@_exactInput_3689":{"entryPoint":6308,"id":3689,"parameterSlots":1,"returnSlots":1},"@_increment_3955":{"entryPoint":null,"id":3955,"parameterSlots":1,"returnSlots":1},"@_revert_1433":{"entryPoint":null,"id":1433,"parameterSlots":2,"returnSlots":0},"@_stargateTeleport_2982":{"entryPoint":9478,"id":2982,"parameterSlots":4,"returnSlots":0},"@_swapExactTokensForTokens_3320":{"entryPoint":5680,"id":3320,"parameterSlots":5,"returnSlots":1},"@_swap_3439":{"entryPoint":11774,"id":3439,"parameterSlots":3,"returnSlots":0},"@_transferFromBentoBox_2802":{"entryPoint":4549,"id":2802,"parameterSlots":6,"returnSlots":0},"@_transferFromToken_3509":{"entryPoint":5160,"id":3509,"parameterSlots":3,"returnSlots":0},"@_transferTokens_3488":{"entryPoint":5199,"id":3488,"parameterSlots":3,"returnSlots":0},"@_unwrapTransfer_3548":{"entryPoint":5333,"id":3548,"parameterSlots":2,"returnSlots":0},"@_wrapToken_3565":{"entryPoint":5579,"id":3565,"parameterSlots":2,"returnSlots":0},"@add_4575":{"entryPoint":13809,"id":4575,"parameterSlots":2,"returnSlots":1},"@approveToStargateRouter_2874":{"entryPoint":4230,"id":2874,"parameterSlots":1,"returnSlots":0},"@bentoBox_3967":{"entryPoint":null,"id":3967,"parameterSlots":0,"returnSlots":0},"@cook_2706":{"entryPoint":699,"id":2706,"parameterSlots":3,"returnSlots":0},"@factory_3981":{"entryPoint":null,"id":3981,"parameterSlots":0,"returnSlots":0},"@functionCallWithValue_1258":{"entryPoint":13929,"id":1258,"parameterSlots":4,"returnSlots":1},"@functionCall_1194":{"entryPoint":13642,"id":1194,"parameterSlots":3,"returnSlots":1},"@getAmountOut_4879":{"entryPoint":12875,"id":4879,"parameterSlots":3,"returnSlots":1},"@getAmountsOut_5023":{"entryPoint":11069,"id":5023,"parameterSlots":4,"returnSlots":1},"@getFee_3030":{"entryPoint":2916,"id":3030,"parameterSlots":6,"returnSlots":2},"@getReserves_4780":{"entryPoint":12618,"id":4780,"parameterSlots":4,"returnSlots":2},"@isContract_1122":{"entryPoint":null,"id":1122,"parameterSlots":1,"returnSlots":1},"@mul_4625":{"entryPoint":13665,"id":4625,"parameterSlots":2,"returnSlots":1},"@pairCodeHash_3985":{"entryPoint":null,"id":3985,"parameterSlots":0,"returnSlots":0},"@pairFor_4727":{"entryPoint":11492,"id":4727,"parameterSlots":4,"returnSlots":1},"@safeApprove_832":{"entryPoint":10589,"id":832,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_788":{"entryPoint":10975,"id":788,"parameterSlots":4,"returnSlots":0},"@safeTransfer_761":{"entryPoint":10377,"id":761,"parameterSlots":3,"returnSlots":0},"@sgReceive_3222":{"entryPoint":3300,"id":3222,"parameterSlots":6,"returnSlots":0},"@sortTokens_4677":{"entryPoint":13253,"id":4677,"parameterSlots":2,"returnSlots":2},"@stargateRouter_3972":{"entryPoint":null,"id":3972,"parameterSlots":0,"returnSlots":0},"@stargateWidget_3977":{"entryPoint":null,"id":3977,"parameterSlots":0,"returnSlots":0},"@verifyCallResultFromTarget_1389":{"entryPoint":null,"id":1389,"parameterSlots":4,"returnSlots":1},"abi_decode_address_payable_fromMemory":{"entryPoint":15801,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_bytes_dyn":{"entryPoint":15031,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_bytes_dyn_fromMemory":{"entryPoint":18039,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_struct_Output_dyn_fromMemory":{"entryPoint":17230,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_struct_PercentagePath_dyn_fromMemory":{"entryPoint":16949,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":14773,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn_fromMemory":{"entryPoint":17948,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint8_dyn_fromMemory":{"entryPoint":17848,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":15817,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":14950,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_fromMemory":{"entryPoint":16520,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payablet_address_payable_fromMemory":{"entryPoint":16180,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address_payablet_address_payablet_uint256_fromMemory":{"entryPoint":16088,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256_fromMemory":{"entryPoint":15923,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256t_bool_fromMemory":{"entryPoint":15995,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_address_payablet_array$_t_uint8_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32_fromMemory":{"entryPoint":18733,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_address_payablet_boolt_uint8t_bytes32t_bytes32_fromMemory":{"entryPoint":15833,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_address_payablet_uint256_fromMemory":{"entryPoint":16238,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_uint8_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":15159,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":20037,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$667":{"entryPoint":15718,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_ComplexPathParams_$4543_memory_ptr_fromMemory":{"entryPoint":17402,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_ExactInputParams_$4494_memory_ptr_fromMemory":{"entryPoint":16589,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_StargateTeleportParams_$2852_memory_ptrt_array$_t_uint8_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromMemory":{"entryPoint":18167,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory":{"entryPoint":20094,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint256t_addresst_uint256t_bytes_memory_ptr":{"entryPoint":15574,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_uint16t_uint8t_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":15439,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":16155,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256_fromMemory":{"entryPoint":18697,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_array$_t_address_$dyn_memory_ptrt_address_payable_fromMemory":{"entryPoint":16284,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_uint112_fromMemory":{"entryPoint":20064,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint16_fromMemory":{"entryPoint":17837,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_array_bytes_dyn":{"entryPoint":19079,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":19031,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint8_dyn":{"entryPoint":18969,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":18475,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_lzTxObj":{"entryPoint":18568,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_address__to_t_address_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":20174,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9_t_address_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address_t_rational_0_by_1_t_uint256__to_t_address_t_address_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address_t_uint256__to_t_address_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address_t_uint256_t_rational_0_by_1__to_t_address_t_address_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_bool_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_bool_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__fromStack_reversed":{"entryPoint":19654,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bool__to_t_address_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":19164,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":18549,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IBentoBoxMinimal_$4138__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IStargateRouter_$4360__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IStargateWidget_$4368__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_bytes2__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4ddc3ca35a8b7ccaa016ab70252fdf3396ded4f4fd8375f95b1e9d99790fcdca__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_db0dda5a73ac3122e17df097fa2cbce2c5161b45d20c7d6cf363d3b147392c83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ec21b006eb37ef20d0f4abcabd34de6854fa68af48294244e0263dc05c1dbbae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f9bba043a83225eb6b59e03a620d9be35c0c01b2645fd69986af78bab24b3d55__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4319_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4319_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":19758,"id":null,"parameterSlots":10,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint8_t_bytes_memory_ptr_t_bytes_memory_ptr_t_struct$_lzTxObj_$4319_memory_ptr__to_t_uint16_t_uint8_t_bytes_memory_ptr_t_bytes_memory_ptr_t_struct$_lzTxObj_$4319_memory_ptr__fromStack_reversed":{"entryPoint":18609,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_address_t_bytes_memory_ptr__to_t_uint256_t_uint256_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":19978,"id":null,"parameterSlots":5,"returnSlots":1},"allocate_memory":{"entryPoint":14643,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_6844":{"entryPoint":14461,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_6845":{"entryPoint":14502,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_6857":{"entryPoint":14537,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_6858":{"entryPoint":14572,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_6860":{"entryPoint":14607,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_uint8_dyn":{"entryPoint":14722,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":14880,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":19897,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":19595,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":19231,"id":null,"parameterSlots":2,"returnSlots":2},"checked_exp_t_uint256_t_uint8":{"entryPoint":19519,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":19328,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":19534,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":18946,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":16476,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":19921,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":18899,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":15754,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":14414,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":15405,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint16":{"entryPoint":15389,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint8":{"entryPoint":14758,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:50098:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"66:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:33"},"nodeType":"YulFunctionCall","src":"56:88:33"},"nodeType":"YulExpressionStatement","src":"56:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"160:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"163:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"153:6:33"},"nodeType":"YulFunctionCall","src":"153:15:33"},"nodeType":"YulExpressionStatement","src":"153:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"184:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"187:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"177:6:33"},"nodeType":"YulFunctionCall","src":"177:15:33"},"nodeType":"YulExpressionStatement","src":"177:15:33"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:184:33"},{"body":{"nodeType":"YulBlock","src":"249:207:33","statements":[{"nodeType":"YulAssignment","src":"259:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"275:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"269:5:33"},"nodeType":"YulFunctionCall","src":"269:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"259:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"287:35:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"309:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"317:4:33","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"305:3:33"},"nodeType":"YulFunctionCall","src":"305:17:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"291:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"397:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"399:16:33"},"nodeType":"YulFunctionCall","src":"399:18:33"},"nodeType":"YulExpressionStatement","src":"399:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"340:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"352:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"337:2:33"},"nodeType":"YulFunctionCall","src":"337:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"376:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"388:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"373:2:33"},"nodeType":"YulFunctionCall","src":"373:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"334:2:33"},"nodeType":"YulFunctionCall","src":"334:62:33"},"nodeType":"YulIf","src":"331:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"435:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"439:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"428:6:33"},"nodeType":"YulFunctionCall","src":"428:22:33"},"nodeType":"YulExpressionStatement","src":"428:22:33"}]},"name":"allocate_memory_6844","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"238:6:33","type":""}],"src":"203:253:33"},{"body":{"nodeType":"YulBlock","src":"507:205:33","statements":[{"nodeType":"YulAssignment","src":"517:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"533:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"527:5:33"},"nodeType":"YulFunctionCall","src":"527:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"517:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"545:33:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"567:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"575:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"563:3:33"},"nodeType":"YulFunctionCall","src":"563:15:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"549:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"653:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"655:16:33"},"nodeType":"YulFunctionCall","src":"655:18:33"},"nodeType":"YulExpressionStatement","src":"655:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"596:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"608:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"593:2:33"},"nodeType":"YulFunctionCall","src":"593:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"632:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"644:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"629:2:33"},"nodeType":"YulFunctionCall","src":"629:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"590:2:33"},"nodeType":"YulFunctionCall","src":"590:62:33"},"nodeType":"YulIf","src":"587:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"691:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"695:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"684:6:33"},"nodeType":"YulFunctionCall","src":"684:22:33"},"nodeType":"YulExpressionStatement","src":"684:22:33"}]},"name":"allocate_memory_6845","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"496:6:33","type":""}],"src":"461:251:33"},{"body":{"nodeType":"YulBlock","src":"763:207:33","statements":[{"nodeType":"YulAssignment","src":"773:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"789:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"783:5:33"},"nodeType":"YulFunctionCall","src":"783:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"773:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"801:35:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"823:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"831:4:33","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"819:3:33"},"nodeType":"YulFunctionCall","src":"819:17:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"805:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"911:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"913:16:33"},"nodeType":"YulFunctionCall","src":"913:18:33"},"nodeType":"YulExpressionStatement","src":"913:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"854:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"866:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"851:2:33"},"nodeType":"YulFunctionCall","src":"851:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"890:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"902:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"887:2:33"},"nodeType":"YulFunctionCall","src":"887:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"848:2:33"},"nodeType":"YulFunctionCall","src":"848:62:33"},"nodeType":"YulIf","src":"845:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"949:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"953:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:33"},"nodeType":"YulFunctionCall","src":"942:22:33"},"nodeType":"YulExpressionStatement","src":"942:22:33"}]},"name":"allocate_memory_6857","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"752:6:33","type":""}],"src":"717:253:33"},{"body":{"nodeType":"YulBlock","src":"1021:207:33","statements":[{"nodeType":"YulAssignment","src":"1031:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1047:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1041:5:33"},"nodeType":"YulFunctionCall","src":"1041:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1031:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1059:35:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1081:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1089:4:33","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1077:3:33"},"nodeType":"YulFunctionCall","src":"1077:17:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1063:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1169:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1171:16:33"},"nodeType":"YulFunctionCall","src":"1171:18:33"},"nodeType":"YulExpressionStatement","src":"1171:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1112:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1124:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1109:2:33"},"nodeType":"YulFunctionCall","src":"1109:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1148:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1160:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1145:2:33"},"nodeType":"YulFunctionCall","src":"1145:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1106:2:33"},"nodeType":"YulFunctionCall","src":"1106:62:33"},"nodeType":"YulIf","src":"1103:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1207:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1211:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1200:6:33"},"nodeType":"YulFunctionCall","src":"1200:22:33"},"nodeType":"YulExpressionStatement","src":"1200:22:33"}]},"name":"allocate_memory_6858","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1010:6:33","type":""}],"src":"975:253:33"},{"body":{"nodeType":"YulBlock","src":"1279:209:33","statements":[{"nodeType":"YulAssignment","src":"1289:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1305:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1299:5:33"},"nodeType":"YulFunctionCall","src":"1299:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1289:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1317:37:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1339:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1347:6:33","type":"","value":"0x0160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1335:3:33"},"nodeType":"YulFunctionCall","src":"1335:19:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1321:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1429:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1431:16:33"},"nodeType":"YulFunctionCall","src":"1431:18:33"},"nodeType":"YulExpressionStatement","src":"1431:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1372:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1384:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1369:2:33"},"nodeType":"YulFunctionCall","src":"1369:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1408:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1420:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1405:2:33"},"nodeType":"YulFunctionCall","src":"1405:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1366:2:33"},"nodeType":"YulFunctionCall","src":"1366:62:33"},"nodeType":"YulIf","src":"1363:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1467:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1471:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1460:6:33"},"nodeType":"YulFunctionCall","src":"1460:22:33"},"nodeType":"YulExpressionStatement","src":"1460:22:33"}]},"name":"allocate_memory_6860","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1268:6:33","type":""}],"src":"1233:255:33"},{"body":{"nodeType":"YulBlock","src":"1538:289:33","statements":[{"nodeType":"YulAssignment","src":"1548:19:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1564:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1558:5:33"},"nodeType":"YulFunctionCall","src":"1558:9:33"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1548:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"1576:117:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1598:6:33"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1614:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"1620:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:33"},"nodeType":"YulFunctionCall","src":"1610:13:33"},{"kind":"number","nodeType":"YulLiteral","src":"1625:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1606:3:33"},"nodeType":"YulFunctionCall","src":"1606:86:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1594:3:33"},"nodeType":"YulFunctionCall","src":"1594:99:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1580:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"1768:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1770:16:33"},"nodeType":"YulFunctionCall","src":"1770:18:33"},"nodeType":"YulExpressionStatement","src":"1770:18:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1711:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"1723:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1708:2:33"},"nodeType":"YulFunctionCall","src":"1708:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1747:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1759:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1744:2:33"},"nodeType":"YulFunctionCall","src":"1744:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1705:2:33"},"nodeType":"YulFunctionCall","src":"1705:62:33"},"nodeType":"YulIf","src":"1702:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1806:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1810:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1799:6:33"},"nodeType":"YulFunctionCall","src":"1799:22:33"},"nodeType":"YulExpressionStatement","src":"1799:22:33"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1518:4:33","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1527:6:33","type":""}],"src":"1493:334:33"},{"body":{"nodeType":"YulBlock","src":"1899:114:33","statements":[{"body":{"nodeType":"YulBlock","src":"1943:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1945:16:33"},"nodeType":"YulFunctionCall","src":"1945:18:33"},"nodeType":"YulExpressionStatement","src":"1945:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1915:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1923:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1912:2:33"},"nodeType":"YulFunctionCall","src":"1912:30:33"},"nodeType":"YulIf","src":"1909:56:33"},{"nodeType":"YulAssignment","src":"1974:33:33","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1990:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1993:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1986:3:33"},"nodeType":"YulFunctionCall","src":"1986:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"2002:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1982:3:33"},"nodeType":"YulFunctionCall","src":"1982:25:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1974:4:33"}]}]},"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1879:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1890:4:33","type":""}],"src":"1832:181:33"},{"body":{"nodeType":"YulBlock","src":"2061:71:33","statements":[{"body":{"nodeType":"YulBlock","src":"2110:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2119:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2122:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2112:6:33"},"nodeType":"YulFunctionCall","src":"2112:12:33"},"nodeType":"YulExpressionStatement","src":"2112:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2084:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2095:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"2102:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2091:3:33"},"nodeType":"YulFunctionCall","src":"2091:16:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2081:2:33"},"nodeType":"YulFunctionCall","src":"2081:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2074:6:33"},"nodeType":"YulFunctionCall","src":"2074:35:33"},"nodeType":"YulIf","src":"2071:55:33"}]},"name":"validator_revert_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2050:5:33","type":""}],"src":"2018:114:33"},{"body":{"nodeType":"YulBlock","src":"2201:596:33","statements":[{"body":{"nodeType":"YulBlock","src":"2250:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2259:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2262:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2252:6:33"},"nodeType":"YulFunctionCall","src":"2252:12:33"},"nodeType":"YulExpressionStatement","src":"2252:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2229:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2237:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2225:3:33"},"nodeType":"YulFunctionCall","src":"2225:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"2244:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2221:3:33"},"nodeType":"YulFunctionCall","src":"2221:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2214:6:33"},"nodeType":"YulFunctionCall","src":"2214:35:33"},"nodeType":"YulIf","src":"2211:55:33"},{"nodeType":"YulVariableDeclaration","src":"2275:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2298:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2285:12:33"},"nodeType":"YulFunctionCall","src":"2285:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2279:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2314:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"2324:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2318:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2337:69:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2402:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"2364:37:33"},"nodeType":"YulFunctionCall","src":"2364:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2348:15:33"},"nodeType":"YulFunctionCall","src":"2348:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2341:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2415:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"2428:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"2419:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2447:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"2452:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2440:6:33"},"nodeType":"YulFunctionCall","src":"2440:15:33"},"nodeType":"YulExpressionStatement","src":"2440:15:33"},{"nodeType":"YulAssignment","src":"2464:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2475:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"2480:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2471:3:33"},"nodeType":"YulFunctionCall","src":"2471:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2464:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"2492:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2514:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2526:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"2529:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2522:3:33"},"nodeType":"YulFunctionCall","src":"2522:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2510:3:33"},"nodeType":"YulFunctionCall","src":"2510:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"2535:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2506:3:33"},"nodeType":"YulFunctionCall","src":"2506:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2496:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2566:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2575:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2578:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2568:6:33"},"nodeType":"YulFunctionCall","src":"2568:12:33"},"nodeType":"YulExpressionStatement","src":"2568:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2553:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"2561:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2550:2:33"},"nodeType":"YulFunctionCall","src":"2550:15:33"},"nodeType":"YulIf","src":"2547:35:33"},{"nodeType":"YulVariableDeclaration","src":"2591:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2606:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"2614:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2602:3:33"},"nodeType":"YulFunctionCall","src":"2602:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2595:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2682:86:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2703:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2721:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2708:12:33"},"nodeType":"YulFunctionCall","src":"2708:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2696:6:33"},"nodeType":"YulFunctionCall","src":"2696:30:33"},"nodeType":"YulExpressionStatement","src":"2696:30:33"},{"nodeType":"YulAssignment","src":"2739:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2750:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"2755:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2746:3:33"},"nodeType":"YulFunctionCall","src":"2746:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2739:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2637:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2642:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2634:2:33"},"nodeType":"YulFunctionCall","src":"2634:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2650:23:33","statements":[{"nodeType":"YulAssignment","src":"2652:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2663:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"2668:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2659:3:33"},"nodeType":"YulFunctionCall","src":"2659:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2652:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"2630:3:33","statements":[]},"src":"2626:142:33"},{"nodeType":"YulAssignment","src":"2777:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2786:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2777:5:33"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2175:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"2183:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2191:5:33","type":""}],"src":"2137:660:33"},{"body":{"nodeType":"YulBlock","src":"2859:188:33","statements":[{"body":{"nodeType":"YulBlock","src":"2903:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2905:16:33"},"nodeType":"YulFunctionCall","src":"2905:18:33"},"nodeType":"YulExpressionStatement","src":"2905:18:33"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2875:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2883:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2872:2:33"},"nodeType":"YulFunctionCall","src":"2872:30:33"},"nodeType":"YulIf","src":"2869:56:33"},{"nodeType":"YulAssignment","src":"2934:107:33","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2954:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2962:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2950:3:33"},"nodeType":"YulFunctionCall","src":"2950:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"2967:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2946:3:33"},"nodeType":"YulFunctionCall","src":"2946:88:33"},{"kind":"number","nodeType":"YulLiteral","src":"3036:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2942:3:33"},"nodeType":"YulFunctionCall","src":"2942:99:33"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2934:4:33"}]}]},"name":"array_allocation_size_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2839:6:33","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2850:4:33","type":""}],"src":"2802:245:33"},{"body":{"nodeType":"YulBlock","src":"3104:410:33","statements":[{"body":{"nodeType":"YulBlock","src":"3153:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3162:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3165:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3155:6:33"},"nodeType":"YulFunctionCall","src":"3155:12:33"},"nodeType":"YulExpressionStatement","src":"3155:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3132:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3140:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3128:3:33"},"nodeType":"YulFunctionCall","src":"3128:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"3147:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3124:3:33"},"nodeType":"YulFunctionCall","src":"3124:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3117:6:33"},"nodeType":"YulFunctionCall","src":"3117:35:33"},"nodeType":"YulIf","src":"3114:55:33"},{"nodeType":"YulVariableDeclaration","src":"3178:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3201:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3188:12:33"},"nodeType":"YulFunctionCall","src":"3188:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3182:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3217:63:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3276:2:33"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"3248:27:33"},"nodeType":"YulFunctionCall","src":"3248:31:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3232:15:33"},"nodeType":"YulFunctionCall","src":"3232:48:33"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"3221:7:33","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"3296:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3305:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3289:6:33"},"nodeType":"YulFunctionCall","src":"3289:19:33"},"nodeType":"YulExpressionStatement","src":"3289:19:33"},{"body":{"nodeType":"YulBlock","src":"3356:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3365:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3368:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3358:6:33"},"nodeType":"YulFunctionCall","src":"3358:12:33"},"nodeType":"YulExpressionStatement","src":"3358:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3331:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3339:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3327:3:33"},"nodeType":"YulFunctionCall","src":"3327:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"3344:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3323:3:33"},"nodeType":"YulFunctionCall","src":"3323:26:33"},{"name":"end","nodeType":"YulIdentifier","src":"3351:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3320:2:33"},"nodeType":"YulFunctionCall","src":"3320:35:33"},"nodeType":"YulIf","src":"3317:55:33"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"3398:7:33"},{"kind":"number","nodeType":"YulLiteral","src":"3407:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3394:3:33"},"nodeType":"YulFunctionCall","src":"3394:18:33"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3418:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3426:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3414:3:33"},"nodeType":"YulFunctionCall","src":"3414:17:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3433:2:33"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3381:12:33"},"nodeType":"YulFunctionCall","src":"3381:55:33"},"nodeType":"YulExpressionStatement","src":"3381:55:33"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"3460:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3469:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3456:3:33"},"nodeType":"YulFunctionCall","src":"3456:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"3474:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3452:3:33"},"nodeType":"YulFunctionCall","src":"3452:27:33"},{"kind":"number","nodeType":"YulLiteral","src":"3481:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3445:6:33"},"nodeType":"YulFunctionCall","src":"3445:38:33"},"nodeType":"YulExpressionStatement","src":"3445:38:33"},{"nodeType":"YulAssignment","src":"3492:16:33","value":{"name":"array_1","nodeType":"YulIdentifier","src":"3501:7:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3492:5:33"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3078:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"3086:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3094:5:33","type":""}],"src":"3052:462:33"},{"body":{"nodeType":"YulBlock","src":"3581:822:33","statements":[{"body":{"nodeType":"YulBlock","src":"3630:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3639:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3642:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3632:6:33"},"nodeType":"YulFunctionCall","src":"3632:12:33"},"nodeType":"YulExpressionStatement","src":"3632:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3609:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"3617:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3605:3:33"},"nodeType":"YulFunctionCall","src":"3605:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"3624:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3601:3:33"},"nodeType":"YulFunctionCall","src":"3601:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3594:6:33"},"nodeType":"YulFunctionCall","src":"3594:35:33"},"nodeType":"YulIf","src":"3591:55:33"},{"nodeType":"YulVariableDeclaration","src":"3655:30:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3678:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3665:12:33"},"nodeType":"YulFunctionCall","src":"3665:20:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3659:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3694:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"3704:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3698:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3717:69:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3782:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"3744:37:33"},"nodeType":"YulFunctionCall","src":"3744:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3728:15:33"},"nodeType":"YulFunctionCall","src":"3728:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3721:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3795:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"3808:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"3799:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3827:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"3832:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3820:6:33"},"nodeType":"YulFunctionCall","src":"3820:15:33"},"nodeType":"YulExpressionStatement","src":"3820:15:33"},{"nodeType":"YulAssignment","src":"3844:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3855:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3860:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3851:3:33"},"nodeType":"YulFunctionCall","src":"3851:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3844:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"3872:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3894:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3906:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3909:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3902:3:33"},"nodeType":"YulFunctionCall","src":"3902:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3890:3:33"},"nodeType":"YulFunctionCall","src":"3890:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3915:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3886:3:33"},"nodeType":"YulFunctionCall","src":"3886:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3876:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"3946:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3955:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3958:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3948:6:33"},"nodeType":"YulFunctionCall","src":"3948:12:33"},"nodeType":"YulExpressionStatement","src":"3948:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3933:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"3941:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3930:2:33"},"nodeType":"YulFunctionCall","src":"3930:15:33"},"nodeType":"YulIf","src":"3927:35:33"},{"nodeType":"YulVariableDeclaration","src":"3971:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3986:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"3994:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3982:3:33"},"nodeType":"YulFunctionCall","src":"3982:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3975:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4062:312:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4076:36:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4108:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4095:12:33"},"nodeType":"YulFunctionCall","src":"4095:17:33"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"4080:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4176:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"4194:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4204:1:33","type":"","value":"0"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4198:2:33","type":""}]},{"expression":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4229:2:33"},{"name":"_3","nodeType":"YulIdentifier","src":"4233:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4222:6:33"},"nodeType":"YulFunctionCall","src":"4222:14:33"},"nodeType":"YulExpressionStatement","src":"4222:14:33"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"4131:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"4144:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4128:2:33"},"nodeType":"YulFunctionCall","src":"4128:35:33"},"nodeType":"YulIf","src":"4125:125:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4270:3:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4300:6:33"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"4308:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4296:3:33"},"nodeType":"YulFunctionCall","src":"4296:24:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4322:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4292:3:33"},"nodeType":"YulFunctionCall","src":"4292:33:33"},{"name":"end","nodeType":"YulIdentifier","src":"4327:3:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4275:16:33"},"nodeType":"YulFunctionCall","src":"4275:56:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4263:6:33"},"nodeType":"YulFunctionCall","src":"4263:69:33"},"nodeType":"YulExpressionStatement","src":"4263:69:33"},{"nodeType":"YulAssignment","src":"4345:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4356:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4361:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4352:3:33"},"nodeType":"YulFunctionCall","src":"4352:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4345:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4017:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4022:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4014:2:33"},"nodeType":"YulFunctionCall","src":"4014:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4030:23:33","statements":[{"nodeType":"YulAssignment","src":"4032:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4043:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"4048:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4039:3:33"},"nodeType":"YulFunctionCall","src":"4039:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4032:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"4010:3:33","statements":[]},"src":"4006:368:33"},{"nodeType":"YulAssignment","src":"4383:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"4392:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4383:5:33"}]}]},"name":"abi_decode_array_bytes_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3555:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"3563:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3571:5:33","type":""}],"src":"3519:884:33"},{"body":{"nodeType":"YulBlock","src":"4594:1256:33","statements":[{"body":{"nodeType":"YulBlock","src":"4640:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4649:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4652:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4642:6:33"},"nodeType":"YulFunctionCall","src":"4642:12:33"},"nodeType":"YulExpressionStatement","src":"4642:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4615:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"4624:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4611:3:33"},"nodeType":"YulFunctionCall","src":"4611:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"4636:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4607:3:33"},"nodeType":"YulFunctionCall","src":"4607:32:33"},"nodeType":"YulIf","src":"4604:52:33"},{"nodeType":"YulVariableDeclaration","src":"4665:37:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4692:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4679:12:33"},"nodeType":"YulFunctionCall","src":"4679:23:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4669:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4711:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4721:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4715:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4766:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4775:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4778:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4768:6:33"},"nodeType":"YulFunctionCall","src":"4768:12:33"},"nodeType":"YulExpressionStatement","src":"4768:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4754:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"4762:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4751:2:33"},"nodeType":"YulFunctionCall","src":"4751:14:33"},"nodeType":"YulIf","src":"4748:34:33"},{"nodeType":"YulVariableDeclaration","src":"4791:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4805:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"4816:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4801:3:33"},"nodeType":"YulFunctionCall","src":"4801:22:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4795:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"4871:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4880:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4883:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4873:6:33"},"nodeType":"YulFunctionCall","src":"4873:12:33"},"nodeType":"YulExpressionStatement","src":"4873:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4850:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"4854:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4846:3:33"},"nodeType":"YulFunctionCall","src":"4846:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4861:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4842:3:33"},"nodeType":"YulFunctionCall","src":"4842:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4835:6:33"},"nodeType":"YulFunctionCall","src":"4835:35:33"},"nodeType":"YulIf","src":"4832:55:33"},{"nodeType":"YulVariableDeclaration","src":"4896:26:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4919:2:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4906:12:33"},"nodeType":"YulFunctionCall","src":"4906:16:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4900:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4931:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"4941:4:33","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4935:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4954:69:33","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5019:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"4981:37:33"},"nodeType":"YulFunctionCall","src":"4981:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4965:15:33"},"nodeType":"YulFunctionCall","src":"4965:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4958:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5032:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"5045:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"5036:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5064:3:33"},{"name":"_3","nodeType":"YulIdentifier","src":"5069:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5057:6:33"},"nodeType":"YulFunctionCall","src":"5057:15:33"},"nodeType":"YulExpressionStatement","src":"5057:15:33"},{"nodeType":"YulAssignment","src":"5081:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5092:3:33"},{"name":"_4","nodeType":"YulIdentifier","src":"5097:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5088:3:33"},"nodeType":"YulFunctionCall","src":"5088:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5081:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"5109:42:33","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5131:2:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5139:1:33","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"5142:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5135:3:33"},"nodeType":"YulFunctionCall","src":"5135:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5127:3:33"},"nodeType":"YulFunctionCall","src":"5127:19:33"},{"name":"_4","nodeType":"YulIdentifier","src":"5148:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5123:3:33"},"nodeType":"YulFunctionCall","src":"5123:28:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5113:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5183:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5192:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5195:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5185:6:33"},"nodeType":"YulFunctionCall","src":"5185:12:33"},"nodeType":"YulExpressionStatement","src":"5185:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5166:6:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5174:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5163:2:33"},"nodeType":"YulFunctionCall","src":"5163:19:33"},"nodeType":"YulIf","src":"5160:39:33"},{"nodeType":"YulVariableDeclaration","src":"5208:22:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5223:2:33"},{"name":"_4","nodeType":"YulIdentifier","src":"5227:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5219:3:33"},"nodeType":"YulFunctionCall","src":"5219:11:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5212:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5295:159:33","statements":[{"nodeType":"YulVariableDeclaration","src":"5309:30:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5335:3:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5322:12:33"},"nodeType":"YulFunctionCall","src":"5322:17:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5313:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5375:5:33"}],"functionName":{"name":"validator_revert_uint8","nodeType":"YulIdentifier","src":"5352:22:33"},"nodeType":"YulFunctionCall","src":"5352:29:33"},"nodeType":"YulExpressionStatement","src":"5352:29:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5401:3:33"},{"name":"value","nodeType":"YulIdentifier","src":"5406:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5394:6:33"},"nodeType":"YulFunctionCall","src":"5394:18:33"},"nodeType":"YulExpressionStatement","src":"5394:18:33"},{"nodeType":"YulAssignment","src":"5425:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5436:3:33"},{"name":"_4","nodeType":"YulIdentifier","src":"5441:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5432:3:33"},"nodeType":"YulFunctionCall","src":"5432:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5425:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5250:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5255:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5247:2:33"},"nodeType":"YulFunctionCall","src":"5247:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5263:23:33","statements":[{"nodeType":"YulAssignment","src":"5265:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5276:3:33"},{"name":"_4","nodeType":"YulIdentifier","src":"5281:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5272:3:33"},"nodeType":"YulFunctionCall","src":"5272:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5265:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"5243:3:33","statements":[]},"src":"5239:215:33"},{"nodeType":"YulAssignment","src":"5463:15:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"5473:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5463:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"5487:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5520:9:33"},{"name":"_4","nodeType":"YulIdentifier","src":"5531:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5516:3:33"},"nodeType":"YulFunctionCall","src":"5516:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5503:12:33"},"nodeType":"YulFunctionCall","src":"5503:32:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5491:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5564:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5573:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5576:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5566:6:33"},"nodeType":"YulFunctionCall","src":"5566:12:33"},"nodeType":"YulExpressionStatement","src":"5566:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5550:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5560:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5547:2:33"},"nodeType":"YulFunctionCall","src":"5547:16:33"},"nodeType":"YulIf","src":"5544:36:33"},{"nodeType":"YulAssignment","src":"5589:73:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5632:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5643:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5628:3:33"},"nodeType":"YulFunctionCall","src":"5628:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5654:7:33"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5599:28:33"},"nodeType":"YulFunctionCall","src":"5599:63:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5589:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"5671:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5704:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5715:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5700:3:33"},"nodeType":"YulFunctionCall","src":"5700:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5687:12:33"},"nodeType":"YulFunctionCall","src":"5687:32:33"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5675:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"5748:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5757:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5760:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5750:6:33"},"nodeType":"YulFunctionCall","src":"5750:12:33"},"nodeType":"YulExpressionStatement","src":"5750:12:33"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5734:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"5744:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5731:2:33"},"nodeType":"YulFunctionCall","src":"5731:16:33"},"nodeType":"YulIf","src":"5728:36:33"},{"nodeType":"YulAssignment","src":"5773:71:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5814:9:33"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5825:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5810:3:33"},"nodeType":"YulFunctionCall","src":"5810:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5836:7:33"}],"functionName":{"name":"abi_decode_array_bytes_dyn","nodeType":"YulIdentifier","src":"5783:26:33"},"nodeType":"YulFunctionCall","src":"5783:61:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5773:6:33"}]}]},"name":"abi_decode_tuple_t_array$_t_uint8_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4544:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4555:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4567:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4575:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4583:6:33","type":""}],"src":"4408:1442:33"},{"body":{"nodeType":"YulBlock","src":"5981:125:33","statements":[{"nodeType":"YulAssignment","src":"5991:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6003:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6014:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5999:3:33"},"nodeType":"YulFunctionCall","src":"5999:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5991:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6033:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6048:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"6056:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6044:3:33"},"nodeType":"YulFunctionCall","src":"6044:55:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6026:6:33"},"nodeType":"YulFunctionCall","src":"6026:74:33"},"nodeType":"YulExpressionStatement","src":"6026:74:33"}]},"name":"abi_encode_tuple_t_contract$_IBentoBoxMinimal_$4138__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5950:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5961:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5972:4:33","type":""}],"src":"5855:251:33"},{"body":{"nodeType":"YulBlock","src":"6155:73:33","statements":[{"body":{"nodeType":"YulBlock","src":"6206:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6215:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6218:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6208:6:33"},"nodeType":"YulFunctionCall","src":"6208:12:33"},"nodeType":"YulExpressionStatement","src":"6208:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6178:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6189:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"6196:6:33","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6185:3:33"},"nodeType":"YulFunctionCall","src":"6185:18:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6175:2:33"},"nodeType":"YulFunctionCall","src":"6175:29:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6168:6:33"},"nodeType":"YulFunctionCall","src":"6168:37:33"},"nodeType":"YulIf","src":"6165:57:33"}]},"name":"validator_revert_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6144:5:33","type":""}],"src":"6111:117:33"},{"body":{"nodeType":"YulBlock","src":"6278:109:33","statements":[{"body":{"nodeType":"YulBlock","src":"6365:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6374:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6377:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6367:6:33"},"nodeType":"YulFunctionCall","src":"6367:12:33"},"nodeType":"YulExpressionStatement","src":"6367:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6301:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6312:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"6319:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6308:3:33"},"nodeType":"YulFunctionCall","src":"6308:54:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6298:2:33"},"nodeType":"YulFunctionCall","src":"6298:65:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6291:6:33"},"nodeType":"YulFunctionCall","src":"6291:73:33"},"nodeType":"YulIf","src":"6288:93:33"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6267:5:33","type":""}],"src":"6233:154:33"},{"body":{"nodeType":"YulBlock","src":"6553:709:33","statements":[{"body":{"nodeType":"YulBlock","src":"6600:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6609:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6612:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6602:6:33"},"nodeType":"YulFunctionCall","src":"6602:12:33"},"nodeType":"YulExpressionStatement","src":"6602:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6574:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"6583:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6570:3:33"},"nodeType":"YulFunctionCall","src":"6570:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"6595:3:33","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6566:3:33"},"nodeType":"YulFunctionCall","src":"6566:33:33"},"nodeType":"YulIf","src":"6563:53:33"},{"nodeType":"YulVariableDeclaration","src":"6625:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6651:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6638:12:33"},"nodeType":"YulFunctionCall","src":"6638:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6629:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6694:5:33"}],"functionName":{"name":"validator_revert_uint16","nodeType":"YulIdentifier","src":"6670:23:33"},"nodeType":"YulFunctionCall","src":"6670:30:33"},"nodeType":"YulExpressionStatement","src":"6670:30:33"},{"nodeType":"YulAssignment","src":"6709:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"6719:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6709:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"6733:47:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6765:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6776:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6761:3:33"},"nodeType":"YulFunctionCall","src":"6761:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6748:12:33"},"nodeType":"YulFunctionCall","src":"6748:32:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6737:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6812:7:33"}],"functionName":{"name":"validator_revert_uint8","nodeType":"YulIdentifier","src":"6789:22:33"},"nodeType":"YulFunctionCall","src":"6789:31:33"},"nodeType":"YulExpressionStatement","src":"6789:31:33"},{"nodeType":"YulAssignment","src":"6829:17:33","value":{"name":"value_1","nodeType":"YulIdentifier","src":"6839:7:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6829:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"6855:47:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6887:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"6898:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6883:3:33"},"nodeType":"YulFunctionCall","src":"6883:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6870:12:33"},"nodeType":"YulFunctionCall","src":"6870:32:33"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"6859:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"6936:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6911:24:33"},"nodeType":"YulFunctionCall","src":"6911:33:33"},"nodeType":"YulExpressionStatement","src":"6911:33:33"},{"nodeType":"YulAssignment","src":"6953:17:33","value":{"name":"value_2","nodeType":"YulIdentifier","src":"6963:7:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6953:6:33"}]},{"nodeType":"YulAssignment","src":"6979:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7006:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7017:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7002:3:33"},"nodeType":"YulFunctionCall","src":"7002:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6989:12:33"},"nodeType":"YulFunctionCall","src":"6989:32:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6979:6:33"}]},{"nodeType":"YulAssignment","src":"7030:43:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7057:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7068:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7053:3:33"},"nodeType":"YulFunctionCall","src":"7053:19:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7040:12:33"},"nodeType":"YulFunctionCall","src":"7040:33:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7030:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"7082:47:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7113:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7124:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7109:3:33"},"nodeType":"YulFunctionCall","src":"7109:19:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7096:12:33"},"nodeType":"YulFunctionCall","src":"7096:33:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7086:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"7172:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7181:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7184:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7174:6:33"},"nodeType":"YulFunctionCall","src":"7174:12:33"},"nodeType":"YulExpressionStatement","src":"7174:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7144:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7152:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7141:2:33"},"nodeType":"YulFunctionCall","src":"7141:30:33"},"nodeType":"YulIf","src":"7138:50:33"},{"nodeType":"YulAssignment","src":"7197:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7228:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"7239:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7224:3:33"},"nodeType":"YulFunctionCall","src":"7224:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7248:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"7207:16:33"},"nodeType":"YulFunctionCall","src":"7207:49:33"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7197:6:33"}]}]},"name":"abi_decode_tuple_t_uint16t_uint8t_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6479:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6490:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6502:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6510:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6518:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6526:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6534:6:33","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6542:6:33","type":""}],"src":"6392:870:33"},{"body":{"nodeType":"YulBlock","src":"7396:119:33","statements":[{"nodeType":"YulAssignment","src":"7406:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7418:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7429:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7414:3:33"},"nodeType":"YulFunctionCall","src":"7414:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7406:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7448:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"7459:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7441:6:33"},"nodeType":"YulFunctionCall","src":"7441:25:33"},"nodeType":"YulExpressionStatement","src":"7441:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7486:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7497:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7482:3:33"},"nodeType":"YulFunctionCall","src":"7482:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"7502:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7475:6:33"},"nodeType":"YulFunctionCall","src":"7475:34:33"},"nodeType":"YulExpressionStatement","src":"7475:34:33"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7357:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7368:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7376:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7387:4:33","type":""}],"src":"7267:248:33"},{"body":{"nodeType":"YulBlock","src":"7645:125:33","statements":[{"nodeType":"YulAssignment","src":"7655:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7667:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7678:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7663:3:33"},"nodeType":"YulFunctionCall","src":"7663:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7655:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7697:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7712:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"7720:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7708:3:33"},"nodeType":"YulFunctionCall","src":"7708:55:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7690:6:33"},"nodeType":"YulFunctionCall","src":"7690:74:33"},"nodeType":"YulExpressionStatement","src":"7690:74:33"}]},"name":"abi_encode_tuple_t_contract$_IStargateWidget_$4368__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7614:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7625:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7636:4:33","type":""}],"src":"7520:250:33"},{"body":{"nodeType":"YulBlock","src":"7876:76:33","statements":[{"nodeType":"YulAssignment","src":"7886:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7898:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"7909:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7894:3:33"},"nodeType":"YulFunctionCall","src":"7894:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7886:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7928:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"7939:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7921:6:33"},"nodeType":"YulFunctionCall","src":"7921:25:33"},"nodeType":"YulExpressionStatement","src":"7921:25:33"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7845:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7856:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7867:4:33","type":""}],"src":"7775:177:33"},{"body":{"nodeType":"YulBlock","src":"8082:125:33","statements":[{"nodeType":"YulAssignment","src":"8092:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8104:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8115:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8100:3:33"},"nodeType":"YulFunctionCall","src":"8100:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8092:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8134:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8149:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"8157:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8145:3:33"},"nodeType":"YulFunctionCall","src":"8145:55:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8127:6:33"},"nodeType":"YulFunctionCall","src":"8127:74:33"},"nodeType":"YulExpressionStatement","src":"8127:74:33"}]},"name":"abi_encode_tuple_t_contract$_IStargateRouter_$4360__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8051:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8062:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8073:4:33","type":""}],"src":"7957:250:33"},{"body":{"nodeType":"YulBlock","src":"8384:780:33","statements":[{"body":{"nodeType":"YulBlock","src":"8431:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8440:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8443:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8433:6:33"},"nodeType":"YulFunctionCall","src":"8433:12:33"},"nodeType":"YulExpressionStatement","src":"8433:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8405:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"8414:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8401:3:33"},"nodeType":"YulFunctionCall","src":"8401:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"8426:3:33","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8397:3:33"},"nodeType":"YulFunctionCall","src":"8397:33:33"},"nodeType":"YulIf","src":"8394:53:33"},{"nodeType":"YulVariableDeclaration","src":"8456:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8482:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8469:12:33"},"nodeType":"YulFunctionCall","src":"8469:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8460:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8525:5:33"}],"functionName":{"name":"validator_revert_uint16","nodeType":"YulIdentifier","src":"8501:23:33"},"nodeType":"YulFunctionCall","src":"8501:30:33"},"nodeType":"YulExpressionStatement","src":"8501:30:33"},{"nodeType":"YulAssignment","src":"8540:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"8550:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8540:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"8564:46:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8595:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8606:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8591:3:33"},"nodeType":"YulFunctionCall","src":"8591:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8578:12:33"},"nodeType":"YulFunctionCall","src":"8578:32:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8568:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8619:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"8629:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8623:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"8674:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8683:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8686:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8676:6:33"},"nodeType":"YulFunctionCall","src":"8676:12:33"},"nodeType":"YulExpressionStatement","src":"8676:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8662:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"8670:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8659:2:33"},"nodeType":"YulFunctionCall","src":"8659:14:33"},"nodeType":"YulIf","src":"8656:34:33"},{"nodeType":"YulAssignment","src":"8699:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8730:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"8741:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8726:3:33"},"nodeType":"YulFunctionCall","src":"8726:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8750:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"8709:16:33"},"nodeType":"YulFunctionCall","src":"8709:49:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8699:6:33"}]},{"nodeType":"YulAssignment","src":"8767:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8794:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8805:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8790:3:33"},"nodeType":"YulFunctionCall","src":"8790:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8777:12:33"},"nodeType":"YulFunctionCall","src":"8777:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8767:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"8818:47:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8850:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8861:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8846:3:33"},"nodeType":"YulFunctionCall","src":"8846:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8833:12:33"},"nodeType":"YulFunctionCall","src":"8833:32:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"8822:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"8899:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8874:24:33"},"nodeType":"YulFunctionCall","src":"8874:33:33"},"nodeType":"YulExpressionStatement","src":"8874:33:33"},{"nodeType":"YulAssignment","src":"8916:17:33","value":{"name":"value_1","nodeType":"YulIdentifier","src":"8926:7:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8916:6:33"}]},{"nodeType":"YulAssignment","src":"8942:43:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8969:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"8980:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8965:3:33"},"nodeType":"YulFunctionCall","src":"8965:19:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8952:12:33"},"nodeType":"YulFunctionCall","src":"8952:33:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8942:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"8994:49:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9027:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9038:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9023:3:33"},"nodeType":"YulFunctionCall","src":"9023:19:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9010:12:33"},"nodeType":"YulFunctionCall","src":"9010:33:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"8998:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"9072:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9081:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9084:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9074:6:33"},"nodeType":"YulFunctionCall","src":"9074:12:33"},"nodeType":"YulExpressionStatement","src":"9074:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"9058:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"9068:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9055:2:33"},"nodeType":"YulFunctionCall","src":"9055:16:33"},"nodeType":"YulIf","src":"9052:36:33"},{"nodeType":"YulAssignment","src":"9097:61:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9128:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"9139:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9124:3:33"},"nodeType":"YulFunctionCall","src":"9124:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9150:7:33"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"9107:16:33"},"nodeType":"YulFunctionCall","src":"9107:51:33"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"9097:6:33"}]}]},"name":"abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint256t_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8310:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8321:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8333:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8341:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8349:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8357:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8365:6:33","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8373:6:33","type":""}],"src":"8212:952:33"},{"body":{"nodeType":"YulBlock","src":"9270:125:33","statements":[{"nodeType":"YulAssignment","src":"9280:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9292:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"9303:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9288:3:33"},"nodeType":"YulFunctionCall","src":"9288:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9280:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9322:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9337:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"9345:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9333:3:33"},"nodeType":"YulFunctionCall","src":"9333:55:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9315:6:33"},"nodeType":"YulFunctionCall","src":"9315:74:33"},"nodeType":"YulExpressionStatement","src":"9315:74:33"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9239:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9250:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9261:4:33","type":""}],"src":"9169:226:33"},{"body":{"nodeType":"YulBlock","src":"9484:177:33","statements":[{"body":{"nodeType":"YulBlock","src":"9530:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9539:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9542:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9532:6:33"},"nodeType":"YulFunctionCall","src":"9532:12:33"},"nodeType":"YulExpressionStatement","src":"9532:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9505:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"9514:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9501:3:33"},"nodeType":"YulFunctionCall","src":"9501:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"9526:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9497:3:33"},"nodeType":"YulFunctionCall","src":"9497:32:33"},"nodeType":"YulIf","src":"9494:52:33"},{"nodeType":"YulVariableDeclaration","src":"9555:36:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9581:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9568:12:33"},"nodeType":"YulFunctionCall","src":"9568:23:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9559:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9625:5:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9600:24:33"},"nodeType":"YulFunctionCall","src":"9600:31:33"},"nodeType":"YulExpressionStatement","src":"9600:31:33"},{"nodeType":"YulAssignment","src":"9640:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"9650:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9640:6:33"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$667","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9450:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9461:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9473:6:33","type":""}],"src":"9400:261:33"},{"body":{"nodeType":"YulBlock","src":"9698:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9715:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9718:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9708:6:33"},"nodeType":"YulFunctionCall","src":"9708:88:33"},"nodeType":"YulExpressionStatement","src":"9708:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9812:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9815:4:33","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9805:6:33"},"nodeType":"YulFunctionCall","src":"9805:15:33"},"nodeType":"YulExpressionStatement","src":"9805:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9836:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9839:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9829:6:33"},"nodeType":"YulFunctionCall","src":"9829:15:33"},"nodeType":"YulExpressionStatement","src":"9829:15:33"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9666:184:33"},{"body":{"nodeType":"YulBlock","src":"9923:78:33","statements":[{"nodeType":"YulAssignment","src":"9933:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9948:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9942:5:33"},"nodeType":"YulFunctionCall","src":"9942:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9933:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9989:5:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9964:24:33"},"nodeType":"YulFunctionCall","src":"9964:31:33"},"nodeType":"YulExpressionStatement","src":"9964:31:33"}]},"name":"abi_decode_address_payable_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9902:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9913:5:33","type":""}],"src":"9855:146:33"},{"body":{"nodeType":"YulBlock","src":"10063:107:33","statements":[{"nodeType":"YulAssignment","src":"10073:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10088:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10082:5:33"},"nodeType":"YulFunctionCall","src":"10082:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10073:5:33"}]},{"body":{"nodeType":"YulBlock","src":"10148:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10157:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10160:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10150:6:33"},"nodeType":"YulFunctionCall","src":"10150:12:33"},"nodeType":"YulExpressionStatement","src":"10150:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10117:5:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10138:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10131:6:33"},"nodeType":"YulFunctionCall","src":"10131:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10124:6:33"},"nodeType":"YulFunctionCall","src":"10124:21:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10114:2:33"},"nodeType":"YulFunctionCall","src":"10114:32:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10107:6:33"},"nodeType":"YulFunctionCall","src":"10107:40:33"},"nodeType":"YulIf","src":"10104:60:33"}]},"name":"abi_decode_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10042:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10053:5:33","type":""}],"src":"10006:164:33"},{"body":{"nodeType":"YulBlock","src":"10327:440:33","statements":[{"body":{"nodeType":"YulBlock","src":"10374:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10383:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10386:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10376:6:33"},"nodeType":"YulFunctionCall","src":"10376:12:33"},"nodeType":"YulExpressionStatement","src":"10376:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10348:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"10357:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10344:3:33"},"nodeType":"YulFunctionCall","src":"10344:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"10369:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10340:3:33"},"nodeType":"YulFunctionCall","src":"10340:33:33"},"nodeType":"YulIf","src":"10337:53:33"},{"nodeType":"YulVariableDeclaration","src":"10399:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10418:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10412:5:33"},"nodeType":"YulFunctionCall","src":"10412:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10403:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10462:5:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10437:24:33"},"nodeType":"YulFunctionCall","src":"10437:31:33"},"nodeType":"YulExpressionStatement","src":"10437:31:33"},{"nodeType":"YulAssignment","src":"10477:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"10487:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10477:6:33"}]},{"nodeType":"YulAssignment","src":"10501:56:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10542:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10553:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10538:3:33"},"nodeType":"YulFunctionCall","src":"10538:18:33"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"10511:26:33"},"nodeType":"YulFunctionCall","src":"10511:46:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10501:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"10566:40:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10591:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10602:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10587:3:33"},"nodeType":"YulFunctionCall","src":"10587:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10581:5:33"},"nodeType":"YulFunctionCall","src":"10581:25:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"10570:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"10638:7:33"}],"functionName":{"name":"validator_revert_uint8","nodeType":"YulIdentifier","src":"10615:22:33"},"nodeType":"YulFunctionCall","src":"10615:31:33"},"nodeType":"YulExpressionStatement","src":"10615:31:33"},{"nodeType":"YulAssignment","src":"10655:17:33","value":{"name":"value_1","nodeType":"YulIdentifier","src":"10665:7:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10655:6:33"}]},{"nodeType":"YulAssignment","src":"10681:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10701:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10712:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10697:3:33"},"nodeType":"YulFunctionCall","src":"10697:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10691:5:33"},"nodeType":"YulFunctionCall","src":"10691:25:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10681:6:33"}]},{"nodeType":"YulAssignment","src":"10725:36:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10745:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"10756:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10741:3:33"},"nodeType":"YulFunctionCall","src":"10741:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10735:5:33"},"nodeType":"YulFunctionCall","src":"10735:26:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"10725:6:33"}]}]},"name":"abi_decode_tuple_t_address_payablet_boolt_uint8t_bytes32t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10261:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10272:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10284:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10292:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10300:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10308:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"10316:6:33","type":""}],"src":"10175:592:33"},{"body":{"nodeType":"YulBlock","src":"11003:400:33","statements":[{"nodeType":"YulAssignment","src":"11013:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11025:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11036:3:33","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11021:3:33"},"nodeType":"YulFunctionCall","src":"11021:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11013:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"11049:52:33","value":{"kind":"number","nodeType":"YulLiteral","src":"11059:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11053:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11117:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11132:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"11140:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11128:3:33"},"nodeType":"YulFunctionCall","src":"11128:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11110:6:33"},"nodeType":"YulFunctionCall","src":"11110:34:33"},"nodeType":"YulExpressionStatement","src":"11110:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11164:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11175:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11160:3:33"},"nodeType":"YulFunctionCall","src":"11160:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11184:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"11192:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11180:3:33"},"nodeType":"YulFunctionCall","src":"11180:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11153:6:33"},"nodeType":"YulFunctionCall","src":"11153:43:33"},"nodeType":"YulExpressionStatement","src":"11153:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11216:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11227:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11212:3:33"},"nodeType":"YulFunctionCall","src":"11212:18:33"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11246:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11239:6:33"},"nodeType":"YulFunctionCall","src":"11239:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11232:6:33"},"nodeType":"YulFunctionCall","src":"11232:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11205:6:33"},"nodeType":"YulFunctionCall","src":"11205:50:33"},"nodeType":"YulExpressionStatement","src":"11205:50:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11275:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11286:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11271:3:33"},"nodeType":"YulFunctionCall","src":"11271:18:33"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11295:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"11303:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11291:3:33"},"nodeType":"YulFunctionCall","src":"11291:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11264:6:33"},"nodeType":"YulFunctionCall","src":"11264:45:33"},"nodeType":"YulExpressionStatement","src":"11264:45:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11329:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11340:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11325:3:33"},"nodeType":"YulFunctionCall","src":"11325:19:33"},{"name":"value4","nodeType":"YulIdentifier","src":"11346:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11318:6:33"},"nodeType":"YulFunctionCall","src":"11318:35:33"},"nodeType":"YulExpressionStatement","src":"11318:35:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11373:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11384:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11369:3:33"},"nodeType":"YulFunctionCall","src":"11369:19:33"},{"name":"value5","nodeType":"YulIdentifier","src":"11390:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11362:6:33"},"nodeType":"YulFunctionCall","src":"11362:35:33"},"nodeType":"YulExpressionStatement","src":"11362:35:33"}]},"name":"abi_encode_tuple_t_address_t_address_t_bool_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_bool_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10932:9:33","type":""},{"name":"value5","nodeType":"YulTypedName","src":"10943:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"10951:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10959:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10967:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10975:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10983:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10994:4:33","type":""}],"src":"10772:631:33"},{"body":{"nodeType":"YulBlock","src":"11556:376:33","statements":[{"body":{"nodeType":"YulBlock","src":"11603:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11612:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11615:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11605:6:33"},"nodeType":"YulFunctionCall","src":"11605:12:33"},"nodeType":"YulExpressionStatement","src":"11605:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11577:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"11586:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11573:3:33"},"nodeType":"YulFunctionCall","src":"11573:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"11598:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11569:3:33"},"nodeType":"YulFunctionCall","src":"11569:33:33"},"nodeType":"YulIf","src":"11566:53:33"},{"nodeType":"YulVariableDeclaration","src":"11628:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11647:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11641:5:33"},"nodeType":"YulFunctionCall","src":"11641:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11632:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11691:5:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11666:24:33"},"nodeType":"YulFunctionCall","src":"11666:31:33"},"nodeType":"YulExpressionStatement","src":"11666:31:33"},{"nodeType":"YulAssignment","src":"11706:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"11716:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11706:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"11730:40:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11755:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11766:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11751:3:33"},"nodeType":"YulFunctionCall","src":"11751:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11745:5:33"},"nodeType":"YulFunctionCall","src":"11745:25:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11734:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11804:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11779:24:33"},"nodeType":"YulFunctionCall","src":"11779:33:33"},"nodeType":"YulExpressionStatement","src":"11779:33:33"},{"nodeType":"YulAssignment","src":"11821:17:33","value":{"name":"value_1","nodeType":"YulIdentifier","src":"11831:7:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11821:6:33"}]},{"nodeType":"YulAssignment","src":"11847:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11867:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11878:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11863:3:33"},"nodeType":"YulFunctionCall","src":"11863:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11857:5:33"},"nodeType":"YulFunctionCall","src":"11857:25:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11847:6:33"}]},{"nodeType":"YulAssignment","src":"11891:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11911:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"11922:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11907:3:33"},"nodeType":"YulFunctionCall","src":"11907:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11901:5:33"},"nodeType":"YulFunctionCall","src":"11901:25:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11891:6:33"}]}]},"name":"abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11498:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11509:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11521:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11529:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11537:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11545:6:33","type":""}],"src":"11408:524:33"},{"body":{"nodeType":"YulBlock","src":"12099:442:33","statements":[{"body":{"nodeType":"YulBlock","src":"12146:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12155:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12158:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12148:6:33"},"nodeType":"YulFunctionCall","src":"12148:12:33"},"nodeType":"YulExpressionStatement","src":"12148:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12120:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"12129:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12116:3:33"},"nodeType":"YulFunctionCall","src":"12116:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"12141:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12112:3:33"},"nodeType":"YulFunctionCall","src":"12112:33:33"},"nodeType":"YulIf","src":"12109:53:33"},{"nodeType":"YulVariableDeclaration","src":"12171:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12190:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12184:5:33"},"nodeType":"YulFunctionCall","src":"12184:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12175:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12234:5:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12209:24:33"},"nodeType":"YulFunctionCall","src":"12209:31:33"},"nodeType":"YulExpressionStatement","src":"12209:31:33"},{"nodeType":"YulAssignment","src":"12249:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"12259:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12249:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"12273:40:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12298:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12309:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12294:3:33"},"nodeType":"YulFunctionCall","src":"12294:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12288:5:33"},"nodeType":"YulFunctionCall","src":"12288:25:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"12277:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"12347:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12322:24:33"},"nodeType":"YulFunctionCall","src":"12322:33:33"},"nodeType":"YulExpressionStatement","src":"12322:33:33"},{"nodeType":"YulAssignment","src":"12364:17:33","value":{"name":"value_1","nodeType":"YulIdentifier","src":"12374:7:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12364:6:33"}]},{"nodeType":"YulAssignment","src":"12390:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12410:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12421:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12406:3:33"},"nodeType":"YulFunctionCall","src":"12406:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12400:5:33"},"nodeType":"YulFunctionCall","src":"12400:25:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12390:6:33"}]},{"nodeType":"YulAssignment","src":"12434:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12454:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12465:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12450:3:33"},"nodeType":"YulFunctionCall","src":"12450:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12444:5:33"},"nodeType":"YulFunctionCall","src":"12444:25:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"12434:6:33"}]},{"nodeType":"YulAssignment","src":"12478:57:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12519:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12530:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12515:3:33"},"nodeType":"YulFunctionCall","src":"12515:19:33"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"12488:26:33"},"nodeType":"YulFunctionCall","src":"12488:47:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"12478:6:33"}]}]},"name":"abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12033:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12044:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12056:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12064:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12072:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12080:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12088:6:33","type":""}],"src":"11937:604:33"},{"body":{"nodeType":"YulBlock","src":"12677:331:33","statements":[{"body":{"nodeType":"YulBlock","src":"12723:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12732:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12735:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12725:6:33"},"nodeType":"YulFunctionCall","src":"12725:12:33"},"nodeType":"YulExpressionStatement","src":"12725:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12698:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"12707:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12694:3:33"},"nodeType":"YulFunctionCall","src":"12694:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"12719:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12690:3:33"},"nodeType":"YulFunctionCall","src":"12690:32:33"},"nodeType":"YulIf","src":"12687:52:33"},{"nodeType":"YulVariableDeclaration","src":"12748:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12767:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12761:5:33"},"nodeType":"YulFunctionCall","src":"12761:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12752:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12811:5:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12786:24:33"},"nodeType":"YulFunctionCall","src":"12786:31:33"},"nodeType":"YulExpressionStatement","src":"12786:31:33"},{"nodeType":"YulAssignment","src":"12826:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"12836:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12826:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"12850:40:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12875:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12886:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12871:3:33"},"nodeType":"YulFunctionCall","src":"12871:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12865:5:33"},"nodeType":"YulFunctionCall","src":"12865:25:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"12854:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"12924:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12899:24:33"},"nodeType":"YulFunctionCall","src":"12899:33:33"},"nodeType":"YulExpressionStatement","src":"12899:33:33"},{"nodeType":"YulAssignment","src":"12941:17:33","value":{"name":"value_1","nodeType":"YulIdentifier","src":"12951:7:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12941:6:33"}]},{"nodeType":"YulAssignment","src":"12967:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12987:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"12998:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12983:3:33"},"nodeType":"YulFunctionCall","src":"12983:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12977:5:33"},"nodeType":"YulFunctionCall","src":"12977:25:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12967:6:33"}]}]},"name":"abi_decode_tuple_t_address_payablet_address_payablet_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12627:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12638:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12650:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12658:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12666:6:33","type":""}],"src":"12546:462:33"},{"body":{"nodeType":"YulBlock","src":"13094:103:33","statements":[{"body":{"nodeType":"YulBlock","src":"13140:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13149:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13152:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13142:6:33"},"nodeType":"YulFunctionCall","src":"13142:12:33"},"nodeType":"YulExpressionStatement","src":"13142:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13115:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"13124:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13111:3:33"},"nodeType":"YulFunctionCall","src":"13111:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"13136:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13107:3:33"},"nodeType":"YulFunctionCall","src":"13107:32:33"},"nodeType":"YulIf","src":"13104:52:33"},{"nodeType":"YulAssignment","src":"13165:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13181:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13175:5:33"},"nodeType":"YulFunctionCall","src":"13175:16:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13165:6:33"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13060:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13071:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13083:6:33","type":""}],"src":"13013:184:33"},{"body":{"nodeType":"YulBlock","src":"13331:198:33","statements":[{"nodeType":"YulAssignment","src":"13341:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13353:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13364:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13349:3:33"},"nodeType":"YulFunctionCall","src":"13349:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13341:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"13376:52:33","value":{"kind":"number","nodeType":"YulLiteral","src":"13386:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13380:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13444:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13459:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"13467:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13455:3:33"},"nodeType":"YulFunctionCall","src":"13455:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13437:6:33"},"nodeType":"YulFunctionCall","src":"13437:34:33"},"nodeType":"YulExpressionStatement","src":"13437:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13491:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13502:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13487:3:33"},"nodeType":"YulFunctionCall","src":"13487:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13511:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"13519:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13507:3:33"},"nodeType":"YulFunctionCall","src":"13507:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13480:6:33"},"nodeType":"YulFunctionCall","src":"13480:43:33"},"nodeType":"YulExpressionStatement","src":"13480:43:33"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13292:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13303:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13311:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13322:4:33","type":""}],"src":"13202:327:33"},{"body":{"nodeType":"YulBlock","src":"13648:287:33","statements":[{"body":{"nodeType":"YulBlock","src":"13694:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13703:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13706:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13696:6:33"},"nodeType":"YulFunctionCall","src":"13696:12:33"},"nodeType":"YulExpressionStatement","src":"13696:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13669:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"13678:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13665:3:33"},"nodeType":"YulFunctionCall","src":"13665:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"13690:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13661:3:33"},"nodeType":"YulFunctionCall","src":"13661:32:33"},"nodeType":"YulIf","src":"13658:52:33"},{"nodeType":"YulVariableDeclaration","src":"13719:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13738:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13732:5:33"},"nodeType":"YulFunctionCall","src":"13732:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13723:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13782:5:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"13757:24:33"},"nodeType":"YulFunctionCall","src":"13757:31:33"},"nodeType":"YulExpressionStatement","src":"13757:31:33"},{"nodeType":"YulAssignment","src":"13797:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"13807:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13797:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"13821:40:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13846:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"13857:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13842:3:33"},"nodeType":"YulFunctionCall","src":"13842:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13836:5:33"},"nodeType":"YulFunctionCall","src":"13836:25:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"13825:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"13895:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"13870:24:33"},"nodeType":"YulFunctionCall","src":"13870:33:33"},"nodeType":"YulExpressionStatement","src":"13870:33:33"},{"nodeType":"YulAssignment","src":"13912:17:33","value":{"name":"value_1","nodeType":"YulIdentifier","src":"13922:7:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13912:6:33"}]}]},"name":"abi_decode_tuple_t_address_payablet_address_payable_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13606:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13617:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13629:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13637:6:33","type":""}],"src":"13534:401:33"},{"body":{"nodeType":"YulBlock","src":"14046:214:33","statements":[{"body":{"nodeType":"YulBlock","src":"14092:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14101:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14104:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14094:6:33"},"nodeType":"YulFunctionCall","src":"14094:12:33"},"nodeType":"YulExpressionStatement","src":"14094:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14067:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"14076:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14063:3:33"},"nodeType":"YulFunctionCall","src":"14063:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"14088:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14059:3:33"},"nodeType":"YulFunctionCall","src":"14059:32:33"},"nodeType":"YulIf","src":"14056:52:33"},{"nodeType":"YulVariableDeclaration","src":"14117:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14136:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14130:5:33"},"nodeType":"YulFunctionCall","src":"14130:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14121:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14180:5:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"14155:24:33"},"nodeType":"YulFunctionCall","src":"14155:31:33"},"nodeType":"YulExpressionStatement","src":"14155:31:33"},{"nodeType":"YulAssignment","src":"14195:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"14205:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14195:6:33"}]},{"nodeType":"YulAssignment","src":"14219:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14239:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"14250:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14235:3:33"},"nodeType":"YulFunctionCall","src":"14235:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14229:5:33"},"nodeType":"YulFunctionCall","src":"14229:25:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14219:6:33"}]}]},"name":"abi_decode_tuple_t_address_payablet_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14004:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14015:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14027:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14035:6:33","type":""}],"src":"13940:320:33"},{"body":{"nodeType":"YulBlock","src":"14430:1013:33","statements":[{"body":{"nodeType":"YulBlock","src":"14477:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14486:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14489:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14479:6:33"},"nodeType":"YulFunctionCall","src":"14479:12:33"},"nodeType":"YulExpressionStatement","src":"14479:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14451:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"14460:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14447:3:33"},"nodeType":"YulFunctionCall","src":"14447:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"14472:3:33","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14443:3:33"},"nodeType":"YulFunctionCall","src":"14443:33:33"},"nodeType":"YulIf","src":"14440:53:33"},{"nodeType":"YulAssignment","src":"14502:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14518:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14512:5:33"},"nodeType":"YulFunctionCall","src":"14512:16:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14502:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"14537:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"14547:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14541:2:33","type":""}]},{"nodeType":"YulAssignment","src":"14558:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14578:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14589:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14574:3:33"},"nodeType":"YulFunctionCall","src":"14574:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14568:5:33"},"nodeType":"YulFunctionCall","src":"14568:25:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14558:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"14602:39:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14626:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"14637:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14622:3:33"},"nodeType":"YulFunctionCall","src":"14622:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14616:5:33"},"nodeType":"YulFunctionCall","src":"14616:25:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14606:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"14684:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14693:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14696:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14686:6:33"},"nodeType":"YulFunctionCall","src":"14686:12:33"},"nodeType":"YulExpressionStatement","src":"14686:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14656:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"14664:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14653:2:33"},"nodeType":"YulFunctionCall","src":"14653:30:33"},"nodeType":"YulIf","src":"14650:50:33"},{"nodeType":"YulVariableDeclaration","src":"14709:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14723:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"14734:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14719:3:33"},"nodeType":"YulFunctionCall","src":"14719:22:33"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"14713:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"14789:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14798:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14801:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14791:6:33"},"nodeType":"YulFunctionCall","src":"14791:12:33"},"nodeType":"YulExpressionStatement","src":"14791:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"14768:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"14772:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14764:3:33"},"nodeType":"YulFunctionCall","src":"14764:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14779:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14760:3:33"},"nodeType":"YulFunctionCall","src":"14760:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14753:6:33"},"nodeType":"YulFunctionCall","src":"14753:35:33"},"nodeType":"YulIf","src":"14750:55:33"},{"nodeType":"YulVariableDeclaration","src":"14814:19:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"14830:2:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14824:5:33"},"nodeType":"YulFunctionCall","src":"14824:9:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"14818:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14842:69:33","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"14907:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"14869:37:33"},"nodeType":"YulFunctionCall","src":"14869:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"14853:15:33"},"nodeType":"YulFunctionCall","src":"14853:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"14846:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14920:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"14933:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"14924:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"14952:3:33"},{"name":"_3","nodeType":"YulIdentifier","src":"14957:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14945:6:33"},"nodeType":"YulFunctionCall","src":"14945:15:33"},"nodeType":"YulExpressionStatement","src":"14945:15:33"},{"nodeType":"YulAssignment","src":"14969:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"14980:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"14985:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14976:3:33"},"nodeType":"YulFunctionCall","src":"14976:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"14969:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"14997:42:33","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15019:2:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15027:1:33","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"15030:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15023:3:33"},"nodeType":"YulFunctionCall","src":"15023:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15015:3:33"},"nodeType":"YulFunctionCall","src":"15015:19:33"},{"name":"_1","nodeType":"YulIdentifier","src":"15036:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15011:3:33"},"nodeType":"YulFunctionCall","src":"15011:28:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"15001:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"15071:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15080:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15083:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15073:6:33"},"nodeType":"YulFunctionCall","src":"15073:12:33"},"nodeType":"YulExpressionStatement","src":"15073:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"15054:6:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15062:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15051:2:33"},"nodeType":"YulFunctionCall","src":"15051:19:33"},"nodeType":"YulIf","src":"15048:39:33"},{"nodeType":"YulVariableDeclaration","src":"15096:22:33","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"15111:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"15115:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15107:3:33"},"nodeType":"YulFunctionCall","src":"15107:11:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"15100:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"15183:154:33","statements":[{"nodeType":"YulVariableDeclaration","src":"15197:23:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15216:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15210:5:33"},"nodeType":"YulFunctionCall","src":"15210:10:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15201:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15258:5:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"15233:24:33"},"nodeType":"YulFunctionCall","src":"15233:31:33"},"nodeType":"YulExpressionStatement","src":"15233:31:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"15284:3:33"},{"name":"value","nodeType":"YulIdentifier","src":"15289:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15277:6:33"},"nodeType":"YulFunctionCall","src":"15277:18:33"},"nodeType":"YulExpressionStatement","src":"15277:18:33"},{"nodeType":"YulAssignment","src":"15308:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"15319:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"15324:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15315:3:33"},"nodeType":"YulFunctionCall","src":"15315:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"15308:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15138:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"15143:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15135:2:33"},"nodeType":"YulFunctionCall","src":"15135:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15151:23:33","statements":[{"nodeType":"YulAssignment","src":"15153:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15164:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"15169:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15160:3:33"},"nodeType":"YulFunctionCall","src":"15160:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"15153:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"15131:3:33","statements":[]},"src":"15127:210:33"},{"nodeType":"YulAssignment","src":"15346:15:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"15356:5:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15346:6:33"}]},{"nodeType":"YulAssignment","src":"15370:67:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15422:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"15433:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15418:3:33"},"nodeType":"YulFunctionCall","src":"15418:18:33"}],"functionName":{"name":"abi_decode_address_payable_fromMemory","nodeType":"YulIdentifier","src":"15380:37:33"},"nodeType":"YulFunctionCall","src":"15380:57:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"15370:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_array$_t_address_$dyn_memory_ptrt_address_payable_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14372:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14383:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14395:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14403:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14411:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14419:6:33","type":""}],"src":"14265:1178:33"},{"body":{"nodeType":"YulBlock","src":"15501:205:33","statements":[{"nodeType":"YulVariableDeclaration","src":"15511:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"15520:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"15515:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"15580:63:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"15605:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"15610:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15601:3:33"},"nodeType":"YulFunctionCall","src":"15601:11:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15624:3:33"},{"name":"i","nodeType":"YulIdentifier","src":"15629:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15620:3:33"},"nodeType":"YulFunctionCall","src":"15620:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15614:5:33"},"nodeType":"YulFunctionCall","src":"15614:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15594:6:33"},"nodeType":"YulFunctionCall","src":"15594:39:33"},"nodeType":"YulExpressionStatement","src":"15594:39:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15541:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"15544:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15538:2:33"},"nodeType":"YulFunctionCall","src":"15538:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15552:19:33","statements":[{"nodeType":"YulAssignment","src":"15554:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15563:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"15566:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15559:3:33"},"nodeType":"YulFunctionCall","src":"15559:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"15554:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"15534:3:33","statements":[]},"src":"15530:113:33"},{"body":{"nodeType":"YulBlock","src":"15669:31:33","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"15682:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"15687:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15678:3:33"},"nodeType":"YulFunctionCall","src":"15678:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"15696:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15671:6:33"},"nodeType":"YulFunctionCall","src":"15671:27:33"},"nodeType":"YulExpressionStatement","src":"15671:27:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15658:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"15661:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15655:2:33"},"nodeType":"YulFunctionCall","src":"15655:13:33"},"nodeType":"YulIf","src":"15652:48:33"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"15479:3:33","type":""},{"name":"dst","nodeType":"YulTypedName","src":"15484:3:33","type":""},{"name":"length","nodeType":"YulTypedName","src":"15489:6:33","type":""}],"src":"15448:258:33"},{"body":{"nodeType":"YulBlock","src":"15774:365:33","statements":[{"body":{"nodeType":"YulBlock","src":"15823:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15832:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15835:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15825:6:33"},"nodeType":"YulFunctionCall","src":"15825:12:33"},"nodeType":"YulExpressionStatement","src":"15825:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15802:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"15810:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15798:3:33"},"nodeType":"YulFunctionCall","src":"15798:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"15817:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15794:3:33"},"nodeType":"YulFunctionCall","src":"15794:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15787:6:33"},"nodeType":"YulFunctionCall","src":"15787:35:33"},"nodeType":"YulIf","src":"15784:55:33"},{"nodeType":"YulVariableDeclaration","src":"15848:23:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15864:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15858:5:33"},"nodeType":"YulFunctionCall","src":"15858:13:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15852:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15880:63:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"15939:2:33"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"15911:27:33"},"nodeType":"YulFunctionCall","src":"15911:31:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"15895:15:33"},"nodeType":"YulFunctionCall","src":"15895:48:33"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"15884:7:33","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"15959:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"15968:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15952:6:33"},"nodeType":"YulFunctionCall","src":"15952:19:33"},"nodeType":"YulExpressionStatement","src":"15952:19:33"},{"body":{"nodeType":"YulBlock","src":"16019:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16028:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16031:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16021:6:33"},"nodeType":"YulFunctionCall","src":"16021:12:33"},"nodeType":"YulExpressionStatement","src":"16021:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15994:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"16002:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15990:3:33"},"nodeType":"YulFunctionCall","src":"15990:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"16007:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15986:3:33"},"nodeType":"YulFunctionCall","src":"15986:26:33"},{"name":"end","nodeType":"YulIdentifier","src":"16014:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15983:2:33"},"nodeType":"YulFunctionCall","src":"15983:35:33"},"nodeType":"YulIf","src":"15980:55:33"},{"expression":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16070:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"16078:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16066:3:33"},"nodeType":"YulFunctionCall","src":"16066:17:33"},{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"16089:7:33"},{"kind":"number","nodeType":"YulLiteral","src":"16098:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16085:3:33"},"nodeType":"YulFunctionCall","src":"16085:18:33"},{"name":"_1","nodeType":"YulIdentifier","src":"16105:2:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"16044:21:33"},"nodeType":"YulFunctionCall","src":"16044:64:33"},"nodeType":"YulExpressionStatement","src":"16044:64:33"},{"nodeType":"YulAssignment","src":"16117:16:33","value":{"name":"array_1","nodeType":"YulIdentifier","src":"16126:7:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"16117:5:33"}]}]},"name":"abi_decode_bytes_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"15748:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"15756:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"15764:5:33","type":""}],"src":"15711:428:33"},{"body":{"nodeType":"YulBlock","src":"16259:2141:33","statements":[{"nodeType":"YulVariableDeclaration","src":"16269:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"16279:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16273:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"16326:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16335:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16338:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16328:6:33"},"nodeType":"YulFunctionCall","src":"16328:12:33"},"nodeType":"YulExpressionStatement","src":"16328:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16301:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"16310:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16297:3:33"},"nodeType":"YulFunctionCall","src":"16297:23:33"},{"name":"_1","nodeType":"YulIdentifier","src":"16322:2:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16293:3:33"},"nodeType":"YulFunctionCall","src":"16293:32:33"},"nodeType":"YulIf","src":"16290:52:33"},{"nodeType":"YulVariableDeclaration","src":"16351:30:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16371:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16365:5:33"},"nodeType":"YulFunctionCall","src":"16365:16:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16355:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16390:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"16400:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"16394:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"16445:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16454:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16457:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16447:6:33"},"nodeType":"YulFunctionCall","src":"16447:12:33"},"nodeType":"YulExpressionStatement","src":"16447:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16433:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"16441:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16430:2:33"},"nodeType":"YulFunctionCall","src":"16430:14:33"},"nodeType":"YulIf","src":"16427:34:33"},{"nodeType":"YulVariableDeclaration","src":"16470:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16484:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"16495:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16480:3:33"},"nodeType":"YulFunctionCall","src":"16480:22:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"16474:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"16542:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16551:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16554:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16544:6:33"},"nodeType":"YulFunctionCall","src":"16544:12:33"},"nodeType":"YulExpressionStatement","src":"16544:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16522:7:33"},{"name":"_3","nodeType":"YulIdentifier","src":"16531:2:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16518:3:33"},"nodeType":"YulFunctionCall","src":"16518:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"16536:4:33","type":"","value":"0x80"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16514:3:33"},"nodeType":"YulFunctionCall","src":"16514:27:33"},"nodeType":"YulIf","src":"16511:47:33"},{"nodeType":"YulVariableDeclaration","src":"16567:35:33","value":{"arguments":[],"functionName":{"name":"allocate_memory_6844","nodeType":"YulIdentifier","src":"16580:20:33"},"nodeType":"YulFunctionCall","src":"16580:22:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"16571:5:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16611:24:33","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"16632:2:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16626:5:33"},"nodeType":"YulFunctionCall","src":"16626:9:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"16615:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"16669:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"16644:24:33"},"nodeType":"YulFunctionCall","src":"16644:33:33"},"nodeType":"YulExpressionStatement","src":"16644:33:33"},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16693:5:33"},{"name":"value_1","nodeType":"YulIdentifier","src":"16700:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16686:6:33"},"nodeType":"YulFunctionCall","src":"16686:22:33"},"nodeType":"YulExpressionStatement","src":"16686:22:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16728:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"16735:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16724:3:33"},"nodeType":"YulFunctionCall","src":"16724:14:33"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"16750:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"16754:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16746:3:33"},"nodeType":"YulFunctionCall","src":"16746:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16740:5:33"},"nodeType":"YulFunctionCall","src":"16740:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16717:6:33"},"nodeType":"YulFunctionCall","src":"16717:42:33"},"nodeType":"YulExpressionStatement","src":"16717:42:33"},{"nodeType":"YulVariableDeclaration","src":"16768:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"16778:2:33","type":"","value":"64"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"16772:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16800:5:33"},{"name":"_4","nodeType":"YulIdentifier","src":"16807:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16796:3:33"},"nodeType":"YulFunctionCall","src":"16796:14:33"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"16822:2:33"},{"name":"_4","nodeType":"YulIdentifier","src":"16826:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16818:3:33"},"nodeType":"YulFunctionCall","src":"16818:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16812:5:33"},"nodeType":"YulFunctionCall","src":"16812:18:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16789:6:33"},"nodeType":"YulFunctionCall","src":"16789:42:33"},"nodeType":"YulExpressionStatement","src":"16789:42:33"},{"nodeType":"YulVariableDeclaration","src":"16840:34:33","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"16866:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"16870:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16862:3:33"},"nodeType":"YulFunctionCall","src":"16862:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16856:5:33"},"nodeType":"YulFunctionCall","src":"16856:18:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"16844:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"16903:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16912:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16915:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16905:6:33"},"nodeType":"YulFunctionCall","src":"16905:12:33"},"nodeType":"YulExpressionStatement","src":"16905:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"16889:8:33"},{"name":"_2","nodeType":"YulIdentifier","src":"16899:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16886:2:33"},"nodeType":"YulFunctionCall","src":"16886:16:33"},"nodeType":"YulIf","src":"16883:36:33"},{"nodeType":"YulVariableDeclaration","src":"16928:27:33","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"16942:2:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"16946:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16938:3:33"},"nodeType":"YulFunctionCall","src":"16938:17:33"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"16932:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"17003:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17012:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17015:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17005:6:33"},"nodeType":"YulFunctionCall","src":"17005:12:33"},"nodeType":"YulExpressionStatement","src":"17005:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"16982:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"16986:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16978:3:33"},"nodeType":"YulFunctionCall","src":"16978:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16993:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16974:3:33"},"nodeType":"YulFunctionCall","src":"16974:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16967:6:33"},"nodeType":"YulFunctionCall","src":"16967:35:33"},"nodeType":"YulIf","src":"16964:55:33"},{"nodeType":"YulVariableDeclaration","src":"17028:19:33","value":{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"17044:2:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17038:5:33"},"nodeType":"YulFunctionCall","src":"17038:9:33"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"17032:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17056:69:33","value":{"arguments":[{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"17121:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"17083:37:33"},"nodeType":"YulFunctionCall","src":"17083:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"17067:15:33"},"nodeType":"YulFunctionCall","src":"17067:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"17060:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17134:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"17147:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"17138:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17166:3:33"},{"name":"_6","nodeType":"YulIdentifier","src":"17171:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17159:6:33"},"nodeType":"YulFunctionCall","src":"17159:15:33"},"nodeType":"YulExpressionStatement","src":"17159:15:33"},{"nodeType":"YulAssignment","src":"17183:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17194:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"17199:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17190:3:33"},"nodeType":"YulFunctionCall","src":"17190:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"17183:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"17211:42:33","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"17233:2:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17241:1:33","type":"","value":"5"},{"name":"_6","nodeType":"YulIdentifier","src":"17244:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17237:3:33"},"nodeType":"YulFunctionCall","src":"17237:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17229:3:33"},"nodeType":"YulFunctionCall","src":"17229:19:33"},{"name":"_1","nodeType":"YulIdentifier","src":"17250:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17225:3:33"},"nodeType":"YulFunctionCall","src":"17225:28:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"17215:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"17285:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17294:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17297:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17287:6:33"},"nodeType":"YulFunctionCall","src":"17287:12:33"},"nodeType":"YulExpressionStatement","src":"17287:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"17268:6:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17276:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17265:2:33"},"nodeType":"YulFunctionCall","src":"17265:19:33"},"nodeType":"YulIf","src":"17262:39:33"},{"nodeType":"YulVariableDeclaration","src":"17310:22:33","value":{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"17325:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"17329:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17321:3:33"},"nodeType":"YulFunctionCall","src":"17321:11:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"17314:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"17397:935:33","statements":[{"nodeType":"YulVariableDeclaration","src":"17411:29:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17436:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17430:5:33"},"nodeType":"YulFunctionCall","src":"17430:10:33"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"17415:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"17488:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"17506:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"17516:1:33","type":"","value":"0"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"17510:2:33","type":""}]},{"expression":{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"17541:2:33"},{"name":"_7","nodeType":"YulIdentifier","src":"17545:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17534:6:33"},"nodeType":"YulFunctionCall","src":"17534:14:33"},"nodeType":"YulExpressionStatement","src":"17534:14:33"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"17459:11:33"},{"name":"_2","nodeType":"YulIdentifier","src":"17472:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17456:2:33"},"nodeType":"YulFunctionCall","src":"17456:19:33"},"nodeType":"YulIf","src":"17453:109:33"},{"nodeType":"YulVariableDeclaration","src":"17575:30:33","value":{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"17589:2:33"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"17593:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17585:3:33"},"nodeType":"YulFunctionCall","src":"17585:20:33"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"17579:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"17732:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"17750:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"17760:1:33","type":"","value":"0"},"variables":[{"name":"_9","nodeType":"YulTypedName","src":"17754:2:33","type":""}]},{"expression":{"arguments":[{"name":"_9","nodeType":"YulIdentifier","src":"17785:2:33"},{"name":"_9","nodeType":"YulIdentifier","src":"17789:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17778:6:33"},"nodeType":"YulFunctionCall","src":"17778:14:33"},"nodeType":"YulExpressionStatement","src":"17778:14:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17633:7:33"},{"name":"_8","nodeType":"YulIdentifier","src":"17642:2:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17629:3:33"},"nodeType":"YulFunctionCall","src":"17629:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"17647:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17625:3:33"},"nodeType":"YulFunctionCall","src":"17625:89:33"},{"name":"_4","nodeType":"YulIdentifier","src":"17716:2:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17621:3:33"},"nodeType":"YulFunctionCall","src":"17621:98:33"},"nodeType":"YulIf","src":"17618:188:33"},{"nodeType":"YulVariableDeclaration","src":"17819:37:33","value":{"arguments":[],"functionName":{"name":"allocate_memory_6845","nodeType":"YulIdentifier","src":"17834:20:33"},"nodeType":"YulFunctionCall","src":"17834:22:33"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"17823:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17869:33:33","value":{"arguments":[{"arguments":[{"name":"_8","nodeType":"YulIdentifier","src":"17894:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"17898:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17890:3:33"},"nodeType":"YulFunctionCall","src":"17890:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17884:5:33"},"nodeType":"YulFunctionCall","src":"17884:18:33"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"17873:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"17940:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"17915:24:33"},"nodeType":"YulFunctionCall","src":"17915:33:33"},"nodeType":"YulExpressionStatement","src":"17915:33:33"},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"17968:7:33"},{"name":"value_3","nodeType":"YulIdentifier","src":"17977:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17961:6:33"},"nodeType":"YulFunctionCall","src":"17961:24:33"},"nodeType":"YulExpressionStatement","src":"17961:24:33"},{"nodeType":"YulVariableDeclaration","src":"17998:34:33","value":{"arguments":[{"arguments":[{"name":"_8","nodeType":"YulIdentifier","src":"18024:2:33"},{"name":"_4","nodeType":"YulIdentifier","src":"18028:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18020:3:33"},"nodeType":"YulFunctionCall","src":"18020:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18014:5:33"},"nodeType":"YulFunctionCall","src":"18014:18:33"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"18002:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"18077:77:33","statements":[{"nodeType":"YulVariableDeclaration","src":"18095:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"18106:1:33","type":"","value":"0"},"variables":[{"name":"_10","nodeType":"YulTypedName","src":"18099:3:33","type":""}]},{"expression":{"arguments":[{"name":"_10","nodeType":"YulIdentifier","src":"18131:3:33"},{"name":"_10","nodeType":"YulIdentifier","src":"18136:3:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18124:6:33"},"nodeType":"YulFunctionCall","src":"18124:16:33"},"nodeType":"YulExpressionStatement","src":"18124:16:33"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"18051:8:33"},{"name":"_2","nodeType":"YulIdentifier","src":"18061:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18048:2:33"},"nodeType":"YulFunctionCall","src":"18048:16:33"},"nodeType":"YulIf","src":"18045:109:33"},{"expression":{"arguments":[{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"18178:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"18187:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18174:3:33"},"nodeType":"YulFunctionCall","src":"18174:16:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"_8","nodeType":"YulIdentifier","src":"18228:2:33"},{"name":"offset_2","nodeType":"YulIdentifier","src":"18232:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18224:3:33"},"nodeType":"YulFunctionCall","src":"18224:17:33"},{"name":"_1","nodeType":"YulIdentifier","src":"18243:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18220:3:33"},"nodeType":"YulFunctionCall","src":"18220:26:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18248:7:33"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"18192:27:33"},"nodeType":"YulFunctionCall","src":"18192:64:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18167:6:33"},"nodeType":"YulFunctionCall","src":"18167:90:33"},"nodeType":"YulExpressionStatement","src":"18167:90:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18277:3:33"},{"name":"value_2","nodeType":"YulIdentifier","src":"18282:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18270:6:33"},"nodeType":"YulFunctionCall","src":"18270:20:33"},"nodeType":"YulExpressionStatement","src":"18270:20:33"},{"nodeType":"YulAssignment","src":"18303:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18314:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"18319:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18310:3:33"},"nodeType":"YulFunctionCall","src":"18310:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"18303:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17352:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"17357:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17349:2:33"},"nodeType":"YulFunctionCall","src":"17349:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17365:23:33","statements":[{"nodeType":"YulAssignment","src":"17367:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17378:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"17383:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17374:3:33"},"nodeType":"YulFunctionCall","src":"17374:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"17367:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"17345:3:33","statements":[]},"src":"17341:991:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18352:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"18359:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18348:3:33"},"nodeType":"YulFunctionCall","src":"18348:14:33"},{"name":"dst_1","nodeType":"YulIdentifier","src":"18364:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18341:6:33"},"nodeType":"YulFunctionCall","src":"18341:29:33"},"nodeType":"YulExpressionStatement","src":"18341:29:33"},{"nodeType":"YulAssignment","src":"18379:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"18389:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18379:6:33"}]}]},"name":"abi_decode_tuple_t_struct$_ExactInputParams_$4494_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16225:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16236:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16248:6:33","type":""}],"src":"16144:2256:33"},{"body":{"nodeType":"YulBlock","src":"18494:1913:33","statements":[{"body":{"nodeType":"YulBlock","src":"18543:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18552:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18555:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18545:6:33"},"nodeType":"YulFunctionCall","src":"18545:12:33"},"nodeType":"YulExpressionStatement","src":"18545:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18522:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"18530:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18518:3:33"},"nodeType":"YulFunctionCall","src":"18518:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"18537:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18514:3:33"},"nodeType":"YulFunctionCall","src":"18514:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18507:6:33"},"nodeType":"YulFunctionCall","src":"18507:35:33"},"nodeType":"YulIf","src":"18504:55:33"},{"nodeType":"YulVariableDeclaration","src":"18568:23:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18584:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18578:5:33"},"nodeType":"YulFunctionCall","src":"18578:13:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"18572:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18600:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"18610:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"18604:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18623:69:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"18688:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"18650:37:33"},"nodeType":"YulFunctionCall","src":"18650:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"18634:15:33"},"nodeType":"YulFunctionCall","src":"18634:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"18627:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18701:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"18714:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"18705:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18733:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"18738:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18726:6:33"},"nodeType":"YulFunctionCall","src":"18726:15:33"},"nodeType":"YulExpressionStatement","src":"18726:15:33"},{"nodeType":"YulAssignment","src":"18750:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18761:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"18766:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18757:3:33"},"nodeType":"YulFunctionCall","src":"18757:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"18750:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"18778:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18800:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18812:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"18815:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18808:3:33"},"nodeType":"YulFunctionCall","src":"18808:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18796:3:33"},"nodeType":"YulFunctionCall","src":"18796:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"18821:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18792:3:33"},"nodeType":"YulFunctionCall","src":"18792:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"18782:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"18852:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18861:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18864:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18854:6:33"},"nodeType":"YulFunctionCall","src":"18854:12:33"},"nodeType":"YulExpressionStatement","src":"18854:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"18839:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"18847:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18836:2:33"},"nodeType":"YulFunctionCall","src":"18836:15:33"},"nodeType":"YulIf","src":"18833:35:33"},{"nodeType":"YulVariableDeclaration","src":"18877:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18892:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"18900:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18888:3:33"},"nodeType":"YulFunctionCall","src":"18888:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"18881:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"18968:1410:33","statements":[{"nodeType":"YulVariableDeclaration","src":"18982:29:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19007:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19001:5:33"},"nodeType":"YulFunctionCall","src":"19001:10:33"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"18986:11:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19024:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"19034:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"19028:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"19100:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"19118:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"19128:1:33","type":"","value":"0"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"19122:2:33","type":""}]},{"expression":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"19153:2:33"},{"name":"_4","nodeType":"YulIdentifier","src":"19157:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19146:6:33"},"nodeType":"YulFunctionCall","src":"19146:14:33"},"nodeType":"YulExpressionStatement","src":"19146:14:33"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"19071:11:33"},{"name":"_3","nodeType":"YulIdentifier","src":"19084:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19068:2:33"},"nodeType":"YulFunctionCall","src":"19068:19:33"},"nodeType":"YulIf","src":"19065:109:33"},{"nodeType":"YulVariableDeclaration","src":"19187:34:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"19201:6:33"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"19209:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19197:3:33"},"nodeType":"YulFunctionCall","src":"19197:24:33"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"19191:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19234:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"19244:4:33","type":"","value":"0x80"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"19238:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"19371:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"19389:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"19399:1:33","type":"","value":"0"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"19393:2:33","type":""}]},{"expression":{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"19424:2:33"},{"name":"_7","nodeType":"YulIdentifier","src":"19428:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19417:6:33"},"nodeType":"YulFunctionCall","src":"19417:14:33"},"nodeType":"YulExpressionStatement","src":"19417:14:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"19276:3:33"},{"name":"_5","nodeType":"YulIdentifier","src":"19281:2:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19272:3:33"},"nodeType":"YulFunctionCall","src":"19272:12:33"},{"kind":"number","nodeType":"YulLiteral","src":"19286:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19268:3:33"},"nodeType":"YulFunctionCall","src":"19268:85:33"},{"name":"_6","nodeType":"YulIdentifier","src":"19355:2:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19264:3:33"},"nodeType":"YulFunctionCall","src":"19264:94:33"},"nodeType":"YulIf","src":"19261:184:33"},{"nodeType":"YulVariableDeclaration","src":"19458:35:33","value":{"arguments":[],"functionName":{"name":"allocate_memory_6844","nodeType":"YulIdentifier","src":"19471:20:33"},"nodeType":"YulFunctionCall","src":"19471:22:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"19462:5:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19506:33:33","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"19531:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"19535:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19527:3:33"},"nodeType":"YulFunctionCall","src":"19527:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19521:5:33"},"nodeType":"YulFunctionCall","src":"19521:18:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"19510:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"19577:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"19552:24:33"},"nodeType":"YulFunctionCall","src":"19552:33:33"},"nodeType":"YulExpressionStatement","src":"19552:33:33"},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19605:5:33"},{"name":"value_1","nodeType":"YulIdentifier","src":"19612:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19598:6:33"},"nodeType":"YulFunctionCall","src":"19598:22:33"},"nodeType":"YulExpressionStatement","src":"19598:22:33"},{"nodeType":"YulVariableDeclaration","src":"19633:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"19643:2:33","type":"","value":"64"},"variables":[{"name":"_8","nodeType":"YulTypedName","src":"19637:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19658:33:33","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"19683:2:33"},{"name":"_8","nodeType":"YulIdentifier","src":"19687:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19679:3:33"},"nodeType":"YulFunctionCall","src":"19679:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19673:5:33"},"nodeType":"YulFunctionCall","src":"19673:18:33"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"19662:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"19729:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"19704:24:33"},"nodeType":"YulFunctionCall","src":"19704:33:33"},"nodeType":"YulExpressionStatement","src":"19704:33:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19761:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"19768:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19757:3:33"},"nodeType":"YulFunctionCall","src":"19757:14:33"},{"name":"value_2","nodeType":"YulIdentifier","src":"19773:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19750:6:33"},"nodeType":"YulFunctionCall","src":"19750:31:33"},"nodeType":"YulExpressionStatement","src":"19750:31:33"},{"nodeType":"YulVariableDeclaration","src":"19794:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"19804:2:33","type":"","value":"96"},"variables":[{"name":"_9","nodeType":"YulTypedName","src":"19798:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19819:33:33","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"19844:2:33"},{"name":"_9","nodeType":"YulIdentifier","src":"19848:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19840:3:33"},"nodeType":"YulFunctionCall","src":"19840:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19834:5:33"},"nodeType":"YulFunctionCall","src":"19834:18:33"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"19823:7:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"19918:77:33","statements":[{"nodeType":"YulVariableDeclaration","src":"19936:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"19947:1:33","type":"","value":"0"},"variables":[{"name":"_10","nodeType":"YulTypedName","src":"19940:3:33","type":""}]},{"expression":{"arguments":[{"name":"_10","nodeType":"YulIdentifier","src":"19972:3:33"},{"name":"_10","nodeType":"YulIdentifier","src":"19977:3:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19965:6:33"},"nodeType":"YulFunctionCall","src":"19965:16:33"},"nodeType":"YulExpressionStatement","src":"19965:16:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"19878:7:33"},{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"19891:7:33"},{"name":"_3","nodeType":"YulIdentifier","src":"19900:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19887:3:33"},"nodeType":"YulFunctionCall","src":"19887:16:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19875:2:33"},"nodeType":"YulFunctionCall","src":"19875:29:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19868:6:33"},"nodeType":"YulFunctionCall","src":"19868:37:33"},"nodeType":"YulIf","src":"19865:130:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20019:5:33"},{"name":"_8","nodeType":"YulIdentifier","src":"20026:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20015:3:33"},"nodeType":"YulFunctionCall","src":"20015:14:33"},{"name":"value_3","nodeType":"YulIdentifier","src":"20031:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20008:6:33"},"nodeType":"YulFunctionCall","src":"20008:31:33"},"nodeType":"YulExpressionStatement","src":"20008:31:33"},{"nodeType":"YulVariableDeclaration","src":"20052:34:33","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"20078:2:33"},{"name":"_6","nodeType":"YulIdentifier","src":"20082:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20074:3:33"},"nodeType":"YulFunctionCall","src":"20074:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20068:5:33"},"nodeType":"YulFunctionCall","src":"20068:18:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"20056:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"20131:77:33","statements":[{"nodeType":"YulVariableDeclaration","src":"20149:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"20160:1:33","type":"","value":"0"},"variables":[{"name":"_11","nodeType":"YulTypedName","src":"20153:3:33","type":""}]},{"expression":{"arguments":[{"name":"_11","nodeType":"YulIdentifier","src":"20185:3:33"},{"name":"_11","nodeType":"YulIdentifier","src":"20190:3:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20178:6:33"},"nodeType":"YulFunctionCall","src":"20178:16:33"},"nodeType":"YulExpressionStatement","src":"20178:16:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"20105:8:33"},{"name":"_3","nodeType":"YulIdentifier","src":"20115:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20102:2:33"},"nodeType":"YulFunctionCall","src":"20102:16:33"},"nodeType":"YulIf","src":"20099:109:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20232:5:33"},{"name":"_9","nodeType":"YulIdentifier","src":"20239:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20228:3:33"},"nodeType":"YulFunctionCall","src":"20228:14:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"20280:2:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"20284:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20276:3:33"},"nodeType":"YulFunctionCall","src":"20276:17:33"},{"name":"_2","nodeType":"YulIdentifier","src":"20295:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20272:3:33"},"nodeType":"YulFunctionCall","src":"20272:26:33"},{"name":"end","nodeType":"YulIdentifier","src":"20300:3:33"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"20244:27:33"},"nodeType":"YulFunctionCall","src":"20244:60:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20221:6:33"},"nodeType":"YulFunctionCall","src":"20221:84:33"},"nodeType":"YulExpressionStatement","src":"20221:84:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"20325:3:33"},{"name":"value","nodeType":"YulIdentifier","src":"20330:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20318:6:33"},"nodeType":"YulFunctionCall","src":"20318:18:33"},"nodeType":"YulExpressionStatement","src":"20318:18:33"},{"nodeType":"YulAssignment","src":"20349:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"20360:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"20365:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20356:3:33"},"nodeType":"YulFunctionCall","src":"20356:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"20349:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18923:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"18928:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18920:2:33"},"nodeType":"YulFunctionCall","src":"18920:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18936:23:33","statements":[{"nodeType":"YulAssignment","src":"18938:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18949:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"18954:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18945:3:33"},"nodeType":"YulFunctionCall","src":"18945:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"18938:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"18916:3:33","statements":[]},"src":"18912:1466:33"},{"nodeType":"YulAssignment","src":"20387:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"20396:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"20387:5:33"}]}]},"name":"abi_decode_array_struct_PercentagePath_dyn_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"18468:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"18476:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"18484:5:33","type":""}],"src":"18405:2002:33"},{"body":{"nodeType":"YulBlock","src":"20493:1193:33","statements":[{"body":{"nodeType":"YulBlock","src":"20542:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20551:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20554:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20544:6:33"},"nodeType":"YulFunctionCall","src":"20544:12:33"},"nodeType":"YulExpressionStatement","src":"20544:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20521:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"20529:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20517:3:33"},"nodeType":"YulFunctionCall","src":"20517:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"20536:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20513:3:33"},"nodeType":"YulFunctionCall","src":"20513:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20506:6:33"},"nodeType":"YulFunctionCall","src":"20506:35:33"},"nodeType":"YulIf","src":"20503:55:33"},{"nodeType":"YulVariableDeclaration","src":"20567:23:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20583:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20577:5:33"},"nodeType":"YulFunctionCall","src":"20577:13:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"20571:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20599:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"20609:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"20603:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20622:69:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"20687:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"20649:37:33"},"nodeType":"YulFunctionCall","src":"20649:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"20633:15:33"},"nodeType":"YulFunctionCall","src":"20633:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"20626:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20700:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"20713:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"20704:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"20732:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"20737:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20725:6:33"},"nodeType":"YulFunctionCall","src":"20725:15:33"},"nodeType":"YulExpressionStatement","src":"20725:15:33"},{"nodeType":"YulAssignment","src":"20749:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"20760:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"20765:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20756:3:33"},"nodeType":"YulFunctionCall","src":"20756:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"20749:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"20777:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20799:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20811:1:33","type":"","value":"7"},{"name":"_1","nodeType":"YulIdentifier","src":"20814:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20807:3:33"},"nodeType":"YulFunctionCall","src":"20807:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20795:3:33"},"nodeType":"YulFunctionCall","src":"20795:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"20820:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20791:3:33"},"nodeType":"YulFunctionCall","src":"20791:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"20781:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"20851:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20860:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20863:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20853:6:33"},"nodeType":"YulFunctionCall","src":"20853:12:33"},"nodeType":"YulExpressionStatement","src":"20853:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"20838:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"20846:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20835:2:33"},"nodeType":"YulFunctionCall","src":"20835:15:33"},"nodeType":"YulIf","src":"20832:35:33"},{"nodeType":"YulVariableDeclaration","src":"20876:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20891:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"20899:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20887:3:33"},"nodeType":"YulFunctionCall","src":"20887:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"20880:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"20969:688:33","statements":[{"body":{"nodeType":"YulBlock","src":"21023:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"21041:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"21051:1:33","type":"","value":"0"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"21045:2:33","type":""}]},{"expression":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"21076:2:33"},{"name":"_3","nodeType":"YulIdentifier","src":"21080:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21069:6:33"},"nodeType":"YulFunctionCall","src":"21069:14:33"},"nodeType":"YulExpressionStatement","src":"21069:14:33"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"20994:3:33"},{"name":"src","nodeType":"YulIdentifier","src":"20999:3:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20990:3:33"},"nodeType":"YulFunctionCall","src":"20990:13:33"},{"kind":"number","nodeType":"YulLiteral","src":"21005:4:33","type":"","value":"0x80"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20986:3:33"},"nodeType":"YulFunctionCall","src":"20986:24:33"},"nodeType":"YulIf","src":"20983:114:33"},{"nodeType":"YulVariableDeclaration","src":"21110:35:33","value":{"arguments":[],"functionName":{"name":"allocate_memory_6844","nodeType":"YulIdentifier","src":"21123:20:33"},"nodeType":"YulFunctionCall","src":"21123:22:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"21114:5:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21158:25:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"21179:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21173:5:33"},"nodeType":"YulFunctionCall","src":"21173:10:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"21162:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"21221:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"21196:24:33"},"nodeType":"YulFunctionCall","src":"21196:33:33"},"nodeType":"YulExpressionStatement","src":"21196:33:33"},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21249:5:33"},{"name":"value_1","nodeType":"YulIdentifier","src":"21256:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21242:6:33"},"nodeType":"YulFunctionCall","src":"21242:22:33"},"nodeType":"YulExpressionStatement","src":"21242:22:33"},{"nodeType":"YulVariableDeclaration","src":"21277:34:33","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"21302:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"21307:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21298:3:33"},"nodeType":"YulFunctionCall","src":"21298:12:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21292:5:33"},"nodeType":"YulFunctionCall","src":"21292:19:33"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"21281:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"21349:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"21324:24:33"},"nodeType":"YulFunctionCall","src":"21324:33:33"},"nodeType":"YulExpressionStatement","src":"21324:33:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21381:5:33"},{"name":"_2","nodeType":"YulIdentifier","src":"21388:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21377:3:33"},"nodeType":"YulFunctionCall","src":"21377:14:33"},{"name":"value_2","nodeType":"YulIdentifier","src":"21393:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21370:6:33"},"nodeType":"YulFunctionCall","src":"21370:31:33"},"nodeType":"YulExpressionStatement","src":"21370:31:33"},{"nodeType":"YulVariableDeclaration","src":"21414:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"21424:2:33","type":"","value":"64"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"21418:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21450:5:33"},{"name":"_4","nodeType":"YulIdentifier","src":"21457:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21446:3:33"},"nodeType":"YulFunctionCall","src":"21446:14:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"21493:3:33"},{"name":"_4","nodeType":"YulIdentifier","src":"21498:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21489:3:33"},"nodeType":"YulFunctionCall","src":"21489:12:33"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"21462:26:33"},"nodeType":"YulFunctionCall","src":"21462:40:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21439:6:33"},"nodeType":"YulFunctionCall","src":"21439:64:33"},"nodeType":"YulExpressionStatement","src":"21439:64:33"},{"nodeType":"YulVariableDeclaration","src":"21516:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"21526:2:33","type":"","value":"96"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"21520:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21552:5:33"},{"name":"_5","nodeType":"YulIdentifier","src":"21559:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21548:3:33"},"nodeType":"YulFunctionCall","src":"21548:14:33"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"21574:3:33"},{"name":"_5","nodeType":"YulIdentifier","src":"21579:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21570:3:33"},"nodeType":"YulFunctionCall","src":"21570:12:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21564:5:33"},"nodeType":"YulFunctionCall","src":"21564:19:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21541:6:33"},"nodeType":"YulFunctionCall","src":"21541:43:33"},"nodeType":"YulExpressionStatement","src":"21541:43:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"21604:3:33"},{"name":"value","nodeType":"YulIdentifier","src":"21609:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21597:6:33"},"nodeType":"YulFunctionCall","src":"21597:18:33"},"nodeType":"YulExpressionStatement","src":"21597:18:33"},{"nodeType":"YulAssignment","src":"21628:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"21639:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"21644:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21635:3:33"},"nodeType":"YulFunctionCall","src":"21635:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"21628:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"20922:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"20927:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"20919:2:33"},"nodeType":"YulFunctionCall","src":"20919:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"20935:25:33","statements":[{"nodeType":"YulAssignment","src":"20937:21:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"20948:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"20953:4:33","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20944:3:33"},"nodeType":"YulFunctionCall","src":"20944:14:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"20937:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"20915:3:33","statements":[]},"src":"20911:746:33"},{"nodeType":"YulAssignment","src":"21666:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"21675:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"21666:5:33"}]}]},"name":"abi_decode_array_struct_Output_dyn_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"20467:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"20475:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"20483:5:33","type":""}],"src":"20412:1274:33"},{"body":{"nodeType":"YulBlock","src":"21807:2430:33","statements":[{"nodeType":"YulVariableDeclaration","src":"21817:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"21827:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21821:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"21874:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21883:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21886:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21876:6:33"},"nodeType":"YulFunctionCall","src":"21876:12:33"},"nodeType":"YulExpressionStatement","src":"21876:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21849:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"21858:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21845:3:33"},"nodeType":"YulFunctionCall","src":"21845:23:33"},{"name":"_1","nodeType":"YulIdentifier","src":"21870:2:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21841:3:33"},"nodeType":"YulFunctionCall","src":"21841:32:33"},"nodeType":"YulIf","src":"21838:52:33"},{"nodeType":"YulVariableDeclaration","src":"21899:30:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21919:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21913:5:33"},"nodeType":"YulFunctionCall","src":"21913:16:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21903:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21938:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"21948:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"21942:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"21993:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22002:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22005:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21995:6:33"},"nodeType":"YulFunctionCall","src":"21995:12:33"},"nodeType":"YulExpressionStatement","src":"21995:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"21981:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"21989:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21978:2:33"},"nodeType":"YulFunctionCall","src":"21978:14:33"},"nodeType":"YulIf","src":"21975:34:33"},{"nodeType":"YulVariableDeclaration","src":"22018:32:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22032:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"22043:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22028:3:33"},"nodeType":"YulFunctionCall","src":"22028:22:33"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"22022:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"22090:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22099:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22102:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22092:6:33"},"nodeType":"YulFunctionCall","src":"22092:12:33"},"nodeType":"YulExpressionStatement","src":"22092:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22070:7:33"},{"name":"_3","nodeType":"YulIdentifier","src":"22079:2:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22066:3:33"},"nodeType":"YulFunctionCall","src":"22066:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"22084:4:33","type":"","value":"0x60"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22062:3:33"},"nodeType":"YulFunctionCall","src":"22062:27:33"},"nodeType":"YulIf","src":"22059:47:33"},{"nodeType":"YulVariableDeclaration","src":"22115:35:33","value":{"arguments":[],"functionName":{"name":"allocate_memory_6857","nodeType":"YulIdentifier","src":"22128:20:33"},"nodeType":"YulFunctionCall","src":"22128:22:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"22119:5:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22159:25:33","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"22181:2:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22175:5:33"},"nodeType":"YulFunctionCall","src":"22175:9:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"22163:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"22213:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22222:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22225:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22215:6:33"},"nodeType":"YulFunctionCall","src":"22215:12:33"},"nodeType":"YulExpressionStatement","src":"22215:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"22199:8:33"},{"name":"_2","nodeType":"YulIdentifier","src":"22209:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22196:2:33"},"nodeType":"YulFunctionCall","src":"22196:16:33"},"nodeType":"YulIf","src":"22193:36:33"},{"nodeType":"YulVariableDeclaration","src":"22238:27:33","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"22252:2:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"22256:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22248:3:33"},"nodeType":"YulFunctionCall","src":"22248:17:33"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"22242:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"22313:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22322:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22325:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22315:6:33"},"nodeType":"YulFunctionCall","src":"22315:12:33"},"nodeType":"YulExpressionStatement","src":"22315:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"22292:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"22296:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22288:3:33"},"nodeType":"YulFunctionCall","src":"22288:13:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22303:7:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22284:3:33"},"nodeType":"YulFunctionCall","src":"22284:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22277:6:33"},"nodeType":"YulFunctionCall","src":"22277:35:33"},"nodeType":"YulIf","src":"22274:55:33"},{"nodeType":"YulVariableDeclaration","src":"22338:19:33","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"22354:2:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22348:5:33"},"nodeType":"YulFunctionCall","src":"22348:9:33"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"22342:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22366:69:33","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"22431:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"22393:37:33"},"nodeType":"YulFunctionCall","src":"22393:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"22377:15:33"},"nodeType":"YulFunctionCall","src":"22377:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"22370:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22444:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"22457:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"22448:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"22476:3:33"},{"name":"_5","nodeType":"YulIdentifier","src":"22481:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22469:6:33"},"nodeType":"YulFunctionCall","src":"22469:15:33"},"nodeType":"YulExpressionStatement","src":"22469:15:33"},{"nodeType":"YulAssignment","src":"22493:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"22504:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"22509:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22500:3:33"},"nodeType":"YulFunctionCall","src":"22500:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"22493:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"22521:42:33","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"22543:2:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22551:1:33","type":"","value":"5"},{"name":"_5","nodeType":"YulIdentifier","src":"22554:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22547:3:33"},"nodeType":"YulFunctionCall","src":"22547:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22539:3:33"},"nodeType":"YulFunctionCall","src":"22539:19:33"},{"name":"_1","nodeType":"YulIdentifier","src":"22560:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22535:3:33"},"nodeType":"YulFunctionCall","src":"22535:28:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"22525:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"22595:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22604:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22607:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22597:6:33"},"nodeType":"YulFunctionCall","src":"22597:12:33"},"nodeType":"YulExpressionStatement","src":"22597:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"22578:6:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22586:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22575:2:33"},"nodeType":"YulFunctionCall","src":"22575:19:33"},"nodeType":"YulIf","src":"22572:39:33"},{"nodeType":"YulVariableDeclaration","src":"22620:22:33","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"22635:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"22639:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22631:3:33"},"nodeType":"YulFunctionCall","src":"22631:11:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"22624:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"22707:1075:33","statements":[{"nodeType":"YulVariableDeclaration","src":"22721:29:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22746:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22740:5:33"},"nodeType":"YulFunctionCall","src":"22740:10:33"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"22725:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"22786:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22795:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22798:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22788:6:33"},"nodeType":"YulFunctionCall","src":"22788:12:33"},"nodeType":"YulExpressionStatement","src":"22788:12:33"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"22769:11:33"},{"name":"_2","nodeType":"YulIdentifier","src":"22782:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22766:2:33"},"nodeType":"YulFunctionCall","src":"22766:19:33"},"nodeType":"YulIf","src":"22763:39:33"},{"nodeType":"YulVariableDeclaration","src":"22815:30:33","value":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"22829:2:33"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"22833:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22825:3:33"},"nodeType":"YulFunctionCall","src":"22825:20:33"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"22819:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"22962:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22971:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22974:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22964:6:33"},"nodeType":"YulFunctionCall","src":"22964:12:33"},"nodeType":"YulExpressionStatement","src":"22964:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22873:7:33"},{"name":"_6","nodeType":"YulIdentifier","src":"22882:2:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22869:3:33"},"nodeType":"YulFunctionCall","src":"22869:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"22887:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22865:3:33"},"nodeType":"YulFunctionCall","src":"22865:89:33"},{"kind":"number","nodeType":"YulLiteral","src":"22956:4:33","type":"","value":"0xa0"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22861:3:33"},"nodeType":"YulFunctionCall","src":"22861:100:33"},"nodeType":"YulIf","src":"22858:120:33"},{"nodeType":"YulVariableDeclaration","src":"22991:37:33","value":{"arguments":[],"functionName":{"name":"allocate_memory_6858","nodeType":"YulIdentifier","src":"23006:20:33"},"nodeType":"YulFunctionCall","src":"23006:22:33"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"22995:7:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23041:33:33","value":{"arguments":[{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"23066:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23070:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23062:3:33"},"nodeType":"YulFunctionCall","src":"23062:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23056:5:33"},"nodeType":"YulFunctionCall","src":"23056:18:33"},"variables":[{"name":"value_2","nodeType":"YulTypedName","src":"23045:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_2","nodeType":"YulIdentifier","src":"23112:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"23087:24:33"},"nodeType":"YulFunctionCall","src":"23087:33:33"},"nodeType":"YulExpressionStatement","src":"23087:33:33"},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"23140:7:33"},{"name":"value_2","nodeType":"YulIdentifier","src":"23149:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23133:6:33"},"nodeType":"YulFunctionCall","src":"23133:24:33"},"nodeType":"YulExpressionStatement","src":"23133:24:33"},{"nodeType":"YulVariableDeclaration","src":"23170:33:33","value":{"arguments":[{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"23195:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"23199:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23191:3:33"},"nodeType":"YulFunctionCall","src":"23191:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23185:5:33"},"nodeType":"YulFunctionCall","src":"23185:18:33"},"variables":[{"name":"value_3","nodeType":"YulTypedName","src":"23174:7:33","type":""}]},{"expression":{"arguments":[{"name":"value_3","nodeType":"YulIdentifier","src":"23241:7:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"23216:24:33"},"nodeType":"YulFunctionCall","src":"23216:33:33"},"nodeType":"YulExpressionStatement","src":"23216:33:33"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"23273:7:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23282:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23269:3:33"},"nodeType":"YulFunctionCall","src":"23269:16:33"},{"name":"value_3","nodeType":"YulIdentifier","src":"23287:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23262:6:33"},"nodeType":"YulFunctionCall","src":"23262:33:33"},"nodeType":"YulExpressionStatement","src":"23262:33:33"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"23319:7:33"},{"kind":"number","nodeType":"YulLiteral","src":"23328:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23315:3:33"},"nodeType":"YulFunctionCall","src":"23315:16:33"},{"arguments":[{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"23364:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"23368:4:33","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23360:3:33"},"nodeType":"YulFunctionCall","src":"23360:13:33"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"23333:26:33"},"nodeType":"YulFunctionCall","src":"23333:41:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23308:6:33"},"nodeType":"YulFunctionCall","src":"23308:67:33"},"nodeType":"YulExpressionStatement","src":"23308:67:33"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"23399:7:33"},{"kind":"number","nodeType":"YulLiteral","src":"23408:4:33","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23395:3:33"},"nodeType":"YulFunctionCall","src":"23395:18:33"},{"arguments":[{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"23425:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"23429:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23421:3:33"},"nodeType":"YulFunctionCall","src":"23421:12:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23415:5:33"},"nodeType":"YulFunctionCall","src":"23415:19:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23388:6:33"},"nodeType":"YulFunctionCall","src":"23388:47:33"},"nodeType":"YulExpressionStatement","src":"23388:47:33"},{"nodeType":"YulVariableDeclaration","src":"23448:36:33","value":{"arguments":[{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"23474:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"23478:4:33","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23470:3:33"},"nodeType":"YulFunctionCall","src":"23470:13:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23464:5:33"},"nodeType":"YulFunctionCall","src":"23464:20:33"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"23452:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"23529:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"23547:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"23557:1:33","type":"","value":"0"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"23551:2:33","type":""}]},{"expression":{"arguments":[{"name":"_7","nodeType":"YulIdentifier","src":"23582:2:33"},{"name":"_7","nodeType":"YulIdentifier","src":"23586:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23575:6:33"},"nodeType":"YulFunctionCall","src":"23575:14:33"},"nodeType":"YulExpressionStatement","src":"23575:14:33"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"23503:8:33"},{"name":"_2","nodeType":"YulIdentifier","src":"23513:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23500:2:33"},"nodeType":"YulFunctionCall","src":"23500:16:33"},"nodeType":"YulIf","src":"23497:106:33"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"23627:7:33"},{"kind":"number","nodeType":"YulLiteral","src":"23636:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23623:3:33"},"nodeType":"YulFunctionCall","src":"23623:17:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"_6","nodeType":"YulIdentifier","src":"23678:2:33"},{"name":"offset_2","nodeType":"YulIdentifier","src":"23682:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23674:3:33"},"nodeType":"YulFunctionCall","src":"23674:17:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23693:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23670:3:33"},"nodeType":"YulFunctionCall","src":"23670:26:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23698:7:33"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"23642:27:33"},"nodeType":"YulFunctionCall","src":"23642:64:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23616:6:33"},"nodeType":"YulFunctionCall","src":"23616:91:33"},"nodeType":"YulExpressionStatement","src":"23616:91:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23727:3:33"},{"name":"value_1","nodeType":"YulIdentifier","src":"23732:7:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23720:6:33"},"nodeType":"YulFunctionCall","src":"23720:20:33"},"nodeType":"YulExpressionStatement","src":"23720:20:33"},{"nodeType":"YulAssignment","src":"23753:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"23764:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23769:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23760:3:33"},"nodeType":"YulFunctionCall","src":"23760:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"23753:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22662:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"22667:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22659:2:33"},"nodeType":"YulFunctionCall","src":"22659:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"22675:23:33","statements":[{"nodeType":"YulAssignment","src":"22677:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22688:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"22693:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22684:3:33"},"nodeType":"YulFunctionCall","src":"22684:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"22677:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"22655:3:33","statements":[]},"src":"22651:1131:33"},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23798:5:33"},{"name":"dst_1","nodeType":"YulIdentifier","src":"23805:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23791:6:33"},"nodeType":"YulFunctionCall","src":"23791:20:33"},"nodeType":"YulExpressionStatement","src":"23791:20:33"},{"nodeType":"YulVariableDeclaration","src":"23820:34:33","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"23846:2:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23850:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23842:3:33"},"nodeType":"YulFunctionCall","src":"23842:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23836:5:33"},"nodeType":"YulFunctionCall","src":"23836:18:33"},"variables":[{"name":"offset_3","nodeType":"YulTypedName","src":"23824:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"23883:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23892:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23895:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23885:6:33"},"nodeType":"YulFunctionCall","src":"23885:12:33"},"nodeType":"YulExpressionStatement","src":"23885:12:33"}]},"condition":{"arguments":[{"name":"offset_3","nodeType":"YulIdentifier","src":"23869:8:33"},{"name":"_2","nodeType":"YulIdentifier","src":"23879:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23866:2:33"},"nodeType":"YulFunctionCall","src":"23866:16:33"},"nodeType":"YulIf","src":"23863:36:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23919:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"23926:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23915:3:33"},"nodeType":"YulFunctionCall","src":"23915:14:33"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"23989:2:33"},{"name":"offset_3","nodeType":"YulIdentifier","src":"23993:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23985:3:33"},"nodeType":"YulFunctionCall","src":"23985:17:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24004:7:33"}],"functionName":{"name":"abi_decode_array_struct_PercentagePath_dyn_fromMemory","nodeType":"YulIdentifier","src":"23931:53:33"},"nodeType":"YulFunctionCall","src":"23931:81:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23908:6:33"},"nodeType":"YulFunctionCall","src":"23908:105:33"},"nodeType":"YulExpressionStatement","src":"23908:105:33"},{"nodeType":"YulVariableDeclaration","src":"24022:34:33","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"24048:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"24052:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24044:3:33"},"nodeType":"YulFunctionCall","src":"24044:11:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24038:5:33"},"nodeType":"YulFunctionCall","src":"24038:18:33"},"variables":[{"name":"offset_4","nodeType":"YulTypedName","src":"24026:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"24085:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24094:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24097:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24087:6:33"},"nodeType":"YulFunctionCall","src":"24087:12:33"},"nodeType":"YulExpressionStatement","src":"24087:12:33"}]},"condition":{"arguments":[{"name":"offset_4","nodeType":"YulIdentifier","src":"24071:8:33"},{"name":"_2","nodeType":"YulIdentifier","src":"24081:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24068:2:33"},"nodeType":"YulFunctionCall","src":"24068:16:33"},"nodeType":"YulIf","src":"24065:36:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24121:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"24128:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24117:3:33"},"nodeType":"YulFunctionCall","src":"24117:14:33"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"24183:2:33"},{"name":"offset_4","nodeType":"YulIdentifier","src":"24187:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24179:3:33"},"nodeType":"YulFunctionCall","src":"24179:17:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24198:7:33"}],"functionName":{"name":"abi_decode_array_struct_Output_dyn_fromMemory","nodeType":"YulIdentifier","src":"24133:45:33"},"nodeType":"YulFunctionCall","src":"24133:73:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24110:6:33"},"nodeType":"YulFunctionCall","src":"24110:97:33"},"nodeType":"YulExpressionStatement","src":"24110:97:33"},{"nodeType":"YulAssignment","src":"24216:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"24226:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24216:6:33"}]}]},"name":"abi_decode_tuple_t_struct$_ComplexPathParams_$4543_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21773:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21784:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21796:6:33","type":""}],"src":"21691:2546:33"},{"body":{"nodeType":"YulBlock","src":"24301:77:33","statements":[{"nodeType":"YulAssignment","src":"24311:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24326:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24320:5:33"},"nodeType":"YulFunctionCall","src":"24320:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24311:5:33"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24366:5:33"}],"functionName":{"name":"validator_revert_uint16","nodeType":"YulIdentifier","src":"24342:23:33"},"nodeType":"YulFunctionCall","src":"24342:30:33"},"nodeType":"YulExpressionStatement","src":"24342:30:33"}]},"name":"abi_decode_uint16_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"24280:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24291:5:33","type":""}],"src":"24242:136:33"},{"body":{"nodeType":"YulBlock","src":"24456:655:33","statements":[{"body":{"nodeType":"YulBlock","src":"24505:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24514:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24517:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24507:6:33"},"nodeType":"YulFunctionCall","src":"24507:12:33"},"nodeType":"YulExpressionStatement","src":"24507:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24484:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"24492:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24480:3:33"},"nodeType":"YulFunctionCall","src":"24480:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"24499:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24476:3:33"},"nodeType":"YulFunctionCall","src":"24476:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24469:6:33"},"nodeType":"YulFunctionCall","src":"24469:35:33"},"nodeType":"YulIf","src":"24466:55:33"},{"nodeType":"YulVariableDeclaration","src":"24530:23:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24546:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24540:5:33"},"nodeType":"YulFunctionCall","src":"24540:13:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"24534:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24562:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"24572:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"24566:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24585:69:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"24650:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"24612:37:33"},"nodeType":"YulFunctionCall","src":"24612:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"24596:15:33"},"nodeType":"YulFunctionCall","src":"24596:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"24589:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24663:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"24676:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"24667:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24695:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"24700:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24688:6:33"},"nodeType":"YulFunctionCall","src":"24688:15:33"},"nodeType":"YulExpressionStatement","src":"24688:15:33"},{"nodeType":"YulAssignment","src":"24712:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24723:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"24728:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24719:3:33"},"nodeType":"YulFunctionCall","src":"24719:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"24712:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"24740:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24762:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24774:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"24777:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24770:3:33"},"nodeType":"YulFunctionCall","src":"24770:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24758:3:33"},"nodeType":"YulFunctionCall","src":"24758:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"24783:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24754:3:33"},"nodeType":"YulFunctionCall","src":"24754:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"24744:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"24814:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24823:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24826:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24816:6:33"},"nodeType":"YulFunctionCall","src":"24816:12:33"},"nodeType":"YulExpressionStatement","src":"24816:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"24801:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"24809:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24798:2:33"},"nodeType":"YulFunctionCall","src":"24798:15:33"},"nodeType":"YulIf","src":"24795:35:33"},{"nodeType":"YulVariableDeclaration","src":"24839:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24854:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"24862:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24850:3:33"},"nodeType":"YulFunctionCall","src":"24850:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"24843:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"24930:152:33","statements":[{"nodeType":"YulVariableDeclaration","src":"24944:23:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24963:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24957:5:33"},"nodeType":"YulFunctionCall","src":"24957:10:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"24948:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25003:5:33"}],"functionName":{"name":"validator_revert_uint8","nodeType":"YulIdentifier","src":"24980:22:33"},"nodeType":"YulFunctionCall","src":"24980:29:33"},"nodeType":"YulExpressionStatement","src":"24980:29:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"25029:3:33"},{"name":"value","nodeType":"YulIdentifier","src":"25034:5:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25022:6:33"},"nodeType":"YulFunctionCall","src":"25022:18:33"},"nodeType":"YulExpressionStatement","src":"25022:18:33"},{"nodeType":"YulAssignment","src":"25053:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"25064:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"25069:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25060:3:33"},"nodeType":"YulFunctionCall","src":"25060:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"25053:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24885:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"24890:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24882:2:33"},"nodeType":"YulFunctionCall","src":"24882:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"24898:23:33","statements":[{"nodeType":"YulAssignment","src":"24900:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24911:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"24916:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24907:3:33"},"nodeType":"YulFunctionCall","src":"24907:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"24900:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"24878:3:33","statements":[]},"src":"24874:208:33"},{"nodeType":"YulAssignment","src":"25091:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"25100:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"25091:5:33"}]}]},"name":"abi_decode_array_uint8_dyn_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"24430:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"24438:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"24446:5:33","type":""}],"src":"24383:728:33"},{"body":{"nodeType":"YulBlock","src":"25191:582:33","statements":[{"body":{"nodeType":"YulBlock","src":"25240:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25249:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25252:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25242:6:33"},"nodeType":"YulFunctionCall","src":"25242:12:33"},"nodeType":"YulExpressionStatement","src":"25242:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"25219:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"25227:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25215:3:33"},"nodeType":"YulFunctionCall","src":"25215:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"25234:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"25211:3:33"},"nodeType":"YulFunctionCall","src":"25211:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25204:6:33"},"nodeType":"YulFunctionCall","src":"25204:35:33"},"nodeType":"YulIf","src":"25201:55:33"},{"nodeType":"YulVariableDeclaration","src":"25265:23:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"25281:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25275:5:33"},"nodeType":"YulFunctionCall","src":"25275:13:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"25269:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25297:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"25307:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"25301:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25320:69:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"25385:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"25347:37:33"},"nodeType":"YulFunctionCall","src":"25347:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"25331:15:33"},"nodeType":"YulFunctionCall","src":"25331:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"25324:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25398:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"25411:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"25402:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"25430:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"25435:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25423:6:33"},"nodeType":"YulFunctionCall","src":"25423:15:33"},"nodeType":"YulExpressionStatement","src":"25423:15:33"},{"nodeType":"YulAssignment","src":"25447:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"25458:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"25463:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25454:3:33"},"nodeType":"YulFunctionCall","src":"25454:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"25447:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"25475:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"25497:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25509:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"25512:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25505:3:33"},"nodeType":"YulFunctionCall","src":"25505:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25493:3:33"},"nodeType":"YulFunctionCall","src":"25493:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"25518:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25489:3:33"},"nodeType":"YulFunctionCall","src":"25489:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"25479:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"25549:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25558:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25561:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25551:6:33"},"nodeType":"YulFunctionCall","src":"25551:12:33"},"nodeType":"YulExpressionStatement","src":"25551:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"25536:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"25544:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25533:2:33"},"nodeType":"YulFunctionCall","src":"25533:15:33"},"nodeType":"YulIf","src":"25530:35:33"},{"nodeType":"YulVariableDeclaration","src":"25574:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"25589:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"25597:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25585:3:33"},"nodeType":"YulFunctionCall","src":"25585:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"25578:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"25665:79:33","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"25686:3:33"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"25697:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25691:5:33"},"nodeType":"YulFunctionCall","src":"25691:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25679:6:33"},"nodeType":"YulFunctionCall","src":"25679:23:33"},"nodeType":"YulExpressionStatement","src":"25679:23:33"},{"nodeType":"YulAssignment","src":"25715:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"25726:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"25731:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25722:3:33"},"nodeType":"YulFunctionCall","src":"25722:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"25715:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"25620:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"25625:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25617:2:33"},"nodeType":"YulFunctionCall","src":"25617:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"25633:23:33","statements":[{"nodeType":"YulAssignment","src":"25635:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"25646:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"25651:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25642:3:33"},"nodeType":"YulFunctionCall","src":"25642:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"25635:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"25613:3:33","statements":[]},"src":"25609:135:33"},{"nodeType":"YulAssignment","src":"25753:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"25762:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"25753:5:33"}]}]},"name":"abi_decode_array_uint256_dyn_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"25165:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"25173:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"25181:5:33","type":""}],"src":"25116:657:33"},{"body":{"nodeType":"YulBlock","src":"25851:819:33","statements":[{"body":{"nodeType":"YulBlock","src":"25900:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25909:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25912:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25902:6:33"},"nodeType":"YulFunctionCall","src":"25902:12:33"},"nodeType":"YulExpressionStatement","src":"25902:12:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"25879:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"25887:4:33","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25875:3:33"},"nodeType":"YulFunctionCall","src":"25875:17:33"},{"name":"end","nodeType":"YulIdentifier","src":"25894:3:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"25871:3:33"},"nodeType":"YulFunctionCall","src":"25871:27:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25864:6:33"},"nodeType":"YulFunctionCall","src":"25864:35:33"},"nodeType":"YulIf","src":"25861:55:33"},{"nodeType":"YulVariableDeclaration","src":"25925:23:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"25941:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25935:5:33"},"nodeType":"YulFunctionCall","src":"25935:13:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"25929:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25957:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"25967:4:33","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"25961:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25980:69:33","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"26045:2:33"}],"functionName":{"name":"array_allocation_size_array_uint8_dyn","nodeType":"YulIdentifier","src":"26007:37:33"},"nodeType":"YulFunctionCall","src":"26007:41:33"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"25991:15:33"},"nodeType":"YulFunctionCall","src":"25991:58:33"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"25984:3:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26058:16:33","value":{"name":"dst","nodeType":"YulIdentifier","src":"26071:3:33"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"26062:5:33","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"26090:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"26095:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26083:6:33"},"nodeType":"YulFunctionCall","src":"26083:15:33"},"nodeType":"YulExpressionStatement","src":"26083:15:33"},{"nodeType":"YulAssignment","src":"26107:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"26118:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"26123:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26114:3:33"},"nodeType":"YulFunctionCall","src":"26114:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"26107:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"26135:46:33","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26157:6:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26169:1:33","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"26172:2:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"26165:3:33"},"nodeType":"YulFunctionCall","src":"26165:10:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26153:3:33"},"nodeType":"YulFunctionCall","src":"26153:23:33"},{"name":"_2","nodeType":"YulIdentifier","src":"26178:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26149:3:33"},"nodeType":"YulFunctionCall","src":"26149:32:33"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"26139:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"26209:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26218:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26221:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26211:6:33"},"nodeType":"YulFunctionCall","src":"26211:12:33"},"nodeType":"YulExpressionStatement","src":"26211:12:33"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"26196:6:33"},{"name":"end","nodeType":"YulIdentifier","src":"26204:3:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26193:2:33"},"nodeType":"YulFunctionCall","src":"26193:15:33"},"nodeType":"YulIf","src":"26190:35:33"},{"nodeType":"YulVariableDeclaration","src":"26234:26:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26249:6:33"},{"name":"_2","nodeType":"YulIdentifier","src":"26257:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26245:3:33"},"nodeType":"YulFunctionCall","src":"26245:15:33"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"26238:3:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"26325:316:33","statements":[{"nodeType":"YulVariableDeclaration","src":"26339:29:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"26364:3:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26358:5:33"},"nodeType":"YulFunctionCall","src":"26358:10:33"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"26343:11:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"26432:74:33","statements":[{"nodeType":"YulVariableDeclaration","src":"26450:11:33","value":{"kind":"number","nodeType":"YulLiteral","src":"26460:1:33","type":"","value":"0"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"26454:2:33","type":""}]},{"expression":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"26485:2:33"},{"name":"_3","nodeType":"YulIdentifier","src":"26489:2:33"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26478:6:33"},"nodeType":"YulFunctionCall","src":"26478:14:33"},"nodeType":"YulExpressionStatement","src":"26478:14:33"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"26387:11:33"},{"kind":"number","nodeType":"YulLiteral","src":"26400:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26384:2:33"},"nodeType":"YulFunctionCall","src":"26384:35:33"},"nodeType":"YulIf","src":"26381:125:33"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"26526:3:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26567:6:33"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"26575:11:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26563:3:33"},"nodeType":"YulFunctionCall","src":"26563:24:33"},{"name":"_2","nodeType":"YulIdentifier","src":"26589:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26559:3:33"},"nodeType":"YulFunctionCall","src":"26559:33:33"},{"name":"end","nodeType":"YulIdentifier","src":"26594:3:33"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"26531:27:33"},"nodeType":"YulFunctionCall","src":"26531:67:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26519:6:33"},"nodeType":"YulFunctionCall","src":"26519:80:33"},"nodeType":"YulExpressionStatement","src":"26519:80:33"},{"nodeType":"YulAssignment","src":"26612:19:33","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"26623:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"26628:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26619:3:33"},"nodeType":"YulFunctionCall","src":"26619:12:33"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"26612:3:33"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"26280:3:33"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"26285:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"26277:2:33"},"nodeType":"YulFunctionCall","src":"26277:15:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"26293:23:33","statements":[{"nodeType":"YulAssignment","src":"26295:19:33","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"26306:3:33"},{"name":"_2","nodeType":"YulIdentifier","src":"26311:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26302:3:33"},"nodeType":"YulFunctionCall","src":"26302:12:33"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"26295:3:33"}]}]},"pre":{"nodeType":"YulBlock","src":"26273:3:33","statements":[]},"src":"26269:372:33"},{"nodeType":"YulAssignment","src":"26650:14:33","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"26659:5:33"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"26650:5:33"}]}]},"name":"abi_decode_array_bytes_dyn_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"25825:6:33","type":""},{"name":"end","nodeType":"YulTypedName","src":"25833:3:33","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"25841:5:33","type":""}],"src":"25778:892:33"},{"body":{"nodeType":"YulBlock","src":"26929:1629:33","statements":[{"nodeType":"YulVariableDeclaration","src":"26939:33:33","value":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"26953:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"26962:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26949:3:33"},"nodeType":"YulFunctionCall","src":"26949:23:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"26943:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"26997:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27006:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27009:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26999:6:33"},"nodeType":"YulFunctionCall","src":"26999:12:33"},"nodeType":"YulExpressionStatement","src":"26999:12:33"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"26988:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"26992:3:33","type":"","value":"448"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"26984:3:33"},"nodeType":"YulFunctionCall","src":"26984:12:33"},"nodeType":"YulIf","src":"26981:32:33"},{"nodeType":"YulVariableDeclaration","src":"27022:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"27032:6:33","type":"","value":"0x0160"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"27026:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"27062:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27071:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27074:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27064:6:33"},"nodeType":"YulFunctionCall","src":"27064:12:33"},"nodeType":"YulExpressionStatement","src":"27064:12:33"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"27054:2:33"},{"name":"_2","nodeType":"YulIdentifier","src":"27058:2:33"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27050:3:33"},"nodeType":"YulFunctionCall","src":"27050:11:33"},"nodeType":"YulIf","src":"27047:31:33"},{"nodeType":"YulVariableDeclaration","src":"27087:35:33","value":{"arguments":[],"functionName":{"name":"allocate_memory_6860","nodeType":"YulIdentifier","src":"27100:20:33"},"nodeType":"YulFunctionCall","src":"27100:22:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"27091:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27138:5:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27174:9:33"}],"functionName":{"name":"abi_decode_uint16_fromMemory","nodeType":"YulIdentifier","src":"27145:28:33"},"nodeType":"YulFunctionCall","src":"27145:39:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27131:6:33"},"nodeType":"YulFunctionCall","src":"27131:54:33"},"nodeType":"YulExpressionStatement","src":"27131:54:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27205:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"27212:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27201:3:33"},"nodeType":"YulFunctionCall","src":"27201:14:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27259:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27270:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27255:3:33"},"nodeType":"YulFunctionCall","src":"27255:18:33"}],"functionName":{"name":"abi_decode_address_payable_fromMemory","nodeType":"YulIdentifier","src":"27217:37:33"},"nodeType":"YulFunctionCall","src":"27217:57:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27194:6:33"},"nodeType":"YulFunctionCall","src":"27194:81:33"},"nodeType":"YulExpressionStatement","src":"27194:81:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27295:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"27302:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27291:3:33"},"nodeType":"YulFunctionCall","src":"27291:14:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27317:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27328:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27313:3:33"},"nodeType":"YulFunctionCall","src":"27313:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27307:5:33"},"nodeType":"YulFunctionCall","src":"27307:25:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27284:6:33"},"nodeType":"YulFunctionCall","src":"27284:49:33"},"nodeType":"YulExpressionStatement","src":"27284:49:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27353:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"27360:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27349:3:33"},"nodeType":"YulFunctionCall","src":"27349:14:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27375:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27386:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27371:3:33"},"nodeType":"YulFunctionCall","src":"27371:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27365:5:33"},"nodeType":"YulFunctionCall","src":"27365:25:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27342:6:33"},"nodeType":"YulFunctionCall","src":"27342:49:33"},"nodeType":"YulExpressionStatement","src":"27342:49:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27411:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"27418:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27407:3:33"},"nodeType":"YulFunctionCall","src":"27407:15:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27434:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27445:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27430:3:33"},"nodeType":"YulFunctionCall","src":"27430:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27424:5:33"},"nodeType":"YulFunctionCall","src":"27424:26:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27400:6:33"},"nodeType":"YulFunctionCall","src":"27400:51:33"},"nodeType":"YulExpressionStatement","src":"27400:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27471:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"27478:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27467:3:33"},"nodeType":"YulFunctionCall","src":"27467:15:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27494:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27505:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27490:3:33"},"nodeType":"YulFunctionCall","src":"27490:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27484:5:33"},"nodeType":"YulFunctionCall","src":"27484:26:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27460:6:33"},"nodeType":"YulFunctionCall","src":"27460:51:33"},"nodeType":"YulExpressionStatement","src":"27460:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27531:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"27538:3:33","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27527:3:33"},"nodeType":"YulFunctionCall","src":"27527:15:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27554:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27565:3:33","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27550:3:33"},"nodeType":"YulFunctionCall","src":"27550:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27544:5:33"},"nodeType":"YulFunctionCall","src":"27544:26:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27520:6:33"},"nodeType":"YulFunctionCall","src":"27520:51:33"},"nodeType":"YulExpressionStatement","src":"27520:51:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27591:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"27598:3:33","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27587:3:33"},"nodeType":"YulFunctionCall","src":"27587:15:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27646:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"27657:3:33","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27642:3:33"},"nodeType":"YulFunctionCall","src":"27642:19:33"}],"functionName":{"name":"abi_decode_address_payable_fromMemory","nodeType":"YulIdentifier","src":"27604:37:33"},"nodeType":"YulFunctionCall","src":"27604:58:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27580:6:33"},"nodeType":"YulFunctionCall","src":"27580:83:33"},"nodeType":"YulExpressionStatement","src":"27580:83:33"},{"nodeType":"YulVariableDeclaration","src":"27672:13:33","value":{"kind":"number","nodeType":"YulLiteral","src":"27682:3:33","type":"","value":"256"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"27676:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27705:5:33"},{"name":"_3","nodeType":"YulIdentifier","src":"27712:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27701:3:33"},"nodeType":"YulFunctionCall","src":"27701:14:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27759:9:33"},{"name":"_3","nodeType":"YulIdentifier","src":"27770:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27755:3:33"},"nodeType":"YulFunctionCall","src":"27755:18:33"}],"functionName":{"name":"abi_decode_address_payable_fromMemory","nodeType":"YulIdentifier","src":"27717:37:33"},"nodeType":"YulFunctionCall","src":"27717:57:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27694:6:33"},"nodeType":"YulFunctionCall","src":"27694:81:33"},"nodeType":"YulExpressionStatement","src":"27694:81:33"},{"nodeType":"YulVariableDeclaration","src":"27784:13:33","value":{"kind":"number","nodeType":"YulLiteral","src":"27794:3:33","type":"","value":"288"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"27788:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27817:5:33"},{"name":"_4","nodeType":"YulIdentifier","src":"27824:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27813:3:33"},"nodeType":"YulFunctionCall","src":"27813:14:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27839:9:33"},{"name":"_4","nodeType":"YulIdentifier","src":"27850:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27835:3:33"},"nodeType":"YulFunctionCall","src":"27835:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27829:5:33"},"nodeType":"YulFunctionCall","src":"27829:25:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27806:6:33"},"nodeType":"YulFunctionCall","src":"27806:49:33"},"nodeType":"YulExpressionStatement","src":"27806:49:33"},{"nodeType":"YulVariableDeclaration","src":"27864:13:33","value":{"kind":"number","nodeType":"YulLiteral","src":"27874:3:33","type":"","value":"320"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"27868:2:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27897:5:33"},{"name":"_5","nodeType":"YulIdentifier","src":"27904:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27893:3:33"},"nodeType":"YulFunctionCall","src":"27893:14:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27919:9:33"},{"name":"_5","nodeType":"YulIdentifier","src":"27930:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27915:3:33"},"nodeType":"YulFunctionCall","src":"27915:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27909:5:33"},"nodeType":"YulFunctionCall","src":"27909:25:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27886:6:33"},"nodeType":"YulFunctionCall","src":"27886:49:33"},"nodeType":"YulExpressionStatement","src":"27886:49:33"},{"nodeType":"YulAssignment","src":"27944:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"27954:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"27944:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"27968:39:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27992:9:33"},{"name":"_2","nodeType":"YulIdentifier","src":"28003:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27988:3:33"},"nodeType":"YulFunctionCall","src":"27988:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27982:5:33"},"nodeType":"YulFunctionCall","src":"27982:25:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27972:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"28016:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"28026:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"28020:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"28071:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28080:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28083:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28073:6:33"},"nodeType":"YulFunctionCall","src":"28073:12:33"},"nodeType":"YulExpressionStatement","src":"28073:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"28059:6:33"},{"name":"_6","nodeType":"YulIdentifier","src":"28067:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28056:2:33"},"nodeType":"YulFunctionCall","src":"28056:14:33"},"nodeType":"YulIf","src":"28053:34:33"},{"nodeType":"YulAssignment","src":"28096:80:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28148:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"28159:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28144:3:33"},"nodeType":"YulFunctionCall","src":"28144:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"28168:7:33"}],"functionName":{"name":"abi_decode_array_uint8_dyn_fromMemory","nodeType":"YulIdentifier","src":"28106:37:33"},"nodeType":"YulFunctionCall","src":"28106:70:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"28096:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"28185:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28211:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"28222:3:33","type":"","value":"384"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28207:3:33"},"nodeType":"YulFunctionCall","src":"28207:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28201:5:33"},"nodeType":"YulFunctionCall","src":"28201:26:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"28189:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"28256:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28265:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28268:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28258:6:33"},"nodeType":"YulFunctionCall","src":"28258:12:33"},"nodeType":"YulExpressionStatement","src":"28258:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"28242:8:33"},{"name":"_6","nodeType":"YulIdentifier","src":"28252:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28239:2:33"},"nodeType":"YulFunctionCall","src":"28239:16:33"},"nodeType":"YulIf","src":"28236:36:33"},{"nodeType":"YulAssignment","src":"28281:84:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28335:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"28346:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28331:3:33"},"nodeType":"YulFunctionCall","src":"28331:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"28357:7:33"}],"functionName":{"name":"abi_decode_array_uint256_dyn_fromMemory","nodeType":"YulIdentifier","src":"28291:39:33"},"nodeType":"YulFunctionCall","src":"28291:74:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"28281:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"28374:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28400:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"28411:3:33","type":"","value":"416"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28396:3:33"},"nodeType":"YulFunctionCall","src":"28396:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28390:5:33"},"nodeType":"YulFunctionCall","src":"28390:26:33"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"28378:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"28445:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28454:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28457:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28447:6:33"},"nodeType":"YulFunctionCall","src":"28447:12:33"},"nodeType":"YulExpressionStatement","src":"28447:12:33"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"28431:8:33"},{"name":"_6","nodeType":"YulIdentifier","src":"28441:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28428:2:33"},"nodeType":"YulFunctionCall","src":"28428:16:33"},"nodeType":"YulIf","src":"28425:36:33"},{"nodeType":"YulAssignment","src":"28470:82:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28522:9:33"},{"name":"offset_2","nodeType":"YulIdentifier","src":"28533:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28518:3:33"},"nodeType":"YulFunctionCall","src":"28518:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"28544:7:33"}],"functionName":{"name":"abi_decode_array_bytes_dyn_fromMemory","nodeType":"YulIdentifier","src":"28480:37:33"},"nodeType":"YulFunctionCall","src":"28480:72:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"28470:6:33"}]}]},"name":"abi_decode_tuple_t_struct$_StargateTeleportParams_$2852_memory_ptrt_array$_t_uint8_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26871:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"26882:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"26894:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26902:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26910:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"26918:6:33","type":""}],"src":"26675:1883:33"},{"body":{"nodeType":"YulBlock","src":"28682:145:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28699:3:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28712:2:33","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"28716:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"28708:3:33"},"nodeType":"YulFunctionCall","src":"28708:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"28725:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28704:3:33"},"nodeType":"YulFunctionCall","src":"28704:88:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28692:6:33"},"nodeType":"YulFunctionCall","src":"28692:101:33"},"nodeType":"YulExpressionStatement","src":"28692:101:33"},{"nodeType":"YulAssignment","src":"28802:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28813:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"28818:2:33","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28809:3:33"},"nodeType":"YulFunctionCall","src":"28809:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28802:3:33"}]}]},"name":"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28658:3:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28663:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28674:3:33","type":""}],"src":"28563:264:33"},{"body":{"nodeType":"YulBlock","src":"28881:267:33","statements":[{"nodeType":"YulVariableDeclaration","src":"28891:26:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28911:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28905:5:33"},"nodeType":"YulFunctionCall","src":"28905:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"28895:6:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28933:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"28938:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28926:6:33"},"nodeType":"YulFunctionCall","src":"28926:19:33"},"nodeType":"YulExpressionStatement","src":"28926:19:33"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28980:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"28987:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28976:3:33"},"nodeType":"YulFunctionCall","src":"28976:16:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28998:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"29003:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28994:3:33"},"nodeType":"YulFunctionCall","src":"28994:14:33"},{"name":"length","nodeType":"YulIdentifier","src":"29010:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"28954:21:33"},"nodeType":"YulFunctionCall","src":"28954:63:33"},"nodeType":"YulExpressionStatement","src":"28954:63:33"},{"nodeType":"YulAssignment","src":"29026:116:33","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29041:3:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"29054:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"29062:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29050:3:33"},"nodeType":"YulFunctionCall","src":"29050:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"29067:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29046:3:33"},"nodeType":"YulFunctionCall","src":"29046:88:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29037:3:33"},"nodeType":"YulFunctionCall","src":"29037:98:33"},{"kind":"number","nodeType":"YulLiteral","src":"29137:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29033:3:33"},"nodeType":"YulFunctionCall","src":"29033:109:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29026:3:33"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28858:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28865:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28873:3:33","type":""}],"src":"28832:316:33"},{"body":{"nodeType":"YulBlock","src":"29272:98:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29289:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"29300:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29282:6:33"},"nodeType":"YulFunctionCall","src":"29282:21:33"},"nodeType":"YulExpressionStatement","src":"29282:21:33"},{"nodeType":"YulAssignment","src":"29312:52:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29337:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29349:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"29360:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29345:3:33"},"nodeType":"YulFunctionCall","src":"29345:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"29320:16:33"},"nodeType":"YulFunctionCall","src":"29320:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29312:4:33"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29241:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29252:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29263:4:33","type":""}],"src":"29153:217:33"},{"body":{"nodeType":"YulBlock","src":"29433:248:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29450:3:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29461:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"29455:5:33"},"nodeType":"YulFunctionCall","src":"29455:12:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29443:6:33"},"nodeType":"YulFunctionCall","src":"29443:25:33"},"nodeType":"YulExpressionStatement","src":"29443:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29488:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"29493:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29484:3:33"},"nodeType":"YulFunctionCall","src":"29484:14:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29510:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"29517:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29506:3:33"},"nodeType":"YulFunctionCall","src":"29506:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"29500:5:33"},"nodeType":"YulFunctionCall","src":"29500:23:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29477:6:33"},"nodeType":"YulFunctionCall","src":"29477:47:33"},"nodeType":"YulExpressionStatement","src":"29477:47:33"},{"nodeType":"YulVariableDeclaration","src":"29533:43:33","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29563:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"29570:4:33","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29559:3:33"},"nodeType":"YulFunctionCall","src":"29559:16:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"29553:5:33"},"nodeType":"YulFunctionCall","src":"29553:23:33"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"29537:12:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29596:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"29601:4:33","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29592:3:33"},"nodeType":"YulFunctionCall","src":"29592:14:33"},{"kind":"number","nodeType":"YulLiteral","src":"29608:4:33","type":"","value":"0x60"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29585:6:33"},"nodeType":"YulFunctionCall","src":"29585:28:33"},"nodeType":"YulExpressionStatement","src":"29585:28:33"},{"nodeType":"YulAssignment","src":"29622:53:33","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"29646:12:33"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29664:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"29669:4:33","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29660:3:33"},"nodeType":"YulFunctionCall","src":"29660:14:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"29629:16:33"},"nodeType":"YulFunctionCall","src":"29629:46:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29622:3:33"}]}]},"name":"abi_encode_struct_lzTxObj","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29410:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"29417:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29425:3:33","type":""}],"src":"29375:306:33"},{"body":{"nodeType":"YulBlock","src":"29979:448:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29996:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30011:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"30019:6:33","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30007:3:33"},"nodeType":"YulFunctionCall","src":"30007:19:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29989:6:33"},"nodeType":"YulFunctionCall","src":"29989:38:33"},"nodeType":"YulExpressionStatement","src":"29989:38:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30047:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"30058:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30043:3:33"},"nodeType":"YulFunctionCall","src":"30043:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"30067:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"30075:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30063:3:33"},"nodeType":"YulFunctionCall","src":"30063:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30036:6:33"},"nodeType":"YulFunctionCall","src":"30036:45:33"},"nodeType":"YulExpressionStatement","src":"30036:45:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30101:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"30112:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30097:3:33"},"nodeType":"YulFunctionCall","src":"30097:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"30117:3:33","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30090:6:33"},"nodeType":"YulFunctionCall","src":"30090:31:33"},"nodeType":"YulExpressionStatement","src":"30090:31:33"},{"nodeType":"YulVariableDeclaration","src":"30130:59:33","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"30161:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30173:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"30184:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30169:3:33"},"nodeType":"YulFunctionCall","src":"30169:19:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"30144:16:33"},"nodeType":"YulFunctionCall","src":"30144:45:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"30134:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30209:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"30220:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30205:3:33"},"nodeType":"YulFunctionCall","src":"30205:18:33"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"30229:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"30237:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30225:3:33"},"nodeType":"YulFunctionCall","src":"30225:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30198:6:33"},"nodeType":"YulFunctionCall","src":"30198:50:33"},"nodeType":"YulExpressionStatement","src":"30198:50:33"},{"nodeType":"YulVariableDeclaration","src":"30257:46:33","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"30288:6:33"},{"name":"tail_1","nodeType":"YulIdentifier","src":"30296:6:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"30271:16:33"},"nodeType":"YulFunctionCall","src":"30271:32:33"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"30261:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30323:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"30334:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30319:3:33"},"nodeType":"YulFunctionCall","src":"30319:19:33"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"30344:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"30352:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30340:3:33"},"nodeType":"YulFunctionCall","src":"30340:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30312:6:33"},"nodeType":"YulFunctionCall","src":"30312:51:33"},"nodeType":"YulExpressionStatement","src":"30312:51:33"},{"nodeType":"YulAssignment","src":"30372:49:33","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"30406:6:33"},{"name":"tail_2","nodeType":"YulIdentifier","src":"30414:6:33"}],"functionName":{"name":"abi_encode_struct_lzTxObj","nodeType":"YulIdentifier","src":"30380:25:33"},"nodeType":"YulFunctionCall","src":"30380:41:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30372:4:33"}]}]},"name":"abi_encode_tuple_t_uint16_t_uint8_t_bytes_memory_ptr_t_bytes_memory_ptr_t_struct$_lzTxObj_$4319_memory_ptr__to_t_uint16_t_uint8_t_bytes_memory_ptr_t_bytes_memory_ptr_t_struct$_lzTxObj_$4319_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29916:9:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"29927:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29935:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29943:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29951:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29959:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29970:4:33","type":""}],"src":"29686:741:33"},{"body":{"nodeType":"YulBlock","src":"30530:147:33","statements":[{"body":{"nodeType":"YulBlock","src":"30576:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30585:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30588:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30578:6:33"},"nodeType":"YulFunctionCall","src":"30578:12:33"},"nodeType":"YulExpressionStatement","src":"30578:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"30551:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"30560:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30547:3:33"},"nodeType":"YulFunctionCall","src":"30547:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"30572:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"30543:3:33"},"nodeType":"YulFunctionCall","src":"30543:32:33"},"nodeType":"YulIf","src":"30540:52:33"},{"nodeType":"YulAssignment","src":"30601:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30617:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"30611:5:33"},"nodeType":"YulFunctionCall","src":"30611:16:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"30601:6:33"}]},{"nodeType":"YulAssignment","src":"30636:35:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30656:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"30667:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30652:3:33"},"nodeType":"YulFunctionCall","src":"30652:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"30646:5:33"},"nodeType":"YulFunctionCall","src":"30646:25:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"30636:6:33"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30488:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"30499:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"30511:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"30519:6:33","type":""}],"src":"30432:245:33"},{"body":{"nodeType":"YulBlock","src":"30921:807:33","statements":[{"body":{"nodeType":"YulBlock","src":"30968:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30977:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30980:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30970:6:33"},"nodeType":"YulFunctionCall","src":"30970:12:33"},"nodeType":"YulExpressionStatement","src":"30970:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"30942:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"30951:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30938:3:33"},"nodeType":"YulFunctionCall","src":"30938:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"30963:3:33","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"30934:3:33"},"nodeType":"YulFunctionCall","src":"30934:33:33"},"nodeType":"YulIf","src":"30931:53:33"},{"nodeType":"YulVariableDeclaration","src":"30993:29:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31012:9:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31006:5:33"},"nodeType":"YulFunctionCall","src":"31006:16:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"30997:5:33","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31056:5:33"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"31031:24:33"},"nodeType":"YulFunctionCall","src":"31031:31:33"},"nodeType":"YulExpressionStatement","src":"31031:31:33"},{"nodeType":"YulAssignment","src":"31071:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"31081:5:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"31071:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"31095:39:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31119:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"31130:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31115:3:33"},"nodeType":"YulFunctionCall","src":"31115:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31109:5:33"},"nodeType":"YulFunctionCall","src":"31109:25:33"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"31099:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31143:28:33","value":{"kind":"number","nodeType":"YulLiteral","src":"31153:18:33","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"31147:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"31198:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31207:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31210:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"31200:6:33"},"nodeType":"YulFunctionCall","src":"31200:12:33"},"nodeType":"YulExpressionStatement","src":"31200:12:33"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"31186:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"31194:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"31183:2:33"},"nodeType":"YulFunctionCall","src":"31183:14:33"},"nodeType":"YulIf","src":"31180:34:33"},{"nodeType":"YulAssignment","src":"31223:80:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31275:9:33"},{"name":"offset","nodeType":"YulIdentifier","src":"31286:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31271:3:33"},"nodeType":"YulFunctionCall","src":"31271:22:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"31295:7:33"}],"functionName":{"name":"abi_decode_array_uint8_dyn_fromMemory","nodeType":"YulIdentifier","src":"31233:37:33"},"nodeType":"YulFunctionCall","src":"31233:70:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"31223:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"31312:41:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31338:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"31349:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31334:3:33"},"nodeType":"YulFunctionCall","src":"31334:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31328:5:33"},"nodeType":"YulFunctionCall","src":"31328:25:33"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"31316:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"31382:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31391:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31394:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"31384:6:33"},"nodeType":"YulFunctionCall","src":"31384:12:33"},"nodeType":"YulExpressionStatement","src":"31384:12:33"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"31368:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"31378:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"31365:2:33"},"nodeType":"YulFunctionCall","src":"31365:16:33"},"nodeType":"YulIf","src":"31362:36:33"},{"nodeType":"YulAssignment","src":"31407:84:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31461:9:33"},{"name":"offset_1","nodeType":"YulIdentifier","src":"31472:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31457:3:33"},"nodeType":"YulFunctionCall","src":"31457:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"31483:7:33"}],"functionName":{"name":"abi_decode_array_uint256_dyn_fromMemory","nodeType":"YulIdentifier","src":"31417:39:33"},"nodeType":"YulFunctionCall","src":"31417:74:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"31407:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"31500:41:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31526:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"31537:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31522:3:33"},"nodeType":"YulFunctionCall","src":"31522:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31516:5:33"},"nodeType":"YulFunctionCall","src":"31516:25:33"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"31504:8:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"31570:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31579:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31582:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"31572:6:33"},"nodeType":"YulFunctionCall","src":"31572:12:33"},"nodeType":"YulExpressionStatement","src":"31572:12:33"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"31556:8:33"},{"name":"_1","nodeType":"YulIdentifier","src":"31566:2:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"31553:2:33"},"nodeType":"YulFunctionCall","src":"31553:16:33"},"nodeType":"YulIf","src":"31550:36:33"},{"nodeType":"YulAssignment","src":"31595:82:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31647:9:33"},{"name":"offset_2","nodeType":"YulIdentifier","src":"31658:8:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31643:3:33"},"nodeType":"YulFunctionCall","src":"31643:24:33"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"31669:7:33"}],"functionName":{"name":"abi_decode_array_bytes_dyn_fromMemory","nodeType":"YulIdentifier","src":"31605:37:33"},"nodeType":"YulFunctionCall","src":"31605:72:33"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"31595:6:33"}]},{"nodeType":"YulAssignment","src":"31686:36:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31706:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"31717:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31702:3:33"},"nodeType":"YulFunctionCall","src":"31702:19:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31696:5:33"},"nodeType":"YulFunctionCall","src":"31696:26:33"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"31686:6:33"}]}]},"name":"abi_decode_tuple_t_address_payablet_array$_t_uint8_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30855:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"30866:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"30878:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"30886:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"30894:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"30902:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"30910:6:33","type":""}],"src":"30682:1046:33"},{"body":{"nodeType":"YulBlock","src":"31924:14:33","statements":[{"nodeType":"YulAssignment","src":"31926:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"31933:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31926:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31908:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31916:3:33","type":""}],"src":"31733:205:33"},{"body":{"nodeType":"YulBlock","src":"32038:92:33","statements":[{"nodeType":"YulAssignment","src":"32048:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32060:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"32071:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32056:3:33"},"nodeType":"YulFunctionCall","src":"32056:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32048:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32090:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"32115:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32108:6:33"},"nodeType":"YulFunctionCall","src":"32108:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32101:6:33"},"nodeType":"YulFunctionCall","src":"32101:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32083:6:33"},"nodeType":"YulFunctionCall","src":"32083:41:33"},"nodeType":"YulExpressionStatement","src":"32083:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32007:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"32018:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32029:4:33","type":""}],"src":"31943:187:33"},{"body":{"nodeType":"YulBlock","src":"32167:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32184:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32187:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32177:6:33"},"nodeType":"YulFunctionCall","src":"32177:88:33"},"nodeType":"YulExpressionStatement","src":"32177:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32281:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"32284:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32274:6:33"},"nodeType":"YulFunctionCall","src":"32274:15:33"},"nodeType":"YulExpressionStatement","src":"32274:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32305:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32308:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32298:6:33"},"nodeType":"YulFunctionCall","src":"32298:15:33"},"nodeType":"YulExpressionStatement","src":"32298:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"32135:184:33"},{"body":{"nodeType":"YulBlock","src":"32373:76:33","statements":[{"body":{"nodeType":"YulBlock","src":"32395:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"32397:16:33"},"nodeType":"YulFunctionCall","src":"32397:18:33"},"nodeType":"YulExpressionStatement","src":"32397:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"32389:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"32392:1:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32386:2:33"},"nodeType":"YulFunctionCall","src":"32386:8:33"},"nodeType":"YulIf","src":"32383:34:33"},{"nodeType":"YulAssignment","src":"32426:17:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"32438:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"32441:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32434:3:33"},"nodeType":"YulFunctionCall","src":"32434:9:33"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"32426:4:33"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"32355:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"32358:1:33","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"32364:4:33","type":""}],"src":"32324:125:33"},{"body":{"nodeType":"YulBlock","src":"32513:385:33","statements":[{"nodeType":"YulVariableDeclaration","src":"32523:26:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32543:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"32537:5:33"},"nodeType":"YulFunctionCall","src":"32537:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"32527:6:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32565:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"32570:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32558:6:33"},"nodeType":"YulFunctionCall","src":"32558:19:33"},"nodeType":"YulExpressionStatement","src":"32558:19:33"},{"nodeType":"YulVariableDeclaration","src":"32586:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"32596:4:33","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"32590:2:33","type":""}]},{"nodeType":"YulAssignment","src":"32609:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32620:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"32625:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32616:3:33"},"nodeType":"YulFunctionCall","src":"32616:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32609:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"32637:28:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32655:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"32662:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32651:3:33"},"nodeType":"YulFunctionCall","src":"32651:14:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"32641:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"32674:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"32683:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"32678:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"32742:131:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32763:3:33"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"32778:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"32772:5:33"},"nodeType":"YulFunctionCall","src":"32772:13:33"},{"kind":"number","nodeType":"YulLiteral","src":"32787:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32768:3:33"},"nodeType":"YulFunctionCall","src":"32768:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32756:6:33"},"nodeType":"YulFunctionCall","src":"32756:37:33"},"nodeType":"YulExpressionStatement","src":"32756:37:33"},{"nodeType":"YulAssignment","src":"32806:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32817:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"32822:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32813:3:33"},"nodeType":"YulFunctionCall","src":"32813:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32806:3:33"}]},{"nodeType":"YulAssignment","src":"32838:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"32852:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"32860:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32848:3:33"},"nodeType":"YulFunctionCall","src":"32848:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"32838:6:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"32704:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"32707:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32701:2:33"},"nodeType":"YulFunctionCall","src":"32701:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"32715:18:33","statements":[{"nodeType":"YulAssignment","src":"32717:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"32726:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"32729:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32722:3:33"},"nodeType":"YulFunctionCall","src":"32722:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"32717:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"32697:3:33","statements":[]},"src":"32693:180:33"},{"nodeType":"YulAssignment","src":"32882:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"32889:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32882:3:33"}]}]},"name":"abi_encode_array_uint8_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32490:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"32497:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32505:3:33","type":""}],"src":"32454:444:33"},{"body":{"nodeType":"YulBlock","src":"32964:374:33","statements":[{"nodeType":"YulVariableDeclaration","src":"32974:26:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32994:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"32988:5:33"},"nodeType":"YulFunctionCall","src":"32988:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"32978:6:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33016:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"33021:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33009:6:33"},"nodeType":"YulFunctionCall","src":"33009:19:33"},"nodeType":"YulExpressionStatement","src":"33009:19:33"},{"nodeType":"YulVariableDeclaration","src":"33037:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"33047:4:33","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"33041:2:33","type":""}]},{"nodeType":"YulAssignment","src":"33060:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33071:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"33076:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33067:3:33"},"nodeType":"YulFunctionCall","src":"33067:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33060:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"33088:28:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33106:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"33113:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33102:3:33"},"nodeType":"YulFunctionCall","src":"33102:14:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"33092:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33125:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"33134:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"33129:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"33193:120:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33214:3:33"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"33225:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"33219:5:33"},"nodeType":"YulFunctionCall","src":"33219:13:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33207:6:33"},"nodeType":"YulFunctionCall","src":"33207:26:33"},"nodeType":"YulExpressionStatement","src":"33207:26:33"},{"nodeType":"YulAssignment","src":"33246:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33257:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"33262:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33253:3:33"},"nodeType":"YulFunctionCall","src":"33253:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33246:3:33"}]},{"nodeType":"YulAssignment","src":"33278:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"33292:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"33300:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33288:3:33"},"nodeType":"YulFunctionCall","src":"33288:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"33278:6:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"33155:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"33158:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"33152:2:33"},"nodeType":"YulFunctionCall","src":"33152:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"33166:18:33","statements":[{"nodeType":"YulAssignment","src":"33168:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"33177:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"33180:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33173:3:33"},"nodeType":"YulFunctionCall","src":"33173:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"33168:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"33148:3:33","statements":[]},"src":"33144:169:33"},{"nodeType":"YulAssignment","src":"33322:10:33","value":{"name":"pos","nodeType":"YulIdentifier","src":"33329:3:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33322:3:33"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32941:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"32948:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32956:3:33","type":""}],"src":"32903:435:33"},{"body":{"nodeType":"YulBlock","src":"33402:555:33","statements":[{"nodeType":"YulVariableDeclaration","src":"33412:26:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33432:5:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"33426:5:33"},"nodeType":"YulFunctionCall","src":"33426:12:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"33416:6:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33454:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"33459:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33447:6:33"},"nodeType":"YulFunctionCall","src":"33447:19:33"},"nodeType":"YulExpressionStatement","src":"33447:19:33"},{"nodeType":"YulVariableDeclaration","src":"33475:14:33","value":{"kind":"number","nodeType":"YulLiteral","src":"33485:4:33","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"33479:2:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33498:31:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33521:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"33526:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33517:3:33"},"nodeType":"YulFunctionCall","src":"33517:12:33"},"variables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"33502:11:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33538:24:33","value":{"name":"updated_pos","nodeType":"YulIdentifier","src":"33551:11:33"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"33542:5:33","type":""}]},{"nodeType":"YulAssignment","src":"33571:18:33","value":{"name":"updated_pos","nodeType":"YulIdentifier","src":"33578:11:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33571:3:33"}]},{"nodeType":"YulVariableDeclaration","src":"33598:38:33","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"33614:5:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33625:1:33","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"33628:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"33621:3:33"},"nodeType":"YulFunctionCall","src":"33621:14:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33610:3:33"},"nodeType":"YulFunctionCall","src":"33610:26:33"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"33602:4:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33645:28:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33663:5:33"},{"name":"_1","nodeType":"YulIdentifier","src":"33670:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33659:3:33"},"nodeType":"YulFunctionCall","src":"33659:14:33"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"33649:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33682:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"33691:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"33686:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"33750:181:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33771:3:33"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33780:4:33"},{"name":"pos_1","nodeType":"YulIdentifier","src":"33786:5:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33776:3:33"},"nodeType":"YulFunctionCall","src":"33776:16:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33764:6:33"},"nodeType":"YulFunctionCall","src":"33764:29:33"},"nodeType":"YulExpressionStatement","src":"33764:29:33"},{"nodeType":"YulAssignment","src":"33806:45:33","value":{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"33837:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"33831:5:33"},"nodeType":"YulFunctionCall","src":"33831:13:33"},{"name":"tail","nodeType":"YulIdentifier","src":"33846:4:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"33814:16:33"},"nodeType":"YulFunctionCall","src":"33814:37:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33806:4:33"}]},{"nodeType":"YulAssignment","src":"33864:25:33","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"33878:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"33886:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33874:3:33"},"nodeType":"YulFunctionCall","src":"33874:15:33"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"33864:6:33"}]},{"nodeType":"YulAssignment","src":"33902:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33913:3:33"},{"name":"_1","nodeType":"YulIdentifier","src":"33918:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33909:3:33"},"nodeType":"YulFunctionCall","src":"33909:12:33"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33902:3:33"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"33712:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"33715:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"33709:2:33"},"nodeType":"YulFunctionCall","src":"33709:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"33723:18:33","statements":[{"nodeType":"YulAssignment","src":"33725:14:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"33734:1:33"},{"kind":"number","nodeType":"YulLiteral","src":"33737:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33730:3:33"},"nodeType":"YulFunctionCall","src":"33730:9:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"33725:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"33705:3:33","statements":[]},"src":"33701:230:33"},{"nodeType":"YulAssignment","src":"33940:11:33","value":{"name":"tail","nodeType":"YulIdentifier","src":"33947:4:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33940:3:33"}]}]},"name":"abi_encode_array_bytes_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33379:5:33","type":""},{"name":"pos","nodeType":"YulTypedName","src":"33386:3:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33394:3:33","type":""}],"src":"33343:614:33"},{"body":{"nodeType":"YulBlock","src":"34283:358:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34300:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"34311:2:33","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34293:6:33"},"nodeType":"YulFunctionCall","src":"34293:21:33"},"nodeType":"YulExpressionStatement","src":"34293:21:33"},{"nodeType":"YulVariableDeclaration","src":"34323:68:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"34364:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34376:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"34387:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34372:3:33"},"nodeType":"YulFunctionCall","src":"34372:18:33"}],"functionName":{"name":"abi_encode_array_uint8_dyn","nodeType":"YulIdentifier","src":"34337:26:33"},"nodeType":"YulFunctionCall","src":"34337:54:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"34327:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34411:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"34422:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34407:3:33"},"nodeType":"YulFunctionCall","src":"34407:18:33"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"34431:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"34439:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34427:3:33"},"nodeType":"YulFunctionCall","src":"34427:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34400:6:33"},"nodeType":"YulFunctionCall","src":"34400:50:33"},"nodeType":"YulExpressionStatement","src":"34400:50:33"},{"nodeType":"YulVariableDeclaration","src":"34459:58:33","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"34502:6:33"},{"name":"tail_1","nodeType":"YulIdentifier","src":"34510:6:33"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"34473:28:33"},"nodeType":"YulFunctionCall","src":"34473:44:33"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"34463:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34537:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"34548:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34533:3:33"},"nodeType":"YulFunctionCall","src":"34533:18:33"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"34557:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"34565:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34553:3:33"},"nodeType":"YulFunctionCall","src":"34553:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34526:6:33"},"nodeType":"YulFunctionCall","src":"34526:50:33"},"nodeType":"YulExpressionStatement","src":"34526:50:33"},{"nodeType":"YulAssignment","src":"34585:50:33","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"34620:6:33"},{"name":"tail_2","nodeType":"YulIdentifier","src":"34628:6:33"}],"functionName":{"name":"abi_encode_array_bytes_dyn","nodeType":"YulIdentifier","src":"34593:26:33"},"nodeType":"YulFunctionCall","src":"34593:42:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34585:4:33"}]}]},"name":"abi_encode_tuple_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34236:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"34247:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"34255:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"34263:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34274:4:33","type":""}],"src":"33962:679:33"},{"body":{"nodeType":"YulBlock","src":"34859:338:33","statements":[{"nodeType":"YulAssignment","src":"34869:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34881:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"34892:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34877:3:33"},"nodeType":"YulFunctionCall","src":"34877:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34869:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"34905:52:33","value":{"kind":"number","nodeType":"YulLiteral","src":"34915:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"34909:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34973:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"34988:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"34996:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34984:3:33"},"nodeType":"YulFunctionCall","src":"34984:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34966:6:33"},"nodeType":"YulFunctionCall","src":"34966:34:33"},"nodeType":"YulExpressionStatement","src":"34966:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35020:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35031:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35016:3:33"},"nodeType":"YulFunctionCall","src":"35016:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"35040:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"35048:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35036:3:33"},"nodeType":"YulFunctionCall","src":"35036:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35009:6:33"},"nodeType":"YulFunctionCall","src":"35009:43:33"},"nodeType":"YulExpressionStatement","src":"35009:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35072:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35083:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35068:3:33"},"nodeType":"YulFunctionCall","src":"35068:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"35092:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"35100:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35088:3:33"},"nodeType":"YulFunctionCall","src":"35088:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35061:6:33"},"nodeType":"YulFunctionCall","src":"35061:43:33"},"nodeType":"YulExpressionStatement","src":"35061:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35124:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35135:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35120:3:33"},"nodeType":"YulFunctionCall","src":"35120:18:33"},{"name":"value3","nodeType":"YulIdentifier","src":"35140:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35113:6:33"},"nodeType":"YulFunctionCall","src":"35113:34:33"},"nodeType":"YulExpressionStatement","src":"35113:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35167:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35178:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35163:3:33"},"nodeType":"YulFunctionCall","src":"35163:19:33"},{"name":"value4","nodeType":"YulIdentifier","src":"35184:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35156:6:33"},"nodeType":"YulFunctionCall","src":"35156:35:33"},"nodeType":"YulExpressionStatement","src":"35156:35:33"}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34796:9:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"34807:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"34815:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"34823:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"34831:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"34839:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34850:4:33","type":""}],"src":"34646:551:33"},{"body":{"nodeType":"YulBlock","src":"35353:227:33","statements":[{"nodeType":"YulAssignment","src":"35363:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35375:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35386:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35371:3:33"},"nodeType":"YulFunctionCall","src":"35371:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35363:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35405:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35420:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"35428:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35416:3:33"},"nodeType":"YulFunctionCall","src":"35416:55:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35398:6:33"},"nodeType":"YulFunctionCall","src":"35398:74:33"},"nodeType":"YulExpressionStatement","src":"35398:74:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35492:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35503:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35488:3:33"},"nodeType":"YulFunctionCall","src":"35488:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"35508:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35481:6:33"},"nodeType":"YulFunctionCall","src":"35481:34:33"},"nodeType":"YulExpressionStatement","src":"35481:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35535:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35546:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35531:3:33"},"nodeType":"YulFunctionCall","src":"35531:18:33"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"35565:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"35558:6:33"},"nodeType":"YulFunctionCall","src":"35558:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"35551:6:33"},"nodeType":"YulFunctionCall","src":"35551:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35524:6:33"},"nodeType":"YulFunctionCall","src":"35524:50:33"},"nodeType":"YulExpressionStatement","src":"35524:50:33"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bool__to_t_address_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35306:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"35317:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"35325:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35333:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35344:4:33","type":""}],"src":"35202:378:33"},{"body":{"nodeType":"YulBlock","src":"35770:294:33","statements":[{"nodeType":"YulAssignment","src":"35780:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35792:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35803:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35788:3:33"},"nodeType":"YulFunctionCall","src":"35788:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35780:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"35816:52:33","value":{"kind":"number","nodeType":"YulLiteral","src":"35826:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"35820:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35884:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35899:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"35907:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35895:3:33"},"nodeType":"YulFunctionCall","src":"35895:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35877:6:33"},"nodeType":"YulFunctionCall","src":"35877:34:33"},"nodeType":"YulExpressionStatement","src":"35877:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35931:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35942:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35927:3:33"},"nodeType":"YulFunctionCall","src":"35927:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"35951:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"35959:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35947:3:33"},"nodeType":"YulFunctionCall","src":"35947:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35920:6:33"},"nodeType":"YulFunctionCall","src":"35920:43:33"},"nodeType":"YulExpressionStatement","src":"35920:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35983:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"35994:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35979:3:33"},"nodeType":"YulFunctionCall","src":"35979:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"36003:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"36011:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35999:3:33"},"nodeType":"YulFunctionCall","src":"35999:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35972:6:33"},"nodeType":"YulFunctionCall","src":"35972:43:33"},"nodeType":"YulExpressionStatement","src":"35972:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36035:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"36046:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36031:3:33"},"nodeType":"YulFunctionCall","src":"36031:18:33"},{"name":"value3","nodeType":"YulIdentifier","src":"36051:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36024:6:33"},"nodeType":"YulFunctionCall","src":"36024:34:33"},"nodeType":"YulExpressionStatement","src":"36024:34:33"}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_uint256__to_t_address_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35715:9:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"35726:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"35734:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"35742:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35750:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35761:4:33","type":""}],"src":"35585:479:33"},{"body":{"nodeType":"YulBlock","src":"36170:76:33","statements":[{"nodeType":"YulAssignment","src":"36180:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36192:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"36203:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36188:3:33"},"nodeType":"YulFunctionCall","src":"36188:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36180:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36222:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"36233:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36215:6:33"},"nodeType":"YulFunctionCall","src":"36215:25:33"},"nodeType":"YulExpressionStatement","src":"36215:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36139:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"36150:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36161:4:33","type":""}],"src":"36069:177:33"},{"body":{"nodeType":"YulBlock","src":"36425:173:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36442:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"36453:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36435:6:33"},"nodeType":"YulFunctionCall","src":"36435:21:33"},"nodeType":"YulExpressionStatement","src":"36435:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36476:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"36487:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36472:3:33"},"nodeType":"YulFunctionCall","src":"36472:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"36492:2:33","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36465:6:33"},"nodeType":"YulFunctionCall","src":"36465:30:33"},"nodeType":"YulExpressionStatement","src":"36465:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36515:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"36526:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36511:3:33"},"nodeType":"YulFunctionCall","src":"36511:18:33"},{"hexValue":"696e73756666696369656e742d616d6f756e742d6f7574","kind":"string","nodeType":"YulLiteral","src":"36531:25:33","type":"","value":"insufficient-amount-out"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36504:6:33"},"nodeType":"YulFunctionCall","src":"36504:53:33"},"nodeType":"YulExpressionStatement","src":"36504:53:33"},{"nodeType":"YulAssignment","src":"36566:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36578:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"36589:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36574:3:33"},"nodeType":"YulFunctionCall","src":"36574:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36566:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_f9bba043a83225eb6b59e03a620d9be35c0c01b2645fd69986af78bab24b3d55__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36402:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36416:4:33","type":""}],"src":"36251:347:33"},{"body":{"nodeType":"YulBlock","src":"36824:338:33","statements":[{"nodeType":"YulAssignment","src":"36834:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36846:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"36857:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36842:3:33"},"nodeType":"YulFunctionCall","src":"36842:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36834:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"36870:52:33","value":{"kind":"number","nodeType":"YulLiteral","src":"36880:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"36874:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36938:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"36953:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"36961:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"36949:3:33"},"nodeType":"YulFunctionCall","src":"36949:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36931:6:33"},"nodeType":"YulFunctionCall","src":"36931:34:33"},"nodeType":"YulExpressionStatement","src":"36931:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36985:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"36996:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36981:3:33"},"nodeType":"YulFunctionCall","src":"36981:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"37005:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"37013:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37001:3:33"},"nodeType":"YulFunctionCall","src":"37001:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36974:6:33"},"nodeType":"YulFunctionCall","src":"36974:43:33"},"nodeType":"YulExpressionStatement","src":"36974:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37037:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"37048:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37033:3:33"},"nodeType":"YulFunctionCall","src":"37033:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"37057:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"37065:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37053:3:33"},"nodeType":"YulFunctionCall","src":"37053:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37026:6:33"},"nodeType":"YulFunctionCall","src":"37026:43:33"},"nodeType":"YulExpressionStatement","src":"37026:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37089:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"37100:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37085:3:33"},"nodeType":"YulFunctionCall","src":"37085:18:33"},{"name":"value3","nodeType":"YulIdentifier","src":"37105:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37078:6:33"},"nodeType":"YulFunctionCall","src":"37078:34:33"},"nodeType":"YulExpressionStatement","src":"37078:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37132:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"37143:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37128:3:33"},"nodeType":"YulFunctionCall","src":"37128:19:33"},{"name":"value4","nodeType":"YulIdentifier","src":"37149:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37121:6:33"},"nodeType":"YulFunctionCall","src":"37121:35:33"},"nodeType":"YulExpressionStatement","src":"37121:35:33"}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_uint256_t_rational_0_by_1__to_t_address_t_address_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36761:9:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"36772:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"36780:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"36788:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"36796:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"36804:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36815:4:33","type":""}],"src":"36603:559:33"},{"body":{"nodeType":"YulBlock","src":"37231:418:33","statements":[{"nodeType":"YulVariableDeclaration","src":"37241:16:33","value":{"kind":"number","nodeType":"YulLiteral","src":"37256:1:33","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"37245:7:33","type":""}]},{"nodeType":"YulAssignment","src":"37266:16:33","value":{"name":"power_1","nodeType":"YulIdentifier","src":"37275:7:33"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"37266:5:33"}]},{"nodeType":"YulAssignment","src":"37291:13:33","value":{"name":"_base","nodeType":"YulIdentifier","src":"37299:5:33"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"37291:4:33"}]},{"body":{"nodeType":"YulBlock","src":"37355:288:33","statements":[{"body":{"nodeType":"YulBlock","src":"37460:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"37462:16:33"},"nodeType":"YulFunctionCall","src":"37462:18:33"},"nodeType":"YulExpressionStatement","src":"37462:18:33"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"37375:4:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37385:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"base","nodeType":"YulIdentifier","src":"37453:4:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"37381:3:33"},"nodeType":"YulFunctionCall","src":"37381:77:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"37372:2:33"},"nodeType":"YulFunctionCall","src":"37372:87:33"},"nodeType":"YulIf","src":"37369:113:33"},{"body":{"nodeType":"YulBlock","src":"37521:29:33","statements":[{"nodeType":"YulAssignment","src":"37523:25:33","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"37536:5:33"},{"name":"base","nodeType":"YulIdentifier","src":"37543:4:33"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"37532:3:33"},"nodeType":"YulFunctionCall","src":"37532:16:33"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"37523:5:33"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"37502:8:33"},{"name":"power_1","nodeType":"YulIdentifier","src":"37512:7:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37498:3:33"},"nodeType":"YulFunctionCall","src":"37498:22:33"},"nodeType":"YulIf","src":"37495:55:33"},{"nodeType":"YulAssignment","src":"37563:23:33","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"37575:4:33"},{"name":"base","nodeType":"YulIdentifier","src":"37581:4:33"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"37571:3:33"},"nodeType":"YulFunctionCall","src":"37571:15:33"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"37563:4:33"}]},{"nodeType":"YulAssignment","src":"37599:34:33","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"37615:7:33"},{"name":"exponent","nodeType":"YulIdentifier","src":"37624:8:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"37611:3:33"},"nodeType":"YulFunctionCall","src":"37611:22:33"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"37599:8:33"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"37324:8:33"},{"name":"power_1","nodeType":"YulIdentifier","src":"37334:7:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"37321:2:33"},"nodeType":"YulFunctionCall","src":"37321:21:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"37343:3:33","statements":[]},"pre":{"nodeType":"YulBlock","src":"37317:3:33","statements":[]},"src":"37313:330:33"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"37195:5:33","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"37202:8:33","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"37215:5:33","type":""},{"name":"base","nodeType":"YulTypedName","src":"37222:4:33","type":""}],"src":"37167:482:33"},{"body":{"nodeType":"YulBlock","src":"37713:807:33","statements":[{"body":{"nodeType":"YulBlock","src":"37751:52:33","statements":[{"nodeType":"YulAssignment","src":"37765:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"37774:1:33","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"37765:5:33"}]},{"nodeType":"YulLeave","src":"37788:5:33"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"37733:8:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"37726:6:33"},"nodeType":"YulFunctionCall","src":"37726:16:33"},"nodeType":"YulIf","src":"37723:80:33"},{"body":{"nodeType":"YulBlock","src":"37836:52:33","statements":[{"nodeType":"YulAssignment","src":"37850:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"37859:1:33","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"37850:5:33"}]},{"nodeType":"YulLeave","src":"37873:5:33"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"37822:4:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"37815:6:33"},"nodeType":"YulFunctionCall","src":"37815:12:33"},"nodeType":"YulIf","src":"37812:76:33"},{"cases":[{"body":{"nodeType":"YulBlock","src":"37924:52:33","statements":[{"nodeType":"YulAssignment","src":"37938:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"37947:1:33","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"37938:5:33"}]},{"nodeType":"YulLeave","src":"37961:5:33"}]},"nodeType":"YulCase","src":"37917:59:33","value":{"kind":"number","nodeType":"YulLiteral","src":"37922:1:33","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"37992:123:33","statements":[{"body":{"nodeType":"YulBlock","src":"38027:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"38029:16:33"},"nodeType":"YulFunctionCall","src":"38029:18:33"},"nodeType":"YulExpressionStatement","src":"38029:18:33"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"38012:8:33"},{"kind":"number","nodeType":"YulLiteral","src":"38022:3:33","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"38009:2:33"},"nodeType":"YulFunctionCall","src":"38009:17:33"},"nodeType":"YulIf","src":"38006:43:33"},{"nodeType":"YulAssignment","src":"38062:25:33","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"38075:8:33"},{"kind":"number","nodeType":"YulLiteral","src":"38085:1:33","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"38071:3:33"},"nodeType":"YulFunctionCall","src":"38071:16:33"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"38062:5:33"}]},{"nodeType":"YulLeave","src":"38100:5:33"}]},"nodeType":"YulCase","src":"37985:130:33","value":{"kind":"number","nodeType":"YulLiteral","src":"37990:1:33","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"37904:4:33"},"nodeType":"YulSwitch","src":"37897:218:33"},{"body":{"nodeType":"YulBlock","src":"38213:70:33","statements":[{"nodeType":"YulAssignment","src":"38227:28:33","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"38240:4:33"},{"name":"exponent","nodeType":"YulIdentifier","src":"38246:8:33"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"38236:3:33"},"nodeType":"YulFunctionCall","src":"38236:19:33"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"38227:5:33"}]},{"nodeType":"YulLeave","src":"38268:5:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"38137:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"38143:2:33","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"38134:2:33"},"nodeType":"YulFunctionCall","src":"38134:12:33"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"38151:8:33"},{"kind":"number","nodeType":"YulLiteral","src":"38161:2:33","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"38148:2:33"},"nodeType":"YulFunctionCall","src":"38148:16:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"38130:3:33"},"nodeType":"YulFunctionCall","src":"38130:35:33"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"38174:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"38180:3:33","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"38171:2:33"},"nodeType":"YulFunctionCall","src":"38171:13:33"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"38189:8:33"},{"kind":"number","nodeType":"YulLiteral","src":"38199:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"38186:2:33"},"nodeType":"YulFunctionCall","src":"38186:16:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"38167:3:33"},"nodeType":"YulFunctionCall","src":"38167:36:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"38127:2:33"},"nodeType":"YulFunctionCall","src":"38127:77:33"},"nodeType":"YulIf","src":"38124:159:33"},{"nodeType":"YulVariableDeclaration","src":"38292:57:33","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"38334:4:33"},{"name":"exponent","nodeType":"YulIdentifier","src":"38340:8:33"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"38315:18:33"},"nodeType":"YulFunctionCall","src":"38315:34:33"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"38296:7:33","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"38305:6:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"38454:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"38456:16:33"},"nodeType":"YulFunctionCall","src":"38456:18:33"},"nodeType":"YulExpressionStatement","src":"38456:18:33"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"38364:7:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38377:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"base_1","nodeType":"YulIdentifier","src":"38445:6:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"38373:3:33"},"nodeType":"YulFunctionCall","src":"38373:79:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"38361:2:33"},"nodeType":"YulFunctionCall","src":"38361:92:33"},"nodeType":"YulIf","src":"38358:118:33"},{"nodeType":"YulAssignment","src":"38485:29:33","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"38498:7:33"},{"name":"base_1","nodeType":"YulIdentifier","src":"38507:6:33"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"38494:3:33"},"nodeType":"YulFunctionCall","src":"38494:20:33"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"38485:5:33"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"37684:4:33","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"37690:8:33","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"37703:5:33","type":""}],"src":"37654:866:33"},{"body":{"nodeType":"YulBlock","src":"38593:72:33","statements":[{"nodeType":"YulAssignment","src":"38603:56:33","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"38633:4:33"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"38643:8:33"},{"kind":"number","nodeType":"YulLiteral","src":"38653:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"38639:3:33"},"nodeType":"YulFunctionCall","src":"38639:19:33"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"38612:20:33"},"nodeType":"YulFunctionCall","src":"38612:47:33"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"38603:5:33"}]}]},"name":"checked_exp_t_uint256_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"38564:4:33","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"38570:8:33","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"38583:5:33","type":""}],"src":"38525:140:33"},{"body":{"nodeType":"YulBlock","src":"38722:176:33","statements":[{"body":{"nodeType":"YulBlock","src":"38841:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"38843:16:33"},"nodeType":"YulFunctionCall","src":"38843:18:33"},"nodeType":"YulExpressionStatement","src":"38843:18:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"38753:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"38746:6:33"},"nodeType":"YulFunctionCall","src":"38746:9:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"38739:6:33"},"nodeType":"YulFunctionCall","src":"38739:17:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"38761:1:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38768:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"38836:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"38764:3:33"},"nodeType":"YulFunctionCall","src":"38764:74:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"38758:2:33"},"nodeType":"YulFunctionCall","src":"38758:81:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"38735:3:33"},"nodeType":"YulFunctionCall","src":"38735:105:33"},"nodeType":"YulIf","src":"38732:131:33"},{"nodeType":"YulAssignment","src":"38872:20:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"38887:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"38890:1:33"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"38883:3:33"},"nodeType":"YulFunctionCall","src":"38883:9:33"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"38872:7:33"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"38701:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"38704:1:33","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"38710:7:33","type":""}],"src":"38670:228:33"},{"body":{"nodeType":"YulBlock","src":"38949:228:33","statements":[{"body":{"nodeType":"YulBlock","src":"38980:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39001:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"39004:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38994:6:33"},"nodeType":"YulFunctionCall","src":"38994:88:33"},"nodeType":"YulExpressionStatement","src":"38994:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39102:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"39105:4:33","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39095:6:33"},"nodeType":"YulFunctionCall","src":"39095:15:33"},"nodeType":"YulExpressionStatement","src":"39095:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39130:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"39133:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"39123:6:33"},"nodeType":"YulFunctionCall","src":"39123:15:33"},"nodeType":"YulExpressionStatement","src":"39123:15:33"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"38969:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"38962:6:33"},"nodeType":"YulFunctionCall","src":"38962:9:33"},"nodeType":"YulIf","src":"38959:189:33"},{"nodeType":"YulAssignment","src":"39157:14:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"39166:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"39169:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"39162:3:33"},"nodeType":"YulFunctionCall","src":"39162:9:33"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"39157:1:33"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"38934:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"38937:1:33","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"38943:1:33","type":""}],"src":"38903:274:33"},{"body":{"nodeType":"YulBlock","src":"39403:338:33","statements":[{"nodeType":"YulAssignment","src":"39413:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39425:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"39436:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39421:3:33"},"nodeType":"YulFunctionCall","src":"39421:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39413:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"39449:52:33","value":{"kind":"number","nodeType":"YulLiteral","src":"39459:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"39453:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39517:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"39532:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"39540:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"39528:3:33"},"nodeType":"YulFunctionCall","src":"39528:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39510:6:33"},"nodeType":"YulFunctionCall","src":"39510:34:33"},"nodeType":"YulExpressionStatement","src":"39510:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39564:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"39575:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39560:3:33"},"nodeType":"YulFunctionCall","src":"39560:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"39584:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"39592:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"39580:3:33"},"nodeType":"YulFunctionCall","src":"39580:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39553:6:33"},"nodeType":"YulFunctionCall","src":"39553:43:33"},"nodeType":"YulExpressionStatement","src":"39553:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39616:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"39627:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39612:3:33"},"nodeType":"YulFunctionCall","src":"39612:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"39636:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"39644:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"39632:3:33"},"nodeType":"YulFunctionCall","src":"39632:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39605:6:33"},"nodeType":"YulFunctionCall","src":"39605:43:33"},"nodeType":"YulExpressionStatement","src":"39605:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39668:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"39679:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39664:3:33"},"nodeType":"YulFunctionCall","src":"39664:18:33"},{"name":"value3","nodeType":"YulIdentifier","src":"39684:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39657:6:33"},"nodeType":"YulFunctionCall","src":"39657:34:33"},"nodeType":"YulExpressionStatement","src":"39657:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39711:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"39722:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39707:3:33"},"nodeType":"YulFunctionCall","src":"39707:19:33"},{"name":"value4","nodeType":"YulIdentifier","src":"39728:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39700:6:33"},"nodeType":"YulFunctionCall","src":"39700:35:33"},"nodeType":"YulExpressionStatement","src":"39700:35:33"}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_rational_0_by_1_t_uint256__to_t_address_t_address_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39340:9:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"39351:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"39359:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"39367:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"39375:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"39383:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"39394:4:33","type":""}],"src":"39182:559:33"},{"body":{"nodeType":"YulBlock","src":"40123:496:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40140:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"40155:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"40163:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"40151:3:33"},"nodeType":"YulFunctionCall","src":"40151:55:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40133:6:33"},"nodeType":"YulFunctionCall","src":"40133:74:33"},"nodeType":"YulExpressionStatement","src":"40133:74:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40227:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"40238:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40223:3:33"},"nodeType":"YulFunctionCall","src":"40223:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"40243:3:33","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40216:6:33"},"nodeType":"YulFunctionCall","src":"40216:31:33"},"nodeType":"YulExpressionStatement","src":"40216:31:33"},{"nodeType":"YulVariableDeclaration","src":"40256:69:33","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"40297:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40309:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"40320:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40305:3:33"},"nodeType":"YulFunctionCall","src":"40305:19:33"}],"functionName":{"name":"abi_encode_array_uint8_dyn","nodeType":"YulIdentifier","src":"40270:26:33"},"nodeType":"YulFunctionCall","src":"40270:55:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"40260:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40345:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"40356:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40341:3:33"},"nodeType":"YulFunctionCall","src":"40341:18:33"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"40365:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"40373:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40361:3:33"},"nodeType":"YulFunctionCall","src":"40361:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40334:6:33"},"nodeType":"YulFunctionCall","src":"40334:50:33"},"nodeType":"YulExpressionStatement","src":"40334:50:33"},{"nodeType":"YulVariableDeclaration","src":"40393:58:33","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"40436:6:33"},{"name":"tail_1","nodeType":"YulIdentifier","src":"40444:6:33"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"40407:28:33"},"nodeType":"YulFunctionCall","src":"40407:44:33"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"40397:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40471:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"40482:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40467:3:33"},"nodeType":"YulFunctionCall","src":"40467:18:33"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"40491:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"40499:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40487:3:33"},"nodeType":"YulFunctionCall","src":"40487:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40460:6:33"},"nodeType":"YulFunctionCall","src":"40460:50:33"},"nodeType":"YulExpressionStatement","src":"40460:50:33"},{"nodeType":"YulAssignment","src":"40519:50:33","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"40554:6:33"},{"name":"tail_2","nodeType":"YulIdentifier","src":"40562:6:33"}],"functionName":{"name":"abi_encode_array_bytes_dyn","nodeType":"YulIdentifier","src":"40527:26:33"},"nodeType":"YulFunctionCall","src":"40527:42:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40519:4:33"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40589:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"40600:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40585:3:33"},"nodeType":"YulFunctionCall","src":"40585:19:33"},{"name":"value4","nodeType":"YulIdentifier","src":"40606:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40578:6:33"},"nodeType":"YulFunctionCall","src":"40578:35:33"},"nodeType":"YulExpressionStatement","src":"40578:35:33"}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40060:9:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"40071:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"40079:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"40087:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"40095:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"40103:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40114:4:33","type":""}],"src":"39746:873:33"},{"body":{"nodeType":"YulBlock","src":"41049:682:33","statements":[{"nodeType":"YulVariableDeclaration","src":"41059:13:33","value":{"kind":"number","nodeType":"YulLiteral","src":"41069:3:33","type":"","value":"288"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"41063:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41088:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"41103:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"41111:6:33","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41099:3:33"},"nodeType":"YulFunctionCall","src":"41099:19:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41081:6:33"},"nodeType":"YulFunctionCall","src":"41081:38:33"},"nodeType":"YulExpressionStatement","src":"41081:38:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41139:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41150:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41135:3:33"},"nodeType":"YulFunctionCall","src":"41135:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"41155:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41128:6:33"},"nodeType":"YulFunctionCall","src":"41128:34:33"},"nodeType":"YulExpressionStatement","src":"41128:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41182:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41193:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41178:3:33"},"nodeType":"YulFunctionCall","src":"41178:18:33"},{"name":"value2","nodeType":"YulIdentifier","src":"41198:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41171:6:33"},"nodeType":"YulFunctionCall","src":"41171:34:33"},"nodeType":"YulExpressionStatement","src":"41171:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41225:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41236:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41221:3:33"},"nodeType":"YulFunctionCall","src":"41221:18:33"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"41245:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"41253:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41241:3:33"},"nodeType":"YulFunctionCall","src":"41241:55:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41214:6:33"},"nodeType":"YulFunctionCall","src":"41214:83:33"},"nodeType":"YulExpressionStatement","src":"41214:83:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41317:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41328:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41313:3:33"},"nodeType":"YulFunctionCall","src":"41313:19:33"},{"name":"value4","nodeType":"YulIdentifier","src":"41334:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41306:6:33"},"nodeType":"YulFunctionCall","src":"41306:35:33"},"nodeType":"YulExpressionStatement","src":"41306:35:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41361:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41372:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41357:3:33"},"nodeType":"YulFunctionCall","src":"41357:19:33"},{"name":"value5","nodeType":"YulIdentifier","src":"41378:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41350:6:33"},"nodeType":"YulFunctionCall","src":"41350:35:33"},"nodeType":"YulExpressionStatement","src":"41350:35:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41405:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41416:3:33","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41401:3:33"},"nodeType":"YulFunctionCall","src":"41401:19:33"},{"name":"_1","nodeType":"YulIdentifier","src":"41422:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41394:6:33"},"nodeType":"YulFunctionCall","src":"41394:31:33"},"nodeType":"YulExpressionStatement","src":"41394:31:33"},{"nodeType":"YulVariableDeclaration","src":"41434:67:33","value":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"41474:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41486:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"41497:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41482:3:33"},"nodeType":"YulFunctionCall","src":"41482:18:33"}],"functionName":{"name":"abi_encode_struct_lzTxObj","nodeType":"YulIdentifier","src":"41448:25:33"},"nodeType":"YulFunctionCall","src":"41448:53:33"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"41438:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41521:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41532:3:33","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41517:3:33"},"nodeType":"YulFunctionCall","src":"41517:19:33"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"41542:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"41550:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41538:3:33"},"nodeType":"YulFunctionCall","src":"41538:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41510:6:33"},"nodeType":"YulFunctionCall","src":"41510:51:33"},"nodeType":"YulExpressionStatement","src":"41510:51:33"},{"nodeType":"YulVariableDeclaration","src":"41570:46:33","value":{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"41601:6:33"},{"name":"tail_1","nodeType":"YulIdentifier","src":"41609:6:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"41584:16:33"},"nodeType":"YulFunctionCall","src":"41584:32:33"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"41574:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41636:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41647:3:33","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41632:3:33"},"nodeType":"YulFunctionCall","src":"41632:19:33"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"41657:6:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"41665:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41653:3:33"},"nodeType":"YulFunctionCall","src":"41653:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41625:6:33"},"nodeType":"YulFunctionCall","src":"41625:51:33"},"nodeType":"YulExpressionStatement","src":"41625:51:33"},{"nodeType":"YulAssignment","src":"41685:40:33","value":{"arguments":[{"name":"value8","nodeType":"YulIdentifier","src":"41710:6:33"},{"name":"tail_2","nodeType":"YulIdentifier","src":"41718:6:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"41693:16:33"},"nodeType":"YulFunctionCall","src":"41693:32:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41685:4:33"}]}]},"name":"abi_encode_tuple_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4319_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4319_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40954:9:33","type":""},{"name":"value8","nodeType":"YulTypedName","src":"40965:6:33","type":""},{"name":"value7","nodeType":"YulTypedName","src":"40973:6:33","type":""},{"name":"value6","nodeType":"YulTypedName","src":"40981:6:33","type":""},{"name":"value5","nodeType":"YulTypedName","src":"40989:6:33","type":""},{"name":"value4","nodeType":"YulTypedName","src":"40997:6:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"41005:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"41013:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"41021:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"41029:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41040:4:33","type":""}],"src":"40624:1107:33"},{"body":{"nodeType":"YulBlock","src":"41844:159:33","statements":[{"nodeType":"YulAssignment","src":"41854:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41866:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"41877:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41862:3:33"},"nodeType":"YulFunctionCall","src":"41862:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41854:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41896:9:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41915:3:33","type":"","value":"240"},{"name":"value0","nodeType":"YulIdentifier","src":"41920:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"41911:3:33"},"nodeType":"YulFunctionCall","src":"41911:16:33"},{"kind":"number","nodeType":"YulLiteral","src":"41929:66:33","type":"","value":"0xffff000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41907:3:33"},"nodeType":"YulFunctionCall","src":"41907:89:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41889:6:33"},"nodeType":"YulFunctionCall","src":"41889:108:33"},"nodeType":"YulExpressionStatement","src":"41889:108:33"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_bytes2__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41813:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"41824:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41835:4:33","type":""}],"src":"41736:267:33"},{"body":{"nodeType":"YulBlock","src":"42137:168:33","statements":[{"nodeType":"YulAssignment","src":"42147:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42159:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"42170:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42155:3:33"},"nodeType":"YulFunctionCall","src":"42155:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42147:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42189:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"42204:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"42212:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"42200:3:33"},"nodeType":"YulFunctionCall","src":"42200:55:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42182:6:33"},"nodeType":"YulFunctionCall","src":"42182:74:33"},"nodeType":"YulExpressionStatement","src":"42182:74:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42276:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"42287:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42272:3:33"},"nodeType":"YulFunctionCall","src":"42272:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"42292:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42265:6:33"},"nodeType":"YulFunctionCall","src":"42265:34:33"},"nodeType":"YulExpressionStatement","src":"42265:34:33"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42098:9:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"42109:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"42117:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42128:4:33","type":""}],"src":"42008:297:33"},{"body":{"nodeType":"YulBlock","src":"42484:244:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42501:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"42512:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42494:6:33"},"nodeType":"YulFunctionCall","src":"42494:21:33"},"nodeType":"YulExpressionStatement","src":"42494:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42535:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"42546:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42531:3:33"},"nodeType":"YulFunctionCall","src":"42531:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"42551:2:33","type":"","value":"54"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42524:6:33"},"nodeType":"YulFunctionCall","src":"42524:30:33"},"nodeType":"YulExpressionStatement","src":"42524:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42574:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"42585:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42570:3:33"},"nodeType":"YulFunctionCall","src":"42570:18:33"},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f","kind":"string","nodeType":"YulLiteral","src":"42590:34:33","type":"","value":"SafeERC20: approve from non-zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42563:6:33"},"nodeType":"YulFunctionCall","src":"42563:62:33"},"nodeType":"YulExpressionStatement","src":"42563:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42645:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"42656:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42641:3:33"},"nodeType":"YulFunctionCall","src":"42641:18:33"},{"hexValue":"20746f206e6f6e2d7a65726f20616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"42661:24:33","type":"","value":" to non-zero allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42634:6:33"},"nodeType":"YulFunctionCall","src":"42634:52:33"},"nodeType":"YulExpressionStatement","src":"42634:52:33"},{"nodeType":"YulAssignment","src":"42695:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42707:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"42718:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42703:3:33"},"nodeType":"YulFunctionCall","src":"42703:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42695:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42461:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42475:4:33","type":""}],"src":"42310:418:33"},{"body":{"nodeType":"YulBlock","src":"42890:241:33","statements":[{"nodeType":"YulAssignment","src":"42900:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42912:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"42923:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42908:3:33"},"nodeType":"YulFunctionCall","src":"42908:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42900:4:33"}]},{"nodeType":"YulVariableDeclaration","src":"42935:52:33","value":{"kind":"number","nodeType":"YulLiteral","src":"42945:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"42939:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43003:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"43018:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"43026:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"43014:3:33"},"nodeType":"YulFunctionCall","src":"43014:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42996:6:33"},"nodeType":"YulFunctionCall","src":"42996:34:33"},"nodeType":"YulExpressionStatement","src":"42996:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43050:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"43061:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43046:3:33"},"nodeType":"YulFunctionCall","src":"43046:18:33"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"43070:6:33"},{"name":"_1","nodeType":"YulIdentifier","src":"43078:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"43066:3:33"},"nodeType":"YulFunctionCall","src":"43066:15:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43039:6:33"},"nodeType":"YulFunctionCall","src":"43039:43:33"},"nodeType":"YulExpressionStatement","src":"43039:43:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43102:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"43113:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43098:3:33"},"nodeType":"YulFunctionCall","src":"43098:18:33"},{"name":"value2","nodeType":"YulIdentifier","src":"43118:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43091:6:33"},"nodeType":"YulFunctionCall","src":"43091:34:33"},"nodeType":"YulExpressionStatement","src":"43091:34:33"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42843:9:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"42854:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"42862:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"42870:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42881:4:33","type":""}],"src":"42733:398:33"},{"body":{"nodeType":"YulBlock","src":"43310:180:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43327:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"43338:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43320:6:33"},"nodeType":"YulFunctionCall","src":"43320:21:33"},"nodeType":"YulExpressionStatement","src":"43320:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43361:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"43372:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43357:3:33"},"nodeType":"YulFunctionCall","src":"43357:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"43377:2:33","type":"","value":"30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43350:6:33"},"nodeType":"YulFunctionCall","src":"43350:30:33"},"nodeType":"YulExpressionStatement","src":"43350:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43400:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"43411:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43396:3:33"},"nodeType":"YulFunctionCall","src":"43396:18:33"},{"hexValue":"556e697377617056324c6962726172793a20494e56414c49445f50415448","kind":"string","nodeType":"YulLiteral","src":"43416:32:33","type":"","value":"UniswapV2Library: INVALID_PATH"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43389:6:33"},"nodeType":"YulFunctionCall","src":"43389:60:33"},"nodeType":"YulExpressionStatement","src":"43389:60:33"},{"nodeType":"YulAssignment","src":"43458:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43470:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"43481:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43466:3:33"},"nodeType":"YulFunctionCall","src":"43466:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43458:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43287:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"43301:4:33","type":""}],"src":"43136:354:33"},{"body":{"nodeType":"YulBlock","src":"43543:80:33","statements":[{"body":{"nodeType":"YulBlock","src":"43570:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"43572:16:33"},"nodeType":"YulFunctionCall","src":"43572:18:33"},"nodeType":"YulExpressionStatement","src":"43572:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"43559:1:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"43566:1:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"43562:3:33"},"nodeType":"YulFunctionCall","src":"43562:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"43556:2:33"},"nodeType":"YulFunctionCall","src":"43556:13:33"},"nodeType":"YulIf","src":"43553:39:33"},{"nodeType":"YulAssignment","src":"43601:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"43612:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"43615:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43608:3:33"},"nodeType":"YulFunctionCall","src":"43608:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"43601:3:33"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"43526:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"43529:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"43535:3:33","type":""}],"src":"43495:128:33"},{"body":{"nodeType":"YulBlock","src":"43675:148:33","statements":[{"body":{"nodeType":"YulBlock","src":"43766:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"43768:16:33"},"nodeType":"YulFunctionCall","src":"43768:18:33"},"nodeType":"YulExpressionStatement","src":"43768:18:33"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"43691:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"43698:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"43688:2:33"},"nodeType":"YulFunctionCall","src":"43688:77:33"},"nodeType":"YulIf","src":"43685:103:33"},{"nodeType":"YulAssignment","src":"43797:20:33","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"43808:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"43815:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43804:3:33"},"nodeType":"YulFunctionCall","src":"43804:13:33"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"43797:3:33"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"43657:5:33","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"43667:3:33","type":""}],"src":"43628:195:33"},{"body":{"nodeType":"YulBlock","src":"43975:221:33","statements":[{"nodeType":"YulVariableDeclaration","src":"43985:76:33","value":{"kind":"number","nodeType":"YulLiteral","src":"43995:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"43989:2:33","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44077:3:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44090:2:33","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"44094:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"44086:3:33"},"nodeType":"YulFunctionCall","src":"44086:15:33"},{"name":"_1","nodeType":"YulIdentifier","src":"44103:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"44082:3:33"},"nodeType":"YulFunctionCall","src":"44082:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44070:6:33"},"nodeType":"YulFunctionCall","src":"44070:37:33"},"nodeType":"YulExpressionStatement","src":"44070:37:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44127:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"44132:2:33","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44123:3:33"},"nodeType":"YulFunctionCall","src":"44123:12:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44145:2:33","type":"","value":"96"},{"name":"value1","nodeType":"YulIdentifier","src":"44149:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"44141:3:33"},"nodeType":"YulFunctionCall","src":"44141:15:33"},{"name":"_1","nodeType":"YulIdentifier","src":"44158:2:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"44137:3:33"},"nodeType":"YulFunctionCall","src":"44137:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44116:6:33"},"nodeType":"YulFunctionCall","src":"44116:46:33"},"nodeType":"YulExpressionStatement","src":"44116:46:33"},{"nodeType":"YulAssignment","src":"44171:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44182:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"44187:2:33","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44178:3:33"},"nodeType":"YulFunctionCall","src":"44178:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"44171:3:33"}]}]},"name":"abi_encode_tuple_packed_t_address_t_address__to_t_address_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"43943:3:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"43948:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"43956:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"43967:3:33","type":""}],"src":"43828:368:33"},{"body":{"nodeType":"YulBlock","src":"44477:315:33","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44494:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"44499:66:33","type":"","value":"0xff00000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44487:6:33"},"nodeType":"YulFunctionCall","src":"44487:79:33"},"nodeType":"YulExpressionStatement","src":"44487:79:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44586:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"44591:1:33","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44582:3:33"},"nodeType":"YulFunctionCall","src":"44582:11:33"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44603:2:33","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"44607:6:33"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"44599:3:33"},"nodeType":"YulFunctionCall","src":"44599:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"44616:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"44595:3:33"},"nodeType":"YulFunctionCall","src":"44595:88:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44575:6:33"},"nodeType":"YulFunctionCall","src":"44575:109:33"},"nodeType":"YulExpressionStatement","src":"44575:109:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44704:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"44709:2:33","type":"","value":"21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44700:3:33"},"nodeType":"YulFunctionCall","src":"44700:12:33"},{"name":"value1","nodeType":"YulIdentifier","src":"44714:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44693:6:33"},"nodeType":"YulFunctionCall","src":"44693:28:33"},"nodeType":"YulExpressionStatement","src":"44693:28:33"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44741:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"44746:2:33","type":"","value":"53"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44737:3:33"},"nodeType":"YulFunctionCall","src":"44737:12:33"},{"name":"value2","nodeType":"YulIdentifier","src":"44751:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44730:6:33"},"nodeType":"YulFunctionCall","src":"44730:28:33"},"nodeType":"YulExpressionStatement","src":"44730:28:33"},{"nodeType":"YulAssignment","src":"44767:19:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44778:3:33"},{"kind":"number","nodeType":"YulLiteral","src":"44783:2:33","type":"","value":"85"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44774:3:33"},"nodeType":"YulFunctionCall","src":"44774:12:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"44767:3:33"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9_t_address_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"44437:3:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"44442:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"44450:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"44458:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"44469:3:33","type":""}],"src":"44201:591:33"},{"body":{"nodeType":"YulBlock","src":"45000:278:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45017:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"45028:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45010:6:33"},"nodeType":"YulFunctionCall","src":"45010:25:33"},"nodeType":"YulExpressionStatement","src":"45010:25:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45055:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45066:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45051:3:33"},"nodeType":"YulFunctionCall","src":"45051:18:33"},{"name":"value1","nodeType":"YulIdentifier","src":"45071:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45044:6:33"},"nodeType":"YulFunctionCall","src":"45044:34:33"},"nodeType":"YulExpressionStatement","src":"45044:34:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45098:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45109:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45094:3:33"},"nodeType":"YulFunctionCall","src":"45094:18:33"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"45118:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"45126:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"45114:3:33"},"nodeType":"YulFunctionCall","src":"45114:55:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45087:6:33"},"nodeType":"YulFunctionCall","src":"45087:83:33"},"nodeType":"YulExpressionStatement","src":"45087:83:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45190:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45201:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45186:3:33"},"nodeType":"YulFunctionCall","src":"45186:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"45206:3:33","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45179:6:33"},"nodeType":"YulFunctionCall","src":"45179:31:33"},"nodeType":"YulExpressionStatement","src":"45179:31:33"},{"nodeType":"YulAssignment","src":"45219:53:33","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"45244:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45256:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45267:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45252:3:33"},"nodeType":"YulFunctionCall","src":"45252:19:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"45227:16:33"},"nodeType":"YulFunctionCall","src":"45227:45:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45219:4:33"}]}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_address_t_bytes_memory_ptr__to_t_uint256_t_uint256_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"44945:9:33","type":""},{"name":"value3","nodeType":"YulTypedName","src":"44956:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"44964:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"44972:6:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"44980:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"44991:4:33","type":""}],"src":"44797:481:33"},{"body":{"nodeType":"YulBlock","src":"45361:124:33","statements":[{"body":{"nodeType":"YulBlock","src":"45407:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"45416:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"45419:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"45409:6:33"},"nodeType":"YulFunctionCall","src":"45409:12:33"},"nodeType":"YulExpressionStatement","src":"45409:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"45382:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"45391:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45378:3:33"},"nodeType":"YulFunctionCall","src":"45378:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"45403:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"45374:3:33"},"nodeType":"YulFunctionCall","src":"45374:32:33"},"nodeType":"YulIf","src":"45371:52:33"},{"nodeType":"YulAssignment","src":"45432:47:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45469:9:33"}],"functionName":{"name":"abi_decode_bool_fromMemory","nodeType":"YulIdentifier","src":"45442:26:33"},"nodeType":"YulFunctionCall","src":"45442:37:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"45432:6:33"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45327:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"45338:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"45350:6:33","type":""}],"src":"45283:202:33"},{"body":{"nodeType":"YulBlock","src":"45664:232:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45681:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45692:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45674:6:33"},"nodeType":"YulFunctionCall","src":"45674:21:33"},"nodeType":"YulExpressionStatement","src":"45674:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45715:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45726:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45711:3:33"},"nodeType":"YulFunctionCall","src":"45711:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"45731:2:33","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45704:6:33"},"nodeType":"YulFunctionCall","src":"45704:30:33"},"nodeType":"YulExpressionStatement","src":"45704:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45754:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45765:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45750:3:33"},"nodeType":"YulFunctionCall","src":"45750:18:33"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"45770:34:33","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45743:6:33"},"nodeType":"YulFunctionCall","src":"45743:62:33"},"nodeType":"YulExpressionStatement","src":"45743:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45825:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45836:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45821:3:33"},"nodeType":"YulFunctionCall","src":"45821:18:33"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"45841:12:33","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45814:6:33"},"nodeType":"YulFunctionCall","src":"45814:40:33"},"nodeType":"YulExpressionStatement","src":"45814:40:33"},{"nodeType":"YulAssignment","src":"45863:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45875:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"45886:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45871:3:33"},"nodeType":"YulFunctionCall","src":"45871:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45863:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45641:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"45655:4:33","type":""}],"src":"45490:406:33"},{"body":{"nodeType":"YulBlock","src":"45961:128:33","statements":[{"nodeType":"YulAssignment","src":"45971:22:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"45986:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"45980:5:33"},"nodeType":"YulFunctionCall","src":"45980:13:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"45971:5:33"}]},{"body":{"nodeType":"YulBlock","src":"46067:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"46076:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"46079:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"46069:6:33"},"nodeType":"YulFunctionCall","src":"46069:12:33"},"nodeType":"YulExpressionStatement","src":"46069:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"46015:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"46026:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"46033:30:33","type":"","value":"0xffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"46022:3:33"},"nodeType":"YulFunctionCall","src":"46022:42:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"46012:2:33"},"nodeType":"YulFunctionCall","src":"46012:53:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"46005:6:33"},"nodeType":"YulFunctionCall","src":"46005:61:33"},"nodeType":"YulIf","src":"46002:81:33"}]},"name":"abi_decode_uint112_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"45940:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"45951:5:33","type":""}],"src":"45901:188:33"},{"body":{"nodeType":"YulBlock","src":"46208:336:33","statements":[{"body":{"nodeType":"YulBlock","src":"46254:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"46263:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"46266:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"46256:6:33"},"nodeType":"YulFunctionCall","src":"46256:12:33"},"nodeType":"YulExpressionStatement","src":"46256:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"46229:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"46238:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46225:3:33"},"nodeType":"YulFunctionCall","src":"46225:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"46250:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"46221:3:33"},"nodeType":"YulFunctionCall","src":"46221:32:33"},"nodeType":"YulIf","src":"46218:52:33"},{"nodeType":"YulAssignment","src":"46279:50:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46319:9:33"}],"functionName":{"name":"abi_decode_uint112_fromMemory","nodeType":"YulIdentifier","src":"46289:29:33"},"nodeType":"YulFunctionCall","src":"46289:40:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"46279:6:33"}]},{"nodeType":"YulAssignment","src":"46338:59:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46382:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"46393:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46378:3:33"},"nodeType":"YulFunctionCall","src":"46378:18:33"}],"functionName":{"name":"abi_decode_uint112_fromMemory","nodeType":"YulIdentifier","src":"46348:29:33"},"nodeType":"YulFunctionCall","src":"46348:49:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"46338:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"46406:38:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46429:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"46440:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46425:3:33"},"nodeType":"YulFunctionCall","src":"46425:18:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"46419:5:33"},"nodeType":"YulFunctionCall","src":"46419:25:33"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"46410:5:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"46498:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"46507:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"46510:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"46500:6:33"},"nodeType":"YulFunctionCall","src":"46500:12:33"},"nodeType":"YulExpressionStatement","src":"46500:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"46466:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"46477:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"46484:10:33","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"46473:3:33"},"nodeType":"YulFunctionCall","src":"46473:22:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"46463:2:33"},"nodeType":"YulFunctionCall","src":"46463:33:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"46456:6:33"},"nodeType":"YulFunctionCall","src":"46456:41:33"},"nodeType":"YulIf","src":"46453:61:33"},{"nodeType":"YulAssignment","src":"46523:15:33","value":{"name":"value","nodeType":"YulIdentifier","src":"46533:5:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"46523:6:33"}]}]},"name":"abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"46158:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"46169:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"46181:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"46189:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"46197:6:33","type":""}],"src":"46094:450:33"},{"body":{"nodeType":"YulBlock","src":"46723:233:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46740:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"46751:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46733:6:33"},"nodeType":"YulFunctionCall","src":"46733:21:33"},"nodeType":"YulExpressionStatement","src":"46733:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46774:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"46785:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46770:3:33"},"nodeType":"YulFunctionCall","src":"46770:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"46790:2:33","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46763:6:33"},"nodeType":"YulFunctionCall","src":"46763:30:33"},"nodeType":"YulExpressionStatement","src":"46763:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46813:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"46824:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46809:3:33"},"nodeType":"YulFunctionCall","src":"46809:18:33"},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f49","kind":"string","nodeType":"YulLiteral","src":"46829:34:33","type":"","value":"UniswapV2Library: INSUFFICIENT_I"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46802:6:33"},"nodeType":"YulFunctionCall","src":"46802:62:33"},"nodeType":"YulExpressionStatement","src":"46802:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46884:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"46895:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46880:3:33"},"nodeType":"YulFunctionCall","src":"46880:18:33"},{"hexValue":"4e5055545f414d4f554e54","kind":"string","nodeType":"YulLiteral","src":"46900:13:33","type":"","value":"NPUT_AMOUNT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46873:6:33"},"nodeType":"YulFunctionCall","src":"46873:41:33"},"nodeType":"YulExpressionStatement","src":"46873:41:33"},{"nodeType":"YulAssignment","src":"46923:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46935:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"46946:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46931:3:33"},"nodeType":"YulFunctionCall","src":"46931:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46923:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_ec21b006eb37ef20d0f4abcabd34de6854fa68af48294244e0263dc05c1dbbae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"46700:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"46714:4:33","type":""}],"src":"46549:407:33"},{"body":{"nodeType":"YulBlock","src":"47135:230:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47152:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47163:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47145:6:33"},"nodeType":"YulFunctionCall","src":"47145:21:33"},"nodeType":"YulExpressionStatement","src":"47145:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47186:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47197:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47182:3:33"},"nodeType":"YulFunctionCall","src":"47182:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"47202:2:33","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47175:6:33"},"nodeType":"YulFunctionCall","src":"47175:30:33"},"nodeType":"YulExpressionStatement","src":"47175:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47225:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47236:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47221:3:33"},"nodeType":"YulFunctionCall","src":"47221:18:33"},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f4c","kind":"string","nodeType":"YulLiteral","src":"47241:34:33","type":"","value":"UniswapV2Library: INSUFFICIENT_L"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47214:6:33"},"nodeType":"YulFunctionCall","src":"47214:62:33"},"nodeType":"YulExpressionStatement","src":"47214:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47296:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47307:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47292:3:33"},"nodeType":"YulFunctionCall","src":"47292:18:33"},{"hexValue":"4951554944495459","kind":"string","nodeType":"YulLiteral","src":"47312:10:33","type":"","value":"IQUIDITY"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47285:6:33"},"nodeType":"YulFunctionCall","src":"47285:38:33"},"nodeType":"YulExpressionStatement","src":"47285:38:33"},{"nodeType":"YulAssignment","src":"47332:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47344:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47355:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47340:3:33"},"nodeType":"YulFunctionCall","src":"47340:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47332:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"47112:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"47126:4:33","type":""}],"src":"46961:404:33"},{"body":{"nodeType":"YulBlock","src":"47544:227:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47561:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47572:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47554:6:33"},"nodeType":"YulFunctionCall","src":"47554:21:33"},"nodeType":"YulExpressionStatement","src":"47554:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47595:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47606:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47591:3:33"},"nodeType":"YulFunctionCall","src":"47591:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"47611:2:33","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47584:6:33"},"nodeType":"YulFunctionCall","src":"47584:30:33"},"nodeType":"YulExpressionStatement","src":"47584:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47634:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47645:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47630:3:33"},"nodeType":"YulFunctionCall","src":"47630:18:33"},{"hexValue":"556e697377617056324c6962726172793a204944454e544943414c5f41444452","kind":"string","nodeType":"YulLiteral","src":"47650:34:33","type":"","value":"UniswapV2Library: IDENTICAL_ADDR"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47623:6:33"},"nodeType":"YulFunctionCall","src":"47623:62:33"},"nodeType":"YulExpressionStatement","src":"47623:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47705:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47716:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47701:3:33"},"nodeType":"YulFunctionCall","src":"47701:18:33"},{"hexValue":"4553534553","kind":"string","nodeType":"YulLiteral","src":"47721:7:33","type":"","value":"ESSES"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47694:6:33"},"nodeType":"YulFunctionCall","src":"47694:35:33"},"nodeType":"YulExpressionStatement","src":"47694:35:33"},{"nodeType":"YulAssignment","src":"47738:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47750:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47761:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47746:3:33"},"nodeType":"YulFunctionCall","src":"47746:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47738:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_4ddc3ca35a8b7ccaa016ab70252fdf3396ded4f4fd8375f95b1e9d99790fcdca__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"47521:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"47535:4:33","type":""}],"src":"47370:401:33"},{"body":{"nodeType":"YulBlock","src":"47950:180:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47967:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"47978:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47960:6:33"},"nodeType":"YulFunctionCall","src":"47960:21:33"},"nodeType":"YulExpressionStatement","src":"47960:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48001:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48012:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47997:3:33"},"nodeType":"YulFunctionCall","src":"47997:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"48017:2:33","type":"","value":"30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47990:6:33"},"nodeType":"YulFunctionCall","src":"47990:30:33"},"nodeType":"YulExpressionStatement","src":"47990:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48040:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48051:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48036:3:33"},"nodeType":"YulFunctionCall","src":"48036:18:33"},{"hexValue":"556e697377617056324c6962726172793a205a45524f5f41444452455353","kind":"string","nodeType":"YulLiteral","src":"48056:32:33","type":"","value":"UniswapV2Library: ZERO_ADDRESS"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48029:6:33"},"nodeType":"YulFunctionCall","src":"48029:60:33"},"nodeType":"YulExpressionStatement","src":"48029:60:33"},{"nodeType":"YulAssignment","src":"48098:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48110:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48121:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48106:3:33"},"nodeType":"YulFunctionCall","src":"48106:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48098:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_db0dda5a73ac3122e17df097fa2cbce2c5161b45d20c7d6cf363d3b147392c83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"47927:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"47941:4:33","type":""}],"src":"47776:354:33"},{"body":{"nodeType":"YulBlock","src":"48309:170:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48326:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48337:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48319:6:33"},"nodeType":"YulFunctionCall","src":"48319:21:33"},"nodeType":"YulExpressionStatement","src":"48319:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48360:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48371:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48356:3:33"},"nodeType":"YulFunctionCall","src":"48356:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"48376:2:33","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48349:6:33"},"nodeType":"YulFunctionCall","src":"48349:30:33"},"nodeType":"YulExpressionStatement","src":"48349:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48399:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48410:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48395:3:33"},"nodeType":"YulFunctionCall","src":"48395:18:33"},{"hexValue":"64732d6d6174682d6d756c2d6f766572666c6f77","kind":"string","nodeType":"YulLiteral","src":"48415:22:33","type":"","value":"ds-math-mul-overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48388:6:33"},"nodeType":"YulFunctionCall","src":"48388:50:33"},"nodeType":"YulExpressionStatement","src":"48388:50:33"},{"nodeType":"YulAssignment","src":"48447:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48459:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48470:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48455:3:33"},"nodeType":"YulFunctionCall","src":"48455:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48447:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48286:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48300:4:33","type":""}],"src":"48135:344:33"},{"body":{"nodeType":"YulBlock","src":"48658:170:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48675:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48686:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48668:6:33"},"nodeType":"YulFunctionCall","src":"48668:21:33"},"nodeType":"YulExpressionStatement","src":"48668:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48709:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48720:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48705:3:33"},"nodeType":"YulFunctionCall","src":"48705:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"48725:2:33","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48698:6:33"},"nodeType":"YulFunctionCall","src":"48698:30:33"},"nodeType":"YulExpressionStatement","src":"48698:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48748:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48759:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48744:3:33"},"nodeType":"YulFunctionCall","src":"48744:18:33"},{"hexValue":"64732d6d6174682d6164642d6f766572666c6f77","kind":"string","nodeType":"YulLiteral","src":"48764:22:33","type":"","value":"ds-math-add-overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48737:6:33"},"nodeType":"YulFunctionCall","src":"48737:50:33"},"nodeType":"YulExpressionStatement","src":"48737:50:33"},{"nodeType":"YulAssignment","src":"48796:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48808:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"48819:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48804:3:33"},"nodeType":"YulFunctionCall","src":"48804:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48796:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48635:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48649:4:33","type":""}],"src":"48484:344:33"},{"body":{"nodeType":"YulBlock","src":"49007:228:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49024:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49035:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49017:6:33"},"nodeType":"YulFunctionCall","src":"49017:21:33"},"nodeType":"YulExpressionStatement","src":"49017:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49058:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49069:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49054:3:33"},"nodeType":"YulFunctionCall","src":"49054:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"49074:2:33","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49047:6:33"},"nodeType":"YulFunctionCall","src":"49047:30:33"},"nodeType":"YulExpressionStatement","src":"49047:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49097:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49108:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49093:3:33"},"nodeType":"YulFunctionCall","src":"49093:18:33"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"49113:34:33","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49086:6:33"},"nodeType":"YulFunctionCall","src":"49086:62:33"},"nodeType":"YulExpressionStatement","src":"49086:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49168:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49179:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49164:3:33"},"nodeType":"YulFunctionCall","src":"49164:18:33"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"49184:8:33","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49157:6:33"},"nodeType":"YulFunctionCall","src":"49157:36:33"},"nodeType":"YulExpressionStatement","src":"49157:36:33"},{"nodeType":"YulAssignment","src":"49202:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49214:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49225:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49210:3:33"},"nodeType":"YulFunctionCall","src":"49210:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49202:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48984:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48998:4:33","type":""}],"src":"48833:402:33"},{"body":{"nodeType":"YulBlock","src":"49377:137:33","statements":[{"nodeType":"YulVariableDeclaration","src":"49387:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"49407:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"49401:5:33"},"nodeType":"YulFunctionCall","src":"49401:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"49391:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"49449:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"49457:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49445:3:33"},"nodeType":"YulFunctionCall","src":"49445:17:33"},{"name":"pos","nodeType":"YulIdentifier","src":"49464:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"49469:6:33"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"49423:21:33"},"nodeType":"YulFunctionCall","src":"49423:53:33"},"nodeType":"YulExpressionStatement","src":"49423:53:33"},{"nodeType":"YulAssignment","src":"49485:23:33","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49496:3:33"},{"name":"length","nodeType":"YulIdentifier","src":"49501:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49492:3:33"},"nodeType":"YulFunctionCall","src":"49492:16:33"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"49485:3:33"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"49353:3:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"49358:6:33","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"49369:3:33","type":""}],"src":"49240:274:33"},{"body":{"nodeType":"YulBlock","src":"49693:179:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49710:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49721:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49703:6:33"},"nodeType":"YulFunctionCall","src":"49703:21:33"},"nodeType":"YulExpressionStatement","src":"49703:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49744:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49755:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49740:3:33"},"nodeType":"YulFunctionCall","src":"49740:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"49760:2:33","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49733:6:33"},"nodeType":"YulFunctionCall","src":"49733:30:33"},"nodeType":"YulExpressionStatement","src":"49733:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49783:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49794:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49779:3:33"},"nodeType":"YulFunctionCall","src":"49779:18:33"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"49799:31:33","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49772:6:33"},"nodeType":"YulFunctionCall","src":"49772:59:33"},"nodeType":"YulExpressionStatement","src":"49772:59:33"},{"nodeType":"YulAssignment","src":"49840:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49852:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"49863:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49848:3:33"},"nodeType":"YulFunctionCall","src":"49848:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49840:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49670:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"49684:4:33","type":""}],"src":"49519:353:33"},{"body":{"nodeType":"YulBlock","src":"49998:98:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50015:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"50026:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50008:6:33"},"nodeType":"YulFunctionCall","src":"50008:21:33"},"nodeType":"YulExpressionStatement","src":"50008:21:33"},{"nodeType":"YulAssignment","src":"50038:52:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"50063:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50075:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"50086:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50071:3:33"},"nodeType":"YulFunctionCall","src":"50071:18:33"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"50046:16:33"},"nodeType":"YulFunctionCall","src":"50046:44:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50038:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49967:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"49978:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"49989:4:33","type":""}],"src":"49877:219:33"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_6844() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x80)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory_6845() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory_6857() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x60)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory_6858() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xa0)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory_6860() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0160)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint8_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function validator_revert_uint8(value)\n    {\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_array_bytes_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, 0xffffffffffffffff)\n            {\n                let _3 := 0\n                revert(_3, _3)\n            }\n            mstore(dst, abi_decode_bytes(add(add(offset, innerOffset), _2), end))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_uint8_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            let value := calldataload(src)\n            validator_revert_uint8(value)\n            mstore(dst, value)\n            dst := add(dst, _4)\n        }\n        value0 := dst_1\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_bytes_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_tuple_t_contract$_IBentoBoxMinimal_$4138__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_uint16(value)\n    {\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint16t_uint8t_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_uint16(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_uint8(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        let offset := calldataload(add(headStart, 160))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value5 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_contract$_IStargateWidget_$4368__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IStargateRouter_$4360__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint16t_bytes_memory_ptrt_uint256t_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_uint16(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        value2 := calldataload(add(headStart, 64))\n        let value_1 := calldataload(add(headStart, 96))\n        validator_revert_address(value_1)\n        value3 := value_1\n        value4 := calldataload(add(headStart, 128))\n        let offset_1 := calldataload(add(headStart, 160))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value5 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$667(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_address_payable_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_payablet_boolt_uint8t_bytes32t_bytes32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := abi_decode_bool_fromMemory(add(headStart, 32))\n        let value_1 := mload(add(headStart, 64))\n        validator_revert_uint8(value_1)\n        value2 := value_1\n        value3 := mload(add(headStart, 96))\n        value4 := mload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_address_t_address_t_bool_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_bool_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n        mstore(add(headStart, 96), and(value3, 0xff))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        value4 := abi_decode_bool_fromMemory(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_address_payablet_address_payablet_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := mload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_address_payablet_address_payable_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_address_payablet_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_array$_t_address_$dyn_memory_ptrt_address_payable_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := mload(headStart)\n        let _1 := 32\n        value1 := mload(add(headStart, _1))\n        let offset := mload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_2, shl(5, _3)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let value := mload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _1)\n        }\n        value2 := dst_1\n        value3 := abi_decode_address_payable_fromMemory(add(headStart, 96))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_decode_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function abi_decode_tuple_t_struct$_ExactInputParams_$4494_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if slt(sub(dataEnd, _3), 0x80) { revert(0, 0) }\n        let value := allocate_memory_6844()\n        let value_1 := mload(_3)\n        validator_revert_address(value_1)\n        mstore(value, value_1)\n        mstore(add(value, _1), mload(add(_3, _1)))\n        let _4 := 64\n        mstore(add(value, _4), mload(add(_3, _4)))\n        let offset_1 := mload(add(_3, 96))\n        if gt(offset_1, _2) { revert(0, 0) }\n        let _5 := add(_3, offset_1)\n        if iszero(slt(add(_5, 0x1f), dataEnd)) { revert(0, 0) }\n        let _6 := mload(_5)\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_6))\n        let dst_1 := dst\n        mstore(dst, _6)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_5, shl(5, _6)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_5, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let innerOffset := mload(src)\n            if gt(innerOffset, _2)\n            {\n                let _7 := 0\n                revert(_7, _7)\n            }\n            let _8 := add(_5, innerOffset)\n            if slt(add(sub(dataEnd, _8), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), _4)\n            {\n                let _9 := 0\n                revert(_9, _9)\n            }\n            let value_2 := allocate_memory_6845()\n            let value_3 := mload(add(_8, _1))\n            validator_revert_address(value_3)\n            mstore(value_2, value_3)\n            let offset_2 := mload(add(_8, _4))\n            if gt(offset_2, _2)\n            {\n                let _10 := 0\n                revert(_10, _10)\n            }\n            mstore(add(value_2, _1), abi_decode_bytes_fromMemory(add(add(_8, offset_2), _1), dataEnd))\n            mstore(dst, value_2)\n            dst := add(dst, _1)\n        }\n        mstore(add(value, 96), dst_1)\n        value0 := value\n    }\n    function abi_decode_array_struct_PercentagePath_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := mload(src)\n            let _3 := 0xffffffffffffffff\n            if gt(innerOffset, _3)\n            {\n                let _4 := 0\n                revert(_4, _4)\n            }\n            let _5 := add(offset, innerOffset)\n            let _6 := 0x80\n            if slt(add(sub(end, _5), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), _6)\n            {\n                let _7 := 0\n                revert(_7, _7)\n            }\n            let value := allocate_memory_6844()\n            let value_1 := mload(add(_5, _2))\n            validator_revert_address(value_1)\n            mstore(value, value_1)\n            let _8 := 64\n            let value_2 := mload(add(_5, _8))\n            validator_revert_address(value_2)\n            mstore(add(value, _2), value_2)\n            let _9 := 96\n            let value_3 := mload(add(_5, _9))\n            if iszero(eq(value_3, and(value_3, _3)))\n            {\n                let _10 := 0\n                revert(_10, _10)\n            }\n            mstore(add(value, _8), value_3)\n            let offset_1 := mload(add(_5, _6))\n            if gt(offset_1, _3)\n            {\n                let _11 := 0\n                revert(_11, _11)\n            }\n            mstore(add(value, _9), abi_decode_bytes_fromMemory(add(add(_5, offset_1), _2), end))\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_struct_Output_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(7, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, 0x80) }\n        {\n            if slt(sub(end, src), 0x80)\n            {\n                let _3 := 0\n                revert(_3, _3)\n            }\n            let value := allocate_memory_6844()\n            let value_1 := mload(src)\n            validator_revert_address(value_1)\n            mstore(value, value_1)\n            let value_2 := mload(add(src, _2))\n            validator_revert_address(value_2)\n            mstore(add(value, _2), value_2)\n            let _4 := 64\n            mstore(add(value, _4), abi_decode_bool_fromMemory(add(src, _4)))\n            let _5 := 96\n            mstore(add(value, _5), mload(add(src, _5)))\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_struct$_ComplexPathParams_$4543_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if slt(sub(dataEnd, _3), 0x60) { revert(0, 0) }\n        let value := allocate_memory_6857()\n        let offset_1 := mload(_3)\n        if gt(offset_1, _2) { revert(0, 0) }\n        let _4 := add(_3, offset_1)\n        if iszero(slt(add(_4, 0x1f), dataEnd)) { revert(0, 0) }\n        let _5 := mload(_4)\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_5))\n        let dst_1 := dst\n        mstore(dst, _5)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_4, shl(5, _5)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_4, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let innerOffset := mload(src)\n            if gt(innerOffset, _2) { revert(0, 0) }\n            let _6 := add(_4, innerOffset)\n            if slt(add(sub(dataEnd, _6), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0xa0) { revert(0, 0) }\n            let value_1 := allocate_memory_6858()\n            let value_2 := mload(add(_6, _1))\n            validator_revert_address(value_2)\n            mstore(value_1, value_2)\n            let value_3 := mload(add(_6, 64))\n            validator_revert_address(value_3)\n            mstore(add(value_1, _1), value_3)\n            mstore(add(value_1, 64), abi_decode_bool_fromMemory(add(_6, 0x60)))\n            mstore(add(value_1, 0x60), mload(add(_6, 128)))\n            let offset_2 := mload(add(_6, 0xa0))\n            if gt(offset_2, _2)\n            {\n                let _7 := 0\n                revert(_7, _7)\n            }\n            mstore(add(value_1, 128), abi_decode_bytes_fromMemory(add(add(_6, offset_2), _1), dataEnd))\n            mstore(dst, value_1)\n            dst := add(dst, _1)\n        }\n        mstore(value, dst_1)\n        let offset_3 := mload(add(_3, _1))\n        if gt(offset_3, _2) { revert(0, 0) }\n        mstore(add(value, _1), abi_decode_array_struct_PercentagePath_dyn_fromMemory(add(_3, offset_3), dataEnd))\n        let offset_4 := mload(add(_3, 64))\n        if gt(offset_4, _2) { revert(0, 0) }\n        mstore(add(value, 64), abi_decode_array_struct_Output_dyn_fromMemory(add(_3, offset_4), dataEnd))\n        value0 := value\n    }\n    function abi_decode_uint16_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_uint16(value)\n    }\n    function abi_decode_array_uint8_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let value := mload(src)\n            validator_revert_uint8(value)\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_uint256_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_bytes_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint8_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := mload(src)\n            if gt(innerOffset, 0xffffffffffffffff)\n            {\n                let _3 := 0\n                revert(_3, _3)\n            }\n            mstore(dst, abi_decode_bytes_fromMemory(add(add(offset, innerOffset), _2), end))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_struct$_StargateTeleportParams_$2852_memory_ptrt_array$_t_uint8_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        let _1 := sub(dataEnd, headStart)\n        if slt(_1, 448) { revert(0, 0) }\n        let _2 := 0x0160\n        if slt(_1, _2) { revert(0, 0) }\n        let value := allocate_memory_6860()\n        mstore(value, abi_decode_uint16_fromMemory(headStart))\n        mstore(add(value, 32), abi_decode_address_payable_fromMemory(add(headStart, 32)))\n        mstore(add(value, 64), mload(add(headStart, 64)))\n        mstore(add(value, 96), mload(add(headStart, 96)))\n        mstore(add(value, 128), mload(add(headStart, 128)))\n        mstore(add(value, 160), mload(add(headStart, 160)))\n        mstore(add(value, 192), mload(add(headStart, 192)))\n        mstore(add(value, 224), abi_decode_address_payable_fromMemory(add(headStart, 224)))\n        let _3 := 256\n        mstore(add(value, _3), abi_decode_address_payable_fromMemory(add(headStart, _3)))\n        let _4 := 288\n        mstore(add(value, _4), mload(add(headStart, _4)))\n        let _5 := 320\n        mstore(add(value, _5), mload(add(headStart, _5)))\n        value0 := value\n        let offset := mload(add(headStart, _2))\n        let _6 := 0xffffffffffffffff\n        if gt(offset, _6) { revert(0, 0) }\n        value1 := abi_decode_array_uint8_dyn_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 384))\n        if gt(offset_1, _6) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn_fromMemory(add(headStart, offset_1), dataEnd)\n        let offset_2 := mload(add(headStart, 416))\n        if gt(offset_2, _6) { revert(0, 0) }\n        value3 := abi_decode_array_bytes_dyn_fromMemory(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        end := add(pos, 20)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_struct_lzTxObj(value, pos) -> end\n    {\n        mstore(pos, mload(value))\n        mstore(add(pos, 0x20), mload(add(value, 0x20)))\n        let memberValue0 := mload(add(value, 0x40))\n        mstore(add(pos, 0x40), 0x60)\n        end := abi_encode_bytes(memberValue0, add(pos, 0x60))\n    }\n    function abi_encode_tuple_t_uint16_t_uint8_t_bytes_memory_ptr_t_bytes_memory_ptr_t_struct$_lzTxObj_$4319_memory_ptr__to_t_uint16_t_uint8_t_bytes_memory_ptr_t_bytes_memory_ptr_t_struct$_lzTxObj_$4319_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_bytes(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_bytes(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_struct_lzTxObj(value4, tail_2)\n    }\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address_payablet_array$_t_uint8_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := mload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint8_dyn_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn_fromMemory(add(headStart, offset_1), dataEnd)\n        let offset_2 := mload(add(headStart, 96))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value3 := abi_decode_array_bytes_dyn_fromMemory(add(headStart, offset_2), dataEnd)\n        value4 := mload(add(headStart, 128))\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_array_uint8_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_array_bytes_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        let updated_pos := add(pos, _1)\n        let pos_1 := updated_pos\n        pos := updated_pos\n        let tail := add(pos_1, shl(5, length))\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, pos_1))\n            tail := abi_encode_bytes(mload(srcPtr), tail)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        end := tail\n    }\n    function abi_encode_tuple_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_array_uint8_dyn(value0, add(headStart, 96))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_array_bytes_dyn(value2, tail_2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_address_t_uint256_t_uint256__to_t_address_t_address_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bool__to_t_address_t_uint256_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_address_t_uint256__to_t_address_t_address_t_address_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_f9bba043a83225eb6b59e03a620d9be35c0c01b2645fd69986af78bab24b3d55__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"insufficient-amount-out\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_address_t_uint256_t_rational_0_by_1__to_t_address_t_address_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address_t_address_t_address_t_rational_0_by_1_t_uint256__to_t_address_t_address_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__to_t_address_t_array$_t_uint8_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 160)\n        let tail_1 := abi_encode_array_uint8_dyn(value1, add(headStart, 160))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value2, tail_1)\n        mstore(add(headStart, 96), sub(tail_2, headStart))\n        tail := abi_encode_array_bytes_dyn(value3, tail_2)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4319_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_uint16_t_uint256_t_uint256_t_address_payable_t_uint256_t_uint256_t_struct$_lzTxObj_$4319_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 288\n        mstore(headStart, and(value0, 0xffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), _1)\n        let tail_1 := abi_encode_struct_lzTxObj(value6, add(headStart, _1))\n        mstore(add(headStart, 224), sub(tail_1, headStart))\n        let tail_2 := abi_encode_bytes(value7, tail_1)\n        mstore(add(headStart, 256), sub(tail_2, headStart))\n        tail := abi_encode_bytes(value8, tail_2)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_bytes2__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(shl(240, value0), 0xffff000000000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"SafeERC20: approve from non-zero\")\n        mstore(add(headStart, 96), \" to non-zero allowance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"UniswapV2Library: INVALID_PATH\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_packed_t_address_t_address__to_t_address_t_address__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000\n        mstore(pos, and(shl(96, value0), _1))\n        mstore(add(pos, 20), and(shl(96, value1), _1))\n        end := add(pos, 40)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9_t_address_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, 0xff00000000000000000000000000000000000000000000000000000000000000)\n        mstore(add(pos, 1), and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 21), value1)\n        mstore(add(pos, 53), value2)\n        end := add(pos, 85)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_address_t_bytes_memory_ptr__to_t_uint256_t_uint256_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_bytes(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_bool_fromMemory(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_uint112_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_uint112_fromMemory(headStart)\n        value1 := abi_decode_uint112_fromMemory(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n        value2 := value\n    }\n    function abi_encode_tuple_t_stringliteral_ec21b006eb37ef20d0f4abcabd34de6854fa68af48294244e0263dc05c1dbbae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"UniswapV2Library: INSUFFICIENT_I\")\n        mstore(add(headStart, 96), \"NPUT_AMOUNT\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"UniswapV2Library: INSUFFICIENT_L\")\n        mstore(add(headStart, 96), \"IQUIDITY\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4ddc3ca35a8b7ccaa016ab70252fdf3396ded4f4fd8375f95b1e9d99790fcdca__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"UniswapV2Library: IDENTICAL_ADDR\")\n        mstore(add(headStart, 96), \"ESSES\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_db0dda5a73ac3122e17df097fa2cbce2c5161b45d20c7d6cf363d3b147392c83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"UniswapV2Library: ZERO_ADDRESS\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"ds-math-mul-overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"ds-math-add-overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3967":[{"length":32,"start":232},{"length":32,"start":929},{"length":32,"start":1569},{"length":32,"start":1612},{"length":32,"start":2101},{"length":32,"start":4429},{"length":32,"start":4654},{"length":32,"start":4858},{"length":32,"start":5060},{"length":32,"start":6481},{"length":32,"start":6520},{"length":32,"start":6585},{"length":32,"start":7134},{"length":32,"start":7669},{"length":32,"start":7993},{"length":32,"start":8505},{"length":32,"start":8878},{"length":32,"start":9189}],"3972":[{"length":32,"start":497},{"length":32,"start":2921},{"length":32,"start":3324},{"length":32,"start":4258},{"length":32,"start":9600}],"3977":[{"length":32,"start":379},{"length":32,"start":10206}],"3981":[{"length":32,"start":581},{"length":32,"start":5688},{"length":32,"start":5927},{"length":32,"start":12027},{"length":32,"start":12094}],"3985":[{"length":32,"start":431},{"length":32,"start":5723},{"length":32,"start":6014},{"length":32,"start":12129}],"3989":[{"length":32,"start":633},{"length":32,"start":3467},{"length":32,"start":3932}]},"linkReferences":{},"object":"6080604052600436106100b55760003560e01c8063a9e56f3c11610069578063c45a01551161004e578063c45a015514610233578063cf36fd2414610267578063d1ac35351461029b57600080fd5b8063a9e56f3c146101df578063ab8236f31461021357600080fd5b80636ce4fe031161009a5780636ce4fe03146101345780636f435ac2146101695780639aab92481461019d57600080fd5b8063656f3d64146100c15780636b2ace87146100d657600080fd5b366100bc57005b600080fd5b6100d46100cf366004613b37565b6102bb565b005b3480156100e257600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561014057600080fd5b5061015461014f366004613c4f565b610b64565b6040805192835260208301919091520161012b565b34801561017557600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101a957600080fd5b506101d17f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161012b565b3480156101eb57600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561021f57600080fd5b506100d461022e366004613cd6565b610ce4565b34801561023f57600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561027357600080fd5b5061010a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a757600080fd5b506100d46102b6366004613d66565b611086565b825160005b81811015610b5d5760008582815181106102dc576102dc613d8a565b60200260200101519050600060ff168160ff16141561040957600080600080600088878151811061030f5761030f613d8a565b602002602001015180602001905181019061032a9190613dd9565b6040517fc0a47c9300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152306024830152851515604483015260ff851660648301526084820184905260a48201839052959a50939850919650945092507f00000000000000000000000000000000000000000000000000000000000000009091169063c0a47c939060c401600060405180830381600087803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b505050505050505050610b54565b60ff8116600114156104805760008060008087868151811061042d5761042d613d8a565b60200260200101518060200190518101906104489190613e33565b935093509350935061047784338585858e8c8151811061046a5761046a613d8a565b60200260200101516110ea565b50505050610b54565b60ff8116600214156104e35760008060008060008887815181106104a6576104a6613d8a565b60200260200101518060200190518101906104c19190613e7b565b945094509450945094506104d98533868686866111c5565b5050505050610b54565b60ff8116600b141561053a57600080600086858151811061050657610506613d8a565b60200260200101518060200190518101906105219190613ed8565b925092509250610532838383611428565b505050610b54565b60ff8116600314156106805760008060008087868151811061055e5761055e613d8a565b60200260200101518060200190518101906105799190613e33565b9350935093509350816000141561061b576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156105f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106189190613f1b565b91505b610646847f00000000000000000000000000000000000000000000000000000000000000008461144f565b610477847f00000000000000000000000000000000000000000000000000000000000000008585858e8c8151811061046a5761046a613d8a565b60ff81166004141561078c5760008060008685815181106106a3576106a3613d8a565b60200260200101518060200190518101906106be9190613ed8565b92509250925080600014156107815773ffffffffffffffffffffffffffffffffffffffff83161561077e576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190613f1b565b9050610781565b50475b61053283838361144f565b60ff8116600514156108b15760008060008060008887815181106107b2576107b2613d8a565b60200260200101518060200190518101906107cd9190613e7b565b945094509450945094508260001480156107e5575081155b156108a3576040517ff7888aec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301523060248301527f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190613f1b565b91505b6104d98530868686866111c5565b60ff811660061415610902576000808584815181106108d2576108d2613d8a565b60200260200101518060200190518101906108ed9190613f34565b915091506108fb82826114d5565b5050610b54565b60ff8116600c141561094c5760008085848151811061092357610923613d8a565b602002602001015180602001905181019061093e9190613f6e565b915091506108fb82826115cb565b60ff811660071415610a6a5760008060008087868151811061097057610970613d8a565b602002602001015180602001905181019061098b9190613f9c565b935093509350935060008460001415610a5257826000815181106109b1576109b1613d8a565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b9190613f1b565b9450600190505b610a5f8585858585611630565b505050505050610b54565b60ff811660081415610ab0576000848381518110610a8a57610a8a613d8a565b6020026020010151806020019051810190610aa591906140cd565b90506108fb816118a4565b60ff811660091415610afc576000848381518110610ad057610ad0613d8a565b6020026020010151806020019051810190610aeb91906143fa565b9050610af681611bce565b50610b54565b60ff8116600a1415610b5457600080600080878681518110610b2057610b20613d8a565b6020026020010151806020019051810190610b3b91906146f7565b9350935093509350610b4f84848484612506565b505050505b506001016102c0565b5050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630a512369898989604051602001610be1919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b60405160208183030381529060405287604051602001610c019190614875565b60405160208183030381529060405260405180606001604052808c81526020018b81526020018d604051602001610c63919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528152506040518663ffffffff1660e01b8152600401610c959594939291906148b1565b6040805180830381865afa158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd59190614909565b90999098509650505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d53576040517f8c66bf5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600080600085806020019051810190610d6f919061492d565b939850919650945092509050620186a06000815a1015610ea7577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614610dfd57610dfd73ffffffffffffffffffffffffffffffffffffffff8b16888b612889565b4715610e625760405173ffffffffffffffffffffffffffffffffffffffff8816904790600081818185875af1925050503d8060008114610e59576040519150601f19603f3d011682016040523d82523d6000602084013e610e5e565b606091505b5050505b5060405160018082529083907fd02bbeba90c0a3636769d1b8c9f07e2b5e4131b8fbcc2d6ba56054e20b98d75d9060200160405180910390a25050505050505061107e565b6000825a610eb59190614a02565b6040517f656f3d64000000000000000000000000000000000000000000000000000000008152909150309063656f3d64908390610efa908b908b908b90600401614adc565b600060405180830381600088803b158015610f1457600080fd5b5087f193505050508015610f26575060015b610fd4573d808015610f54576040519150601f19603f3d011682016040523d82523d6000602084013e610f59565b606091505b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614610fce57610fce73ffffffffffffffffffffffffffffffffffffffff8d168a8d612889565b60019250505b47156110395760405173ffffffffffffffffffffffffffffffffffffffff8916904790600081818185875af1925050503d8060008114611030576040519150601f19603f3d011682016040523d82523d6000602084013e611035565b606091505b5050505b837fd02bbeba90c0a3636769d1b8c9f07e2b5e4131b8fbcc2d6ba56054e20b98d75d8360405161106d911515815260200190565b60405180910390a250505050505050505b505050505050565b6110e773ffffffffffffffffffffffffffffffffffffffff82167f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61295d565b50565b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c90839060a401604080518083038185885af1158015611196573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111bb9190614909565b5050505050505050565b80156112a1576040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af1158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190614909565b505061107e565b8215611368576040517fda5139ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201859052600060448301527f0000000000000000000000000000000000000000000000000000000000000000169063da5139ca90606401602060405180830381865afa158015611341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113659190613f1b565b91505b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015286811660248301528581166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b15801561140857600080fd5b505af115801561141c573d6000803e3d6000fd5b50505050505050505050565b61144a73ffffffffffffffffffffffffffffffffffffffff8416338484612adf565b505050565b73ffffffffffffffffffffffffffffffffffffffff83161561148c5761144a73ffffffffffffffffffffffffffffffffffffffff84168383612889565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f193505050501580156114cf573d6000803e3d6000fd5b50505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d9082906370a0823190602401602060405180830381865afa158015611547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156b9190613f1b565b6040518263ffffffff1660e01b815260040161158991815260200190565b600060405180830381600087803b1580156115a357600080fd5b505af11580156115b7573d6000803e3d6000fd5b505050506115c76000824761144f565b5050565b8173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561161357600080fd5b505af1158015611627573d6000803e3d6000fd5b50505050505050565b60008061167f7f000000000000000000000000000000000000000000000000000000000000000088877f0000000000000000000000000000000000000000000000000000000000000000612b3d565b905080600182516116909190614a02565b815181106116a0576116a0613d8a565b6020026020010151915085821015611719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e73756666696369656e742d616d6f756e742d6f757400000000000000000060448201526064015b60405180910390fd5b821561188f5761188f6117a27f00000000000000000000000000000000000000000000000000000000000000008760008151811061175957611759613d8a565b60200260200101518860018151811061177457611774613d8a565b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000612ce4565b866000815181106117b5576117b5613d8a565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561182b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184f9190613f1b565b8760008151811061186257611862613d8a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166128899092919063ffffffff16565b61189a818686612dfe565b5095945050505050565b6000816020015160001415611ab05781516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119459190613f1b565b905061197683600001517f00000000000000000000000000000000000000000000000000000000000000008361144f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166302b9446c84600001517f000000000000000000000000000000000000000000000000000000000000000086606001516000815181106119ef576119ef613d8a565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152919091166044820152606481018490526000608482015260a40160408051808303816000875af1158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa89190614909565b602085015250505b60608201515160005b81811015611b895783606001518181518110611ad757611ad7613d8a565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a85606001518381518110611b1457611b14613d8a565b6020026020010151602001516040518263ffffffff1660e01b8152600401611b3c9190614875565b6020604051808303816000875af1158015611b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7f9190613f1b565b9250600101611ab9565b508260400151821015611bc8576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b80515160005b81811015611dde577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc84600001518381518110611c2e57611c2e613d8a565b6020026020010151600001513086600001518581518110611c5157611c51613d8a565b60200260200101516020015187600001518681518110611c7357611c73613d8a565b6020908102919091010151606001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152921660448201526064810191909152608401600060405180830381600087803b158015611cff57600080fd5b505af1158015611d13573d6000803e3d6000fd5b5050505082600001518181518110611d2d57611d2d613d8a565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a84600001518381518110611d6a57611d6a613d8a565b6020026020010151608001516040518263ffffffff1660e01b8152600401611d929190614875565b6020604051808303816000875af1158015611db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd59190613f1b565b50600101611bd4565b505060208101515160005b818110156121225760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec85602001518481518110611e4557611e45613d8a565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015611ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee49190613f1b565b90506000611ef46008600a614c3f565b85602001518481518110611f0a57611f0a613d8a565b60200260200101516040015167ffffffffffffffff1683611f2b9190614c4e565b611f359190614c8b565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc86602001518581518110611f8957611f89613d8a565b6020026020010151600001513088602001518781518110611fac57611fac613d8a565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b15801561203857600080fd5b505af115801561204c573d6000803e3d6000fd5b505050508460200151838151811061206657612066613d8a565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a866020015185815181106120a3576120a3613d8a565b6020026020010151606001516040518263ffffffff1660e01b81526004016120cb9190614875565b6020604051808303816000875af11580156120ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210e9190613f1b565b50505061211b8160010190565b9050611de9565b505060408101515160005b8181101561144a5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec8560400151848151811061218957612189613d8a565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015612204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122289190613f1b565b90508360400151828151811061224057612240613d8a565b602002602001015160600151811015612285576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360400151828151811061229b5761229b613d8a565b602002602001015160400151156123e3577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166397da6d30856040015184815181106122fe576122fe613d8a565b602002602001015160000151308760400151868151811061232157612321613d8a565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152919091166044820152600060648201526084810184905260a40160408051808303816000875af11580156123b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dc9190614909565b50506124fd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc8560400151848151811061243557612435613d8a565b602002602001015160000151308760400151868151811061245857612458613d8a565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b1580156124e457600080fd5b505af11580156124f8573d6000803e3d6000fd5b505050505b5060010161212d565b600084610100015184848488610140015160405160200161252b959493929190614cc6565b6040516020818303038152906040529050620186a0856101200151101561257e576040517f1c26714c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639fbf10fc47876000015188604001518960600151338b60800151600014156126715760208c01516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266c9190613f1b565b612677565b8b608001515b8c60a0015160405180606001604052808f610120015181526020018f60c0015181526020018f60e001516040516020016126dc919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528152508e60e0015160405160200161272e919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528b6040518b63ffffffff1660e01b815260040161276299989796959493929190614d2e565b6000604051808303818588803b15801561277b57600080fd5b505af115801561278f573d6000803e3d6000fd5b50506040517fa87376e90000000000000000000000000000000000000000000000000000000081527e0100000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16935063a87376e992506024019050600060405180830381600087803b15801561283b57600080fd5b505af115801561284f573d6000803e3d6000fd5b505050506101408501516040517fef89f27cad105cfe7c63f4a5c70e6b1392b571ff544a83de4bf71ceb46bacfee90600090a25050505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261144a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261303b565b8015806129fd57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156129d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fb9190613f1b565b155b612a89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401611710565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261144a9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064016128db565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526114cf9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016128db565b6060600283511015612bab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152606401611710565b825167ffffffffffffffff811115612bc557612bc561384e565b604051908082528060200260200182016040528015612bee578160200160208202803683370190505b5090508381600081518110612c0557612c05613d8a565b60200260200101818152505060005b60018451612c229190614a02565b811015612cdb57600080612c7688878581518110612c4257612c42613d8a565b602002602001015188866001612c589190614db9565b81518110612c6857612c68613d8a565b60200260200101518861314a565b91509150612c9e848481518110612c8f57612c8f613d8a565b6020026020010151838361324b565b84612caa856001614db9565b81518110612cba57612cba613d8a565b60200260200101818152505050508080612cd390614dd1565b915050612c14565b50949350505050565b6000806000612cf386866133c5565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b166034820152919350915087906048016040516020818303038152906040528051906020012085604051602001612dbd939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120979650505050505050565b60005b60018351612e0f9190614a02565b8110156114cf57600080848381518110612e2b57612e2b613d8a565b602002602001015185846001612e419190614db9565b81518110612e5157612e51613d8a565b6020026020010151915091506000612e6983836133c5565b509050600087612e7a866001614db9565b81518110612e8a57612e8a613d8a565b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612ed257826000612ed6565b6000835b91509150600060028a51612eea9190614a02565b8810612ef65788612f37565b612f377f0000000000000000000000000000000000000000000000000000000000000000878c612f278c6002614db9565b8151811061177457611774613d8a565b9050612f857f000000000000000000000000000000000000000000000000000000000000000088887f0000000000000000000000000000000000000000000000000000000000000000612ce4565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612fcf576020820181803683370190505b506040518563ffffffff1660e01b8152600401612fef9493929190614e0a565b600060405180830381600087803b15801561300957600080fd5b505af115801561301d573d6000803e3d6000fd5b5050505050505050505050808061303390614dd1565b915050612e01565b600061309d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661354a9092919063ffffffff16565b90508051600014806130be5750808060200190518101906130be9190614e45565b61144a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401611710565b600080600061315986866133c5565b50905060008061316b89898989612ce4565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156131b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d99190614e7e565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461323857808261323b565b81815b909a909950975050505050505050565b60008084116132dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608401611710565b6000831180156132ec5750600082115b613378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152608401611710565b6000613386856103e5613561565b905060006133948285613561565b905060006133ae836133a8886103e8613561565b906135f1565b90506133ba8183614c8b565b979650505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608401611710565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106134be5782846134c1565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216613543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401611710565b9250929050565b60606135598484600085613669565b949350505050565b6000811580613585575082826135778183614c4e565b92506135839083614c8b565b145b6135eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606401611710565b92915050565b6000826135fe8382614db9565b91508110156135eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401611710565b6060824710156136fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401611710565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516137249190614ece565b60006040518083038185875af1925050503d8060008114613761576040519150601f19603f3d011682016040523d82523d6000602084013e613766565b606091505b50915091506133ba87838387606083156138055782516137fe5773ffffffffffffffffffffffffffffffffffffffff85163b6137fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611710565b5081613559565b613559838381511561381a5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117109190614875565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156138a0576138a061384e565b60405290565b6040805190810167ffffffffffffffff811182821017156138a0576138a061384e565b6040516060810167ffffffffffffffff811182821017156138a0576138a061384e565b60405160a0810167ffffffffffffffff811182821017156138a0576138a061384e565b604051610160810167ffffffffffffffff811182821017156138a0576138a061384e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561397a5761397a61384e565b604052919050565b600067ffffffffffffffff82111561399c5761399c61384e565b5060051b60200190565b60ff811681146110e757600080fd5b600082601f8301126139c657600080fd5b813560206139db6139d683613982565b613933565b82815260059290921b840181019181810190868411156139fa57600080fd5b8286015b84811015613a1557803583529183019183016139fe565b509695505050505050565b600067ffffffffffffffff821115613a3a57613a3a61384e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112613a7757600080fd5b8135613a856139d682613a20565b818152846020838601011115613a9a57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613ac857600080fd5b81356020613ad86139d683613982565b82815260059290921b84018101918181019086841115613af757600080fd5b8286015b84811015613a1557803567ffffffffffffffff811115613b1b5760008081fd5b613b298986838b0101613a66565b845250918301918301613afb565b600080600060608486031215613b4c57600080fd5b833567ffffffffffffffff80821115613b6457600080fd5b818601915086601f830112613b7857600080fd5b81356020613b886139d683613982565b82815260059290921b8401810191818101908a841115613ba757600080fd5b948201945b83861015613bce578535613bbf816139a6565b82529482019490820190613bac565b97505087013592505080821115613be457600080fd5b613bf0878388016139b5565b93506040860135915080821115613c0657600080fd5b50613c1386828701613ab7565b9150509250925092565b61ffff811681146110e757600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146110e757600080fd5b60008060008060008060c08789031215613c6857600080fd5b8635613c7381613c1d565b95506020870135613c83816139a6565b94506040870135613c9381613c2d565b9350606087013592506080870135915060a087013567ffffffffffffffff811115613cbd57600080fd5b613cc989828a01613a66565b9150509295509295509295565b60008060008060008060c08789031215613cef57600080fd5b8635613cfa81613c1d565b9550602087013567ffffffffffffffff80821115613d1757600080fd5b613d238a838b01613a66565b96506040890135955060608901359150613d3c82613c2d565b9093506080880135925060a08801359080821115613d5957600080fd5b50613cc989828a01613a66565b600060208284031215613d7857600080fd5b8135613d8381613c2d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8051613dc481613c2d565b919050565b80518015158114613dc457600080fd5b600080600080600060a08688031215613df157600080fd5b8551613dfc81613c2d565b9450613e0a60208701613dc9565b93506040860151613e1a816139a6565b6060870151608090970151959894975095949392505050565b60008060008060808587031215613e4957600080fd5b8451613e5481613c2d565b6020860151909450613e6581613c2d565b6040860151606090960151949790965092505050565b600080600080600060a08688031215613e9357600080fd5b8551613e9e81613c2d565b6020870151909550613eaf81613c2d565b6040870151606088015191955093509150613ecc60808701613dc9565b90509295509295909350565b600080600060608486031215613eed57600080fd5b8351613ef881613c2d565b6020850151909350613f0981613c2d565b80925050604084015190509250925092565b600060208284031215613f2d57600080fd5b5051919050565b60008060408385031215613f4757600080fd5b8251613f5281613c2d565b6020840151909250613f6381613c2d565b809150509250929050565b60008060408385031215613f8157600080fd5b8251613f8c81613c2d565b6020939093015192949293505050565b60008060008060808587031215613fb257600080fd5b845193506020808601519350604086015167ffffffffffffffff811115613fd857600080fd5b8601601f81018813613fe957600080fd5b8051613ff76139d682613982565b81815260059190911b8201830190838101908a83111561401657600080fd5b928401925b8284101561403d57835161402e81613c2d565b8252928401929084019061401b565b809650505050505061405160608601613db9565b905092959194509250565b60005b8381101561407757818101518382015260200161405f565b838111156114cf5750506000910152565b600082601f83011261409957600080fd5b81516140a76139d682613a20565b8181528460208386010111156140bc57600080fd5b61355982602083016020870161405c565b600060208083850312156140e057600080fd5b825167ffffffffffffffff808211156140f857600080fd5b908401906080828703121561410c57600080fd5b61411461387d565b825161411f81613c2d565b815282840151848201526040808401518183015260608401518381111561414557600080fd5b80850194505087601f85011261415a57600080fd5b83516141686139d682613982565b81815260059190911b8501860190868101908a83111561418757600080fd5b8787015b83811015614221578051878111156141a35760008081fd5b8801808d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018613156141d75760008081fd5b6141df6138a6565b8a8201516141ec81613c2d565b815281870151898111156142005760008081fd5b61420e8f8d83860101614088565b828d01525084525091880191880161418b565b506060850152509198975050505050505050565b600082601f83011261424657600080fd5b815160206142566139d683613982565b82815260059290921b8401810191818101908684111561427557600080fd5b8286015b84811015613a1557805167ffffffffffffffff8082111561429a5760008081fd5b81890191506080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156142d35760008081fd5b6142db61387d565b878401516142e881613c2d565b81526040848101516142f981613c2d565b828a015260608581015185811681146143125760008081fd5b8383015292850151928484111561432b57600091508182fd5b6143398e8b86890101614088565b90830152508652505050918301918301614279565b600082601f83011261435f57600080fd5b8151602061436f6139d683613982565b82815260079290921b8401810191818101908684111561438e57600080fd5b8286015b84811015613a1557608081890312156143ab5760008081fd5b6143b361387d565b81516143be81613c2d565b8152818501516143cd81613c2d565b8186015260406143de838201613dc9565b9082015260608281015190820152835291830191608001614392565b6000602080838503121561440d57600080fd5b825167ffffffffffffffff8082111561442557600080fd5b908401906060828703121561443957600080fd5b6144416138c9565b82518281111561445057600080fd5b8301601f8101881361446157600080fd5b805161446f6139d682613982565b81815260059190911b8201860190868101908a83111561448e57600080fd5b8784015b83811015614556578051878111156144a957600080fd5b850160a0818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00112156144dd57600080fd5b6144e56138ec565b8a8201516144f281613c2d565b8152604082015161450281613c2d565b818c015261451260608301613dc9565b60408201526080820151606082015260a0820151898111156145345760008081fd5b6145428f8d83860101614088565b608083015250845250918801918801614492565b508452505050828401518281111561456d57600080fd5b61457988828601614235565b8583015250604083015193508184111561459257600080fd5b61459e8785850161434e565b60408201529695505050505050565b8051613dc481613c1d565b600082601f8301126145c957600080fd5b815160206145d96139d683613982565b82815260059290921b840181019181810190868411156145f857600080fd5b8286015b84811015613a1557805161460f816139a6565b83529183019183016145fc565b600082601f83011261462d57600080fd5b8151602061463d6139d683613982565b82815260059290921b8401810191818101908684111561465c57600080fd5b8286015b84811015613a155780518352918301918301614660565b600082601f83011261468857600080fd5b815160206146986139d683613982565b82815260059290921b840181019181810190868411156146b757600080fd5b8286015b84811015613a1557805167ffffffffffffffff8111156146db5760008081fd5b6146e98986838b0101614088565b8452509183019183016146bb565b6000806000808486036101c081121561470f57600080fd5b6101608082121561471f57600080fd5b61472761390f565b9150614732876145ad565b825261474060208801613db9565b602083015260408701516040830152606087015160608301526080870151608083015260a087015160a083015260c087015160c083015261478360e08801613db9565b60e0830152610100614796818901613db9565b908301526101208781015190830152610140808801519083015286015190945067ffffffffffffffff808211156147cc57600080fd5b6147d8888389016145b8565b94506101808701519150808211156147ef57600080fd5b6147fb8883890161461c565b93506101a087015191508082111561481257600080fd5b5061481f87828801614677565b91505092959194509250565b6000815180845261484381602086016020860161405c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000613d83602083018461482b565b80518252602081015160208301526000604082015160606040850152613559606085018261482b565b61ffff8616815260ff8516602082015260a0604082015260006148d760a083018661482b565b82810360608401526148e9818661482b565b905082810360808401526148fd8185614888565b98975050505050505050565b6000806040838503121561491c57600080fd5b505080516020909101519092909150565b600080600080600060a0868803121561494557600080fd5b855161495081613c2d565b602087015190955067ffffffffffffffff8082111561496e57600080fd5b61497a89838a016145b8565b9550604088015191508082111561499057600080fd5b61499c89838a0161461c565b945060608801519150808211156149b257600080fd5b506149bf88828901614677565b925050608086015190509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614a1457614a146149d3565b500390565b600081518084526020808501945080840160005b83811015614a4c57815160ff1687529582019590820190600101614a2d565b509495945050505050565b600081518084526020808501945080840160005b83811015614a4c57815187529582019590820190600101614a6b565b600081518084526020808501808196508360051b8101915082860160005b85811015614acf578284038952614abd84835161482b565b98850198935090840190600101614aa5565b5091979650505050505050565b606081526000614aef6060830186614a19565b8281036020840152614b018186614a57565b90508281036040840152614b158185614a87565b9695505050505050565b600181815b80851115614b7857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614b5e57614b5e6149d3565b80851615614b6b57918102915b93841c9390800290614b24565b509250929050565b600082614b8f575060016135eb565b81614b9c575060006135eb565b8160018114614bb25760028114614bbc57614bd8565b60019150506135eb565b60ff841115614bcd57614bcd6149d3565b50506001821b6135eb565b5060208310610133831016604e8410600b8410161715614bfb575081810a6135eb565b614c058383614b1f565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614c3757614c376149d3565b029392505050565b6000613d8360ff841683614b80565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c8657614c866149d3565b500290565b600082614cc1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b73ffffffffffffffffffffffffffffffffffffffff8616815260a060208201526000614cf560a0830187614a19565b8281036040840152614d078187614a57565b90508281036060840152614d1b8186614a87565b9150508260808301529695505050505050565b600061012061ffff8c1683528a602084015289604084015273ffffffffffffffffffffffffffffffffffffffff891660608401528760808401528660a08401528060c0840152614d8081840187614888565b905082810360e0840152614d94818661482b565b9050828103610100840152614da9818561482b565b9c9b505050505050505050505050565b60008219821115614dcc57614dcc6149d3565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614e0357614e036149d3565b5060010190565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000614b15608083018461482b565b600060208284031215614e5757600080fd5b613d8382613dc9565b80516dffffffffffffffffffffffffffff81168114613dc457600080fd5b600080600060608486031215614e9357600080fd5b614e9c84614e60565b9250614eaa60208501614e60565b9150604084015163ffffffff81168114614ec357600080fd5b809150509250925092565b60008251614ee081846020870161405c565b919091019291505056fea2646970667358221220fa7fdcc95e227b45d7c24ec942b5be111b48c74b23f3dfeca040f109ed95abc564736f6c634300080b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA9E56F3C GT PUSH2 0x69 JUMPI DUP1 PUSH4 0xC45A0155 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0xCF36FD24 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xD1AC3535 EQ PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA9E56F3C EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0xAB8236F3 EQ PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6CE4FE03 GT PUSH2 0x9A JUMPI DUP1 PUSH4 0x6CE4FE03 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x6F435AC2 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x9AAB9248 EQ PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x656F3D64 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x6B2ACE87 EQ PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xBC JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD4 PUSH2 0xCF CALLDATASIZE PUSH1 0x4 PUSH2 0x3B37 JUMP JUMPDEST PUSH2 0x2BB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0x3C4F JUMP JUMPDEST PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x12B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D1 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD4 PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0x3CD6 JUMP JUMPDEST PUSH2 0xCE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10A PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD4 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x1086 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB5D JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2DC JUMPI PUSH2 0x2DC PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0xFF AND DUP2 PUSH1 0xFF AND EQ ISZERO PUSH2 0x409 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x30F JUMPI PUSH2 0x30F PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x3DD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xC0A47C9300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE DUP6 ISZERO ISZERO PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0xA4 DUP3 ADD DUP4 SWAP1 MSTORE SWAP6 SWAP11 POP SWAP4 SWAP9 POP SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xC0A47C93 SWAP1 PUSH1 0xC4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x1 EQ ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x42D JUMPI PUSH2 0x42D PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x448 SWAP2 SWAP1 PUSH2 0x3E33 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH2 0x477 DUP5 CALLER DUP6 DUP6 DUP6 DUP15 DUP13 DUP2 MLOAD DUP2 LT PUSH2 0x46A JUMPI PUSH2 0x46A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x10EA JUMP JUMPDEST POP POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x2 EQ ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4A6 JUMPI PUSH2 0x4A6 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4C1 SWAP2 SWAP1 PUSH2 0x3E7B JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH2 0x4D9 DUP6 CALLER DUP7 DUP7 DUP7 DUP7 PUSH2 0x11C5 JUMP JUMPDEST POP POP POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0xB EQ ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x506 JUMPI PUSH2 0x506 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x521 SWAP2 SWAP1 PUSH2 0x3ED8 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x532 DUP4 DUP4 DUP4 PUSH2 0x1428 JUMP JUMPDEST POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x3 EQ ISZERO PUSH2 0x680 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x55E JUMPI PUSH2 0x55E PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x579 SWAP2 SWAP1 PUSH2 0x3E33 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x0 EQ ISZERO PUSH2 0x61B JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x618 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x646 DUP5 PUSH32 0x0 DUP5 PUSH2 0x144F JUMP JUMPDEST PUSH2 0x477 DUP5 PUSH32 0x0 DUP6 DUP6 DUP6 DUP15 DUP13 DUP2 MLOAD DUP2 LT PUSH2 0x46A JUMPI PUSH2 0x46A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x4 EQ ISZERO PUSH2 0x78C JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6A3 JUMPI PUSH2 0x6A3 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6BE SWAP2 SWAP1 PUSH2 0x3ED8 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 PUSH1 0x0 EQ ISZERO PUSH2 0x781 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO PUSH2 0x77E JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x753 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x777 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP1 POP PUSH2 0x781 JUMP JUMPDEST POP SELFBALANCE JUMPDEST PUSH2 0x532 DUP4 DUP4 DUP4 PUSH2 0x144F JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x5 EQ ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x7B2 JUMPI PUSH2 0x7B2 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7CD SWAP2 SWAP1 PUSH2 0x3E7B JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP DUP3 PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x7E5 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x8A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF7888AEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xF7888AEC SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x87C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8A0 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x4D9 DUP6 ADDRESS DUP7 DUP7 DUP7 DUP7 PUSH2 0x11C5 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x6 EQ ISZERO PUSH2 0x902 JUMPI PUSH1 0x0 DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8D2 JUMPI PUSH2 0x8D2 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8ED SWAP2 SWAP1 PUSH2 0x3F34 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x8FB DUP3 DUP3 PUSH2 0x14D5 JUMP JUMPDEST POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0xC EQ ISZERO PUSH2 0x94C JUMPI PUSH1 0x0 DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x923 JUMPI PUSH2 0x923 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x93E SWAP2 SWAP1 PUSH2 0x3F6E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x8FB DUP3 DUP3 PUSH2 0x15CB JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x7 EQ ISZERO PUSH2 0xA6A JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x970 JUMPI PUSH2 0x970 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x98B SWAP2 SWAP1 PUSH2 0x3F9C JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH1 0x0 DUP5 PUSH1 0x0 EQ ISZERO PUSH2 0xA52 JUMPI DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9B1 JUMPI PUSH2 0x9B1 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA4B SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP5 POP PUSH1 0x1 SWAP1 POP JUMPDEST PUSH2 0xA5F DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1630 JUMP JUMPDEST POP POP POP POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x8 EQ ISZERO PUSH2 0xAB0 JUMPI PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA8A JUMPI PUSH2 0xA8A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xAA5 SWAP2 SWAP1 PUSH2 0x40CD JUMP JUMPDEST SWAP1 POP PUSH2 0x8FB DUP2 PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0x9 EQ ISZERO PUSH2 0xAFC JUMPI PUSH1 0x0 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD0 JUMPI PUSH2 0xAD0 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xAEB SWAP2 SWAP1 PUSH2 0x43FA JUMP JUMPDEST SWAP1 POP PUSH2 0xAF6 DUP2 PUSH2 0x1BCE JUMP JUMPDEST POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH1 0xA EQ ISZERO PUSH2 0xB54 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xB20 JUMPI PUSH2 0xB20 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xB3B SWAP2 SWAP1 PUSH2 0x46F7 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH2 0xB4F DUP5 DUP5 DUP5 DUP5 PUSH2 0x2506 JUMP JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2C0 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA512369 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBE1 SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC01 SWAP2 SWAP1 PUSH2 0x4875 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC63 SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC95 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x48B1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCD5 SWAP2 SWAP1 PUSH2 0x4909 JUMP JUMPDEST SWAP1 SWAP10 SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xD53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C66BF5600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD6F SWAP2 SWAP1 PUSH2 0x492D JUMP JUMPDEST SWAP4 SWAP9 POP SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP PUSH3 0x186A0 PUSH1 0x0 DUP2 GAS LT ISZERO PUSH2 0xEA7 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDFD JUMPI PUSH2 0xDFD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 AND DUP9 DUP12 PUSH2 0x2889 JUMP JUMPDEST SELFBALANCE ISZERO PUSH2 0xE62 JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 SELFBALANCE SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE59 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE5E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 PUSH32 0xD02BBEBA90C0A3636769D1B8C9F07E2B5E4131B8FBCC2D6BA56054E20B98D75D SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP PUSH2 0x107E JUMP JUMPDEST PUSH1 0x0 DUP3 GAS PUSH2 0xEB5 SWAP2 SWAP1 PUSH2 0x4A02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x656F3D6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0x656F3D64 SWAP1 DUP4 SWAP1 PUSH2 0xEFA SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x4ADC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xF26 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0xFD4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xF54 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF59 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xFCE JUMPI PUSH2 0xFCE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND DUP11 DUP14 PUSH2 0x2889 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP JUMPDEST SELFBALANCE ISZERO PUSH2 0x1039 JUMPI PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP1 SELFBALANCE SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1030 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1035 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP JUMPDEST DUP4 PUSH32 0xD02BBEBA90C0A3636769D1B8C9F07E2B5E4131B8FBCC2D6BA56054E20B98D75D DUP4 PUSH1 0x40 MLOAD PUSH2 0x106D SWAP2 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x10E7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH32 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x295D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2B9446C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x84 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x2B9446C SWAP1 DUP4 SWAP1 PUSH1 0xA4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1196 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11BB SWAP2 SWAP1 PUSH2 0x4909 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x97DA6D3000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x84 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x97DA6D30 SWAP1 PUSH1 0xA4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1276 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x129A SWAP2 SWAP1 PUSH2 0x4909 JUMP JUMPDEST POP POP PUSH2 0x107E JUMP JUMPDEST DUP3 ISZERO PUSH2 0x1368 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDA5139CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xDA5139CA SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1341 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1365 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF18D03CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xF18D03CC SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x141C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x144A PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND CALLER DUP5 DUP5 PUSH2 0x2ADF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO PUSH2 0x148C JUMPI PUSH2 0x144A PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP4 DUP4 PUSH2 0x2889 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x14CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1547 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x156B SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1589 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x15C7 PUSH1 0x0 DUP3 SELFBALANCE PUSH2 0x144F JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1627 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x167F PUSH32 0x0 DUP9 DUP8 PUSH32 0x0 PUSH2 0x2B3D JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0x1690 SWAP2 SWAP1 PUSH2 0x4A02 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x16A0 JUMPI PUSH2 0x16A0 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP DUP6 DUP3 LT ISZERO PUSH2 0x1719 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E742D616D6F756E742D6F7574000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 ISZERO PUSH2 0x188F JUMPI PUSH2 0x188F PUSH2 0x17A2 PUSH32 0x0 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1759 JUMPI PUSH2 0x1759 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1774 JUMPI PUSH2 0x1774 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH32 0x0 PUSH2 0x2CE4 JUMP JUMPDEST DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x17B5 JUMPI PUSH2 0x17B5 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x182B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x184F SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1862 JUMPI PUSH2 0x1862 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2889 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x189A DUP2 DUP7 DUP7 PUSH2 0x2DFE JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1AB0 JUMPI DUP2 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1921 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1945 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP1 POP PUSH2 0x1976 DUP4 PUSH1 0x0 ADD MLOAD PUSH32 0x0 DUP4 PUSH2 0x144F JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2B9446C DUP5 PUSH1 0x0 ADD MLOAD PUSH32 0x0 DUP7 PUSH1 0x60 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x19EF JUMPI PUSH2 0x19EF PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A84 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AA8 SWAP2 SWAP1 PUSH2 0x4909 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE POP POP JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1B89 JUMPI DUP4 PUSH1 0x60 ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1AD7 JUMPI PUSH2 0x1AD7 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x627DD56A DUP6 PUSH1 0x60 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1B14 JUMPI PUSH2 0x1B14 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3C SWAP2 SWAP1 PUSH2 0x4875 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B5B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B7F SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP3 POP PUSH1 0x1 ADD PUSH2 0x1AB9 JUMP JUMPDEST POP DUP3 PUSH1 0x40 ADD MLOAD DUP3 LT ISZERO PUSH2 0x1BC8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC9F52C7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DDE JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF18D03CC DUP5 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1C2E JUMPI PUSH2 0x1C2E PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD ADDRESS DUP7 PUSH1 0x0 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1C51 JUMPI PUSH2 0x1C51 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x0 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1C73 JUMPI PUSH2 0x1C73 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP8 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP5 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D13 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 PUSH1 0x0 ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1D2D JUMPI PUSH2 0x1D2D PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x627DD56A DUP5 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D6A JUMPI PUSH2 0x1D6A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D92 SWAP2 SWAP1 PUSH2 0x4875 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1DB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DD5 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1BD4 JUMP JUMPDEST POP POP PUSH1 0x20 DUP2 ADD MLOAD MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2122 JUMPI PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF7888AEC DUP6 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E45 JUMPI PUSH2 0x1E45 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1EC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1EE4 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EF4 PUSH1 0x8 PUSH1 0xA PUSH2 0x4C3F JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1F0A JUMPI PUSH2 0x1F0A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x1F2B SWAP2 SWAP1 PUSH2 0x4C4E JUMP JUMPDEST PUSH2 0x1F35 SWAP2 SWAP1 PUSH2 0x4C8B JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF18D03CC DUP7 PUSH1 0x20 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1F89 JUMPI PUSH2 0x1F89 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD ADDRESS DUP9 PUSH1 0x20 ADD MLOAD DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x1FAC JUMPI PUSH2 0x1FAC PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2038 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x204C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2066 JUMPI PUSH2 0x2066 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x627DD56A DUP7 PUSH1 0x20 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x20A3 JUMPI PUSH2 0x20A3 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20CB SWAP2 SWAP1 PUSH2 0x4875 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x210E SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST POP POP POP PUSH2 0x211B DUP2 PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1DE9 JUMP JUMPDEST POP POP PUSH1 0x40 DUP2 ADD MLOAD MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x144A JUMPI PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF7888AEC DUP6 PUSH1 0x40 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2189 JUMPI PUSH2 0x2189 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2204 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2228 SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x40 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2240 JUMPI PUSH2 0x2240 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD DUP2 LT ISZERO PUSH2 0x2285 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC9F52C7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x229B JUMPI PUSH2 0x229B PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x23E3 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x97DA6D30 DUP6 PUSH1 0x40 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22FE JUMPI PUSH2 0x22FE PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD ADDRESS DUP8 PUSH1 0x40 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2321 JUMPI PUSH2 0x2321 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x23B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23DC SWAP2 SWAP1 PUSH2 0x4909 JUMP JUMPDEST POP POP PUSH2 0x24FD JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF18D03CC DUP6 PUSH1 0x40 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2435 JUMPI PUSH2 0x2435 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD ADDRESS DUP8 PUSH1 0x40 ADD MLOAD DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2458 JUMPI PUSH2 0x2458 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x24F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x212D JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x100 ADD MLOAD DUP5 DUP5 DUP5 DUP9 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x252B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4CC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH3 0x186A0 DUP6 PUSH2 0x120 ADD MLOAD LT ISZERO PUSH2 0x257E JUMPI PUSH1 0x40 MLOAD PUSH32 0x1C26714C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9FBF10FC SELFBALANCE DUP8 PUSH1 0x0 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD CALLER DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2671 JUMPI PUSH1 0x20 DUP13 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2648 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x266C SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST PUSH2 0x2677 JUMP JUMPDEST DUP12 PUSH1 0x80 ADD MLOAD JUMPDEST DUP13 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP16 PUSH2 0x120 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x26DC SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE POP DUP15 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x272E SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP12 PUSH1 0x40 MLOAD DUP12 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2762 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4D2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x277B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x278F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xA87376E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH31 0x1000000000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP4 POP PUSH4 0xA87376E9 SWAP3 POP PUSH1 0x24 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x283B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x284F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x140 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xEF89F27CAD105CFE7C63F4A5C70E6B1392B571FF544A83DE4BF71CEB46BACFEE SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x144A SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x303B JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x29FD JUMPI POP PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x29FB SWAP2 SWAP1 PUSH2 0x3F1B JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0x2A89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20746F206E6F6E2D7A65726F20616C6C6F77616E636500000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x144A SWAP1 DUP5 SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD PUSH2 0x28DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x14CF SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD PUSH2 0x28DB JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO PUSH2 0x2BAB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E56414C49445F504154480000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1710 JUMP JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BC5 JUMPI PUSH2 0x2BC5 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2BEE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2C05 JUMPI PUSH2 0x2C05 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP5 MLOAD PUSH2 0x2C22 SWAP2 SWAP1 PUSH2 0x4A02 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x2CDB JUMPI PUSH1 0x0 DUP1 PUSH2 0x2C76 DUP9 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2C42 JUMPI PUSH2 0x2C42 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 PUSH2 0x2C58 SWAP2 SWAP1 PUSH2 0x4DB9 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2C68 JUMPI PUSH2 0x2C68 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH2 0x314A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2C9E DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2C8F JUMPI PUSH2 0x2C8F PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 PUSH2 0x324B JUMP JUMPDEST DUP5 PUSH2 0x2CAA DUP6 PUSH1 0x1 PUSH2 0x4DB9 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2CBA JUMPI PUSH2 0x2CBA PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP DUP1 DUP1 PUSH2 0x2CD3 SWAP1 PUSH2 0x4DD1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2C14 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2CF3 DUP7 DUP7 PUSH2 0x33C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP5 DUP2 SHL DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP4 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE SWAP2 SWAP4 POP SWAP2 POP DUP8 SWAP1 PUSH1 0x48 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2DBD SWAP4 SWAP3 SWAP2 SWAP1 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 MLOAD PUSH2 0x2E0F SWAP2 SWAP1 PUSH2 0x4A02 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x14CF JUMPI PUSH1 0x0 DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2E2B JUMPI PUSH2 0x2E2B PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 PUSH1 0x1 PUSH2 0x2E41 SWAP2 SWAP1 PUSH2 0x4DB9 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2E51 JUMPI PUSH2 0x2E51 PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2E69 DUP4 DUP4 PUSH2 0x33C5 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP8 PUSH2 0x2E7A DUP7 PUSH1 0x1 PUSH2 0x4DB9 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2E8A JUMPI PUSH2 0x2E8A PUSH2 0x3D8A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2ED2 JUMPI DUP3 PUSH1 0x0 PUSH2 0x2ED6 JUMP JUMPDEST PUSH1 0x0 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x2 DUP11 MLOAD PUSH2 0x2EEA SWAP2 SWAP1 PUSH2 0x4A02 JUMP JUMPDEST DUP9 LT PUSH2 0x2EF6 JUMPI DUP9 PUSH2 0x2F37 JUMP JUMPDEST PUSH2 0x2F37 PUSH32 0x0 DUP8 DUP13 PUSH2 0x2F27 DUP13 PUSH1 0x2 PUSH2 0x4DB9 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1774 JUMPI PUSH2 0x1774 PUSH2 0x3D8A JUMP JUMPDEST SWAP1 POP PUSH2 0x2F85 PUSH32 0x0 DUP9 DUP9 PUSH32 0x0 PUSH2 0x2CE4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x22C0D9F DUP5 DUP5 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2FCF JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2FEF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4E0A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x301D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP DUP1 DUP1 PUSH2 0x3033 SWAP1 PUSH2 0x4DD1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2E01 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x309D DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x354A SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x30BE JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x30BE SWAP2 SWAP1 PUSH2 0x4E45 JUMP JUMPDEST PUSH2 0x144A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3159 DUP7 DUP7 PUSH2 0x33C5 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x316B DUP10 DUP10 DUP10 DUP10 PUSH2 0x2CE4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31D9 SWAP2 SWAP1 PUSH2 0x4E7E JUMP JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3238 JUMPI DUP1 DUP3 PUSH2 0x323B JUMP JUMPDEST DUP2 DUP2 JUMPDEST SWAP1 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x32DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F49 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4E5055545F414D4F554E54000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x0 DUP4 GT DUP1 ISZERO PUSH2 0x32EC JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST PUSH2 0x3378 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F4C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4951554944495459000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3386 DUP6 PUSH2 0x3E5 PUSH2 0x3561 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3394 DUP3 DUP6 PUSH2 0x3561 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x33AE DUP4 PUSH2 0x33A8 DUP9 PUSH2 0x3E8 PUSH2 0x3561 JUMP JUMPDEST SWAP1 PUSH2 0x35F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x33BA DUP2 DUP4 PUSH2 0x4C8B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x3484 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A204944454E544943414C5F41444452 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4553534553000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x34BE JUMPI DUP3 DUP5 PUSH2 0x34C1 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x3543 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A205A45524F5F414444524553530000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1710 JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3559 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x3669 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x3585 JUMPI POP DUP3 DUP3 PUSH2 0x3577 DUP2 DUP4 PUSH2 0x4C4E JUMP JUMPDEST SWAP3 POP PUSH2 0x3583 SWAP1 DUP4 PUSH2 0x4C8B JUMP JUMPDEST EQ JUMPDEST PUSH2 0x35EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x64732D6D6174682D6D756C2D6F766572666C6F77000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1710 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x35FE DUP4 DUP3 PUSH2 0x4DB9 JUMP JUMPDEST SWAP2 POP DUP2 LT ISZERO PUSH2 0x35EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x64732D6D6174682D6164642D6F766572666C6F77000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x36FB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3724 SWAP2 SWAP1 PUSH2 0x4ECE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3761 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3766 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x33BA DUP8 DUP4 DUP4 DUP8 PUSH1 0x60 DUP4 ISZERO PUSH2 0x3805 JUMPI DUP3 MLOAD PUSH2 0x37FE JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x37FE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1710 JUMP JUMPDEST POP DUP2 PUSH2 0x3559 JUMP JUMPDEST PUSH2 0x3559 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x381A JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1710 SWAP2 SWAP1 PUSH2 0x4875 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x38A0 JUMPI PUSH2 0x38A0 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x38A0 JUMPI PUSH2 0x38A0 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x38A0 JUMPI PUSH2 0x38A0 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x38A0 JUMPI PUSH2 0x38A0 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x38A0 JUMPI PUSH2 0x38A0 PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x397A JUMPI PUSH2 0x397A PUSH2 0x384E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x399C JUMPI PUSH2 0x399C PUSH2 0x384E JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x10E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x39C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x39DB PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST PUSH2 0x3933 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x39FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x39FE JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3A3A JUMPI PUSH2 0x3A3A PUSH2 0x384E JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3A77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3A85 PUSH2 0x39D6 DUP3 PUSH2 0x3A20 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x3A9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3AC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x3AD8 PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x3AF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B1B JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3B29 DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x3A66 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3AFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3B4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3B64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3B78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x3B88 PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP11 DUP5 GT ISZERO PUSH2 0x3BA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x3BCE JUMPI DUP6 CALLDATALOAD PUSH2 0x3BBF DUP2 PUSH2 0x39A6 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x3BAC JUMP JUMPDEST SWAP8 POP POP DUP8 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x3BE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BF0 DUP8 DUP4 DUP9 ADD PUSH2 0x39B5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3C06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C13 DUP7 DUP3 DUP8 ADD PUSH2 0x3AB7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x10E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x10E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3C68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x3C73 DUP2 PUSH2 0x3C1D JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x3C83 DUP2 PUSH2 0x39A6 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x3C93 DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3CC9 DUP10 DUP3 DUP11 ADD PUSH2 0x3A66 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3CEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x3CFA DUP2 PUSH2 0x3C1D JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3D17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D23 DUP11 DUP4 DUP12 ADD PUSH2 0x3A66 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH2 0x3D3C DUP3 PUSH2 0x3C2D JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x3D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CC9 DUP10 DUP3 DUP11 ADD PUSH2 0x3A66 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3D83 DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x3DC4 DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3DC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3DF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH2 0x3DFC DUP2 PUSH2 0x3C2D JUMP JUMPDEST SWAP5 POP PUSH2 0x3E0A PUSH1 0x20 DUP8 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x3E1A DUP2 PUSH2 0x39A6 JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3E49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x3E54 DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x3E65 DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3E93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH2 0x3E9E DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH2 0x3EAF DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x60 DUP9 ADD MLOAD SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0x3ECC PUSH1 0x80 DUP8 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3EED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x3EF8 DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x3F09 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3F2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x3F52 DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x3F63 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x3F8C DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3FB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP1 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3FD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x3FE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x3FF7 PUSH2 0x39D6 DUP3 PUSH2 0x3982 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH2 0x4016 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x403D JUMPI DUP4 MLOAD PUSH2 0x402E DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x401B JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP PUSH2 0x4051 PUSH1 0x60 DUP7 ADD PUSH2 0x3DB9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4077 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x405F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x14CF JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4099 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x40A7 PUSH2 0x39D6 DUP3 PUSH2 0x3A20 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x40BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3559 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x405C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x40E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x40F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0x80 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x410C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4114 PUSH2 0x387D JUMP JUMPDEST DUP3 MLOAD PUSH2 0x411F DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 MSTORE DUP3 DUP5 ADD MLOAD DUP5 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP5 ADD MLOAD DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x4145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP6 ADD SWAP5 POP POP DUP8 PUSH1 0x1F DUP6 ADD SLT PUSH2 0x415A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x4168 PUSH2 0x39D6 DUP3 PUSH2 0x3982 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP6 ADD DUP7 ADD SWAP1 DUP7 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH2 0x4187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 DUP8 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4221 JUMPI DUP1 MLOAD DUP8 DUP2 GT ISZERO PUSH2 0x41A3 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP9 ADD DUP1 DUP14 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP7 SGT ISZERO PUSH2 0x41D7 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x41DF PUSH2 0x38A6 JUMP JUMPDEST DUP11 DUP3 ADD MLOAD PUSH2 0x41EC DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 MSTORE DUP2 DUP8 ADD MLOAD DUP10 DUP2 GT ISZERO PUSH2 0x4200 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x420E DUP16 DUP14 DUP4 DUP7 ADD ADD PUSH2 0x4088 JUMP JUMPDEST DUP3 DUP14 ADD MSTORE POP DUP5 MSTORE POP SWAP2 DUP9 ADD SWAP2 DUP9 ADD PUSH2 0x418B JUMP JUMPDEST POP PUSH1 0x60 DUP6 ADD MSTORE POP SWAP2 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x4256 PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x4275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x429A JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP PUSH1 0x80 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP5 DUP14 SUB ADD SLT ISZERO PUSH2 0x42D3 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x42DB PUSH2 0x387D JUMP JUMPDEST DUP8 DUP5 ADD MLOAD PUSH2 0x42E8 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP5 DUP2 ADD MLOAD PUSH2 0x42F9 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP3 DUP11 ADD MSTORE PUSH1 0x60 DUP6 DUP2 ADD MLOAD DUP6 DUP2 AND DUP2 EQ PUSH2 0x4312 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP4 DUP4 ADD MSTORE SWAP3 DUP6 ADD MLOAD SWAP3 DUP5 DUP5 GT ISZERO PUSH2 0x432B JUMPI PUSH1 0x0 SWAP2 POP DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4339 DUP15 DUP12 DUP7 DUP10 ADD ADD PUSH2 0x4088 JUMP JUMPDEST SWAP1 DUP4 ADD MSTORE POP DUP7 MSTORE POP POP POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x4279 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x435F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x436F PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x7 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x438E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI PUSH1 0x80 DUP2 DUP10 SUB SLT ISZERO PUSH2 0x43AB JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x43B3 PUSH2 0x387D JUMP JUMPDEST DUP2 MLOAD PUSH2 0x43BE DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 MSTORE DUP2 DUP6 ADD MLOAD PUSH2 0x43CD DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 DUP7 ADD MSTORE PUSH1 0x40 PUSH2 0x43DE DUP4 DUP3 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP3 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 PUSH1 0x80 ADD PUSH2 0x4392 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x440D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0x60 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x4439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4441 PUSH2 0x38C9 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x4450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x4461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x446F PUSH2 0x39D6 DUP3 PUSH2 0x3982 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP7 ADD SWAP1 DUP7 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH2 0x448E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 DUP5 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4556 JUMPI DUP1 MLOAD DUP8 DUP2 GT ISZERO PUSH2 0x44A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0xA0 DUP2 DUP15 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD SLT ISZERO PUSH2 0x44DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x44E5 PUSH2 0x38EC JUMP JUMPDEST DUP11 DUP3 ADD MLOAD PUSH2 0x44F2 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x4502 DUP2 PUSH2 0x3C2D JUMP JUMPDEST DUP2 DUP13 ADD MSTORE PUSH2 0x4512 PUSH1 0x60 DUP4 ADD PUSH2 0x3DC9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP10 DUP2 GT ISZERO PUSH2 0x4534 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4542 DUP16 DUP14 DUP4 DUP7 ADD ADD PUSH2 0x4088 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP5 MSTORE POP SWAP2 DUP9 ADD SWAP2 DUP9 ADD PUSH2 0x4492 JUMP JUMPDEST POP DUP5 MSTORE POP POP POP DUP3 DUP5 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x456D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4579 DUP9 DUP3 DUP7 ADD PUSH2 0x4235 JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD SWAP4 POP DUP2 DUP5 GT ISZERO PUSH2 0x4592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x459E DUP8 DUP6 DUP6 ADD PUSH2 0x434E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x3DC4 DUP2 PUSH2 0x3C1D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x45C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x45D9 PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x45F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 MLOAD PUSH2 0x460F DUP2 PUSH2 0x39A6 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x45FC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x462D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x463D PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x465C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x4660 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4688 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0x4698 PUSH2 0x39D6 DUP4 PUSH2 0x3982 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x46B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3A15 JUMPI DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x46DB JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x46E9 DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x4088 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x46BB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH2 0x1C0 DUP2 SLT ISZERO PUSH2 0x470F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x160 DUP1 DUP3 SLT ISZERO PUSH2 0x471F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4727 PUSH2 0x390F JUMP JUMPDEST SWAP2 POP PUSH2 0x4732 DUP8 PUSH2 0x45AD JUMP JUMPDEST DUP3 MSTORE PUSH2 0x4740 PUSH1 0x20 DUP9 ADD PUSH2 0x3DB9 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x4783 PUSH1 0xE0 DUP9 ADD PUSH2 0x3DB9 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 PUSH2 0x4796 DUP2 DUP10 ADD PUSH2 0x3DB9 JUMP JUMPDEST SWAP1 DUP4 ADD MSTORE PUSH2 0x120 DUP8 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP9 ADD MLOAD SWAP1 DUP4 ADD MSTORE DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x47CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x47D8 DUP9 DUP4 DUP10 ADD PUSH2 0x45B8 JUMP JUMPDEST SWAP5 POP PUSH2 0x180 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x47EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x47FB DUP9 DUP4 DUP10 ADD PUSH2 0x461C JUMP JUMPDEST SWAP4 POP PUSH2 0x1A0 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4812 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x481F DUP8 DUP3 DUP9 ADD PUSH2 0x4677 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4843 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x405C JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3D83 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x482B JUMP JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x3559 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x482B JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND DUP2 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x48D7 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x482B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x48E9 DUP2 DUP7 PUSH2 0x482B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x48FD DUP2 DUP6 PUSH2 0x4888 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x491C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH2 0x4950 DUP2 PUSH2 0x3C2D JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x496E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x497A DUP10 DUP4 DUP11 ADD PUSH2 0x45B8 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4990 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x499C DUP10 DUP4 DUP11 ADD PUSH2 0x461C JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x49B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49BF DUP9 DUP3 DUP10 ADD PUSH2 0x4677 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD MLOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x4A14 JUMPI PUSH2 0x4A14 PUSH2 0x49D3 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A4C JUMPI DUP2 MLOAD PUSH1 0xFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4A2D JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A4C JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4A6B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP4 PUSH1 0x5 SHL DUP2 ADD SWAP2 POP DUP3 DUP7 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x4ACF JUMPI DUP3 DUP5 SUB DUP10 MSTORE PUSH2 0x4ABD DUP5 DUP4 MLOAD PUSH2 0x482B JUMP JUMPDEST SWAP9 DUP6 ADD SWAP9 SWAP4 POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4AA5 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4AEF PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x4A19 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4B01 DUP2 DUP7 PUSH2 0x4A57 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x4B15 DUP2 DUP6 PUSH2 0x4A87 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x4B78 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP3 GT ISZERO PUSH2 0x4B5E JUMPI PUSH2 0x4B5E PUSH2 0x49D3 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x4B6B JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x4B24 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4B8F JUMPI POP PUSH1 0x1 PUSH2 0x35EB JUMP JUMPDEST DUP2 PUSH2 0x4B9C JUMPI POP PUSH1 0x0 PUSH2 0x35EB JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x4BB2 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x4BBC JUMPI PUSH2 0x4BD8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x35EB JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x4BCD JUMPI PUSH2 0x4BCD PUSH2 0x49D3 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x35EB JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x4BFB JUMPI POP DUP2 DUP2 EXP PUSH2 0x35EB JUMP JUMPDEST PUSH2 0x4C05 DUP4 DUP4 PUSH2 0x4B1F JUMP JUMPDEST DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP3 GT ISZERO PUSH2 0x4C37 JUMPI PUSH2 0x4C37 PUSH2 0x49D3 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D83 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x4B80 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x4C86 JUMPI PUSH2 0x4C86 PUSH2 0x49D3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4CC1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x4CF5 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x4A19 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x4D07 DUP2 DUP8 PUSH2 0x4A57 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x4D1B DUP2 DUP7 PUSH2 0x4A87 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 PUSH2 0xFFFF DUP13 AND DUP4 MSTORE DUP11 PUSH1 0x20 DUP5 ADD MSTORE DUP10 PUSH1 0x40 DUP5 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x60 DUP5 ADD MSTORE DUP8 PUSH1 0x80 DUP5 ADD MSTORE DUP7 PUSH1 0xA0 DUP5 ADD MSTORE DUP1 PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x4D80 DUP2 DUP5 ADD DUP8 PUSH2 0x4888 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x4D94 DUP2 DUP7 PUSH2 0x482B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x4DA9 DUP2 DUP6 PUSH2 0x482B JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x4DCC JUMPI PUSH2 0x4DCC PUSH2 0x49D3 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x4E03 JUMPI PUSH2 0x4E03 PUSH2 0x49D3 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP5 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x4B15 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x482B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D83 DUP3 PUSH2 0x3DC9 JUMP JUMPDEST DUP1 MLOAD PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3DC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4E93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E9C DUP5 PUSH2 0x4E60 JUMP JUMPDEST SWAP3 POP PUSH2 0x4EAA PUSH1 0x20 DUP6 ADD PUSH2 0x4E60 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4EC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x4EE0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x405C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL PUSH32 0xDCC95E227B45D7C24EC942B5BE111B48C74B23F3DFECA040F109ED95ABC56473 PUSH16 0x6C634300080B00330000000000000000 ","sourceMap":"292:8976:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2268:6902;;;;;;:::i;:::-;;:::i;:::-;;276:51:16;;;;;;;;;;;;;;;;;;6056:42:33;6044:55;;;6026:74;;6014:2;5999:18;276:51:16;;;;;;;;3783:575:12;;;;;;;;;;-1:-1:-1;3783:575:12;;;;;:::i;:::-;;:::i;:::-;;;;7441:25:33;;;7497:2;7482:18;;7475:34;;;;7414:18;3783:575:12;7267:248:33;514:56:16;;;;;;;;;;;;;;;720:46;;;;;;;;;;;;;;;;;;7921:25:33;;;7909:2;7894:18;720:46:16;7775:177:33;394:56:16;;;;;;;;;;;;;;;4559:1763:12;;;;;;;;;;-1:-1:-1;4559:1763:12;;;;;:::i;:::-;;:::i;622:41:16:-;;;;;;;;;;;;;;;823:39;;;;;;;;;;;;;;;1334:134:12;;;;;;;;;;-1:-1:-1;1334:134:12;;;;;:::i;:::-;;:::i;2268:6902:10:-;2440:14;;2417:20;2464:6700;2484:12;2480:1;:16;2464:6700;;;2531:12;2546:7;2554:1;2546:10;;;;;;;;:::i;:::-;;;;;;;2531:25;;987:1;2627:41;;:6;:41;;;2623:6531;;;2710:12;2744:13;2779:7;2808:9;2839;2905:5;2911:1;2905:8;;;;;;;;:::i;:::-;;;;;;;2869:132;;;;;;;;;;;;:::i;:::-;3020:212;;;;;:34;11128:15:33;;;3020:212:10;;;11110:34:33;3110:4:10;11160:18:33;;;11153:43;11239:14;;11232:22;11212:18;;;11205:50;11303:4;11291:17;;11271:18;;;11264:45;11325:19;;;11318:35;;;11369:19;;;11362:35;;;11128:15;;-1:-1:-1;11239:14:33;;-1:-1:-1;11291:17:33;;-1:-1:-1;11318:35:33;-1:-1:-1;11362:35:33;-1:-1:-1;3020:8:10;:34;;;;;;11021:19:33;;3020:212:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2670:577;;;;;2623:6531;;;3257:40;;;1051:1;3257:40;3253:5901;;;3318:13;3333:10;3345:14;3361:13;3410:5;3416:1;3410:8;;;;;;;;:::i;:::-;;;;;;;3378:79;;;;;;;;;;;;:::i;:::-;3317:140;;;;;;;;3475:205;3515:5;3542:10;3574:2;3598:6;3626:5;3653:6;3660:1;3653:9;;;;;;;;:::i;:::-;;;;;;;3475:18;:205::i;:::-;3299:396;;;;3253:5901;;;3705:43;;;1118:1;3705:43;3701:5453;;;3790:13;3825:10;3857:14;3893:13;3928:16;4001:5;4007:1;4001:8;;;;;;;;:::i;:::-;;;;;;;3965:134;;;;;;;;;;;;:::i;:::-;3768:331;;;;;;;;;;4117:210;4160:5;4187:10;4219:2;4243:6;4271:5;4298:11;4117:21;:210::i;:::-;3750:592;;;;;3701:5453;;;4352:35;;;1720:2;4352:35;4348:4806;;;4408:13;4423:10;4435:14;4485:5;4491:1;4485:8;;;;;;;;:::i;:::-;;;;;;;4453:107;;;;;;;;;;;;:::i;:::-;4407:153;;;;;;4579:45;4605:5;4613:2;4617:6;4579:18;:45::i;:::-;4389:250;;;4348:4806;;;4649:40;;;1182:1;4649:40;4645:4509;;;4710:13;4725:10;4737:14;4753:13;4802:5;4808:1;4802:8;;;;;;;;:::i;:::-;;;;;;;4770:79;;;;;;;;;;;;:::i;:::-;4709:140;;;;;;;;4872:6;4882:1;4872:11;4868:253;;;4916:38;;;;;4948:4;4916:38;;;6026:74:33;4916:23:10;;;;;;5999:18:33;;4916:38:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4907:47;;4868:253;5139:57;5162:5;5178:8;5189:6;5139:15;:57::i;:::-;5215:212;5255:5;5290:8;5321:2;5345:6;5373:5;5400:6;5407:1;5400:9;;;;;;;;:::i;4645:4509::-;5452:35;;;1241:1;5452:35;5448:3706;;;5508:13;5523:10;5535:14;5585:5;5591:1;5585:8;;;;;;;;:::i;:::-;;;;;;;5553:107;;;;;;;;;;;;:::i;:::-;5507:153;;;;;;5682:6;5692:1;5682:11;5678:263;;;5721:19;;;;5717:206;;5777:38;;;;;5809:4;5777:38;;;6026:74:33;5777:23:10;;;;;;5999:18:33;;5777:38:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5768:47;;5717:206;;;-1:-1:-1;5879:21:10;5717:206;5958:42;5981:5;5989:2;5993:6;5958:15;:42::i;5448:3706::-;6042:55;;;1320:1;6042:55;6021:3133;;;6152:13;6187:10;6219:14;6255:13;6290:16;6363:5;6369:1;6363:8;;;;;;;;:::i;:::-;;;;;;;6327:134;;;;;;;;;;;;:::i;:::-;6130:331;;;;;;;;;;6483:6;6493:1;6483:11;:25;;;;-1:-1:-1;6498:10:10;;6483:25;6479:120;;;6540:40;;;;;:18;13455:15:33;;;6540:40:10;;;13437:34:33;6574:4:10;13487:18:33;;;13480:43;6540:8:10;:18;;;;13349::33;;6540:40:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6532:48;;6479:120;6616:213;6659:5;6694:4;6721:2;6745:6;6773:5;6800:11;6616:21;:213::i;6021:3133::-;6854:36;;;1380:1;6854:36;6850:2304;;;6911:13;6926:10;6972:5;6978:1;6972:8;;;;;;;;:::i;:::-;;;;;;;6940:98;;;;;;;;;;;;:::i;:::-;6910:128;;;;7057:26;7073:5;7080:2;7057:15;:26::i;:::-;6892:206;;6850:2304;;;7108:27;;;1773:2;7108:27;7104:2050;;;7156:13;7171:14;7221:5;7227:1;7221:8;;;;;;;;:::i;:::-;;;;;;;7189:98;;;;;;;;;;;;:::i;:::-;7155:132;;;;7306:25;7317:5;7324:6;7306:10;:25::i;7104:2050::-;7356:28;;;1456:1;7356:28;7352:1802;;;7426:16;7464:20;7506:21;7549:10;7616:5;7622:1;7616:8;;;;;;;;:::i;:::-;;;;;;;7580:130;;;;;;;;;;;;:::i;:::-;7404:306;;;;;;;;7728:15;7765:8;7777:1;7765:13;7761:150;;;7820:4;7825:1;7820:7;;;;;;;;:::i;:::-;;;;;;;;;;;7813:40;;;;;7847:4;7813:40;;;6026:74:33;7813:25:10;;;;;;;5999:18:33;;7813:40:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7802:51;;7888:4;7875:17;;7761:150;7928:189;7975:8;8005:12;8039:4;8065:2;8089:10;7928:25;:189::i;:::-;;7386:746;;;;;7352:1802;;;8142:29;;;1509:1;8142:29;8138:1016;;;8191:30;8256:5;8262:1;8256:8;;;;;;;;:::i;:::-;;;;;;;8224:98;;;;;;;;;;;;:::i;:::-;8191:131;;8341:19;8353:6;8341:11;:19::i;8138:1016::-;8385:42;;;1575:1;8385:42;8381:773;;;8447:31;8513:5;8519:1;8513:8;;;;;;;;:::i;:::-;;;;;;;8481:99;;;;;;;;;;;;:::i;:::-;8447:133;;8599:20;8612:6;8599:12;:20::i;:::-;8429:205;8381:773;;;8644:34;;;1659:2;8644:34;8640:514;;;8720:36;8778:25;8825:26;8873:23;8953:5;8959:1;8953:8;;;;;;;;:::i;:::-;;;;;;;8917:145;;;;;;;;;;;;:::i;:::-;8698:364;;;;;;;;9081:58;9099:6;9107:10;9119:9;9130:8;9081:17;:58::i;:::-;8680:474;;;;8640:514;-1:-1:-1;5172:1:15;5168:5;2464:6700:10;;;;2407:6763;2268:6902;;;:::o;3783:575:12:-;3994:9;4005;4035:14;:32;;;4081:11;4106:13;4150:9;4133:27;;;;;;;28712:2:33;28708:15;;;;28725:66;28704:88;28692:101;;28818:2;28809:12;;28563:264;4133:27:12;;;;;;;;;;;;;4185:8;4174:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;4208:133;;;;;;;;4249:4;4208:133;;;;4271:11;4208:133;;;;4317:9;4300:27;;;;;;;28712:2:33;28708:15;;;;28725:66;28704:88;28692:101;;28818:2;28809:12;;28563:264;4300:27:12;;;;;;;;;;;;;4208:133;;;4035:316;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4026:325;;;;-1:-1:-1;3783:575:12;-1:-1:-1;;;;;;;3783:575:12:o;4559:1763::-;4751:10;:37;4773:14;4751:37;;4747:69;;4797:19;;;;;;;;;;;;;;4747:69;4841:10;4865:22;4901:23;4938:20;4972:18;5014:7;5003:68;;;;;;;;;;;;:::i;:::-;4827:244;;-1:-1:-1;4827:244:12;;-1:-1:-1;4827:244:12;-1:-1:-1;4827:244:12;-1:-1:-1;4827:244:12;-1:-1:-1;5103:6:12;5082:18;5103:6;5144:9;:22;5141:439;;;5195:5;5185:15;;:6;:15;;;5182:94;;5220:41;:27;;;5248:2;5252:8;5220:27;:41::i;:::-;5375:21;:25;5371:90;;5418:43;;:7;;;;5434:21;;5418:43;;;;5434:21;5418:7;:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5371:90;-1:-1:-1;5508:41:12;;5485:4;32083:41:33;;;5485:4:12;5530:10;;5508:41;;32071:2:33;32056:18;5508:41:12;;;;;;;5563:7;;;;;;;;;5141:439;5620:13;5648:10;5636:9;:22;;;;:::i;:::-;5767:138;;;;;5620:38;;-1:-1:-1;5795:4:12;;5767:40;;5620:38;;5767:138;;5837:7;;5862:6;;5886:5;;5767:138;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5751:332;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5965:5;5955:15;;:6;:15;;;5952:94;;5990:41;:27;;;6018:2;6022:8;5990:27;:41::i;:::-;6068:4;6059:13;;5917:166;5751:332;6175:21;:25;6171:86;;6214:43;;:7;;;;6230:21;;6214:43;;;;6230:21;6214:7;:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6171:86;6295:10;6273:41;6307:6;6273:41;;;;32108:14:33;32101:22;32083:41;;32071:2;32056:18;;31943:187;6273:41:12;;;;;;;;4737:1585;;;;;;;;4559:1763;;;;;;;:::o;1334:134::-;1400:61;:17;;;1426:14;1443:17;1400;:61::i;:::-;1334:134;:::o;1125:257:11:-;1313:62;;;;;:16;34984:15:33;;;1313:62:11;;;34966:34:33;35036:15;;;35016:18;;;35009:43;35088:15;;;35068:18;;;35061:43;35120:18;;;35113:34;;;35163:19;;;35156:35;;;1313:8:11;:16;;;;1337:5;;34877:19:33;;1313:62:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1125:257;;;;;;:::o;1988:471::-;2186:11;2182:271;;;2213:49;;;;;:17;34984:15:33;;;2213:49:11;;;34966:34:33;35036:15;;;35016:18;;;35009:43;35088:15;;;35068:18;;;35061:43;35120:18;;;35113:34;;;35163:19;;;35156:35;;;2213:8:11;:17;;;;34877:19:33;;2213:49:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;2182:271;;;2297:10;;2293:95;;2335:38;;;;;:16;35416:55:33;;;2335:38:11;;;35398:74:33;35488:18;;;35481:34;;;2367:5:11;35531:18:33;;;35524:50;2335:8:11;:16;;;;35371:18:33;;2335:38:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2327:46;;2293:95;2401:41;;;;;:17;35895:15:33;;;2401:41:11;;;35877:34:33;35947:15;;;35927:18;;;35920:43;35999:15;;;35979:18;;;35972:43;36031:18;;;36024:34;;;2401:8:11;:17;;;;35788:19:33;;2401:41:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1988:471;;;;;;:::o;936:172:14:-;1055:46;:22;;;1078:10;1090:2;1094:6;1055:22;:46::i;:::-;936:172;;;:::o;481:270::-;601:28;;;;597:148;;645:30;:18;;;664:2;668:6;645:18;:30::i;597:148::-;706:28;;:20;;;;:28;;;;;727:6;;706:28;;;;727:6;706:20;:28;;;;;;;;;;;;;;;;;;;;;481:270;;;:::o;1265:211::-;1358:38;;;;;1390:4;1358:38;;;6026:74:33;1336:21:14;;;;;;;;1358:23;;5999:18:33;;1358:38:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1336:61;;;;;;;;;;;;;7921:25:33;;7909:2;7894:18;;7775:177;1336:61:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1407:62;1438:1;1443:2;1447:21;1407:15;:62::i;:::-;1265:211;;:::o;1607:114::-;1683:5;1677:20;;;1705:6;1677:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1607:114;;:::o;418:941:13:-;609:17;638:24;665:127;709:7;730:8;752:4;770:12;665:30;:127::i;:::-;638:154;;814:7;839:1;822:7;:14;:18;;;;:::i;:::-;814:27;;;;;;;;:::i;:::-;;;;;;;802:39;;873:12;860:9;:25;;852:61;;;;;;;36453:2:33;852:61:13;;;36435:21:33;36492:2;36472:18;;;36465:30;36531:25;36511:18;;;36504:53;36574:18;;852:61:13;;;;;;;;;1001:10;997:322;;;1027:281;1073:163;1119:7;1148:4;1153:1;1148:7;;;;;;;;:::i;:::-;;;;;;;1177:4;1182:1;1177:7;;;;;;;;:::i;:::-;;;;;;;1206:12;1073:24;:163::i;:::-;1261:4;1266:1;1261:7;;;;;;;;:::i;:::-;;;;;;;;;;;1254:40;;;;;1288:4;1254:40;;;6026:74:33;1254:25:13;;;;;;;5999:18:33;;1254:40:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1034:4;1039:1;1034:7;;;;;;;;:::i;:::-;;;;;;;1027:28;;;;:281;;;;;:::i;:::-;1328:24;1334:7;1343:4;1349:2;1328:5;:24::i;:::-;628:731;418:941;;;;;;;:::o;760:1382:15:-;847:17;884:6;:15;;;903:1;884:20;880:560;;;948:14;;941:77;;;;;999:4;941:77;;;6026:74:33;918:20:15;;941:32;;;;;5999:18:33;;941:77:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;918:100;;1032:134;1072:6;:14;;;1113:8;1140:12;1032:15;:134::i;:::-;1246:8;:16;;;1280:6;:14;;;1320:8;1347:6;:11;;;1359:1;1347:14;;;;;;;;:::i;:::-;;;;;;;;;;;:19;1246:183;;;;;;;;;;34915:42:33;34984:15;;;1246:183:15;;;34966:34:33;35036:15;;;35016:18;;;35009:43;35088:15;;;;35068:18;;;35061:43;35120:18;;;35113:34;;;1347:19:15;35163::33;;;35156:35;34877:19;;1246:183:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1227:15;;;1224:205;-1:-1:-1;;880:560:15;1805:11;;;;:18;1793:9;1833:135;1857:1;1853;:5;1833:135;;;1911:6;:11;;;1923:1;1911:14;;;;;;;;:::i;:::-;;;;;;;:19;;;1905:31;;;1937:6;:11;;;1949:1;1937:14;;;;;;;;:::i;:::-;;;;;;;:19;;;1905:52;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1893:64;-1:-1:-1;5172:1:15;5168:5;1833:135;;;;2084:6;:23;;;2072:9;:35;2068:67;;;2116:19;;;;;;;;;;;;;;2068:67;870:1272;760:1382;;;:::o;2695:2363::-;2940:18;;:25;2928:9;2975:350;2999:1;2995;:5;2975:350;;;3035:8;:17;;;3070:6;:18;;;3089:1;3070:21;;;;;;;;:::i;:::-;;;;;;;:29;;;3125:4;3148:6;:18;;;3167:1;3148:21;;;;;;;;:::i;:::-;;;;;;;:26;;;3192:6;:18;;;3211:1;3192:21;;;;;;;;:::i;:::-;;;;;;;;;;;:28;;;3035:199;;;;;;;;;;35826:42:33;35895:15;;;3035:199:15;;;35877:34:33;35947:15;;;35927:18;;;35920:43;35999:15;;35979:18;;;35972:43;36031:18;;;36024:34;;;;35788:19;;3035:199:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3254:6;:18;;;3273:1;3254:21;;;;;;;;:::i;:::-;;;;;;;:26;;;3248:38;;;3287:6;:18;;;3306:1;3287:21;;;;;;;;:::i;:::-;;;;;;;:26;;;3248:66;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5172:1:15;5168:5;2975:350;;;-1:-1:-1;;3407:21:15;;;;:28;3450:9;3445:661;3469:1;3465;:5;3445:661;;;3505:21;3529:8;:18;;;3565:6;:21;;;3587:1;3565:24;;;;;;;;:::i;:::-;;;;;;;;;;;:32;3529:113;;;;;;;;;;13386:42:33;13455:15;;;3529:113:15;;;13437:34:33;3623:4:15;13487:18:33;;;13480:43;13349:18;;3529:113:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3505:137;-1:-1:-1;3656:22:15;3760:14;3773:1;3768:2;3760:14;:::i;:::-;3714:6;:21;;;3736:1;3714:24;;;;;;;;:::i;:::-;;;;;;;:42;;;3682:74;;:13;:74;;;;:::i;:::-;3681:93;;;;:::i;:::-;3656:118;;3788:8;:17;;;3823:6;:21;;;3845:1;3823:24;;;;;;;;:::i;:::-;;;;;;;:32;;;3881:4;3904:6;:21;;;3926:1;3904:24;;;;;;;;:::i;:::-;;;;;;;;;;;;:29;;3788:191;;;;;;;;;;35826:42:33;35895:15;;;3788:191:15;;;35877:34:33;35947:15;;;35927:18;;;35920:43;35999:15;;;;35979:18;;;35972:43;36031:18;;;36024:34;;;35788:19;;3788:191:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3999:6;:21;;;4021:1;3999:24;;;;;;;;:::i;:::-;;;;;;;:29;;;3993:41;;;4052:6;:21;;;4074:1;4052:24;;;;;;;;:::i;:::-;;;;;;;:29;;;3993:102;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3491:615;;3476:13;3487:1;5172;5168:5;;5064:126;3476:13;3472:17;;3445:661;;;-1:-1:-1;;4198:13:15;;;;:20;4233:9;4228:824;4252:1;4248;:5;4228:824;;;4288:21;4312:8;:18;;;4348:6;:13;;;4362:1;4348:16;;;;;;;;:::i;:::-;;;;;;;;;;;:22;4312:103;;;;;;;;;;13386:42:33;13455:15;;;4312:103:15;;;13437:34:33;4396:4:15;13487:18:33;;;13480:43;13349:18;;4312:103:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4288:127;;4449:6;:13;;;4463:1;4449:16;;;;;;;;:::i;:::-;;;;;;;:26;;;4433:13;:42;4429:90;;;4500:19;;;;;;;;;;;;;;4429:90;4537:6;:13;;;4551:1;4537:16;;;;;;;;:::i;:::-;;;;;;;:28;;;4533:509;;;4585:8;:17;;;4624:6;:13;;;4638:1;4624:16;;;;;;;;:::i;:::-;;;;;;;:22;;;4676:4;4703:6;:13;;;4717:1;4703:16;;;;;;;;:::i;:::-;;;;;;;;;;;;:19;;4585:213;;;;;;;;;;34915:42:33;34984:15;;;4585:213:15;;;34966:34:33;35036:15;;;35016:18;;;35009:43;35088:15;;;;35068:18;;;35061:43;4744:1:15;35120:18:33;;;35113:34;35163:19;;;35156:35;;;34877:19;;4585:213:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;4533:509;;;4837:8;:17;;;4876:6;:13;;;4890:1;4876:16;;;;;;;;:::i;:::-;;;;;;;:22;;;4928:4;4955:6;:13;;;4969:1;4955:16;;;;;;;;:::i;:::-;;;;;;;;;;;;:19;;4837:190;;;;;;;;;;35826:42:33;35895:15;;;4837:190:15;;;35877:34:33;35947:15;;;35927:18;;;35920:43;35999:15;;;;35979:18;;;35972:43;36031:18;;;36024:34;;;35788:19;;4837:190:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4533:509;-1:-1:-1;5172:1:15;5168:5;4228:824;;2107:1173:12;2300:20;2334:6;:9;;;2345:7;2354:6;2362:5;2369:6;:17;;;2323:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2300:87;;2464:6;2451;:10;;;:19;2448:48;;;2479:17;;;;;;;;;;;;;;2448:48;2507:14;:19;;;2534:21;2570:6;:17;;;2601:6;:16;;;2631:6;:16;;;2669:10;2712:6;:13;;;2729:1;2712:18;;:114;;2788:12;;;;2781:45;;;;;2820:4;2781:45;;;6026:74:33;2781:30:12;;;;;;;5999:18:33;;2781:45:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2712:114;;;2749:6;:13;;;2712:114;2840:6;:16;;;2870:193;;;;;;;;2911:6;:10;;;2870:193;;;;2981:6;:17;;;2870:193;;;;3033:6;:15;;;3016:33;;;;;;;28712:2:33;28708:15;;;;28725:66;28704:88;28692:101;;28818:2;28809:12;;28563:264;3016:33:12;;;;;;;;;;;;;2870:193;;;3094:6;:15;;;3077:33;;;;;;;28712:2:33;28708:15;;;;28725:66;28704:88;28692:101;;28818:2;28809:12;;28563:264;3077:33:12;;;;;;;;;;;;;3155:7;2507:665;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3183:34:12;;;;;41911:16:33;3183:34:12;;;41889:108:33;3183:14:12;:26;;;-1:-1:-1;3183:26:12;;-1:-1:-1;41862:18:33;;;-1:-1:-1;3183:34:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;3255:17:12;;;;3233:40;;;;;;;2290:990;2107:1173;;;;:::o;941:175:5:-;1050:58;;42212:42:33;42200:55;;1050:58:5;;;42182:74:33;42272:18;;;42265:34;;;1023:86:5;;1043:5;;1073:23;;42155:18:33;;1050:58:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1023:19;:86::i;1818:573::-;2143:10;;;2142:62;;-1:-1:-1;2159:39:5;;;;;2183:4;2159:39;;;13437:34:33;2159:15:5;13507::33;;;13487:18;;;13480:43;2159:15:5;;;;;13349:18:33;;2159:39:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;2142:62;2121:163;;;;;;;42512:2:33;2121:163:5;;;42494:21:33;42551:2;42531:18;;;42524:30;42590:34;42570:18;;;42563:62;42661:24;42641:18;;;42634:52;42703:19;;2121:163:5;42310:418:33;2121:163:5;2321:62;;42212:42:33;42200:55;;2321:62:5;;;42182:74:33;42272:18;;;42265:34;;;2294:90:5;;2314:5;;2344:22;;42155:18:33;;2321:62:5;42008:297:33;1355:203:5;1482:68;;42945:42:33;43014:15;;;1482:68:5;;;42996:34:33;43066:15;;43046:18;;;43039:43;43098:18;;;43091:34;;;1455:96:5;;1475:5;;1505:27;;42908:18:33;;1482:68:5;42733:398:33;4042:673:30;4206:24;4265:1;4250:4;:11;:16;;4242:59;;;;;;;43338:2:33;4242:59:30;;;43320:21:33;43377:2;43357:18;;;43350:30;43416:32;43396:18;;;43389:60;43466:18;;4242:59:30;43136:354:33;4242:59:30;4335:4;:11;4321:26;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4321:26:30;;4311:36;;4370:8;4357:7;4365:1;4357:10;;;;;;;;:::i;:::-;;;;;;:21;;;;;4393:9;4388:321;4422:1;4408:4;:11;:15;;;;:::i;:::-;4404:1;:19;4388:321;;;4445:17;4464:18;4486:134;4515:7;4540:4;4545:1;4540:7;;;;;;;;:::i;:::-;;;;;;;4565:4;4570:1;4574;4570:5;;;;:::i;:::-;4565:11;;;;;;;;:::i;:::-;;;;;;;4594:12;4486:11;:134::i;:::-;4444:176;;;;4651:47;4664:7;4672:1;4664:10;;;;;;;;:::i;:::-;;;;;;;4676:9;4687:10;4651:12;:47::i;:::-;4634:7;4642:5;:1;4646;4642:5;:::i;:::-;4634:14;;;;;;;;:::i;:::-;;;;;;:64;;;;;4430:279;;4425:3;;;;;:::i;:::-;;;;4388:321;;;;4042:673;;;;;;:::o;823:681::-;972:12;997:14;1013;1031:26;1042:6;1050;1031:10;:26::i;:::-;1314:32;;43995:66:33;44090:2;44086:15;;;44082:24;;1314:32:30;;;44070:37:33;44141:15;;;44137:24;44123:12;;;44116:46;996:61:30;;-1:-1:-1;996:61:30;-1:-1:-1;1267:7:30;;44178:12:33;;1314:32:30;;;;;;;;;;;;1304:43;;;;;;1377:12;1184:249;;;;;;;;;44499:66:33;44487:79;;44603:2;44599:15;;;;44616:66;44595:88;44591:1;44582:11;;44575:109;44709:2;44700:12;;44693:28;;;;44746:2;44737:12;;44730:28;44783:2;44774:12;;44201:591;1184:249:30;;;;;;;;;;;;;;1149:306;;1184:249;1149:306;;;;;823:681;-1:-1:-1;;;;;;;823:681:30:o;1450:966:13:-;1589:9;1584:826;1618:1;1604:4;:11;:15;;;;:::i;:::-;1600:1;:19;1584:826;;;1641:13;1656:14;1675:4;1680:1;1675:7;;;;;;;;:::i;:::-;;;;;;;1684:4;1689:1;1693;1689:5;;;;:::i;:::-;1684:11;;;;;;;;:::i;:::-;;;;;;;1640:56;;;;1711:14;1731:42;1759:5;1766:6;1731:27;:42::i;:::-;-1:-1:-1;1710:63:13;-1:-1:-1;1787:17:13;1807:7;1815:5;:1;1819;1815:5;:::i;:::-;1807:14;;;;;;;;:::i;:::-;;;;;;;1787:34;;1836:18;1856;1887:6;1878:15;;:5;:15;;;:99;;1955:9;1974:1;1878:99;;;1921:1;1925:9;1878:99;1835:142;;;;1991:10;2022:1;2008:4;:11;:15;;;;:::i;:::-;2004:1;:19;:226;;2227:3;2004:226;;;2042:166;2088:7;2117:6;2145:4;2150:5;:1;2154;2150:5;:::i;:::-;2145:11;;;;;;;;:::i;2042:166::-;1991:239;;2276:62;2301:7;2310:5;2317:6;2325:12;2276:24;:62::i;:::-;2244:113;;;2358:10;2370;2382:2;2396:1;2386:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2386:12:13;;2244:155;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1626:784;;;;;;;1621:3;;;;;:::i;:::-;;;;1584:826;;5173:642:5;5592:23;5618:69;5646:4;5618:69;;;;;;;;;;;;;;;;;5626:5;5618:27;;;;:69;;;;;:::i;:::-;5592:95;;5705:10;:17;5726:1;5705:22;:56;;;;5742:10;5731:30;;;;;;;;;;;;:::i;:::-;5697:111;;;;;;;45692:2:33;5697:111:5;;;45674:21:33;45731:2;45711:18;;;45704:30;45770:34;45750:18;;;45743:62;45841:12;45821:18;;;45814:40;45871:19;;5697:111:5;45490:406:33;1559:521:30;1712:16;1730;1759:14;1779:26;1790:6;1798;1779:10;:26::i;:::-;1758:47;;;1816:16;1834;1884:46;1892:7;1901:6;1909;1917:12;1884:7;:46::i;:::-;1856:96;;;:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1815:139;;;;;;;;;1997:6;1987:16;;:6;:16;;;:86;;2054:8;2064;1987:86;;;2019:8;2029;1987:86;1964:109;;;;-1:-1:-1;1559:521:30;-1:-1:-1;;;;;;;;1559:521:30:o;2702:595::-;2834:17;2882:1;2871:8;:12;2863:68;;;;;;;46751:2:33;2863:68:30;;;46733:21:33;46790:2;46770:18;;;46763:30;46829:34;46809:18;;;46802:62;46900:13;46880:18;;;46873:41;46931:19;;2863:68:30;46549:407:33;2863:68:30;2974:1;2962:9;:13;:31;;;;;2992:1;2979:10;:14;2962:31;2941:118;;;;;;;47163:2:33;2941:118:30;;;47145:21:33;47202:2;47182:18;;;47175:30;47241:34;47221:18;;;47214:62;47312:10;47292:18;;;47285:38;47340:19;;2941:118:30;46961:404:33;2941:118:30;3069:23;3095:17;:8;3108:3;3095:12;:17::i;:::-;3069:43;-1:-1:-1;3122:17:30;3142:31;3069:43;3162:10;3142:19;:31::i;:::-;3122:51;-1:-1:-1;3183:19:30;3205:40;3229:15;3205:19;:9;3219:4;3205:13;:19::i;:::-;:23;;:40::i;:::-;3183:62;-1:-1:-1;3267:23:30;3183:62;3267:9;:23;:::i;:::-;3255:35;2702:595;-1:-1:-1;;;;;;;2702:595:30:o;337:397::-;436:14;452;500:6;490:16;;:6;:16;;;;482:66;;;;;;;47572:2:33;482:66:30;;;47554:21:33;47611:2;47591:18;;;47584:30;47650:34;47630:18;;;47623:62;47721:7;47701:18;;;47694:35;47746:19;;482:66:30;47370:401:33;482:66:30;586:6;577:15;;:6;:15;;;:77;;639:6;647;577:77;;;608:6;616;577:77;558:96;;-1:-1:-1;558:96:30;-1:-1:-1;672:20:30;;;664:63;;;;;;;47978:2:33;664:63:30;;;47960:21:33;48017:2;47997:18;;;47990:30;48056:32;48036:18;;;48029:60;48106:18;;664:63:30;47776:354:33;664:63:30;337:397;;;;;:::o;4108:223:6:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:6:o;483:149:29:-;541:9;570:6;;;:30;;-1:-1:-1;599:1:29;594;585:5;594:1;599;585:5;:::i;:::-;581:9;-1:-1:-1;580:15:29;;581:9;580:15;:::i;:::-;:20;570:30;562:63;;;;;;;48337:2:33;562:63:29;;;48319:21:33;48376:2;48356:18;;;48349:30;48415:22;48395:18;;;48388:50;48455:18;;562:63:29;48135:344:33;562:63:29;483:149;;;;:::o;200:135::-;258:9;302:1;292:5;296:1;302;292:5;:::i;:::-;288:9;;;287:16;;279:49;;;;;;;48686:2:33;279:49:29;;;48668:21:33;48725:2;48705:18;;;48698:30;48764:22;48744:18;;;48737:50;48804:18;;279:49:29;48484:344:33;5165:446:6;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;49035:2:33;5354:81:6;;;49017:21:33;49074:2;49054:18;;;49047:30;49113:34;49093:18;;;49086:62;49184:8;49164:18;;;49157:36;49210:19;;5354:81:6;48833:402:33;5354:81:6;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;7851;7879:7;7875:418;;;7906:17;;7902:286;;1702:19;;;;8113:60;;;;;;;49721:2:33;8113:60:6;;;49703:21:33;49760:2;49740:18;;;49733:30;49799:31;49779:18;;;49772:59;49848:18;;8113:60:6;49519:353:33;8113:60:6;-1:-1:-1;8208:10:6;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:184:33:-;66:77;63:1;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:253;275:2;269:9;317:4;305:17;;352:18;337:34;;373:22;;;334:62;331:88;;;399:18;;:::i;:::-;435:2;428:22;203:253;:::o;461:251::-;533:2;527:9;;;563:15;;608:18;593:34;;629:22;;;590:62;587:88;;;655:18;;:::i;717:253::-;789:2;783:9;831:4;819:17;;866:18;851:34;;887:22;;;848:62;845:88;;;913:18;;:::i;975:253::-;1047:2;1041:9;1089:4;1077:17;;1124:18;1109:34;;1145:22;;;1106:62;1103:88;;;1171:18;;:::i;1233:255::-;1305:2;1299:9;1347:6;1335:19;;1384:18;1369:34;;1405:22;;;1366:62;1363:88;;;1431:18;;:::i;1493:334::-;1564:2;1558:9;1620:2;1610:13;;1625:66;1606:86;1594:99;;1723:18;1708:34;;1744:22;;;1705:62;1702:88;;;1770:18;;:::i;:::-;1806:2;1799:22;1493:334;;-1:-1:-1;1493:334:33:o;1832:181::-;1890:4;1923:18;1915:6;1912:30;1909:56;;;1945:18;;:::i;:::-;-1:-1:-1;1990:1:33;1986:14;2002:4;1982:25;;1832:181::o;2018:114::-;2102:4;2095:5;2091:16;2084:5;2081:27;2071:55;;2122:1;2119;2112:12;2137:660;2191:5;2244:3;2237:4;2229:6;2225:17;2221:27;2211:55;;2262:1;2259;2252:12;2211:55;2298:6;2285:20;2324:4;2348:58;2364:41;2402:2;2364:41;:::i;:::-;2348:58;:::i;:::-;2440:15;;;2526:1;2522:10;;;;2510:23;;2506:32;;;2471:12;;;;2550:15;;;2547:35;;;2578:1;2575;2568:12;2547:35;2614:2;2606:6;2602:15;2626:142;2642:6;2637:3;2634:15;2626:142;;;2708:17;;2696:30;;2746:12;;;;2659;;2626:142;;;-1:-1:-1;2786:5:33;2137:660;-1:-1:-1;;;;;;2137:660:33:o;2802:245::-;2850:4;2883:18;2875:6;2872:30;2869:56;;;2905:18;;:::i;:::-;-1:-1:-1;2962:2:33;2950:15;2967:66;2946:88;3036:4;2942:99;;2802:245::o;3052:462::-;3094:5;3147:3;3140:4;3132:6;3128:17;3124:27;3114:55;;3165:1;3162;3155:12;3114:55;3201:6;3188:20;3232:48;3248:31;3276:2;3248:31;:::i;3232:48::-;3305:2;3296:7;3289:19;3351:3;3344:4;3339:2;3331:6;3327:15;3323:26;3320:35;3317:55;;;3368:1;3365;3358:12;3317:55;3433:2;3426:4;3418:6;3414:17;3407:4;3398:7;3394:18;3381:55;3481:1;3456:16;;;3474:4;3452:27;3445:38;;;;3460:7;3052:462;-1:-1:-1;;;3052:462:33:o;3519:884::-;3571:5;3624:3;3617:4;3609:6;3605:17;3601:27;3591:55;;3642:1;3639;3632:12;3591:55;3678:6;3665:20;3704:4;3728:58;3744:41;3782:2;3744:41;:::i;3728:58::-;3820:15;;;3906:1;3902:10;;;;3890:23;;3886:32;;;3851:12;;;;3930:15;;;3927:35;;;3958:1;3955;3948:12;3927:35;3994:2;3986:6;3982:15;4006:368;4022:6;4017:3;4014:15;4006:368;;;4108:3;4095:17;4144:18;4131:11;4128:35;4125:125;;;4204:1;4233:2;4229;4222:14;4125:125;4275:56;4327:3;4322:2;4308:11;4300:6;4296:24;4292:33;4275:56;:::i;:::-;4263:69;;-1:-1:-1;4352:12:33;;;;4039;;4006:368;;4408:1442;4567:6;4575;4583;4636:2;4624:9;4615:7;4611:23;4607:32;4604:52;;;4652:1;4649;4642:12;4604:52;4692:9;4679:23;4721:18;4762:2;4754:6;4751:14;4748:34;;;4778:1;4775;4768:12;4748:34;4816:6;4805:9;4801:22;4791:32;;4861:7;4854:4;4850:2;4846:13;4842:27;4832:55;;4883:1;4880;4873:12;4832:55;4919:2;4906:16;4941:4;4965:58;4981:41;5019:2;4981:41;:::i;4965:58::-;5057:15;;;5139:1;5135:10;;;;5127:19;;5123:28;;;5088:12;;;;5163:19;;;5160:39;;;5195:1;5192;5185:12;5160:39;5219:11;;;;5239:215;5255:6;5250:3;5247:15;5239:215;;;5335:3;5322:17;5352:29;5375:5;5352:29;:::i;:::-;5394:18;;5272:12;;;;5432;;;;5239:215;;;5473:5;-1:-1:-1;;5516:18:33;;5503:32;;-1:-1:-1;;5547:16:33;;;5544:36;;;5576:1;5573;5566:12;5544:36;5599:63;5654:7;5643:8;5632:9;5628:24;5599:63;:::i;:::-;5589:73;;5715:2;5704:9;5700:18;5687:32;5671:48;;5744:2;5734:8;5731:16;5728:36;;;5760:1;5757;5750:12;5728:36;;5783:61;5836:7;5825:8;5814:9;5810:24;5783:61;:::i;:::-;5773:71;;;4408:1442;;;;;:::o;6111:117::-;6196:6;6189:5;6185:18;6178:5;6175:29;6165:57;;6218:1;6215;6208:12;6233:154;6319:42;6312:5;6308:54;6301:5;6298:65;6288:93;;6377:1;6374;6367:12;6392:870;6502:6;6510;6518;6526;6534;6542;6595:3;6583:9;6574:7;6570:23;6566:33;6563:53;;;6612:1;6609;6602:12;6563:53;6651:9;6638:23;6670:30;6694:5;6670:30;:::i;:::-;6719:5;-1:-1:-1;6776:2:33;6761:18;;6748:32;6789:31;6748:32;6789:31;:::i;:::-;6839:7;-1:-1:-1;6898:2:33;6883:18;;6870:32;6911:33;6870:32;6911:33;:::i;:::-;6963:7;-1:-1:-1;7017:2:33;7002:18;;6989:32;;-1:-1:-1;7068:3:33;7053:19;;7040:33;;-1:-1:-1;7124:3:33;7109:19;;7096:33;7152:18;7141:30;;7138:50;;;7184:1;7181;7174:12;7138:50;7207:49;7248:7;7239:6;7228:9;7224:22;7207:49;:::i;:::-;7197:59;;;6392:870;;;;;;;;:::o;8212:952::-;8333:6;8341;8349;8357;8365;8373;8426:3;8414:9;8405:7;8401:23;8397:33;8394:53;;;8443:1;8440;8433:12;8394:53;8482:9;8469:23;8501:30;8525:5;8501:30;:::i;:::-;8550:5;-1:-1:-1;8606:2:33;8591:18;;8578:32;8629:18;8659:14;;;8656:34;;;8686:1;8683;8676:12;8656:34;8709:49;8750:7;8741:6;8730:9;8726:22;8709:49;:::i;:::-;8699:59;;8805:2;8794:9;8790:18;8777:32;8767:42;;8861:2;8850:9;8846:18;8833:32;8818:47;;8874:33;8899:7;8874:33;:::i;:::-;8926:7;;-1:-1:-1;8980:3:33;8965:19;;8952:33;;-1:-1:-1;9038:3:33;9023:19;;9010:33;;9055:16;;;9052:36;;;9084:1;9081;9074:12;9052:36;;9107:51;9150:7;9139:8;9128:9;9124:24;9107:51;:::i;9400:261::-;9473:6;9526:2;9514:9;9505:7;9501:23;9497:32;9494:52;;;9542:1;9539;9532:12;9494:52;9581:9;9568:23;9600:31;9625:5;9600:31;:::i;:::-;9650:5;9400:261;-1:-1:-1;;;9400:261:33:o;9666:184::-;9718:77;9715:1;9708:88;9815:4;9812:1;9805:15;9839:4;9836:1;9829:15;9855:146;9942:13;;9964:31;9942:13;9964:31;:::i;:::-;9855:146;;;:::o;10006:164::-;10082:13;;10131;;10124:21;10114:32;;10104:60;;10160:1;10157;10150:12;10175:592;10284:6;10292;10300;10308;10316;10369:3;10357:9;10348:7;10344:23;10340:33;10337:53;;;10386:1;10383;10376:12;10337:53;10418:9;10412:16;10437:31;10462:5;10437:31;:::i;:::-;10487:5;-1:-1:-1;10511:46:33;10553:2;10538:18;;10511:46;:::i;:::-;10501:56;;10602:2;10591:9;10587:18;10581:25;10615:31;10638:7;10615:31;:::i;:::-;10712:2;10697:18;;10691:25;10756:3;10741:19;;;10735:26;10175:592;;;;-1:-1:-1;10665:7:33;10691:25;10735:26;10175:592;-1:-1:-1;;;10175:592:33:o;11408:524::-;11521:6;11529;11537;11545;11598:3;11586:9;11577:7;11573:23;11569:33;11566:53;;;11615:1;11612;11605:12;11566:53;11647:9;11641:16;11666:31;11691:5;11666:31;:::i;:::-;11766:2;11751:18;;11745:25;11716:5;;-1:-1:-1;11779:33:33;11745:25;11779:33;:::i;:::-;11878:2;11863:18;;11857:25;11922:2;11907:18;;;11901:25;11408:524;;11831:7;;-1:-1:-1;11408:524:33;-1:-1:-1;;;11408:524:33:o;11937:604::-;12056:6;12064;12072;12080;12088;12141:3;12129:9;12120:7;12116:23;12112:33;12109:53;;;12158:1;12155;12148:12;12109:53;12190:9;12184:16;12209:31;12234:5;12209:31;:::i;:::-;12309:2;12294:18;;12288:25;12259:5;;-1:-1:-1;12322:33:33;12288:25;12322:33;:::i;:::-;12421:2;12406:18;;12400:25;12465:2;12450:18;;12444:25;12374:7;;-1:-1:-1;12400:25:33;-1:-1:-1;12444:25:33;-1:-1:-1;12488:47:33;12530:3;12515:19;;12488:47;:::i;:::-;12478:57;;11937:604;;;;;;;;:::o;12546:462::-;12650:6;12658;12666;12719:2;12707:9;12698:7;12694:23;12690:32;12687:52;;;12735:1;12732;12725:12;12687:52;12767:9;12761:16;12786:31;12811:5;12786:31;:::i;:::-;12886:2;12871:18;;12865:25;12836:5;;-1:-1:-1;12899:33:33;12865:25;12899:33;:::i;:::-;12951:7;12941:17;;;12998:2;12987:9;12983:18;12977:25;12967:35;;12546:462;;;;;:::o;13013:184::-;13083:6;13136:2;13124:9;13115:7;13111:23;13107:32;13104:52;;;13152:1;13149;13142:12;13104:52;-1:-1:-1;13175:16:33;;13013:184;-1:-1:-1;13013:184:33:o;13534:401::-;13629:6;13637;13690:2;13678:9;13669:7;13665:23;13661:32;13658:52;;;13706:1;13703;13696:12;13658:52;13738:9;13732:16;13757:31;13782:5;13757:31;:::i;:::-;13857:2;13842:18;;13836:25;13807:5;;-1:-1:-1;13870:33:33;13836:25;13870:33;:::i;:::-;13922:7;13912:17;;;13534:401;;;;;:::o;13940:320::-;14027:6;14035;14088:2;14076:9;14067:7;14063:23;14059:32;14056:52;;;14104:1;14101;14094:12;14056:52;14136:9;14130:16;14155:31;14180:5;14155:31;:::i;:::-;14250:2;14235:18;;;;14229:25;14205:5;;14229:25;;-1:-1:-1;;;13940:320:33:o;14265:1178::-;14395:6;14403;14411;14419;14472:3;14460:9;14451:7;14447:23;14443:33;14440:53;;;14489:1;14486;14479:12;14440:53;14518:9;14512:16;14502:26;;14547:2;14589;14578:9;14574:18;14568:25;14558:35;;14637:2;14626:9;14622:18;14616:25;14664:18;14656:6;14653:30;14650:50;;;14696:1;14693;14686:12;14650:50;14719:22;;14772:4;14764:13;;14760:27;-1:-1:-1;14750:55:33;;14801:1;14798;14791:12;14750:55;14830:2;14824:9;14853:58;14869:41;14907:2;14869:41;:::i;14853:58::-;14945:15;;;15027:1;15023:10;;;;15015:19;;15011:28;;;14976:12;;;;15051:19;;;15048:39;;;15083:1;15080;15073:12;15048:39;15107:11;;;;15127:210;15143:6;15138:3;15135:15;15127:210;;;15216:3;15210:10;15233:31;15258:5;15233:31;:::i;:::-;15277:18;;15160:12;;;;15315;;;;15127:210;;;15356:5;15346:15;;;;;;;15380:57;15433:2;15422:9;15418:18;15380:57;:::i;:::-;15370:67;;14265:1178;;;;;;;:::o;15448:258::-;15520:1;15530:113;15544:6;15541:1;15538:13;15530:113;;;15620:11;;;15614:18;15601:11;;;15594:39;15566:2;15559:10;15530:113;;;15661:6;15658:1;15655:13;15652:48;;;-1:-1:-1;;15696:1:33;15678:16;;15671:27;15448:258::o;15711:428::-;15764:5;15817:3;15810:4;15802:6;15798:17;15794:27;15784:55;;15835:1;15832;15825:12;15784:55;15864:6;15858:13;15895:48;15911:31;15939:2;15911:31;:::i;15895:48::-;15968:2;15959:7;15952:19;16014:3;16007:4;16002:2;15994:6;15990:15;15986:26;15983:35;15980:55;;;16031:1;16028;16021:12;15980:55;16044:64;16105:2;16098:4;16089:7;16085:18;16078:4;16070:6;16066:17;16044:64;:::i;16144:2256::-;16248:6;16279:2;16322;16310:9;16301:7;16297:23;16293:32;16290:52;;;16338:1;16335;16328:12;16290:52;16371:9;16365:16;16400:18;16441:2;16433:6;16430:14;16427:34;;;16457:1;16454;16447:12;16427:34;16480:22;;;;16536:4;16518:16;;;16514:27;16511:47;;;16554:1;16551;16544:12;16511:47;16580:22;;:::i;:::-;16632:2;16626:9;16644:33;16669:7;16644:33;:::i;:::-;16686:22;;16746:11;;;16740:18;16724:14;;;16717:42;16778:2;16818:11;;;16812:18;16796:14;;;16789:42;16870:2;16862:11;;16856:18;16886:16;;;16883:36;;;16915:1;16912;16905:12;16883:36;16946:8;16942:2;16938:17;16928:27;;;16993:7;16986:4;16982:2;16978:13;16974:27;16964:55;;17015:1;17012;17005:12;16964:55;17044:2;17038:9;17067:58;17083:41;17121:2;17083:41;:::i;17067:58::-;17159:15;;;17241:1;17237:10;;;;17229:19;;17225:28;;;17190:12;;;;17265:19;;;17262:39;;;17297:1;17294;17287:12;17262:39;17329:2;17325;17321:11;17341:991;17357:6;17352:3;17349:15;17341:991;;;17436:3;17430:10;17472:2;17459:11;17456:19;17453:109;;;17516:1;17545:2;17541;17534:14;17453:109;17585:20;;17629:16;;;17647:66;17625:89;17621:98;-1:-1:-1;17618:188:33;;;17760:1;17789:2;17785;17778:14;17618:188;17834:22;;:::i;:::-;17898:2;17894;17890:11;17884:18;17915:33;17940:7;17915:33;:::i;:::-;17961:24;;18020:11;;;18014:18;18048:16;;;18045:109;;;18106:1;18136:3;18131;18124:16;18045:109;18192:64;18248:7;18243:2;18232:8;18228:2;18224:17;18220:26;18192:64;:::i;:::-;18174:16;;;18167:90;-1:-1:-1;18270:20:33;;-1:-1:-1;18310:12:33;;;;17374;;17341:991;;;-1:-1:-1;18359:2:33;18348:14;;18341:29;-1:-1:-1;18352:5:33;;16144:2256;-1:-1:-1;;;;;;;;16144:2256:33:o;18405:2002::-;18484:5;18537:3;18530:4;18522:6;18518:17;18514:27;18504:55;;18555:1;18552;18545:12;18504:55;18584:6;18578:13;18610:4;18634:58;18650:41;18688:2;18650:41;:::i;18634:58::-;18726:15;;;18812:1;18808:10;;;;18796:23;;18792:32;;;18757:12;;;;18836:15;;;18833:35;;;18864:1;18861;18854:12;18833:35;18900:2;18892:6;18888:15;18912:1466;18928:6;18923:3;18920:15;18912:1466;;;19007:3;19001:10;19034:18;19084:2;19071:11;19068:19;19065:109;;;19128:1;19157:2;19153;19146:14;19065:109;19209:11;19201:6;19197:24;19187:34;;19244:4;19355:2;19286:66;19281:2;19276:3;19272:12;19268:85;19264:94;19261:184;;;19399:1;19428:2;19424;19417:14;19261:184;19471:22;;:::i;:::-;19535:2;19531;19527:11;19521:18;19552:33;19577:7;19552:33;:::i;:::-;19598:22;;19643:2;19679:11;;;19673:18;19704:33;19673:18;19704:33;:::i;:::-;19757:14;;;19750:31;19804:2;19840:11;;;19834:18;19887:16;;;19875:29;;19865:130;;19947:1;19977:3;19972;19965:16;19865:130;20015:14;;;20008:31;20074:11;;;20068:18;;20102:16;;;20099:109;;;20160:1;20149:12;;20190:3;20185;20178:16;20099:109;20244:60;20300:3;20295:2;20284:8;20280:2;20276:17;20272:26;20244:60;:::i;:::-;20228:14;;;20221:84;-1:-1:-1;20318:18:33;;-1:-1:-1;;;20356:12:33;;;;18945;;18912:1466;;20412:1274;20483:5;20536:3;20529:4;20521:6;20517:17;20513:27;20503:55;;20554:1;20551;20544:12;20503:55;20583:6;20577:13;20609:4;20633:58;20649:41;20687:2;20649:41;:::i;20633:58::-;20725:15;;;20811:1;20807:10;;;;20795:23;;20791:32;;;20756:12;;;;20835:15;;;20832:35;;;20863:1;20860;20853:12;20832:35;20899:2;20891:6;20887:15;20911:746;20927:6;20922:3;20919:15;20911:746;;;21005:4;20999:3;20994;20990:13;20986:24;20983:114;;;21051:1;21080:2;21076;21069:14;20983:114;21123:22;;:::i;:::-;21179:3;21173:10;21196:33;21221:7;21196:33;:::i;:::-;21242:22;;21298:12;;;21292:19;21324:33;21292:19;21324:33;:::i;:::-;21377:14;;;21370:31;21424:2;21462:40;21489:12;;;21462:40;:::i;:::-;21446:14;;;21439:64;21526:2;21570:12;;;21564:19;21548:14;;;21541:43;21597:18;;21635:12;;;;20953:4;20944:14;20911:746;;21691:2546;21796:6;21827:2;21870;21858:9;21849:7;21845:23;21841:32;21838:52;;;21886:1;21883;21876:12;21838:52;21919:9;21913:16;21948:18;21989:2;21981:6;21978:14;21975:34;;;22005:1;22002;21995:12;21975:34;22028:22;;;;22084:4;22066:16;;;22062:27;22059:47;;;22102:1;22099;22092:12;22059:47;22128:22;;:::i;:::-;22181:2;22175:9;22209:2;22199:8;22196:16;22193:36;;;22225:1;22222;22215:12;22193:36;22248:17;;22296:4;22288:13;;22284:27;-1:-1:-1;22274:55:33;;22325:1;22322;22315:12;22274:55;22354:2;22348:9;22377:58;22393:41;22431:2;22393:41;:::i;22377:58::-;22469:15;;;22551:1;22547:10;;;;22539:19;;22535:28;;;22500:12;;;;22575:19;;;22572:39;;;22607:1;22604;22597:12;22572:39;22639:2;22635;22631:11;22651:1131;22667:6;22662:3;22659:15;22651:1131;;;22746:3;22740:10;22782:2;22769:11;22766:19;22763:39;;;22798:1;22795;22788:12;22763:39;22825:20;;22956:4;22869:16;;;22887:66;22865:89;22861:100;22858:120;;;22974:1;22971;22964:12;22858:120;23006:22;;:::i;:::-;23070:2;23066;23062:11;23056:18;23087:33;23112:7;23087:33;:::i;:::-;23133:24;;23199:2;23191:11;;23185:18;23216:33;23185:18;23216:33;:::i;:::-;23269:16;;;23262:33;23333:41;23368:4;23360:13;;23333:41;:::i;:::-;23328:2;23319:7;23315:16;23308:67;23429:3;23425:2;23421:12;23415:19;23408:4;23399:7;23395:18;23388:47;23478:4;23474:2;23470:13;23464:20;23513:2;23503:8;23500:16;23497:106;;;23557:1;23586:2;23582;23575:14;23497:106;23642:64;23698:7;23693:2;23682:8;23678:2;23674:17;23670:26;23642:64;:::i;:::-;23636:3;23623:17;;23616:91;-1:-1:-1;23720:20:33;;-1:-1:-1;23760:12:33;;;;22684;;22651:1131;;;-1:-1:-1;23791:20:33;;-1:-1:-1;;;23842:11:33;;;23836:18;23866:16;;;23863:36;;;23895:1;23892;23885:12;23863:36;23931:81;24004:7;23993:8;23989:2;23985:17;23931:81;:::i;:::-;23926:2;23919:5;23915:14;23908:105;;24052:2;24048;24044:11;24038:18;24022:34;;24081:2;24071:8;24068:16;24065:36;;;24097:1;24094;24087:12;24065:36;24133:73;24198:7;24187:8;24183:2;24179:17;24133:73;:::i;:::-;24128:2;24117:14;;24110:97;24121:5;21691:2546;-1:-1:-1;;;;;;21691:2546:33:o;24242:136::-;24320:13;;24342:30;24320:13;24342:30;:::i;24383:728::-;24446:5;24499:3;24492:4;24484:6;24480:17;24476:27;24466:55;;24517:1;24514;24507:12;24466:55;24546:6;24540:13;24572:4;24596:58;24612:41;24650:2;24612:41;:::i;24596:58::-;24688:15;;;24774:1;24770:10;;;;24758:23;;24754:32;;;24719:12;;;;24798:15;;;24795:35;;;24826:1;24823;24816:12;24795:35;24862:2;24854:6;24850:15;24874:208;24890:6;24885:3;24882:15;24874:208;;;24963:3;24957:10;24980:29;25003:5;24980:29;:::i;:::-;25022:18;;25060:12;;;;24907;;24874:208;;25116:657;25181:5;25234:3;25227:4;25219:6;25215:17;25211:27;25201:55;;25252:1;25249;25242:12;25201:55;25281:6;25275:13;25307:4;25331:58;25347:41;25385:2;25347:41;:::i;25331:58::-;25423:15;;;25509:1;25505:10;;;;25493:23;;25489:32;;;25454:12;;;;25533:15;;;25530:35;;;25561:1;25558;25551:12;25530:35;25597:2;25589:6;25585:15;25609:135;25625:6;25620:3;25617:15;25609:135;;;25691:10;;25679:23;;25722:12;;;;25642;;25609:135;;25778:892;25841:5;25894:3;25887:4;25879:6;25875:17;25871:27;25861:55;;25912:1;25909;25902:12;25861:55;25941:6;25935:13;25967:4;25991:58;26007:41;26045:2;26007:41;:::i;25991:58::-;26083:15;;;26169:1;26165:10;;;;26153:23;;26149:32;;;26114:12;;;;26193:15;;;26190:35;;;26221:1;26218;26211:12;26190:35;26257:2;26249:6;26245:15;26269:372;26285:6;26280:3;26277:15;26269:372;;;26364:3;26358:10;26400:18;26387:11;26384:35;26381:125;;;26460:1;26489:2;26485;26478:14;26381:125;26531:67;26594:3;26589:2;26575:11;26567:6;26563:24;26559:33;26531:67;:::i;:::-;26519:80;;-1:-1:-1;26619:12:33;;;;26302;;26269:372;;26675:1883;26894:6;26902;26910;26918;26962:9;26953:7;26949:23;26992:3;26988:2;26984:12;26981:32;;;27009:1;27006;26999:12;26981:32;27032:6;27058:2;27054;27050:11;27047:31;;;27074:1;27071;27064:12;27047:31;27100:22;;:::i;:::-;27087:35;;27145:39;27174:9;27145:39;:::i;:::-;27138:5;27131:54;27217:57;27270:2;27259:9;27255:18;27217:57;:::i;:::-;27212:2;27205:5;27201:14;27194:81;27328:2;27317:9;27313:18;27307:25;27302:2;27295:5;27291:14;27284:49;27386:2;27375:9;27371:18;27365:25;27360:2;27353:5;27349:14;27342:49;27445:3;27434:9;27430:19;27424:26;27418:3;27411:5;27407:15;27400:51;27505:3;27494:9;27490:19;27484:26;27478:3;27471:5;27467:15;27460:51;27565:3;27554:9;27550:19;27544:26;27538:3;27531:5;27527:15;27520:51;27604:58;27657:3;27646:9;27642:19;27604:58;:::i;:::-;27598:3;27591:5;27587:15;27580:83;27682:3;27717:57;27770:2;27759:9;27755:18;27717:57;:::i;:::-;27701:14;;;27694:81;27794:3;27835:18;;;27829:25;27813:14;;;27806:49;27874:3;27915:18;;;27909:25;27893:14;;;27886:49;27988:18;;27982:25;27705:5;;-1:-1:-1;28026:18:33;28056:14;;;28053:34;;;28083:1;28080;28073:12;28053:34;28106:70;28168:7;28159:6;28148:9;28144:22;28106:70;:::i;:::-;28096:80;;28222:3;28211:9;28207:19;28201:26;28185:42;;28252:2;28242:8;28239:16;28236:36;;;28268:1;28265;28258:12;28236:36;28291:74;28357:7;28346:8;28335:9;28331:24;28291:74;:::i;:::-;28281:84;;28411:3;28400:9;28396:19;28390:26;28374:42;;28441:2;28431:8;28428:16;28425:36;;;28457:1;28454;28447:12;28425:36;;28480:72;28544:7;28533:8;28522:9;28518:24;28480:72;:::i;:::-;28470:82;;;26675:1883;;;;;;;:::o;28832:316::-;28873:3;28911:5;28905:12;28938:6;28933:3;28926:19;28954:63;29010:6;29003:4;28998:3;28994:14;28987:4;28980:5;28976:16;28954:63;:::i;:::-;29062:2;29050:15;29067:66;29046:88;29037:98;;;;29137:4;29033:109;;28832:316;-1:-1:-1;;28832:316:33:o;29153:217::-;29300:2;29289:9;29282:21;29263:4;29320:44;29360:2;29349:9;29345:18;29337:6;29320:44;:::i;29375:306::-;29461:5;29455:12;29450:3;29443:25;29517:4;29510:5;29506:16;29500:23;29493:4;29488:3;29484:14;29477:47;29425:3;29570:4;29563:5;29559:16;29553:23;29608:4;29601;29596:3;29592:14;29585:28;29629:46;29669:4;29664:3;29660:14;29646:12;29629:46;:::i;29686:741::-;30019:6;30011;30007:19;29996:9;29989:38;30075:4;30067:6;30063:17;30058:2;30047:9;30043:18;30036:45;30117:3;30112:2;30101:9;30097:18;30090:31;29970:4;30144:45;30184:3;30173:9;30169:19;30161:6;30144:45;:::i;:::-;30237:9;30229:6;30225:22;30220:2;30209:9;30205:18;30198:50;30271:32;30296:6;30288;30271:32;:::i;:::-;30257:46;;30352:9;30344:6;30340:22;30334:3;30323:9;30319:19;30312:51;30380:41;30414:6;30406;30380:41;:::i;:::-;30372:49;29686:741;-1:-1:-1;;;;;;;;29686:741:33:o;30432:245::-;30511:6;30519;30572:2;30560:9;30551:7;30547:23;30543:32;30540:52;;;30588:1;30585;30578:12;30540:52;-1:-1:-1;;30611:16:33;;30667:2;30652:18;;;30646:25;30611:16;;30646:25;;-1:-1:-1;30432:245:33:o;30682:1046::-;30878:6;30886;30894;30902;30910;30963:3;30951:9;30942:7;30938:23;30934:33;30931:53;;;30980:1;30977;30970:12;30931:53;31012:9;31006:16;31031:31;31056:5;31031:31;:::i;:::-;31130:2;31115:18;;31109:25;31081:5;;-1:-1:-1;31153:18:33;31183:14;;;31180:34;;;31210:1;31207;31200:12;31180:34;31233:70;31295:7;31286:6;31275:9;31271:22;31233:70;:::i;:::-;31223:80;;31349:2;31338:9;31334:18;31328:25;31312:41;;31378:2;31368:8;31365:16;31362:36;;;31394:1;31391;31384:12;31362:36;31417:74;31483:7;31472:8;31461:9;31457:24;31417:74;:::i;:::-;31407:84;;31537:2;31526:9;31522:18;31516:25;31500:41;;31566:2;31556:8;31553:16;31550:36;;;31582:1;31579;31572:12;31550:36;;31605:72;31669:7;31658:8;31647:9;31643:24;31605:72;:::i;:::-;31595:82;;;31717:3;31706:9;31702:19;31696:26;31686:36;;30682:1046;;;;;;;;:::o;32135:184::-;32187:77;32184:1;32177:88;32284:4;32281:1;32274:15;32308:4;32305:1;32298:15;32324:125;32364:4;32392:1;32389;32386:8;32383:34;;;32397:18;;:::i;:::-;-1:-1:-1;32434:9:33;;32324:125::o;32454:444::-;32505:3;32543:5;32537:12;32570:6;32565:3;32558:19;32596:4;32625:2;32620:3;32616:12;32609:19;;32662:2;32655:5;32651:14;32683:1;32693:180;32707:6;32704:1;32701:13;32693:180;;;32772:13;;32787:4;32768:24;32756:37;;32813:12;;;;32848:15;;;;32729:1;32722:9;32693:180;;;-1:-1:-1;32889:3:33;;32454:444;-1:-1:-1;;;;;32454:444:33:o;32903:435::-;32956:3;32994:5;32988:12;33021:6;33016:3;33009:19;33047:4;33076:2;33071:3;33067:12;33060:19;;33113:2;33106:5;33102:14;33134:1;33144:169;33158:6;33155:1;33152:13;33144:169;;;33219:13;;33207:26;;33253:12;;;;33288:15;;;;33180:1;33173:9;33144:169;;33343:614;33394:3;33432:5;33426:12;33459:6;33454:3;33447:19;33485:4;33526:2;33521:3;33517:12;33551:11;33578;33571:18;;33628:6;33625:1;33621:14;33614:5;33610:26;33598:38;;33670:2;33663:5;33659:14;33691:1;33701:230;33715:6;33712:1;33709:13;33701:230;;;33786:5;33780:4;33776:16;33771:3;33764:29;33814:37;33846:4;33837:6;33831:13;33814:37;:::i;:::-;33909:12;;;;33806:45;-1:-1:-1;33874:15:33;;;;33737:1;33730:9;33701:230;;;-1:-1:-1;33947:4:33;;33343:614;-1:-1:-1;;;;;;;33343:614:33:o;33962:679::-;34311:2;34300:9;34293:21;34274:4;34337:54;34387:2;34376:9;34372:18;34364:6;34337:54;:::i;:::-;34439:9;34431:6;34427:22;34422:2;34411:9;34407:18;34400:50;34473:44;34510:6;34502;34473:44;:::i;:::-;34459:58;;34565:9;34557:6;34553:22;34548:2;34537:9;34533:18;34526:50;34593:42;34628:6;34620;34593:42;:::i;:::-;34585:50;33962:679;-1:-1:-1;;;;;;33962:679:33:o;37167:482::-;37256:1;37299:5;37256:1;37313:330;37334:7;37324:8;37321:21;37313:330;;;37453:4;37385:66;37381:77;37375:4;37372:87;37369:113;;;37462:18;;:::i;:::-;37512:7;37502:8;37498:22;37495:55;;;37532:16;;;;37495:55;37611:22;;;;37571:15;;;;37313:330;;;37317:3;37167:482;;;;;:::o;37654:866::-;37703:5;37733:8;37723:80;;-1:-1:-1;37774:1:33;37788:5;;37723:80;37822:4;37812:76;;-1:-1:-1;37859:1:33;37873:5;;37812:76;37904:4;37922:1;37917:59;;;;37990:1;37985:130;;;;37897:218;;37917:59;37947:1;37938:10;;37961:5;;;37985:130;38022:3;38012:8;38009:17;38006:43;;;38029:18;;:::i;:::-;-1:-1:-1;;38085:1:33;38071:16;;38100:5;;37897:218;;38199:2;38189:8;38186:16;38180:3;38174:4;38171:13;38167:36;38161:2;38151:8;38148:16;38143:2;38137:4;38134:12;38130:35;38127:77;38124:159;;;-1:-1:-1;38236:19:33;;;38268:5;;38124:159;38315:34;38340:8;38334:4;38315:34;:::i;:::-;38445:6;38377:66;38373:79;38364:7;38361:92;38358:118;;;38456:18;;:::i;:::-;38494:20;;37654:866;-1:-1:-1;;;37654:866:33:o;38525:140::-;38583:5;38612:47;38653:4;38643:8;38639:19;38633:4;38612:47;:::i;38670:228::-;38710:7;38836:1;38768:66;38764:74;38761:1;38758:81;38753:1;38746:9;38739:17;38735:105;38732:131;;;38843:18;;:::i;:::-;-1:-1:-1;38883:9:33;;38670:228::o;38903:274::-;38943:1;38969;38959:189;;39004:77;39001:1;38994:88;39105:4;39102:1;39095:15;39133:4;39130:1;39123:15;38959:189;-1:-1:-1;39162:9:33;;38903:274::o;39746:873::-;40163:42;40155:6;40151:55;40140:9;40133:74;40243:3;40238:2;40227:9;40223:18;40216:31;40114:4;40270:55;40320:3;40309:9;40305:19;40297:6;40270:55;:::i;:::-;40373:9;40365:6;40361:22;40356:2;40345:9;40341:18;40334:50;40407:44;40444:6;40436;40407:44;:::i;:::-;40393:58;;40499:9;40491:6;40487:22;40482:2;40471:9;40467:18;40460:50;40527:42;40562:6;40554;40527:42;:::i;:::-;40519:50;;;40606:6;40600:3;40589:9;40585:19;40578:35;39746:873;;;;;;;;:::o;40624:1107::-;41040:4;41069:3;41111:6;41103;41099:19;41088:9;41081:38;41155:6;41150:2;41139:9;41135:18;41128:34;41198:6;41193:2;41182:9;41178:18;41171:34;41253:42;41245:6;41241:55;41236:2;41225:9;41221:18;41214:83;41334:6;41328:3;41317:9;41313:19;41306:35;41378:6;41372:3;41361:9;41357:19;41350:35;41422:2;41416:3;41405:9;41401:19;41394:31;41448:53;41497:2;41486:9;41482:18;41474:6;41448:53;:::i;:::-;41434:67;;41550:9;41542:6;41538:22;41532:3;41521:9;41517:19;41510:51;41584:32;41609:6;41601;41584:32;:::i;:::-;41570:46;;41665:9;41657:6;41653:22;41647:3;41636:9;41632:19;41625:51;41693:32;41718:6;41710;41693:32;:::i;:::-;41685:40;40624:1107;-1:-1:-1;;;;;;;;;;;;40624:1107:33:o;43495:128::-;43535:3;43566:1;43562:6;43559:1;43556:13;43553:39;;;43572:18;;:::i;:::-;-1:-1:-1;43608:9:33;;43495:128::o;43628:195::-;43667:3;43698:66;43691:5;43688:77;43685:103;;;43768:18;;:::i;:::-;-1:-1:-1;43815:1:33;43804:13;;43628:195::o;44797:481::-;45028:6;45017:9;45010:25;45071:6;45066:2;45055:9;45051:18;45044:34;45126:42;45118:6;45114:55;45109:2;45098:9;45094:18;45087:83;45206:3;45201:2;45190:9;45186:18;45179:31;44991:4;45227:45;45267:3;45256:9;45252:19;45244:6;45227:45;:::i;45283:202::-;45350:6;45403:2;45391:9;45382:7;45378:23;45374:32;45371:52;;;45419:1;45416;45409:12;45371:52;45442:37;45469:9;45442:37;:::i;45901:188::-;45980:13;;46033:30;46022:42;;46012:53;;46002:81;;46079:1;46076;46069:12;46094:450;46181:6;46189;46197;46250:2;46238:9;46229:7;46225:23;46221:32;46218:52;;;46266:1;46263;46256:12;46218:52;46289:40;46319:9;46289:40;:::i;:::-;46279:50;;46348:49;46393:2;46382:9;46378:18;46348:49;:::i;:::-;46338:59;;46440:2;46429:9;46425:18;46419:25;46484:10;46477:5;46473:22;46466:5;46463:33;46453:61;;46510:1;46507;46500:12;46453:61;46533:5;46523:15;;;46094:450;;;;;:::o;49240:274::-;49369:3;49407:6;49401:13;49423:53;49469:6;49464:3;49457:4;49449:6;49445:17;49423:53;:::i;:::-;49492:16;;;;;49240:274;-1:-1:-1;;49240:274:33:o"},"gasEstimates":{"creation":{"codeDepositCost":"4051200","executionCost":"infinite","totalCost":"infinite"},"external":{"SGETH()":"infinite","approveToStargateRouter(address)":"infinite","bentoBox()":"infinite","cook(uint8[],uint256[],bytes[])":"infinite","factory()":"infinite","getFee(uint16,uint8,address,uint256,uint256,bytes)":"infinite","pairCodeHash()":"infinite","sgReceive(uint16,bytes,uint256,address,uint256,bytes)":"infinite","stargateRouter()":"infinite","stargateWidget()":"infinite"}},"methodIdentifiers":{"SGETH()":"cf36fd24","approveToStargateRouter(address)":"d1ac3535","bentoBox()":"6b2ace87","cook(uint8[],uint256[],bytes[])":"656f3d64","factory()":"c45a0155","getFee(uint16,uint8,address,uint256,uint256,bytes)":"6ce4fe03","pairCodeHash()":"9aab9248","sgReceive(uint16,bytes,uint256,address,uint256,bytes)":"ab8236f3","stargateRouter()":"a9e56f3c","stargateWidget()":"6f435ac2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"contract IStargateRouter\",\"name\":\"_stargateRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pairCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"contract IStargateWidget\",\"name\":\"_stargateWidget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SGETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStargateRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLittleReceived\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"srcContext\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"failed\",\"type\":\"bool\"}],\"name\":\"StargateSushiXSwapDst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"srcContext\",\"type\":\"bytes32\"}],\"name\":\"StargateSushiXSwapSrc\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SGETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveToStargateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"cook\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_functionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dustAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateWidget\",\"outputs\":[{\"internalType\":\"contract IStargateWidget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Supports both BentoBox and Wallet. Supports both Trident and Legacy AMM. Uses Stargate as bridge.\",\"kind\":\"dev\",\"methods\":{\"approveToStargateRouter(address)\":{\"params\":{\"token\":\"token to approve\"}},\"cook(uint8[],uint256[],bytes[])\":{\"details\":\"The function gets invoked both at the src and dst chain.\",\"params\":{\"actions\":\"An array with a sequence of actions to execute (see ACTION_ declarations).\",\"datas\":\"A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\",\"values\":\"A one-to-one mapped array to `actions`. Native token amount to send along action.\"}},\"getFee(uint16,uint8,address,uint256,uint256,bytes)\":{\"params\":{\"_dstChainId\":\"stargate dst chainId\",\"_dustAmount\":\"dust amount to be received at the dst chain\",\"_functionType\":\"stargate Function type 1 for swap. See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\",\"_gas\":\"extra gas being sent\",\"_payload\":\"payload being sent at the dst chain\",\"_receiver\":\"sushiXswap on the dst chain\"}},\"sgReceive(uint16,bytes,uint256,address,uint256,bytes)\":{\"params\":{\"_token\":\"bridge token received\",\"amountLD\":\"amount received\",\"payload\":\"ABI-Encoded data received from src chain\"}}},\"title\":\"SushiXSwap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"SGETH()\":{\"notice\":\"Address of the Stargate ETH Vault\"},\"approveToStargateRouter(address)\":{\"notice\":\"Approves token to the Stargate Router\"},\"bentoBox()\":{\"notice\":\"BentoBox token vault\"},\"cook(uint8[],uint256[],bytes[])\":{\"notice\":\"Executes a set of actions and allows composability (contract calls) to other contracts.\"},\"factory()\":{\"notice\":\"Sushiswap Legacy AMM Factory\"},\"getFee(uint16,uint8,address,uint256,uint256,bytes)\":{\"notice\":\"Get the fees to be paid in native token for the swap\"},\"pairCodeHash()\":{\"notice\":\"Sushiswap Legacy AMM PairCodeHash\"},\"sgReceive(uint16,bytes,uint256,address,uint256,bytes)\":{\"notice\":\"Receiver function on dst chain\"},\"stargateRouter()\":{\"notice\":\"Stargate Router for cross chain interaction\"},\"stargateWidget()\":{\"notice\":\"Stargate Widget for stargate partner fee\"}},\"notice\":\"Enables cross chain swap for sushiswap.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SushiXSwap.sol\":\"SushiXSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/SushiXSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/ISushiXSwap.sol\\\";\\n\\n/// @title SushiXSwap\\n/// @notice Enables cross chain swap for sushiswap.\\n/// @dev Supports both BentoBox and Wallet. Supports both Trident and Legacy AMM. Uses Stargate as bridge.\\ncontract SushiXSwap is\\n    ISushiXSwap,\\n    BentoAdapter,\\n    TokenAdapter,\\n    SushiLegacyAdapter,\\n    TridentSwapAdapter,\\n    StargateAdapter\\n{\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        IStargateWidget _stargateWidget,\\n        address _SGETH\\n    ) ImmutableState(_bentoBox, _stargateRouter, _factory, _pairCodeHash, _stargateWidget, _SGETH) {\\n        // Register to BentoBox\\n        _bentoBox.registerProtocol();\\n    }\\n\\n    /// @notice List of ACTIONS supported by the `cook()`.\\n\\n    // Bento and Token Operations\\n    uint8 internal constant ACTION_MASTER_CONTRACT_APPROVAL = 0;\\n    uint8 internal constant ACTION_SRC_DEPOSIT_TO_BENTOBOX = 1;\\n    uint8 internal constant ACTION_SRC_TRANSFER_FROM_BENTOBOX = 2;\\n    uint8 internal constant ACTION_DST_DEPOSIT_TO_BENTOBOX = 3;\\n    uint8 internal constant ACTION_DST_WITHDRAW_TOKEN = 4;\\n    uint8 internal constant ACTION_DST_WITHDRAW_OR_TRANSFER_FROM_BENTOBOX = 5;\\n    uint8 internal constant ACTION_UNWRAP_AND_TRANSFER = 6;\\n\\n    // Swap Operations\\n    uint8 internal constant ACTION_LEGACY_SWAP = 7;\\n    uint8 internal constant ACTION_TRIDENT_SWAP = 8;\\n    uint8 internal constant ACTION_TRIDENT_COMPLEX_PATH_SWAP = 9;\\n\\n    // Bridge Operations\\n    uint8 internal constant ACTION_STARGATE_TELEPORT = 10;\\n\\n    uint8 internal constant ACTION_SRC_TOKEN_TRANSFER = 11;\\n\\n    uint8 internal constant ACTION_WRAP_TOKEN = 12;\\n\\n    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    /// @dev The function gets invoked both at the src and dst chain.\\n    function cook(\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) public payable override {\\n        uint256 actionLength = actions.length;\\n        for (uint256 i; i < actionLength; i = _increment(i)) {\\n            uint8 action = actions[i];\\n            // update for total amounts in contract?\\n            if (action == ACTION_MASTER_CONTRACT_APPROVAL) {\\n                (\\n                    address user,\\n                    bool approved,\\n                    uint8 v,\\n                    bytes32 r,\\n                    bytes32 s\\n                ) = abi.decode(\\n                        datas[i],\\n                        (address, bool, uint8, bytes32, bytes32)\\n                    );\\n\\n                bentoBox.setMasterContractApproval(\\n                    user,\\n                    address(this),\\n                    approved,\\n                    v,\\n                    r,\\n                    s\\n                );\\n            } else if (action == ACTION_SRC_DEPOSIT_TO_BENTOBOX) {\\n                (address token, address to, uint256 amount, uint256 share) = abi\\n                    .decode(datas[i], (address, address, uint256, uint256));\\n                _depositToBentoBox(\\n                    token,\\n                    msg.sender,\\n                    to,\\n                    amount,\\n                    share,\\n                    values[i]\\n                );\\n            } else if (action == ACTION_SRC_TRANSFER_FROM_BENTOBOX) {\\n                (\\n                    address token,\\n                    address to,\\n                    uint256 amount,\\n                    uint256 share,\\n                    bool unwrapBento\\n                ) = abi.decode(\\n                        datas[i],\\n                        (address, address, uint256, uint256, bool)\\n                    );\\n                _transferFromBentoBox(\\n                    token,\\n                    msg.sender,\\n                    to,\\n                    amount,\\n                    share,\\n                    unwrapBento\\n                );\\n            } else if (action == ACTION_SRC_TOKEN_TRANSFER) {\\n                (address token, address to, uint256 amount) = abi.decode(\\n                    datas[i],\\n                    (address, address, uint256)\\n                );\\n\\n                _transferFromToken(IERC20(token), to, amount);\\n            } else if (action == ACTION_DST_DEPOSIT_TO_BENTOBOX) {\\n                (address token, address to, uint256 amount, uint256 share) = abi\\n                    .decode(datas[i], (address, address, uint256, uint256));\\n\\n                if (amount == 0) {\\n                    amount = IERC20(token).balanceOf(address(this));\\n                    // Stargate Router doesn't support value? Should we update it anyway?\\n                    // values[i] = address(this).balance;\\n                }\\n\\n                _transferTokens(IERC20(token), address(bentoBox), amount);\\n\\n                _depositToBentoBox(\\n                    token,\\n                    address(bentoBox),\\n                    to,\\n                    amount,\\n                    share,\\n                    values[i]\\n                );\\n            } else if (action == ACTION_DST_WITHDRAW_TOKEN) {\\n                (address token, address to, uint256 amount) = abi.decode(\\n                    datas[i],\\n                    (address, address, uint256)\\n                );\\n                if (amount == 0) {\\n                    if (token != address(0)) {\\n                        amount = IERC20(token).balanceOf(address(this));\\n                    } else {\\n                        amount = address(this).balance;\\n                    }\\n                }\\n                _transferTokens(IERC20(token), to, amount);\\n            } else if (\\n                action == ACTION_DST_WITHDRAW_OR_TRANSFER_FROM_BENTOBOX\\n            ) {\\n                (\\n                    address token,\\n                    address to,\\n                    uint256 amount,\\n                    uint256 share,\\n                    bool unwrapBento\\n                ) = abi.decode(\\n                        datas[i],\\n                        (address, address, uint256, uint256, bool)\\n                    );\\n                if (amount == 0 && share == 0) {\\n                    share = bentoBox.balanceOf(token, address(this));\\n                }\\n                _transferFromBentoBox(\\n                    token,\\n                    address(this),\\n                    to,\\n                    amount,\\n                    share,\\n                    unwrapBento\\n                );\\n            } else if (action == ACTION_UNWRAP_AND_TRANSFER) {\\n                (address token, address to) = abi.decode(\\n                    datas[i],\\n                    (address, address)\\n                );\\n\\n                _unwrapTransfer(token, to);\\n            } else if (action == ACTION_WRAP_TOKEN) {\\n                (address token, uint256 amount) = abi.decode(\\n                    datas[i],\\n                    (address, uint256)\\n                );\\n\\n                _wrapToken(token, amount);\\n            } else if (action == ACTION_LEGACY_SWAP) {\\n                (\\n                    uint256 amountIn,\\n                    uint256 amountOutMin,\\n                    address[] memory path,\\n                    address to\\n                ) = abi.decode(\\n                        datas[i],\\n                        (uint256, uint256, address[], address)\\n                    );\\n                bool sendTokens;\\n                if (amountIn == 0) {\\n                    amountIn = IERC20(path[0]).balanceOf(address(this));\\n                    sendTokens = true;\\n                }\\n                _swapExactTokensForTokens(\\n                    amountIn,\\n                    amountOutMin,\\n                    path,\\n                    to,\\n                    sendTokens\\n                );\\n            } else if (action == ACTION_TRIDENT_SWAP) {\\n                ExactInputParams memory params = abi.decode(\\n                    datas[i],\\n                    (ExactInputParams)\\n                );\\n\\n                _exactInput(params);\\n            } else if (action == ACTION_TRIDENT_COMPLEX_PATH_SWAP) {\\n                ComplexPathParams memory params = abi.decode(\\n                    datas[i],\\n                    (ComplexPathParams)\\n                );\\n\\n                _complexPath(params);\\n            } else if (action == ACTION_STARGATE_TELEPORT) {\\n                (\\n                    StargateTeleportParams memory params,\\n                    uint8[] memory actionsDST,\\n                    uint256[] memory valuesDST,\\n                    bytes[] memory datasDST\\n                ) = abi.decode(\\n                        datas[i],\\n                        (StargateTeleportParams, uint8[], uint256[], bytes[])\\n                    );\\n\\n                _stargateTeleport(params, actionsDST, valuesDST, datasDST);\\n            }\\n        }\\n    }\\n\\n    /// @notice Allows the contract to receive Native tokens\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x9b551b9646c4e7ba98f99a631eba638e533eed8c27d7f5917299a337916c51bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/BentoAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title BentoAdapter\\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\nabstract contract BentoAdapter is ImmutableState {\\n    /// @notice Deposits the token from users wallet into the BentoBox.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to deposit. Use token as address(0) when depositing native token\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to be deposited\\n    /// @param share share to be deposited\\n    /// @param value native token value to be deposited. Only use when token address is address(0)\\n    function _depositToBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) internal {\\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\\n    }\\n\\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to transfer. For native tokens, use wnative token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    /// @param share share to transfer\\n    /// @param unwrapBento use true for withdraw and false for transfer\\n    function _transferFromBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bentoBox.withdraw(token, from, to, amount, share);\\n        } else {\\n            if (amount > 0) {\\n                share = bentoBox.toShare(token, amount, false);\\n            }\\n            bentoBox.transfer(token, from, to, share);\\n        }\\n    }\\n}\",\"keccak256\":\"0x4d2bcdca572d865f27fb5479733973b463b88514e96d8ee4ee03914f6f42852c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/StargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/stargate/IStargateAdapter.sol\\\";\\n\\n/// @title StargateAdapter\\n/// @notice Adapter for function used by Stargate Bridge\\nabstract contract StargateAdapter is ImmutableState, IStargateReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom Error\\n    error NotStargateRouter();\\n    error InsufficientGas();\\n\\n    // events\\n    event StargateSushiXSwapSrc(bytes32 indexed srcContext);\\n    event StargateSushiXSwapDst(bytes32 indexed srcContext, bool failed);\\n\\n    struct StargateTeleportParams {\\n        uint16 dstChainId; // stargate dst chain id\\n        address token; // token getting bridged\\n        uint256 srcPoolId; // stargate src pool id\\n        uint256 dstPoolId; // stargate dst pool id\\n        uint256 amount; // amount to bridge\\n        uint256 amountMin; // amount to bridge minimum\\n        uint256 dustAmount; // native token to be received on dst chain\\n        address receiver; // sushiXswap on dst chain\\n        address to; // receiver bridge token incase of transaction reverts on dst chain\\n        uint256 gas; // extra gas to be sent for dst chain operations\\n        bytes32 srcContext; // random bytes32 as source context\\n    }\\n\\n    /// @notice Approves token to the Stargate Router\\n    /// @param token token to approve\\n    function approveToStargateRouter(IERC20 token) external {\\n        token.safeApprove(address(stargateRouter), type(uint256).max);\\n    }\\n\\n    /// @notice Bridges the token to dst chain using Stargate Router\\n    /// @dev It is hardcoded to use all the contract balance. Only call this as the last step.\\n    /// The refund address for extra fees sent it msg.sender.\\n    /// @param params required by the Stargate, can be found at StargateTeleportParams struct.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    function _stargateTeleport(\\n        StargateTeleportParams memory params,\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) internal {\\n        bytes memory payload = abi.encode(params.to, actions, values, datas, params.srcContext);\\n\\n        /// @dev dst gas should be more than 100k\\n        if(params.gas < 100000) revert InsufficientGas();\\n\\n        stargateRouter.swap{value: address(this).balance}(\\n            params.dstChainId,\\n            params.srcPoolId,\\n            params.dstPoolId,\\n            payable(msg.sender), // refund address\\n            params.amount != 0\\n                ? params.amount\\n                : IERC20(params.token).balanceOf(address(this)),\\n            params.amountMin,\\n            IStargateRouter.lzTxObj(\\n                params.gas, // extra gas to be sent for dst execution\\n                params.dustAmount,\\n                abi.encodePacked(params.receiver)\\n            ),\\n            abi.encodePacked(params.receiver), // sushiXswap on the dst chain\\n            payload\\n        );\\n\\n        stargateWidget.partnerSwap(0x0001);\\n\\n        emit StargateSushiXSwapSrc(params.srcContext);\\n    }\\n\\n    /// @notice Get the fees to be paid in native token for the swap\\n    /// @param _dstChainId stargate dst chainId\\n    /// @param _functionType stargate Function type 1 for swap.\\n    /// See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\\n    /// @param _receiver sushiXswap on the dst chain\\n    /// @param _gas extra gas being sent\\n    /// @param _dustAmount dust amount to be received at the dst chain\\n    /// @param _payload payload being sent at the dst chain\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        address _receiver,\\n        uint256 _gas,\\n        uint256 _dustAmount,\\n        bytes memory _payload\\n    ) external view returns (uint256 a, uint256 b) {\\n        (a, b) = stargateRouter.quoteLayerZeroFee(\\n            _dstChainId,\\n            _functionType,\\n            abi.encodePacked(_receiver),\\n            abi.encode(_payload),\\n            IStargateRouter.lzTxObj(\\n                _gas,\\n                _dustAmount,\\n                abi.encodePacked(_receiver)\\n            )\\n        );\\n    }\\n\\n    /// @notice Receiver function on dst chain\\n    /// @param _token bridge token received\\n    /// @param amountLD amount received\\n    /// @param payload ABI-Encoded data received from src chain\\n    function sgReceive(\\n        uint16,\\n        bytes memory,\\n        uint256,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external override {\\n        if (msg.sender != address(stargateRouter)) revert NotStargateRouter();\\n\\n        (\\n            address to,\\n            uint8[] memory actions,\\n            uint256[] memory values,\\n            bytes[] memory datas,\\n            bytes32 srcContext\\n        ) = abi.decode(payload, (address, uint8[], uint256[], bytes[], bytes32));\\n\\n        uint256 reserveGas = 100000;\\n        bool failed;\\n\\n        if(gasleft() < reserveGas) {\\n            if(_token != SGETH) {\\n                IERC20(_token).safeTransfer(to, amountLD);\\n            }\\n            /// @dev transfer any native token received as dust to the to address\\n            if (address(this).balance > 0)\\n                to.call{value: (address(this).balance)}(\\\"\\\");\\n\\n            failed = true;\\n            emit StargateSushiXSwapDst(srcContext, failed);\\n            return;\\n        }\\n\\n        // 100000 -> exit gas\\n        uint256 limit = gasleft() - reserveGas;\\n\\n        /// @dev incase the actions fail, transfer bridge token to the to address\\n        try\\n            ISushiXSwap(payable(address(this))).cook{gas: limit}(\\n                actions,\\n                values,\\n                datas\\n            )\\n        {} catch (bytes memory) {\\n            if(_token != SGETH) {\\n                IERC20(_token).safeTransfer(to, amountLD);\\n            }\\n            failed = true;\\n        }\\n\\n        /// @dev transfer any native token received as dust to the to address\\n        if (address(this).balance > 0)\\n            to.call{value: (address(this).balance)}(\\\"\\\");\\n\\n        emit StargateSushiXSwapDst(srcContext, failed);\\n\\n    }\\n}\",\"keccak256\":\"0x5ee1b916a48725aa76058585df6275167d99c9a39b5627829c036ed9c35bbdde\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/SushiLegacyAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title SushiLegacyAdapter\\n/// @notice Adapter for functions used to swap using Sushiswap Legacy AMM.\\nabstract contract SushiLegacyAdapter is ImmutableState {\\n    using SafeERC20 for IERC20;\\n\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        bool sendTokens\\n    ) internal returns (uint256 amountOut) {\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\\n            factory,\\n            amountIn,\\n            path,\\n            pairCodeHash\\n        );\\n        amountOut = amounts[amounts.length - 1];\\n\\n        require(amountOut >= amountOutMin, \\\"insufficient-amount-out\\\");\\n\\n        /// @dev force sends token to the first pair if not already sent\\n        if (sendTokens) {\\n            IERC20(path[0]).safeTransfer(\\n                UniswapV2Library.pairFor(\\n                    factory,\\n                    path[0],\\n                    path[1],\\n                    pairCodeHash\\n                ),\\n                IERC20(path[0]).balanceOf(address(this))\\n            );\\n        }\\n        _swap(amounts, path, to);\\n    }\\n\\n    /// @dev requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(\\n                    factory,\\n                    output,\\n                    path[i + 2],\\n                    pairCodeHash\\n                )\\n                : _to;\\n            IUniswapV2Pair(\\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\",\"keccak256\":\"0xe63e60dee8e6a23dc70f31697e82048b62058e403c26e852e441ac8810b9e30f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/// @title TokenAdapter\\n/// @notice Adapter for all token operations\\nabstract contract TokenAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Function to transfer tokens from address(this)\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferTokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) != address(0)) {\\n            token.safeTransfer(to, amount);\\n        } else {\\n            payable(to).transfer(amount);\\n        }\\n    }\\n\\n    /// @notice Function to transfer tokens from user to the to address\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferFromToken(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        token.safeTransferFrom(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Unwraps the wrapper native into native and sends it to the receiver.\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    function _unwrapTransfer(address token, address to) internal {\\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\\n    }\\n\\n    /// @notice Wraps the token to the wrapped token\\n    /// @param token token to wrap\\n    /// @param amount amount to wrap\\n    function _wrapToken(address token, uint256 amount) internal {\\n        IWETH(token).deposit{value: amount}();\\n    }\\n}\",\"keccak256\":\"0x995299a2ed251da61f0827b5d87cecdfc8dad10915bcefdf3d2b2ad337227da9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/trident/ITridentSwapAdapter.sol\\\";\\n\\n/// @title TridentSwapAdapter\\n/// @notice Adapter for all Trident based Swaps\\n\\nabstract contract TridentSwapAdapter is\\n    ITridentRouter,\\n    ImmutableState,\\n    BentoAdapter,\\n    TokenAdapter\\n{\\n    // Custom Error\\n    error TooLittleReceived();\\n\\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function _exactInput(ExactInputParams memory params)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        if (params.amountIn == 0) {\\n          uint256 tokenBalance = IERC20(params.tokenIn).balanceOf(\\n                address(this)\\n            );\\n            _transferTokens(\\n                IERC20(params.tokenIn),\\n                address(bentoBox),\\n                tokenBalance\\n            );\\n            // Pay the first pool directly.\\n            (, params.amountIn) = bentoBox.deposit(\\n                params.tokenIn,\\n                address(bentoBox),\\n                params.path[0].pool,\\n                tokenBalance,\\n                0\\n            );\\n        }\\n\\n        // Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\\n        // a batch call should be made to `unwrapWETH`.\\n        uint256 n = params.path.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\\n    /// @param params This includes everything needed for the swap.\\n    /// Look at the `ComplexPathParams` struct for more details.\\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\\n    function _complexPath(ComplexPathParams memory params) internal {\\n        // Deposit all initial tokens to respective pools and initiate the swaps.\\n        // Input tokens come from the user - output goes to following pools.\\n        uint256 n = params.initialPath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            bentoBox.transfer(\\n                params.initialPath[i].tokenIn,\\n                address(this),\\n                params.initialPath[i].pool,\\n                params.initialPath[i].amount\\n            );\\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\\n        }\\n        // Do all the middle swaps. Input comes from previous pools.\\n        n = params.percentagePath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.percentagePath[i].tokenIn,\\n                address(this)\\n            );\\n            uint256 transferShares = (balanceShares *\\n                params.percentagePath[i].balancePercentage) / uint256(10)**8;\\n            bentoBox.transfer(\\n                params.percentagePath[i].tokenIn,\\n                address(this),\\n                params.percentagePath[i].pool,\\n                transferShares\\n            );\\n            IPool(params.percentagePath[i].pool).swap(\\n                params.percentagePath[i].data\\n            );\\n        }\\n        // Ensure enough was received and transfer the ouput to the recipient.\\n        n = params.output.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.output[i].token,\\n                address(this)\\n            );\\n            if (balanceShares < params.output[i].minAmount)\\n                revert TooLittleReceived();\\n            if (params.output[i].unwrapBento) {\\n                bentoBox.withdraw(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    0,\\n                    balanceShares\\n                );\\n            } else {\\n                bentoBox.transfer(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    balanceShares\\n                );\\n            }\\n        }\\n    }\\n\\n    function _increment(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xfff01b1e2f1b6eeab3a368f2b1ade2d66e0dbe6854000a36ca4faec66bab8bdc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title ImmutableState\\n/// @notice Stores the immutable state\\nabstract contract ImmutableState is IImmutableState {\\n    /// @notice BentoBox token vault\\n    IBentoBoxMinimal public immutable override bentoBox;\\n\\n    /// @notice Stargate Router for cross chain interaction\\n    IStargateRouter public immutable override stargateRouter;\\n\\n    /// @notice Stargate Widget for stargate partner fee\\n    IStargateWidget public immutable override stargateWidget;\\n\\n    /// @notice Sushiswap Legacy AMM Factory\\n    address public immutable override factory;\\n\\n    /// @notice Sushiswap Legacy AMM PairCodeHash\\n    bytes32 public immutable override pairCodeHash;\\n\\n    /// @notice Address of the Stargate ETH Vault\\n    address public immutable override SGETH;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        IStargateWidget _stargateWidget,\\n        address _SGETH\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        stargateWidget = _stargateWidget;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n        SGETH = _SGETH;\\n    }\\n}\",\"keccak256\":\"0x047f6df909198a6e179aaf17b3529de73ce21d14094ee18ad69e895bdf0f3ad8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\nimport \\\"./stargate/IStargateWidget.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function stargateWidget() external view returns (IStargateWidget);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n\\n    function SGETH() external view returns(address);\\n}\",\"keccak256\":\"0x476cf7998d3c274d9ac0910acfdd4dd22d3b1ff2f5be753c9e4b797f0a292356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISushiXSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../adapters/BentoAdapter.sol\\\";\\nimport \\\"../adapters/TokenAdapter.sol\\\";\\nimport \\\"../adapters/SushiLegacyAdapter.sol\\\";\\nimport \\\"../adapters/TridentSwapAdapter.sol\\\";\\nimport \\\"../adapters/StargateAdapter.sol\\\";\\n\\ninterface ISushiXSwap {\\n    function cook(\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) external payable;\\n}\",\"keccak256\":\"0xad4ffa10c491b6ebf199199976d0c00684235dd76f234dd9380f7306895539c2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x08174fdf25e2267c319ad9507b0fe106b786a5184075c057455c400cfb65e5dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\nimport \\\"../ISushiXSwap.sol\\\";\\nimport \\\"./IStargateReceiver.sol\\\";\\nimport \\\"./IStargateWidget.sol\\\";\\n\\ninterface IStargateAdapter {}\",\"keccak256\":\"0xf104f1d6482c468f82e9be4acfffa8380863a99d2fadf4cec92806fc4797ac11\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\",\"keccak256\":\"0x18653b2aaf84bbf532839384ec9a735fc5f32decb1f994c57f9492eddac97e2f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/trident/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data)\\n        external\\n        returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\",\"keccak256\":\"0x40cff14f725681fad1ef4977a5d07ae1c89c2b400b9d01b7149b77e10ccb4025\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IPool.sol\\\";\\nimport \\\"../IBentoBoxMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\",\"keccak256\":\"0xc0509d17bb53d2ff9ded9d43022ff84473791f86258a2bcfb1eb3a9966f766d0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ITridentRouter.sol\\\";\\nimport \\\"../../adapters/BentoAdapter.sol\\\";\\nimport \\\"../../adapters/TokenAdapter.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\n\\ninterface ITridentSwapAdapter {}\",\"keccak256\":\"0x7ae23c19bef0f88085edb4aa8c2b2f7904719df63e3dfe3e78d0fc4d093e216f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0x8992c26baf30eb4a743dbe6d2a9cb27625fb783347b06283ce9664ffad83c411\",\"license\":\"GPL-3.0\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            pairCodeHash // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1],\\n                pairCodeHash\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i],\\n                pairCodeHash\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\",\"keccak256\":\"0x1c40987526aeba050176dc98589ed9211959422b07f5085af035471d900178b7\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"SGETH()":{"notice":"Address of the Stargate ETH Vault"},"approveToStargateRouter(address)":{"notice":"Approves token to the Stargate Router"},"bentoBox()":{"notice":"BentoBox token vault"},"cook(uint8[],uint256[],bytes[])":{"notice":"Executes a set of actions and allows composability (contract calls) to other contracts."},"factory()":{"notice":"Sushiswap Legacy AMM Factory"},"getFee(uint16,uint8,address,uint256,uint256,bytes)":{"notice":"Get the fees to be paid in native token for the swap"},"pairCodeHash()":{"notice":"Sushiswap Legacy AMM PairCodeHash"},"sgReceive(uint16,bytes,uint256,address,uint256,bytes)":{"notice":"Receiver function on dst chain"},"stargateRouter()":{"notice":"Stargate Router for cross chain interaction"},"stargateWidget()":{"notice":"Stargate Widget for stargate partner fee"}},"notice":"Enables cross chain swap for sushiswap.","version":1}}},"contracts/adapters/BentoAdapter.sol":{"BentoAdapter":{"abi":[{"inputs":[],"name":"SGETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bentoBox","outputs":[{"internalType":"contract IBentoBoxMinimal","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pairCodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateRouter","outputs":[{"internalType":"contract IStargateRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateWidget","outputs":[{"internalType":"contract IStargateWidget","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox) are passed in the from param, or else the attacker can sifu user's funds in bentobox.","kind":"dev","methods":{},"title":"BentoAdapter","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"SGETH()":"cf36fd24","bentoBox()":"6b2ace87","factory()":"c45a0155","pairCodeHash()":"9aab9248","stargateRouter()":"a9e56f3c","stargateWidget()":"6f435ac2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SGETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateWidget\",\"outputs\":[{\"internalType\":\"contract IStargateWidget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox) are passed in the from param, or else the attacker can sifu user's funds in bentobox.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"BentoAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"SGETH()\":{\"notice\":\"Address of the Stargate ETH Vault\"},\"bentoBox()\":{\"notice\":\"BentoBox token vault\"},\"factory()\":{\"notice\":\"Sushiswap Legacy AMM Factory\"},\"pairCodeHash()\":{\"notice\":\"Sushiswap Legacy AMM PairCodeHash\"},\"stargateRouter()\":{\"notice\":\"Stargate Router for cross chain interaction\"},\"stargateWidget()\":{\"notice\":\"Stargate Widget for stargate partner fee\"}},\"notice\":\"Adapter which provides all functions of BentoBox require by this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/BentoAdapter.sol\":\"BentoAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/adapters/BentoAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title BentoAdapter\\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\nabstract contract BentoAdapter is ImmutableState {\\n    /// @notice Deposits the token from users wallet into the BentoBox.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to deposit. Use token as address(0) when depositing native token\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to be deposited\\n    /// @param share share to be deposited\\n    /// @param value native token value to be deposited. Only use when token address is address(0)\\n    function _depositToBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) internal {\\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\\n    }\\n\\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to transfer. For native tokens, use wnative token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    /// @param share share to transfer\\n    /// @param unwrapBento use true for withdraw and false for transfer\\n    function _transferFromBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bentoBox.withdraw(token, from, to, amount, share);\\n        } else {\\n            if (amount > 0) {\\n                share = bentoBox.toShare(token, amount, false);\\n            }\\n            bentoBox.transfer(token, from, to, share);\\n        }\\n    }\\n}\",\"keccak256\":\"0x4d2bcdca572d865f27fb5479733973b463b88514e96d8ee4ee03914f6f42852c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title ImmutableState\\n/// @notice Stores the immutable state\\nabstract contract ImmutableState is IImmutableState {\\n    /// @notice BentoBox token vault\\n    IBentoBoxMinimal public immutable override bentoBox;\\n\\n    /// @notice Stargate Router for cross chain interaction\\n    IStargateRouter public immutable override stargateRouter;\\n\\n    /// @notice Stargate Widget for stargate partner fee\\n    IStargateWidget public immutable override stargateWidget;\\n\\n    /// @notice Sushiswap Legacy AMM Factory\\n    address public immutable override factory;\\n\\n    /// @notice Sushiswap Legacy AMM PairCodeHash\\n    bytes32 public immutable override pairCodeHash;\\n\\n    /// @notice Address of the Stargate ETH Vault\\n    address public immutable override SGETH;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        IStargateWidget _stargateWidget,\\n        address _SGETH\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        stargateWidget = _stargateWidget;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n        SGETH = _SGETH;\\n    }\\n}\",\"keccak256\":\"0x047f6df909198a6e179aaf17b3529de73ce21d14094ee18ad69e895bdf0f3ad8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\nimport \\\"./stargate/IStargateWidget.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function stargateWidget() external view returns (IStargateWidget);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n\\n    function SGETH() external view returns(address);\\n}\",\"keccak256\":\"0x476cf7998d3c274d9ac0910acfdd4dd22d3b1ff2f5be753c9e4b797f0a292356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"SGETH()":{"notice":"Address of the Stargate ETH Vault"},"bentoBox()":{"notice":"BentoBox token vault"},"factory()":{"notice":"Sushiswap Legacy AMM Factory"},"pairCodeHash()":{"notice":"Sushiswap Legacy AMM PairCodeHash"},"stargateRouter()":{"notice":"Stargate Router for cross chain interaction"},"stargateWidget()":{"notice":"Stargate Widget for stargate partner fee"}},"notice":"Adapter which provides all functions of BentoBox require by this contract.","version":1}}},"contracts/adapters/StargateAdapter.sol":{"StargateAdapter":{"abi":[{"inputs":[],"name":"InsufficientGas","type":"error"},{"inputs":[],"name":"NotStargateRouter","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"srcContext","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"failed","type":"bool"}],"name":"StargateSushiXSwapDst","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"srcContext","type":"bytes32"}],"name":"StargateSushiXSwapSrc","type":"event"},{"inputs":[],"name":"SGETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"name":"approveToStargateRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"bentoBox","outputs":[{"internalType":"contract IBentoBoxMinimal","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint8","name":"_functionType","type":"uint8"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint256","name":"_gas","type":"uint256"},{"internalType":"uint256","name":"_dustAmount","type":"uint256"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"getFee","outputs":[{"internalType":"uint256","name":"a","type":"uint256"},{"internalType":"uint256","name":"b","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pairCodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"amountLD","type":"uint256"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"sgReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stargateRouter","outputs":[{"internalType":"contract IStargateRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateWidget","outputs":[{"internalType":"contract IStargateWidget","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"approveToStargateRouter(address)":{"params":{"token":"token to approve"}},"getFee(uint16,uint8,address,uint256,uint256,bytes)":{"params":{"_dstChainId":"stargate dst chainId","_dustAmount":"dust amount to be received at the dst chain","_functionType":"stargate Function type 1 for swap. See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types","_gas":"extra gas being sent","_payload":"payload being sent at the dst chain","_receiver":"sushiXswap on the dst chain"}},"sgReceive(uint16,bytes,uint256,address,uint256,bytes)":{"params":{"_token":"bridge token received","amountLD":"amount received","payload":"ABI-Encoded data received from src chain"}}},"title":"StargateAdapter","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"SGETH()":"cf36fd24","approveToStargateRouter(address)":"d1ac3535","bentoBox()":"6b2ace87","factory()":"c45a0155","getFee(uint16,uint8,address,uint256,uint256,bytes)":"6ce4fe03","pairCodeHash()":"9aab9248","sgReceive(uint16,bytes,uint256,address,uint256,bytes)":"ab8236f3","stargateRouter()":"a9e56f3c","stargateWidget()":"6f435ac2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStargateRouter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"srcContext\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"failed\",\"type\":\"bool\"}],\"name\":\"StargateSushiXSwapDst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"srcContext\",\"type\":\"bytes32\"}],\"name\":\"StargateSushiXSwapSrc\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SGETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveToStargateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_functionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dustAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateWidget\",\"outputs\":[{\"internalType\":\"contract IStargateWidget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveToStargateRouter(address)\":{\"params\":{\"token\":\"token to approve\"}},\"getFee(uint16,uint8,address,uint256,uint256,bytes)\":{\"params\":{\"_dstChainId\":\"stargate dst chainId\",\"_dustAmount\":\"dust amount to be received at the dst chain\",\"_functionType\":\"stargate Function type 1 for swap. See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\",\"_gas\":\"extra gas being sent\",\"_payload\":\"payload being sent at the dst chain\",\"_receiver\":\"sushiXswap on the dst chain\"}},\"sgReceive(uint16,bytes,uint256,address,uint256,bytes)\":{\"params\":{\"_token\":\"bridge token received\",\"amountLD\":\"amount received\",\"payload\":\"ABI-Encoded data received from src chain\"}}},\"title\":\"StargateAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"SGETH()\":{\"notice\":\"Address of the Stargate ETH Vault\"},\"approveToStargateRouter(address)\":{\"notice\":\"Approves token to the Stargate Router\"},\"bentoBox()\":{\"notice\":\"BentoBox token vault\"},\"factory()\":{\"notice\":\"Sushiswap Legacy AMM Factory\"},\"getFee(uint16,uint8,address,uint256,uint256,bytes)\":{\"notice\":\"Get the fees to be paid in native token for the swap\"},\"pairCodeHash()\":{\"notice\":\"Sushiswap Legacy AMM PairCodeHash\"},\"sgReceive(uint16,bytes,uint256,address,uint256,bytes)\":{\"notice\":\"Receiver function on dst chain\"},\"stargateRouter()\":{\"notice\":\"Stargate Router for cross chain interaction\"},\"stargateWidget()\":{\"notice\":\"Stargate Widget for stargate partner fee\"}},\"notice\":\"Adapter for function used by Stargate Bridge\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/StargateAdapter.sol\":\"StargateAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/adapters/BentoAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title BentoAdapter\\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\nabstract contract BentoAdapter is ImmutableState {\\n    /// @notice Deposits the token from users wallet into the BentoBox.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to deposit. Use token as address(0) when depositing native token\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to be deposited\\n    /// @param share share to be deposited\\n    /// @param value native token value to be deposited. Only use when token address is address(0)\\n    function _depositToBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) internal {\\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\\n    }\\n\\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to transfer. For native tokens, use wnative token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    /// @param share share to transfer\\n    /// @param unwrapBento use true for withdraw and false for transfer\\n    function _transferFromBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bentoBox.withdraw(token, from, to, amount, share);\\n        } else {\\n            if (amount > 0) {\\n                share = bentoBox.toShare(token, amount, false);\\n            }\\n            bentoBox.transfer(token, from, to, share);\\n        }\\n    }\\n}\",\"keccak256\":\"0x4d2bcdca572d865f27fb5479733973b463b88514e96d8ee4ee03914f6f42852c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/StargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/stargate/IStargateAdapter.sol\\\";\\n\\n/// @title StargateAdapter\\n/// @notice Adapter for function used by Stargate Bridge\\nabstract contract StargateAdapter is ImmutableState, IStargateReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom Error\\n    error NotStargateRouter();\\n    error InsufficientGas();\\n\\n    // events\\n    event StargateSushiXSwapSrc(bytes32 indexed srcContext);\\n    event StargateSushiXSwapDst(bytes32 indexed srcContext, bool failed);\\n\\n    struct StargateTeleportParams {\\n        uint16 dstChainId; // stargate dst chain id\\n        address token; // token getting bridged\\n        uint256 srcPoolId; // stargate src pool id\\n        uint256 dstPoolId; // stargate dst pool id\\n        uint256 amount; // amount to bridge\\n        uint256 amountMin; // amount to bridge minimum\\n        uint256 dustAmount; // native token to be received on dst chain\\n        address receiver; // sushiXswap on dst chain\\n        address to; // receiver bridge token incase of transaction reverts on dst chain\\n        uint256 gas; // extra gas to be sent for dst chain operations\\n        bytes32 srcContext; // random bytes32 as source context\\n    }\\n\\n    /// @notice Approves token to the Stargate Router\\n    /// @param token token to approve\\n    function approveToStargateRouter(IERC20 token) external {\\n        token.safeApprove(address(stargateRouter), type(uint256).max);\\n    }\\n\\n    /// @notice Bridges the token to dst chain using Stargate Router\\n    /// @dev It is hardcoded to use all the contract balance. Only call this as the last step.\\n    /// The refund address for extra fees sent it msg.sender.\\n    /// @param params required by the Stargate, can be found at StargateTeleportParams struct.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    function _stargateTeleport(\\n        StargateTeleportParams memory params,\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) internal {\\n        bytes memory payload = abi.encode(params.to, actions, values, datas, params.srcContext);\\n\\n        /// @dev dst gas should be more than 100k\\n        if(params.gas < 100000) revert InsufficientGas();\\n\\n        stargateRouter.swap{value: address(this).balance}(\\n            params.dstChainId,\\n            params.srcPoolId,\\n            params.dstPoolId,\\n            payable(msg.sender), // refund address\\n            params.amount != 0\\n                ? params.amount\\n                : IERC20(params.token).balanceOf(address(this)),\\n            params.amountMin,\\n            IStargateRouter.lzTxObj(\\n                params.gas, // extra gas to be sent for dst execution\\n                params.dustAmount,\\n                abi.encodePacked(params.receiver)\\n            ),\\n            abi.encodePacked(params.receiver), // sushiXswap on the dst chain\\n            payload\\n        );\\n\\n        stargateWidget.partnerSwap(0x0001);\\n\\n        emit StargateSushiXSwapSrc(params.srcContext);\\n    }\\n\\n    /// @notice Get the fees to be paid in native token for the swap\\n    /// @param _dstChainId stargate dst chainId\\n    /// @param _functionType stargate Function type 1 for swap.\\n    /// See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\\n    /// @param _receiver sushiXswap on the dst chain\\n    /// @param _gas extra gas being sent\\n    /// @param _dustAmount dust amount to be received at the dst chain\\n    /// @param _payload payload being sent at the dst chain\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        address _receiver,\\n        uint256 _gas,\\n        uint256 _dustAmount,\\n        bytes memory _payload\\n    ) external view returns (uint256 a, uint256 b) {\\n        (a, b) = stargateRouter.quoteLayerZeroFee(\\n            _dstChainId,\\n            _functionType,\\n            abi.encodePacked(_receiver),\\n            abi.encode(_payload),\\n            IStargateRouter.lzTxObj(\\n                _gas,\\n                _dustAmount,\\n                abi.encodePacked(_receiver)\\n            )\\n        );\\n    }\\n\\n    /// @notice Receiver function on dst chain\\n    /// @param _token bridge token received\\n    /// @param amountLD amount received\\n    /// @param payload ABI-Encoded data received from src chain\\n    function sgReceive(\\n        uint16,\\n        bytes memory,\\n        uint256,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external override {\\n        if (msg.sender != address(stargateRouter)) revert NotStargateRouter();\\n\\n        (\\n            address to,\\n            uint8[] memory actions,\\n            uint256[] memory values,\\n            bytes[] memory datas,\\n            bytes32 srcContext\\n        ) = abi.decode(payload, (address, uint8[], uint256[], bytes[], bytes32));\\n\\n        uint256 reserveGas = 100000;\\n        bool failed;\\n\\n        if(gasleft() < reserveGas) {\\n            if(_token != SGETH) {\\n                IERC20(_token).safeTransfer(to, amountLD);\\n            }\\n            /// @dev transfer any native token received as dust to the to address\\n            if (address(this).balance > 0)\\n                to.call{value: (address(this).balance)}(\\\"\\\");\\n\\n            failed = true;\\n            emit StargateSushiXSwapDst(srcContext, failed);\\n            return;\\n        }\\n\\n        // 100000 -> exit gas\\n        uint256 limit = gasleft() - reserveGas;\\n\\n        /// @dev incase the actions fail, transfer bridge token to the to address\\n        try\\n            ISushiXSwap(payable(address(this))).cook{gas: limit}(\\n                actions,\\n                values,\\n                datas\\n            )\\n        {} catch (bytes memory) {\\n            if(_token != SGETH) {\\n                IERC20(_token).safeTransfer(to, amountLD);\\n            }\\n            failed = true;\\n        }\\n\\n        /// @dev transfer any native token received as dust to the to address\\n        if (address(this).balance > 0)\\n            to.call{value: (address(this).balance)}(\\\"\\\");\\n\\n        emit StargateSushiXSwapDst(srcContext, failed);\\n\\n    }\\n}\",\"keccak256\":\"0x5ee1b916a48725aa76058585df6275167d99c9a39b5627829c036ed9c35bbdde\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/SushiLegacyAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title SushiLegacyAdapter\\n/// @notice Adapter for functions used to swap using Sushiswap Legacy AMM.\\nabstract contract SushiLegacyAdapter is ImmutableState {\\n    using SafeERC20 for IERC20;\\n\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        bool sendTokens\\n    ) internal returns (uint256 amountOut) {\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\\n            factory,\\n            amountIn,\\n            path,\\n            pairCodeHash\\n        );\\n        amountOut = amounts[amounts.length - 1];\\n\\n        require(amountOut >= amountOutMin, \\\"insufficient-amount-out\\\");\\n\\n        /// @dev force sends token to the first pair if not already sent\\n        if (sendTokens) {\\n            IERC20(path[0]).safeTransfer(\\n                UniswapV2Library.pairFor(\\n                    factory,\\n                    path[0],\\n                    path[1],\\n                    pairCodeHash\\n                ),\\n                IERC20(path[0]).balanceOf(address(this))\\n            );\\n        }\\n        _swap(amounts, path, to);\\n    }\\n\\n    /// @dev requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(\\n                    factory,\\n                    output,\\n                    path[i + 2],\\n                    pairCodeHash\\n                )\\n                : _to;\\n            IUniswapV2Pair(\\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\",\"keccak256\":\"0xe63e60dee8e6a23dc70f31697e82048b62058e403c26e852e441ac8810b9e30f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/// @title TokenAdapter\\n/// @notice Adapter for all token operations\\nabstract contract TokenAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Function to transfer tokens from address(this)\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferTokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) != address(0)) {\\n            token.safeTransfer(to, amount);\\n        } else {\\n            payable(to).transfer(amount);\\n        }\\n    }\\n\\n    /// @notice Function to transfer tokens from user to the to address\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferFromToken(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        token.safeTransferFrom(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Unwraps the wrapper native into native and sends it to the receiver.\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    function _unwrapTransfer(address token, address to) internal {\\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\\n    }\\n\\n    /// @notice Wraps the token to the wrapped token\\n    /// @param token token to wrap\\n    /// @param amount amount to wrap\\n    function _wrapToken(address token, uint256 amount) internal {\\n        IWETH(token).deposit{value: amount}();\\n    }\\n}\",\"keccak256\":\"0x995299a2ed251da61f0827b5d87cecdfc8dad10915bcefdf3d2b2ad337227da9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/trident/ITridentSwapAdapter.sol\\\";\\n\\n/// @title TridentSwapAdapter\\n/// @notice Adapter for all Trident based Swaps\\n\\nabstract contract TridentSwapAdapter is\\n    ITridentRouter,\\n    ImmutableState,\\n    BentoAdapter,\\n    TokenAdapter\\n{\\n    // Custom Error\\n    error TooLittleReceived();\\n\\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function _exactInput(ExactInputParams memory params)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        if (params.amountIn == 0) {\\n          uint256 tokenBalance = IERC20(params.tokenIn).balanceOf(\\n                address(this)\\n            );\\n            _transferTokens(\\n                IERC20(params.tokenIn),\\n                address(bentoBox),\\n                tokenBalance\\n            );\\n            // Pay the first pool directly.\\n            (, params.amountIn) = bentoBox.deposit(\\n                params.tokenIn,\\n                address(bentoBox),\\n                params.path[0].pool,\\n                tokenBalance,\\n                0\\n            );\\n        }\\n\\n        // Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\\n        // a batch call should be made to `unwrapWETH`.\\n        uint256 n = params.path.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\\n    /// @param params This includes everything needed for the swap.\\n    /// Look at the `ComplexPathParams` struct for more details.\\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\\n    function _complexPath(ComplexPathParams memory params) internal {\\n        // Deposit all initial tokens to respective pools and initiate the swaps.\\n        // Input tokens come from the user - output goes to following pools.\\n        uint256 n = params.initialPath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            bentoBox.transfer(\\n                params.initialPath[i].tokenIn,\\n                address(this),\\n                params.initialPath[i].pool,\\n                params.initialPath[i].amount\\n            );\\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\\n        }\\n        // Do all the middle swaps. Input comes from previous pools.\\n        n = params.percentagePath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.percentagePath[i].tokenIn,\\n                address(this)\\n            );\\n            uint256 transferShares = (balanceShares *\\n                params.percentagePath[i].balancePercentage) / uint256(10)**8;\\n            bentoBox.transfer(\\n                params.percentagePath[i].tokenIn,\\n                address(this),\\n                params.percentagePath[i].pool,\\n                transferShares\\n            );\\n            IPool(params.percentagePath[i].pool).swap(\\n                params.percentagePath[i].data\\n            );\\n        }\\n        // Ensure enough was received and transfer the ouput to the recipient.\\n        n = params.output.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.output[i].token,\\n                address(this)\\n            );\\n            if (balanceShares < params.output[i].minAmount)\\n                revert TooLittleReceived();\\n            if (params.output[i].unwrapBento) {\\n                bentoBox.withdraw(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    0,\\n                    balanceShares\\n                );\\n            } else {\\n                bentoBox.transfer(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    balanceShares\\n                );\\n            }\\n        }\\n    }\\n\\n    function _increment(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xfff01b1e2f1b6eeab3a368f2b1ade2d66e0dbe6854000a36ca4faec66bab8bdc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title ImmutableState\\n/// @notice Stores the immutable state\\nabstract contract ImmutableState is IImmutableState {\\n    /// @notice BentoBox token vault\\n    IBentoBoxMinimal public immutable override bentoBox;\\n\\n    /// @notice Stargate Router for cross chain interaction\\n    IStargateRouter public immutable override stargateRouter;\\n\\n    /// @notice Stargate Widget for stargate partner fee\\n    IStargateWidget public immutable override stargateWidget;\\n\\n    /// @notice Sushiswap Legacy AMM Factory\\n    address public immutable override factory;\\n\\n    /// @notice Sushiswap Legacy AMM PairCodeHash\\n    bytes32 public immutable override pairCodeHash;\\n\\n    /// @notice Address of the Stargate ETH Vault\\n    address public immutable override SGETH;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        IStargateWidget _stargateWidget,\\n        address _SGETH\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        stargateWidget = _stargateWidget;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n        SGETH = _SGETH;\\n    }\\n}\",\"keccak256\":\"0x047f6df909198a6e179aaf17b3529de73ce21d14094ee18ad69e895bdf0f3ad8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\nimport \\\"./stargate/IStargateWidget.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function stargateWidget() external view returns (IStargateWidget);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n\\n    function SGETH() external view returns(address);\\n}\",\"keccak256\":\"0x476cf7998d3c274d9ac0910acfdd4dd22d3b1ff2f5be753c9e4b797f0a292356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISushiXSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../adapters/BentoAdapter.sol\\\";\\nimport \\\"../adapters/TokenAdapter.sol\\\";\\nimport \\\"../adapters/SushiLegacyAdapter.sol\\\";\\nimport \\\"../adapters/TridentSwapAdapter.sol\\\";\\nimport \\\"../adapters/StargateAdapter.sol\\\";\\n\\ninterface ISushiXSwap {\\n    function cook(\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) external payable;\\n}\",\"keccak256\":\"0xad4ffa10c491b6ebf199199976d0c00684235dd76f234dd9380f7306895539c2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x08174fdf25e2267c319ad9507b0fe106b786a5184075c057455c400cfb65e5dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\nimport \\\"../ISushiXSwap.sol\\\";\\nimport \\\"./IStargateReceiver.sol\\\";\\nimport \\\"./IStargateWidget.sol\\\";\\n\\ninterface IStargateAdapter {}\",\"keccak256\":\"0xf104f1d6482c468f82e9be4acfffa8380863a99d2fadf4cec92806fc4797ac11\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\",\"keccak256\":\"0x18653b2aaf84bbf532839384ec9a735fc5f32decb1f994c57f9492eddac97e2f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/trident/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data)\\n        external\\n        returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\",\"keccak256\":\"0x40cff14f725681fad1ef4977a5d07ae1c89c2b400b9d01b7149b77e10ccb4025\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IPool.sol\\\";\\nimport \\\"../IBentoBoxMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\",\"keccak256\":\"0xc0509d17bb53d2ff9ded9d43022ff84473791f86258a2bcfb1eb3a9966f766d0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ITridentRouter.sol\\\";\\nimport \\\"../../adapters/BentoAdapter.sol\\\";\\nimport \\\"../../adapters/TokenAdapter.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\n\\ninterface ITridentSwapAdapter {}\",\"keccak256\":\"0x7ae23c19bef0f88085edb4aa8c2b2f7904719df63e3dfe3e78d0fc4d093e216f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0x8992c26baf30eb4a743dbe6d2a9cb27625fb783347b06283ce9664ffad83c411\",\"license\":\"GPL-3.0\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            pairCodeHash // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1],\\n                pairCodeHash\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i],\\n                pairCodeHash\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\",\"keccak256\":\"0x1c40987526aeba050176dc98589ed9211959422b07f5085af035471d900178b7\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"SGETH()":{"notice":"Address of the Stargate ETH Vault"},"approveToStargateRouter(address)":{"notice":"Approves token to the Stargate Router"},"bentoBox()":{"notice":"BentoBox token vault"},"factory()":{"notice":"Sushiswap Legacy AMM Factory"},"getFee(uint16,uint8,address,uint256,uint256,bytes)":{"notice":"Get the fees to be paid in native token for the swap"},"pairCodeHash()":{"notice":"Sushiswap Legacy AMM PairCodeHash"},"sgReceive(uint16,bytes,uint256,address,uint256,bytes)":{"notice":"Receiver function on dst chain"},"stargateRouter()":{"notice":"Stargate Router for cross chain interaction"},"stargateWidget()":{"notice":"Stargate Widget for stargate partner fee"}},"notice":"Adapter for function used by Stargate Bridge","version":1}}},"contracts/adapters/SushiLegacyAdapter.sol":{"SushiLegacyAdapter":{"abi":[{"inputs":[],"name":"SGETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bentoBox","outputs":[{"internalType":"contract IBentoBoxMinimal","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pairCodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateRouter","outputs":[{"internalType":"contract IStargateRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateWidget","outputs":[{"internalType":"contract IStargateWidget","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"SushiLegacyAdapter","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"SGETH()":"cf36fd24","bentoBox()":"6b2ace87","factory()":"c45a0155","pairCodeHash()":"9aab9248","stargateRouter()":"a9e56f3c","stargateWidget()":"6f435ac2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SGETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateWidget\",\"outputs\":[{\"internalType\":\"contract IStargateWidget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"SushiLegacyAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"SGETH()\":{\"notice\":\"Address of the Stargate ETH Vault\"},\"bentoBox()\":{\"notice\":\"BentoBox token vault\"},\"factory()\":{\"notice\":\"Sushiswap Legacy AMM Factory\"},\"pairCodeHash()\":{\"notice\":\"Sushiswap Legacy AMM PairCodeHash\"},\"stargateRouter()\":{\"notice\":\"Stargate Router for cross chain interaction\"},\"stargateWidget()\":{\"notice\":\"Stargate Widget for stargate partner fee\"}},\"notice\":\"Adapter for functions used to swap using Sushiswap Legacy AMM.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/SushiLegacyAdapter.sol\":\"SushiLegacyAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/adapters/SushiLegacyAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title SushiLegacyAdapter\\n/// @notice Adapter for functions used to swap using Sushiswap Legacy AMM.\\nabstract contract SushiLegacyAdapter is ImmutableState {\\n    using SafeERC20 for IERC20;\\n\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        bool sendTokens\\n    ) internal returns (uint256 amountOut) {\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\\n            factory,\\n            amountIn,\\n            path,\\n            pairCodeHash\\n        );\\n        amountOut = amounts[amounts.length - 1];\\n\\n        require(amountOut >= amountOutMin, \\\"insufficient-amount-out\\\");\\n\\n        /// @dev force sends token to the first pair if not already sent\\n        if (sendTokens) {\\n            IERC20(path[0]).safeTransfer(\\n                UniswapV2Library.pairFor(\\n                    factory,\\n                    path[0],\\n                    path[1],\\n                    pairCodeHash\\n                ),\\n                IERC20(path[0]).balanceOf(address(this))\\n            );\\n        }\\n        _swap(amounts, path, to);\\n    }\\n\\n    /// @dev requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(\\n                    factory,\\n                    output,\\n                    path[i + 2],\\n                    pairCodeHash\\n                )\\n                : _to;\\n            IUniswapV2Pair(\\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\",\"keccak256\":\"0xe63e60dee8e6a23dc70f31697e82048b62058e403c26e852e441ac8810b9e30f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title ImmutableState\\n/// @notice Stores the immutable state\\nabstract contract ImmutableState is IImmutableState {\\n    /// @notice BentoBox token vault\\n    IBentoBoxMinimal public immutable override bentoBox;\\n\\n    /// @notice Stargate Router for cross chain interaction\\n    IStargateRouter public immutable override stargateRouter;\\n\\n    /// @notice Stargate Widget for stargate partner fee\\n    IStargateWidget public immutable override stargateWidget;\\n\\n    /// @notice Sushiswap Legacy AMM Factory\\n    address public immutable override factory;\\n\\n    /// @notice Sushiswap Legacy AMM PairCodeHash\\n    bytes32 public immutable override pairCodeHash;\\n\\n    /// @notice Address of the Stargate ETH Vault\\n    address public immutable override SGETH;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        IStargateWidget _stargateWidget,\\n        address _SGETH\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        stargateWidget = _stargateWidget;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n        SGETH = _SGETH;\\n    }\\n}\",\"keccak256\":\"0x047f6df909198a6e179aaf17b3529de73ce21d14094ee18ad69e895bdf0f3ad8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\nimport \\\"./stargate/IStargateWidget.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function stargateWidget() external view returns (IStargateWidget);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n\\n    function SGETH() external view returns(address);\\n}\",\"keccak256\":\"0x476cf7998d3c274d9ac0910acfdd4dd22d3b1ff2f5be753c9e4b797f0a292356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0x8992c26baf30eb4a743dbe6d2a9cb27625fb783347b06283ce9664ffad83c411\",\"license\":\"GPL-3.0\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            pairCodeHash // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1],\\n                pairCodeHash\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i],\\n                pairCodeHash\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\",\"keccak256\":\"0x1c40987526aeba050176dc98589ed9211959422b07f5085af035471d900178b7\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"SGETH()":{"notice":"Address of the Stargate ETH Vault"},"bentoBox()":{"notice":"BentoBox token vault"},"factory()":{"notice":"Sushiswap Legacy AMM Factory"},"pairCodeHash()":{"notice":"Sushiswap Legacy AMM PairCodeHash"},"stargateRouter()":{"notice":"Stargate Router for cross chain interaction"},"stargateWidget()":{"notice":"Stargate Widget for stargate partner fee"}},"notice":"Adapter for functions used to swap using Sushiswap Legacy AMM.","version":1}}},"contracts/adapters/TokenAdapter.sol":{"TokenAdapter":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"TokenAdapter","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"TokenAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Adapter for all token operations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/TokenAdapter.sol\":\"TokenAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/adapters/TokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/// @title TokenAdapter\\n/// @notice Adapter for all token operations\\nabstract contract TokenAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Function to transfer tokens from address(this)\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferTokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) != address(0)) {\\n            token.safeTransfer(to, amount);\\n        } else {\\n            payable(to).transfer(amount);\\n        }\\n    }\\n\\n    /// @notice Function to transfer tokens from user to the to address\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferFromToken(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        token.safeTransferFrom(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Unwraps the wrapper native into native and sends it to the receiver.\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    function _unwrapTransfer(address token, address to) internal {\\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\\n    }\\n\\n    /// @notice Wraps the token to the wrapped token\\n    /// @param token token to wrap\\n    /// @param amount amount to wrap\\n    function _wrapToken(address token, uint256 amount) internal {\\n        IWETH(token).deposit{value: amount}();\\n    }\\n}\",\"keccak256\":\"0x995299a2ed251da61f0827b5d87cecdfc8dad10915bcefdf3d2b2ad337227da9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x08174fdf25e2267c319ad9507b0fe106b786a5184075c057455c400cfb65e5dc\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Adapter for all token operations","version":1}}},"contracts/adapters/TridentSwapAdapter.sol":{"TridentSwapAdapter":{"abi":[{"inputs":[],"name":"TooLittleReceived","type":"error"},{"inputs":[],"name":"SGETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bentoBox","outputs":[{"internalType":"contract IBentoBoxMinimal","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pairCodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateRouter","outputs":[{"internalType":"contract IStargateRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateWidget","outputs":[{"internalType":"contract IStargateWidget","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"TridentSwapAdapter","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"SGETH()":"cf36fd24","bentoBox()":"6b2ace87","factory()":"c45a0155","pairCodeHash()":"9aab9248","stargateRouter()":"a9e56f3c","stargateWidget()":"6f435ac2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SGETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateWidget\",\"outputs\":[{\"internalType\":\"contract IStargateWidget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"TridentSwapAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"SGETH()\":{\"notice\":\"Address of the Stargate ETH Vault\"},\"bentoBox()\":{\"notice\":\"BentoBox token vault\"},\"factory()\":{\"notice\":\"Sushiswap Legacy AMM Factory\"},\"pairCodeHash()\":{\"notice\":\"Sushiswap Legacy AMM PairCodeHash\"},\"stargateRouter()\":{\"notice\":\"Stargate Router for cross chain interaction\"},\"stargateWidget()\":{\"notice\":\"Stargate Widget for stargate partner fee\"}},\"notice\":\"Adapter for all Trident based Swaps\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/TridentSwapAdapter.sol\":\"TridentSwapAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/adapters/BentoAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title BentoAdapter\\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\nabstract contract BentoAdapter is ImmutableState {\\n    /// @notice Deposits the token from users wallet into the BentoBox.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to deposit. Use token as address(0) when depositing native token\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to be deposited\\n    /// @param share share to be deposited\\n    /// @param value native token value to be deposited. Only use when token address is address(0)\\n    function _depositToBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) internal {\\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\\n    }\\n\\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to transfer. For native tokens, use wnative token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    /// @param share share to transfer\\n    /// @param unwrapBento use true for withdraw and false for transfer\\n    function _transferFromBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bentoBox.withdraw(token, from, to, amount, share);\\n        } else {\\n            if (amount > 0) {\\n                share = bentoBox.toShare(token, amount, false);\\n            }\\n            bentoBox.transfer(token, from, to, share);\\n        }\\n    }\\n}\",\"keccak256\":\"0x4d2bcdca572d865f27fb5479733973b463b88514e96d8ee4ee03914f6f42852c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/// @title TokenAdapter\\n/// @notice Adapter for all token operations\\nabstract contract TokenAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Function to transfer tokens from address(this)\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferTokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) != address(0)) {\\n            token.safeTransfer(to, amount);\\n        } else {\\n            payable(to).transfer(amount);\\n        }\\n    }\\n\\n    /// @notice Function to transfer tokens from user to the to address\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferFromToken(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        token.safeTransferFrom(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Unwraps the wrapper native into native and sends it to the receiver.\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    function _unwrapTransfer(address token, address to) internal {\\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\\n    }\\n\\n    /// @notice Wraps the token to the wrapped token\\n    /// @param token token to wrap\\n    /// @param amount amount to wrap\\n    function _wrapToken(address token, uint256 amount) internal {\\n        IWETH(token).deposit{value: amount}();\\n    }\\n}\",\"keccak256\":\"0x995299a2ed251da61f0827b5d87cecdfc8dad10915bcefdf3d2b2ad337227da9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/trident/ITridentSwapAdapter.sol\\\";\\n\\n/// @title TridentSwapAdapter\\n/// @notice Adapter for all Trident based Swaps\\n\\nabstract contract TridentSwapAdapter is\\n    ITridentRouter,\\n    ImmutableState,\\n    BentoAdapter,\\n    TokenAdapter\\n{\\n    // Custom Error\\n    error TooLittleReceived();\\n\\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function _exactInput(ExactInputParams memory params)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        if (params.amountIn == 0) {\\n          uint256 tokenBalance = IERC20(params.tokenIn).balanceOf(\\n                address(this)\\n            );\\n            _transferTokens(\\n                IERC20(params.tokenIn),\\n                address(bentoBox),\\n                tokenBalance\\n            );\\n            // Pay the first pool directly.\\n            (, params.amountIn) = bentoBox.deposit(\\n                params.tokenIn,\\n                address(bentoBox),\\n                params.path[0].pool,\\n                tokenBalance,\\n                0\\n            );\\n        }\\n\\n        // Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\\n        // a batch call should be made to `unwrapWETH`.\\n        uint256 n = params.path.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\\n    /// @param params This includes everything needed for the swap.\\n    /// Look at the `ComplexPathParams` struct for more details.\\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\\n    function _complexPath(ComplexPathParams memory params) internal {\\n        // Deposit all initial tokens to respective pools and initiate the swaps.\\n        // Input tokens come from the user - output goes to following pools.\\n        uint256 n = params.initialPath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            bentoBox.transfer(\\n                params.initialPath[i].tokenIn,\\n                address(this),\\n                params.initialPath[i].pool,\\n                params.initialPath[i].amount\\n            );\\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\\n        }\\n        // Do all the middle swaps. Input comes from previous pools.\\n        n = params.percentagePath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.percentagePath[i].tokenIn,\\n                address(this)\\n            );\\n            uint256 transferShares = (balanceShares *\\n                params.percentagePath[i].balancePercentage) / uint256(10)**8;\\n            bentoBox.transfer(\\n                params.percentagePath[i].tokenIn,\\n                address(this),\\n                params.percentagePath[i].pool,\\n                transferShares\\n            );\\n            IPool(params.percentagePath[i].pool).swap(\\n                params.percentagePath[i].data\\n            );\\n        }\\n        // Ensure enough was received and transfer the ouput to the recipient.\\n        n = params.output.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.output[i].token,\\n                address(this)\\n            );\\n            if (balanceShares < params.output[i].minAmount)\\n                revert TooLittleReceived();\\n            if (params.output[i].unwrapBento) {\\n                bentoBox.withdraw(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    0,\\n                    balanceShares\\n                );\\n            } else {\\n                bentoBox.transfer(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    balanceShares\\n                );\\n            }\\n        }\\n    }\\n\\n    function _increment(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xfff01b1e2f1b6eeab3a368f2b1ade2d66e0dbe6854000a36ca4faec66bab8bdc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title ImmutableState\\n/// @notice Stores the immutable state\\nabstract contract ImmutableState is IImmutableState {\\n    /// @notice BentoBox token vault\\n    IBentoBoxMinimal public immutable override bentoBox;\\n\\n    /// @notice Stargate Router for cross chain interaction\\n    IStargateRouter public immutable override stargateRouter;\\n\\n    /// @notice Stargate Widget for stargate partner fee\\n    IStargateWidget public immutable override stargateWidget;\\n\\n    /// @notice Sushiswap Legacy AMM Factory\\n    address public immutable override factory;\\n\\n    /// @notice Sushiswap Legacy AMM PairCodeHash\\n    bytes32 public immutable override pairCodeHash;\\n\\n    /// @notice Address of the Stargate ETH Vault\\n    address public immutable override SGETH;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        IStargateWidget _stargateWidget,\\n        address _SGETH\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        stargateWidget = _stargateWidget;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n        SGETH = _SGETH;\\n    }\\n}\",\"keccak256\":\"0x047f6df909198a6e179aaf17b3529de73ce21d14094ee18ad69e895bdf0f3ad8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\nimport \\\"./stargate/IStargateWidget.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function stargateWidget() external view returns (IStargateWidget);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n\\n    function SGETH() external view returns(address);\\n}\",\"keccak256\":\"0x476cf7998d3c274d9ac0910acfdd4dd22d3b1ff2f5be753c9e4b797f0a292356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x08174fdf25e2267c319ad9507b0fe106b786a5184075c057455c400cfb65e5dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/trident/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data)\\n        external\\n        returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\",\"keccak256\":\"0x40cff14f725681fad1ef4977a5d07ae1c89c2b400b9d01b7149b77e10ccb4025\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IPool.sol\\\";\\nimport \\\"../IBentoBoxMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\",\"keccak256\":\"0xc0509d17bb53d2ff9ded9d43022ff84473791f86258a2bcfb1eb3a9966f766d0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ITridentRouter.sol\\\";\\nimport \\\"../../adapters/BentoAdapter.sol\\\";\\nimport \\\"../../adapters/TokenAdapter.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\n\\ninterface ITridentSwapAdapter {}\",\"keccak256\":\"0x7ae23c19bef0f88085edb4aa8c2b2f7904719df63e3dfe3e78d0fc4d093e216f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"SGETH()":{"notice":"Address of the Stargate ETH Vault"},"bentoBox()":{"notice":"BentoBox token vault"},"factory()":{"notice":"Sushiswap Legacy AMM Factory"},"pairCodeHash()":{"notice":"Sushiswap Legacy AMM PairCodeHash"},"stargateRouter()":{"notice":"Stargate Router for cross chain interaction"},"stargateWidget()":{"notice":"Stargate Widget for stargate partner fee"}},"notice":"Adapter for all Trident based Swaps","version":1}}},"contracts/base/ImmutableState.sol":{"ImmutableState":{"abi":[{"inputs":[],"name":"SGETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bentoBox","outputs":[{"internalType":"contract IBentoBoxMinimal","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pairCodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateRouter","outputs":[{"internalType":"contract IStargateRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateWidget","outputs":[{"internalType":"contract IStargateWidget","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"ImmutableState","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"SGETH()":"cf36fd24","bentoBox()":"6b2ace87","factory()":"c45a0155","pairCodeHash()":"9aab9248","stargateRouter()":"a9e56f3c","stargateWidget()":"6f435ac2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SGETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateWidget\",\"outputs\":[{\"internalType\":\"contract IStargateWidget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"ImmutableState\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"SGETH()\":{\"notice\":\"Address of the Stargate ETH Vault\"},\"bentoBox()\":{\"notice\":\"BentoBox token vault\"},\"factory()\":{\"notice\":\"Sushiswap Legacy AMM Factory\"},\"pairCodeHash()\":{\"notice\":\"Sushiswap Legacy AMM PairCodeHash\"},\"stargateRouter()\":{\"notice\":\"Stargate Router for cross chain interaction\"},\"stargateWidget()\":{\"notice\":\"Stargate Widget for stargate partner fee\"}},\"notice\":\"Stores the immutable state\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ImmutableState.sol\":\"ImmutableState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title ImmutableState\\n/// @notice Stores the immutable state\\nabstract contract ImmutableState is IImmutableState {\\n    /// @notice BentoBox token vault\\n    IBentoBoxMinimal public immutable override bentoBox;\\n\\n    /// @notice Stargate Router for cross chain interaction\\n    IStargateRouter public immutable override stargateRouter;\\n\\n    /// @notice Stargate Widget for stargate partner fee\\n    IStargateWidget public immutable override stargateWidget;\\n\\n    /// @notice Sushiswap Legacy AMM Factory\\n    address public immutable override factory;\\n\\n    /// @notice Sushiswap Legacy AMM PairCodeHash\\n    bytes32 public immutable override pairCodeHash;\\n\\n    /// @notice Address of the Stargate ETH Vault\\n    address public immutable override SGETH;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        IStargateWidget _stargateWidget,\\n        address _SGETH\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        stargateWidget = _stargateWidget;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n        SGETH = _SGETH;\\n    }\\n}\",\"keccak256\":\"0x047f6df909198a6e179aaf17b3529de73ce21d14094ee18ad69e895bdf0f3ad8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\nimport \\\"./stargate/IStargateWidget.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function stargateWidget() external view returns (IStargateWidget);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n\\n    function SGETH() external view returns(address);\\n}\",\"keccak256\":\"0x476cf7998d3c274d9ac0910acfdd4dd22d3b1ff2f5be753c9e4b797f0a292356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"SGETH()":{"notice":"Address of the Stargate ETH Vault"},"bentoBox()":{"notice":"BentoBox token vault"},"factory()":{"notice":"Sushiswap Legacy AMM Factory"},"pairCodeHash()":{"notice":"Sushiswap Legacy AMM PairCodeHash"},"stargateRouter()":{"notice":"Stargate Router for cross chain interaction"},"stargateWidget()":{"notice":"Stargate Widget for stargate partner fee"}},"notice":"Stores the immutable state","version":1}}},"contracts/interfaces/IBentoBoxMinimal.sol":{"IBentoBoxMinimal":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"registerProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"masterContract","type":"address"},{"internalType":"bool","name":"approved","type":"bool"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"setMasterContractApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"share","type":"uint256"},{"internalType":"bool","name":"roundUp","type":"bool"}],"name":"toAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"roundUp","type":"bool"}],"name":"toShare","outputs":[{"internalType":"uint256","name":"share","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"`token` is aliased as `address` from `IERC20` for simplicity.","kind":"dev","methods":{"deposit(address,address,address,uint256,uint256)":{"params":{"amount":"Token amount in native representation to deposit.","from":"which account to pull the tokens.","share":"Token amount represented in shares to deposit. Takes precedence over `amount`.","to":"which account to push the tokens.","token_":"The ERC-20 token to deposit."},"returns":{"amountOut":"The amount deposited.","shareOut":"The deposited amount represented in shares."}},"toAmount(address,uint256,bool)":{"details":"Helper function to represent shares back into the `token` amount.","params":{"roundUp":"If the result should be rounded up.","share":"The amount of shares.","token":"The ERC-20 token."},"returns":{"amount":"The share amount back into native representation."}},"toShare(address,uint256,bool)":{"details":"Helper function to represent an `amount` of `token` in shares.","params":{"amount":"The `token` amount.","roundUp":"If the result `share` should be rounded up.","token":"The ERC-20 token."},"returns":{"share":"The token amount represented in shares."}},"transfer(address,address,address,uint256)":{"params":{"from":"which user to pull the tokens.","share":"The amount of `token` in shares.","to":"which user to push the tokens.","token":"The ERC-20 token to transfer."}},"withdraw(address,address,address,uint256,uint256)":{"params":{"amount":"of tokens. Either one of `amount` or `share` needs to be supplied.","from":"which user to pull the tokens.","share":"Like above, but `share` takes precedence over `amount`.","to":"which user to push the tokens.","token_":"The ERC-20 token to withdraw."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,address)":"f7888aec","deposit(address,address,address,uint256,uint256)":"02b9446c","registerProtocol()":"aee4d1b2","setMasterContractApproval(address,address,bool,uint8,bytes32,bytes32)":"c0a47c93","toAmount(address,uint256,bool)":"56623118","toShare(address,uint256,bool)":"da5139ca","transfer(address,address,address,uint256)":"f18d03cc","withdraw(address,address,address,uint256,uint256)":"97da6d30"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"setMasterContractApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"toShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"`token` is aliased as `address` from `IERC20` for simplicity.\",\"kind\":\"dev\",\"methods\":{\"deposit(address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Token amount in native representation to deposit.\",\"from\":\"which account to pull the tokens.\",\"share\":\"Token amount represented in shares to deposit. Takes precedence over `amount`.\",\"to\":\"which account to push the tokens.\",\"token_\":\"The ERC-20 token to deposit.\"},\"returns\":{\"amountOut\":\"The amount deposited.\",\"shareOut\":\"The deposited amount represented in shares.\"}},\"toAmount(address,uint256,bool)\":{\"details\":\"Helper function to represent shares back into the `token` amount.\",\"params\":{\"roundUp\":\"If the result should be rounded up.\",\"share\":\"The amount of shares.\",\"token\":\"The ERC-20 token.\"},\"returns\":{\"amount\":\"The share amount back into native representation.\"}},\"toShare(address,uint256,bool)\":{\"details\":\"Helper function to represent an `amount` of `token` in shares.\",\"params\":{\"amount\":\"The `token` amount.\",\"roundUp\":\"If the result `share` should be rounded up.\",\"token\":\"The ERC-20 token.\"},\"returns\":{\"share\":\"The token amount represented in shares.\"}},\"transfer(address,address,address,uint256)\":{\"params\":{\"from\":\"which user to pull the tokens.\",\"share\":\"The amount of `token` in shares.\",\"to\":\"which user to push the tokens.\",\"token\":\"The ERC-20 token to transfer.\"}},\"withdraw(address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"of tokens. Either one of `amount` or `share` needs to be supplied.\",\"from\":\"which user to pull the tokens.\",\"share\":\"Like above, but `share` takes precedence over `amount`.\",\"to\":\"which user to push the tokens.\",\"token_\":\"The ERC-20 token to withdraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,address)\":{\"notice\":\"Balance per ERC-20 token per account in shares.\"},\"deposit(address,address,address,uint256,uint256)\":{\"notice\":\"Deposit an amount of `token` represented in either `amount` or `share`.\"},\"registerProtocol()\":{\"notice\":\"Registers this contract so that users can approve it for BentoBox.\"},\"transfer(address,address,address,uint256)\":{\"notice\":\"Transfer shares from a user account to another one.\"},\"withdraw(address,address,address,uint256,uint256)\":{\"notice\":\"Withdraws an amount of `token` from a user account.\"}},\"notice\":\"Minimal BentoBox vault interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IBentoBoxMinimal.sol\":\"IBentoBoxMinimal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"balanceOf(address,address)":{"notice":"Balance per ERC-20 token per account in shares."},"deposit(address,address,address,uint256,uint256)":{"notice":"Deposit an amount of `token` represented in either `amount` or `share`."},"registerProtocol()":{"notice":"Registers this contract so that users can approve it for BentoBox."},"transfer(address,address,address,uint256)":{"notice":"Transfer shares from a user account to another one."},"withdraw(address,address,address,uint256,uint256)":{"notice":"Withdraws an amount of `token` from a user account."}},"notice":"Minimal BentoBox vault interface.","version":1}}},"contracts/interfaces/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","totalSupply()":"18160ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"EIP 2612\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IERC20Permit {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\",\"keccak256\":\"0x415b38f149fe7e29c138e5f3ee3d71fefced8fb883a78e565d0a8da19282820d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"EIP 2612"}},"version":1}}},"contracts/interfaces/IImmutableState.sol":{"IImmutableState":{"abi":[{"inputs":[],"name":"SGETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bentoBox","outputs":[{"internalType":"contract IBentoBoxMinimal","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pairCodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateRouter","outputs":[{"internalType":"contract IStargateRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stargateWidget","outputs":[{"internalType":"contract IStargateWidget","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"SGETH()":"cf36fd24","bentoBox()":"6b2ace87","factory()":"c45a0155","pairCodeHash()":"9aab9248","stargateRouter()":"a9e56f3c","stargateWidget()":"6f435ac2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SGETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateWidget\",\"outputs\":[{\"internalType\":\"contract IStargateWidget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IImmutableState.sol\":\"IImmutableState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\nimport \\\"./stargate/IStargateWidget.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function stargateWidget() external view returns (IStargateWidget);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n\\n    function SGETH() external view returns(address);\\n}\",\"keccak256\":\"0x476cf7998d3c274d9ac0910acfdd4dd22d3b1ff2f5be753c9e4b797f0a292356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ISushiXSwap.sol":{"ISushiXSwap":{"abi":[{"inputs":[{"internalType":"uint8[]","name":"actions","type":"uint8[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes[]","name":"datas","type":"bytes[]"}],"name":"cook","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"cook(uint8[],uint256[],bytes[])":"656f3d64"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"cook\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISushiXSwap.sol\":\"ISushiXSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/adapters/BentoAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title BentoAdapter\\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\nabstract contract BentoAdapter is ImmutableState {\\n    /// @notice Deposits the token from users wallet into the BentoBox.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to deposit. Use token as address(0) when depositing native token\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to be deposited\\n    /// @param share share to be deposited\\n    /// @param value native token value to be deposited. Only use when token address is address(0)\\n    function _depositToBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) internal {\\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\\n    }\\n\\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to transfer. For native tokens, use wnative token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    /// @param share share to transfer\\n    /// @param unwrapBento use true for withdraw and false for transfer\\n    function _transferFromBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bentoBox.withdraw(token, from, to, amount, share);\\n        } else {\\n            if (amount > 0) {\\n                share = bentoBox.toShare(token, amount, false);\\n            }\\n            bentoBox.transfer(token, from, to, share);\\n        }\\n    }\\n}\",\"keccak256\":\"0x4d2bcdca572d865f27fb5479733973b463b88514e96d8ee4ee03914f6f42852c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/StargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/stargate/IStargateAdapter.sol\\\";\\n\\n/// @title StargateAdapter\\n/// @notice Adapter for function used by Stargate Bridge\\nabstract contract StargateAdapter is ImmutableState, IStargateReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom Error\\n    error NotStargateRouter();\\n    error InsufficientGas();\\n\\n    // events\\n    event StargateSushiXSwapSrc(bytes32 indexed srcContext);\\n    event StargateSushiXSwapDst(bytes32 indexed srcContext, bool failed);\\n\\n    struct StargateTeleportParams {\\n        uint16 dstChainId; // stargate dst chain id\\n        address token; // token getting bridged\\n        uint256 srcPoolId; // stargate src pool id\\n        uint256 dstPoolId; // stargate dst pool id\\n        uint256 amount; // amount to bridge\\n        uint256 amountMin; // amount to bridge minimum\\n        uint256 dustAmount; // native token to be received on dst chain\\n        address receiver; // sushiXswap on dst chain\\n        address to; // receiver bridge token incase of transaction reverts on dst chain\\n        uint256 gas; // extra gas to be sent for dst chain operations\\n        bytes32 srcContext; // random bytes32 as source context\\n    }\\n\\n    /// @notice Approves token to the Stargate Router\\n    /// @param token token to approve\\n    function approveToStargateRouter(IERC20 token) external {\\n        token.safeApprove(address(stargateRouter), type(uint256).max);\\n    }\\n\\n    /// @notice Bridges the token to dst chain using Stargate Router\\n    /// @dev It is hardcoded to use all the contract balance. Only call this as the last step.\\n    /// The refund address for extra fees sent it msg.sender.\\n    /// @param params required by the Stargate, can be found at StargateTeleportParams struct.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    function _stargateTeleport(\\n        StargateTeleportParams memory params,\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) internal {\\n        bytes memory payload = abi.encode(params.to, actions, values, datas, params.srcContext);\\n\\n        /// @dev dst gas should be more than 100k\\n        if(params.gas < 100000) revert InsufficientGas();\\n\\n        stargateRouter.swap{value: address(this).balance}(\\n            params.dstChainId,\\n            params.srcPoolId,\\n            params.dstPoolId,\\n            payable(msg.sender), // refund address\\n            params.amount != 0\\n                ? params.amount\\n                : IERC20(params.token).balanceOf(address(this)),\\n            params.amountMin,\\n            IStargateRouter.lzTxObj(\\n                params.gas, // extra gas to be sent for dst execution\\n                params.dustAmount,\\n                abi.encodePacked(params.receiver)\\n            ),\\n            abi.encodePacked(params.receiver), // sushiXswap on the dst chain\\n            payload\\n        );\\n\\n        stargateWidget.partnerSwap(0x0001);\\n\\n        emit StargateSushiXSwapSrc(params.srcContext);\\n    }\\n\\n    /// @notice Get the fees to be paid in native token for the swap\\n    /// @param _dstChainId stargate dst chainId\\n    /// @param _functionType stargate Function type 1 for swap.\\n    /// See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\\n    /// @param _receiver sushiXswap on the dst chain\\n    /// @param _gas extra gas being sent\\n    /// @param _dustAmount dust amount to be received at the dst chain\\n    /// @param _payload payload being sent at the dst chain\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        address _receiver,\\n        uint256 _gas,\\n        uint256 _dustAmount,\\n        bytes memory _payload\\n    ) external view returns (uint256 a, uint256 b) {\\n        (a, b) = stargateRouter.quoteLayerZeroFee(\\n            _dstChainId,\\n            _functionType,\\n            abi.encodePacked(_receiver),\\n            abi.encode(_payload),\\n            IStargateRouter.lzTxObj(\\n                _gas,\\n                _dustAmount,\\n                abi.encodePacked(_receiver)\\n            )\\n        );\\n    }\\n\\n    /// @notice Receiver function on dst chain\\n    /// @param _token bridge token received\\n    /// @param amountLD amount received\\n    /// @param payload ABI-Encoded data received from src chain\\n    function sgReceive(\\n        uint16,\\n        bytes memory,\\n        uint256,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external override {\\n        if (msg.sender != address(stargateRouter)) revert NotStargateRouter();\\n\\n        (\\n            address to,\\n            uint8[] memory actions,\\n            uint256[] memory values,\\n            bytes[] memory datas,\\n            bytes32 srcContext\\n        ) = abi.decode(payload, (address, uint8[], uint256[], bytes[], bytes32));\\n\\n        uint256 reserveGas = 100000;\\n        bool failed;\\n\\n        if(gasleft() < reserveGas) {\\n            if(_token != SGETH) {\\n                IERC20(_token).safeTransfer(to, amountLD);\\n            }\\n            /// @dev transfer any native token received as dust to the to address\\n            if (address(this).balance > 0)\\n                to.call{value: (address(this).balance)}(\\\"\\\");\\n\\n            failed = true;\\n            emit StargateSushiXSwapDst(srcContext, failed);\\n            return;\\n        }\\n\\n        // 100000 -> exit gas\\n        uint256 limit = gasleft() - reserveGas;\\n\\n        /// @dev incase the actions fail, transfer bridge token to the to address\\n        try\\n            ISushiXSwap(payable(address(this))).cook{gas: limit}(\\n                actions,\\n                values,\\n                datas\\n            )\\n        {} catch (bytes memory) {\\n            if(_token != SGETH) {\\n                IERC20(_token).safeTransfer(to, amountLD);\\n            }\\n            failed = true;\\n        }\\n\\n        /// @dev transfer any native token received as dust to the to address\\n        if (address(this).balance > 0)\\n            to.call{value: (address(this).balance)}(\\\"\\\");\\n\\n        emit StargateSushiXSwapDst(srcContext, failed);\\n\\n    }\\n}\",\"keccak256\":\"0x5ee1b916a48725aa76058585df6275167d99c9a39b5627829c036ed9c35bbdde\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/SushiLegacyAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title SushiLegacyAdapter\\n/// @notice Adapter for functions used to swap using Sushiswap Legacy AMM.\\nabstract contract SushiLegacyAdapter is ImmutableState {\\n    using SafeERC20 for IERC20;\\n\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        bool sendTokens\\n    ) internal returns (uint256 amountOut) {\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\\n            factory,\\n            amountIn,\\n            path,\\n            pairCodeHash\\n        );\\n        amountOut = amounts[amounts.length - 1];\\n\\n        require(amountOut >= amountOutMin, \\\"insufficient-amount-out\\\");\\n\\n        /// @dev force sends token to the first pair if not already sent\\n        if (sendTokens) {\\n            IERC20(path[0]).safeTransfer(\\n                UniswapV2Library.pairFor(\\n                    factory,\\n                    path[0],\\n                    path[1],\\n                    pairCodeHash\\n                ),\\n                IERC20(path[0]).balanceOf(address(this))\\n            );\\n        }\\n        _swap(amounts, path, to);\\n    }\\n\\n    /// @dev requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(\\n                    factory,\\n                    output,\\n                    path[i + 2],\\n                    pairCodeHash\\n                )\\n                : _to;\\n            IUniswapV2Pair(\\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\",\"keccak256\":\"0xe63e60dee8e6a23dc70f31697e82048b62058e403c26e852e441ac8810b9e30f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/// @title TokenAdapter\\n/// @notice Adapter for all token operations\\nabstract contract TokenAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Function to transfer tokens from address(this)\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferTokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) != address(0)) {\\n            token.safeTransfer(to, amount);\\n        } else {\\n            payable(to).transfer(amount);\\n        }\\n    }\\n\\n    /// @notice Function to transfer tokens from user to the to address\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferFromToken(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        token.safeTransferFrom(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Unwraps the wrapper native into native and sends it to the receiver.\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    function _unwrapTransfer(address token, address to) internal {\\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\\n    }\\n\\n    /// @notice Wraps the token to the wrapped token\\n    /// @param token token to wrap\\n    /// @param amount amount to wrap\\n    function _wrapToken(address token, uint256 amount) internal {\\n        IWETH(token).deposit{value: amount}();\\n    }\\n}\",\"keccak256\":\"0x995299a2ed251da61f0827b5d87cecdfc8dad10915bcefdf3d2b2ad337227da9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/trident/ITridentSwapAdapter.sol\\\";\\n\\n/// @title TridentSwapAdapter\\n/// @notice Adapter for all Trident based Swaps\\n\\nabstract contract TridentSwapAdapter is\\n    ITridentRouter,\\n    ImmutableState,\\n    BentoAdapter,\\n    TokenAdapter\\n{\\n    // Custom Error\\n    error TooLittleReceived();\\n\\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function _exactInput(ExactInputParams memory params)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        if (params.amountIn == 0) {\\n          uint256 tokenBalance = IERC20(params.tokenIn).balanceOf(\\n                address(this)\\n            );\\n            _transferTokens(\\n                IERC20(params.tokenIn),\\n                address(bentoBox),\\n                tokenBalance\\n            );\\n            // Pay the first pool directly.\\n            (, params.amountIn) = bentoBox.deposit(\\n                params.tokenIn,\\n                address(bentoBox),\\n                params.path[0].pool,\\n                tokenBalance,\\n                0\\n            );\\n        }\\n\\n        // Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\\n        // a batch call should be made to `unwrapWETH`.\\n        uint256 n = params.path.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\\n    /// @param params This includes everything needed for the swap.\\n    /// Look at the `ComplexPathParams` struct for more details.\\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\\n    function _complexPath(ComplexPathParams memory params) internal {\\n        // Deposit all initial tokens to respective pools and initiate the swaps.\\n        // Input tokens come from the user - output goes to following pools.\\n        uint256 n = params.initialPath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            bentoBox.transfer(\\n                params.initialPath[i].tokenIn,\\n                address(this),\\n                params.initialPath[i].pool,\\n                params.initialPath[i].amount\\n            );\\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\\n        }\\n        // Do all the middle swaps. Input comes from previous pools.\\n        n = params.percentagePath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.percentagePath[i].tokenIn,\\n                address(this)\\n            );\\n            uint256 transferShares = (balanceShares *\\n                params.percentagePath[i].balancePercentage) / uint256(10)**8;\\n            bentoBox.transfer(\\n                params.percentagePath[i].tokenIn,\\n                address(this),\\n                params.percentagePath[i].pool,\\n                transferShares\\n            );\\n            IPool(params.percentagePath[i].pool).swap(\\n                params.percentagePath[i].data\\n            );\\n        }\\n        // Ensure enough was received and transfer the ouput to the recipient.\\n        n = params.output.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.output[i].token,\\n                address(this)\\n            );\\n            if (balanceShares < params.output[i].minAmount)\\n                revert TooLittleReceived();\\n            if (params.output[i].unwrapBento) {\\n                bentoBox.withdraw(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    0,\\n                    balanceShares\\n                );\\n            } else {\\n                bentoBox.transfer(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    balanceShares\\n                );\\n            }\\n        }\\n    }\\n\\n    function _increment(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xfff01b1e2f1b6eeab3a368f2b1ade2d66e0dbe6854000a36ca4faec66bab8bdc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title ImmutableState\\n/// @notice Stores the immutable state\\nabstract contract ImmutableState is IImmutableState {\\n    /// @notice BentoBox token vault\\n    IBentoBoxMinimal public immutable override bentoBox;\\n\\n    /// @notice Stargate Router for cross chain interaction\\n    IStargateRouter public immutable override stargateRouter;\\n\\n    /// @notice Stargate Widget for stargate partner fee\\n    IStargateWidget public immutable override stargateWidget;\\n\\n    /// @notice Sushiswap Legacy AMM Factory\\n    address public immutable override factory;\\n\\n    /// @notice Sushiswap Legacy AMM PairCodeHash\\n    bytes32 public immutable override pairCodeHash;\\n\\n    /// @notice Address of the Stargate ETH Vault\\n    address public immutable override SGETH;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        IStargateWidget _stargateWidget,\\n        address _SGETH\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        stargateWidget = _stargateWidget;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n        SGETH = _SGETH;\\n    }\\n}\",\"keccak256\":\"0x047f6df909198a6e179aaf17b3529de73ce21d14094ee18ad69e895bdf0f3ad8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\nimport \\\"./stargate/IStargateWidget.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function stargateWidget() external view returns (IStargateWidget);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n\\n    function SGETH() external view returns(address);\\n}\",\"keccak256\":\"0x476cf7998d3c274d9ac0910acfdd4dd22d3b1ff2f5be753c9e4b797f0a292356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISushiXSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../adapters/BentoAdapter.sol\\\";\\nimport \\\"../adapters/TokenAdapter.sol\\\";\\nimport \\\"../adapters/SushiLegacyAdapter.sol\\\";\\nimport \\\"../adapters/TridentSwapAdapter.sol\\\";\\nimport \\\"../adapters/StargateAdapter.sol\\\";\\n\\ninterface ISushiXSwap {\\n    function cook(\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) external payable;\\n}\",\"keccak256\":\"0xad4ffa10c491b6ebf199199976d0c00684235dd76f234dd9380f7306895539c2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x08174fdf25e2267c319ad9507b0fe106b786a5184075c057455c400cfb65e5dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\nimport \\\"../ISushiXSwap.sol\\\";\\nimport \\\"./IStargateReceiver.sol\\\";\\nimport \\\"./IStargateWidget.sol\\\";\\n\\ninterface IStargateAdapter {}\",\"keccak256\":\"0xf104f1d6482c468f82e9be4acfffa8380863a99d2fadf4cec92806fc4797ac11\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\",\"keccak256\":\"0x18653b2aaf84bbf532839384ec9a735fc5f32decb1f994c57f9492eddac97e2f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/trident/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data)\\n        external\\n        returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\",\"keccak256\":\"0x40cff14f725681fad1ef4977a5d07ae1c89c2b400b9d01b7149b77e10ccb4025\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IPool.sol\\\";\\nimport \\\"../IBentoBoxMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\",\"keccak256\":\"0xc0509d17bb53d2ff9ded9d43022ff84473791f86258a2bcfb1eb3a9966f766d0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ITridentRouter.sol\\\";\\nimport \\\"../../adapters/BentoAdapter.sol\\\";\\nimport \\\"../../adapters/TokenAdapter.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\n\\ninterface ITridentSwapAdapter {}\",\"keccak256\":\"0x7ae23c19bef0f88085edb4aa8c2b2f7904719df63e3dfe3e78d0fc4d093e216f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0x8992c26baf30eb4a743dbe6d2a9cb27625fb783347b06283ce9664ffad83c411\",\"license\":\"GPL-3.0\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            pairCodeHash // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1],\\n                pairCodeHash\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i],\\n                pairCodeHash\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\",\"keccak256\":\"0x1c40987526aeba050176dc98589ed9211959422b07f5085af035471d900178b7\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IWETH.sol":{"IWETH":{"abi":[{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deposit()":"d0e30db0","transfer(address,uint256)":"a9059cbb","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IWETH.sol\":\"IWETH\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x08174fdf25e2267c319ad9507b0fe106b786a5184075c057455c400cfb65e5dc\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/stargate/IStargateAdapter.sol":{"IStargateAdapter":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/stargate/IStargateAdapter.sol\":\"IStargateAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/adapters/BentoAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title BentoAdapter\\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\nabstract contract BentoAdapter is ImmutableState {\\n    /// @notice Deposits the token from users wallet into the BentoBox.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to deposit. Use token as address(0) when depositing native token\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to be deposited\\n    /// @param share share to be deposited\\n    /// @param value native token value to be deposited. Only use when token address is address(0)\\n    function _depositToBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) internal {\\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\\n    }\\n\\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to transfer. For native tokens, use wnative token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    /// @param share share to transfer\\n    /// @param unwrapBento use true for withdraw and false for transfer\\n    function _transferFromBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bentoBox.withdraw(token, from, to, amount, share);\\n        } else {\\n            if (amount > 0) {\\n                share = bentoBox.toShare(token, amount, false);\\n            }\\n            bentoBox.transfer(token, from, to, share);\\n        }\\n    }\\n}\",\"keccak256\":\"0x4d2bcdca572d865f27fb5479733973b463b88514e96d8ee4ee03914f6f42852c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/StargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/stargate/IStargateAdapter.sol\\\";\\n\\n/// @title StargateAdapter\\n/// @notice Adapter for function used by Stargate Bridge\\nabstract contract StargateAdapter is ImmutableState, IStargateReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom Error\\n    error NotStargateRouter();\\n    error InsufficientGas();\\n\\n    // events\\n    event StargateSushiXSwapSrc(bytes32 indexed srcContext);\\n    event StargateSushiXSwapDst(bytes32 indexed srcContext, bool failed);\\n\\n    struct StargateTeleportParams {\\n        uint16 dstChainId; // stargate dst chain id\\n        address token; // token getting bridged\\n        uint256 srcPoolId; // stargate src pool id\\n        uint256 dstPoolId; // stargate dst pool id\\n        uint256 amount; // amount to bridge\\n        uint256 amountMin; // amount to bridge minimum\\n        uint256 dustAmount; // native token to be received on dst chain\\n        address receiver; // sushiXswap on dst chain\\n        address to; // receiver bridge token incase of transaction reverts on dst chain\\n        uint256 gas; // extra gas to be sent for dst chain operations\\n        bytes32 srcContext; // random bytes32 as source context\\n    }\\n\\n    /// @notice Approves token to the Stargate Router\\n    /// @param token token to approve\\n    function approveToStargateRouter(IERC20 token) external {\\n        token.safeApprove(address(stargateRouter), type(uint256).max);\\n    }\\n\\n    /// @notice Bridges the token to dst chain using Stargate Router\\n    /// @dev It is hardcoded to use all the contract balance. Only call this as the last step.\\n    /// The refund address for extra fees sent it msg.sender.\\n    /// @param params required by the Stargate, can be found at StargateTeleportParams struct.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    function _stargateTeleport(\\n        StargateTeleportParams memory params,\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) internal {\\n        bytes memory payload = abi.encode(params.to, actions, values, datas, params.srcContext);\\n\\n        /// @dev dst gas should be more than 100k\\n        if(params.gas < 100000) revert InsufficientGas();\\n\\n        stargateRouter.swap{value: address(this).balance}(\\n            params.dstChainId,\\n            params.srcPoolId,\\n            params.dstPoolId,\\n            payable(msg.sender), // refund address\\n            params.amount != 0\\n                ? params.amount\\n                : IERC20(params.token).balanceOf(address(this)),\\n            params.amountMin,\\n            IStargateRouter.lzTxObj(\\n                params.gas, // extra gas to be sent for dst execution\\n                params.dustAmount,\\n                abi.encodePacked(params.receiver)\\n            ),\\n            abi.encodePacked(params.receiver), // sushiXswap on the dst chain\\n            payload\\n        );\\n\\n        stargateWidget.partnerSwap(0x0001);\\n\\n        emit StargateSushiXSwapSrc(params.srcContext);\\n    }\\n\\n    /// @notice Get the fees to be paid in native token for the swap\\n    /// @param _dstChainId stargate dst chainId\\n    /// @param _functionType stargate Function type 1 for swap.\\n    /// See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\\n    /// @param _receiver sushiXswap on the dst chain\\n    /// @param _gas extra gas being sent\\n    /// @param _dustAmount dust amount to be received at the dst chain\\n    /// @param _payload payload being sent at the dst chain\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        address _receiver,\\n        uint256 _gas,\\n        uint256 _dustAmount,\\n        bytes memory _payload\\n    ) external view returns (uint256 a, uint256 b) {\\n        (a, b) = stargateRouter.quoteLayerZeroFee(\\n            _dstChainId,\\n            _functionType,\\n            abi.encodePacked(_receiver),\\n            abi.encode(_payload),\\n            IStargateRouter.lzTxObj(\\n                _gas,\\n                _dustAmount,\\n                abi.encodePacked(_receiver)\\n            )\\n        );\\n    }\\n\\n    /// @notice Receiver function on dst chain\\n    /// @param _token bridge token received\\n    /// @param amountLD amount received\\n    /// @param payload ABI-Encoded data received from src chain\\n    function sgReceive(\\n        uint16,\\n        bytes memory,\\n        uint256,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external override {\\n        if (msg.sender != address(stargateRouter)) revert NotStargateRouter();\\n\\n        (\\n            address to,\\n            uint8[] memory actions,\\n            uint256[] memory values,\\n            bytes[] memory datas,\\n            bytes32 srcContext\\n        ) = abi.decode(payload, (address, uint8[], uint256[], bytes[], bytes32));\\n\\n        uint256 reserveGas = 100000;\\n        bool failed;\\n\\n        if(gasleft() < reserveGas) {\\n            if(_token != SGETH) {\\n                IERC20(_token).safeTransfer(to, amountLD);\\n            }\\n            /// @dev transfer any native token received as dust to the to address\\n            if (address(this).balance > 0)\\n                to.call{value: (address(this).balance)}(\\\"\\\");\\n\\n            failed = true;\\n            emit StargateSushiXSwapDst(srcContext, failed);\\n            return;\\n        }\\n\\n        // 100000 -> exit gas\\n        uint256 limit = gasleft() - reserveGas;\\n\\n        /// @dev incase the actions fail, transfer bridge token to the to address\\n        try\\n            ISushiXSwap(payable(address(this))).cook{gas: limit}(\\n                actions,\\n                values,\\n                datas\\n            )\\n        {} catch (bytes memory) {\\n            if(_token != SGETH) {\\n                IERC20(_token).safeTransfer(to, amountLD);\\n            }\\n            failed = true;\\n        }\\n\\n        /// @dev transfer any native token received as dust to the to address\\n        if (address(this).balance > 0)\\n            to.call{value: (address(this).balance)}(\\\"\\\");\\n\\n        emit StargateSushiXSwapDst(srcContext, failed);\\n\\n    }\\n}\",\"keccak256\":\"0x5ee1b916a48725aa76058585df6275167d99c9a39b5627829c036ed9c35bbdde\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/SushiLegacyAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title SushiLegacyAdapter\\n/// @notice Adapter for functions used to swap using Sushiswap Legacy AMM.\\nabstract contract SushiLegacyAdapter is ImmutableState {\\n    using SafeERC20 for IERC20;\\n\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        bool sendTokens\\n    ) internal returns (uint256 amountOut) {\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\\n            factory,\\n            amountIn,\\n            path,\\n            pairCodeHash\\n        );\\n        amountOut = amounts[amounts.length - 1];\\n\\n        require(amountOut >= amountOutMin, \\\"insufficient-amount-out\\\");\\n\\n        /// @dev force sends token to the first pair if not already sent\\n        if (sendTokens) {\\n            IERC20(path[0]).safeTransfer(\\n                UniswapV2Library.pairFor(\\n                    factory,\\n                    path[0],\\n                    path[1],\\n                    pairCodeHash\\n                ),\\n                IERC20(path[0]).balanceOf(address(this))\\n            );\\n        }\\n        _swap(amounts, path, to);\\n    }\\n\\n    /// @dev requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(\\n                    factory,\\n                    output,\\n                    path[i + 2],\\n                    pairCodeHash\\n                )\\n                : _to;\\n            IUniswapV2Pair(\\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\",\"keccak256\":\"0xe63e60dee8e6a23dc70f31697e82048b62058e403c26e852e441ac8810b9e30f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/// @title TokenAdapter\\n/// @notice Adapter for all token operations\\nabstract contract TokenAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Function to transfer tokens from address(this)\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferTokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) != address(0)) {\\n            token.safeTransfer(to, amount);\\n        } else {\\n            payable(to).transfer(amount);\\n        }\\n    }\\n\\n    /// @notice Function to transfer tokens from user to the to address\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferFromToken(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        token.safeTransferFrom(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Unwraps the wrapper native into native and sends it to the receiver.\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    function _unwrapTransfer(address token, address to) internal {\\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\\n    }\\n\\n    /// @notice Wraps the token to the wrapped token\\n    /// @param token token to wrap\\n    /// @param amount amount to wrap\\n    function _wrapToken(address token, uint256 amount) internal {\\n        IWETH(token).deposit{value: amount}();\\n    }\\n}\",\"keccak256\":\"0x995299a2ed251da61f0827b5d87cecdfc8dad10915bcefdf3d2b2ad337227da9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/trident/ITridentSwapAdapter.sol\\\";\\n\\n/// @title TridentSwapAdapter\\n/// @notice Adapter for all Trident based Swaps\\n\\nabstract contract TridentSwapAdapter is\\n    ITridentRouter,\\n    ImmutableState,\\n    BentoAdapter,\\n    TokenAdapter\\n{\\n    // Custom Error\\n    error TooLittleReceived();\\n\\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function _exactInput(ExactInputParams memory params)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        if (params.amountIn == 0) {\\n          uint256 tokenBalance = IERC20(params.tokenIn).balanceOf(\\n                address(this)\\n            );\\n            _transferTokens(\\n                IERC20(params.tokenIn),\\n                address(bentoBox),\\n                tokenBalance\\n            );\\n            // Pay the first pool directly.\\n            (, params.amountIn) = bentoBox.deposit(\\n                params.tokenIn,\\n                address(bentoBox),\\n                params.path[0].pool,\\n                tokenBalance,\\n                0\\n            );\\n        }\\n\\n        // Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\\n        // a batch call should be made to `unwrapWETH`.\\n        uint256 n = params.path.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\\n    /// @param params This includes everything needed for the swap.\\n    /// Look at the `ComplexPathParams` struct for more details.\\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\\n    function _complexPath(ComplexPathParams memory params) internal {\\n        // Deposit all initial tokens to respective pools and initiate the swaps.\\n        // Input tokens come from the user - output goes to following pools.\\n        uint256 n = params.initialPath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            bentoBox.transfer(\\n                params.initialPath[i].tokenIn,\\n                address(this),\\n                params.initialPath[i].pool,\\n                params.initialPath[i].amount\\n            );\\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\\n        }\\n        // Do all the middle swaps. Input comes from previous pools.\\n        n = params.percentagePath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.percentagePath[i].tokenIn,\\n                address(this)\\n            );\\n            uint256 transferShares = (balanceShares *\\n                params.percentagePath[i].balancePercentage) / uint256(10)**8;\\n            bentoBox.transfer(\\n                params.percentagePath[i].tokenIn,\\n                address(this),\\n                params.percentagePath[i].pool,\\n                transferShares\\n            );\\n            IPool(params.percentagePath[i].pool).swap(\\n                params.percentagePath[i].data\\n            );\\n        }\\n        // Ensure enough was received and transfer the ouput to the recipient.\\n        n = params.output.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.output[i].token,\\n                address(this)\\n            );\\n            if (balanceShares < params.output[i].minAmount)\\n                revert TooLittleReceived();\\n            if (params.output[i].unwrapBento) {\\n                bentoBox.withdraw(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    0,\\n                    balanceShares\\n                );\\n            } else {\\n                bentoBox.transfer(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    balanceShares\\n                );\\n            }\\n        }\\n    }\\n\\n    function _increment(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xfff01b1e2f1b6eeab3a368f2b1ade2d66e0dbe6854000a36ca4faec66bab8bdc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title ImmutableState\\n/// @notice Stores the immutable state\\nabstract contract ImmutableState is IImmutableState {\\n    /// @notice BentoBox token vault\\n    IBentoBoxMinimal public immutable override bentoBox;\\n\\n    /// @notice Stargate Router for cross chain interaction\\n    IStargateRouter public immutable override stargateRouter;\\n\\n    /// @notice Stargate Widget for stargate partner fee\\n    IStargateWidget public immutable override stargateWidget;\\n\\n    /// @notice Sushiswap Legacy AMM Factory\\n    address public immutable override factory;\\n\\n    /// @notice Sushiswap Legacy AMM PairCodeHash\\n    bytes32 public immutable override pairCodeHash;\\n\\n    /// @notice Address of the Stargate ETH Vault\\n    address public immutable override SGETH;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        IStargateWidget _stargateWidget,\\n        address _SGETH\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        stargateWidget = _stargateWidget;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n        SGETH = _SGETH;\\n    }\\n}\",\"keccak256\":\"0x047f6df909198a6e179aaf17b3529de73ce21d14094ee18ad69e895bdf0f3ad8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\nimport \\\"./stargate/IStargateWidget.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function stargateWidget() external view returns (IStargateWidget);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n\\n    function SGETH() external view returns(address);\\n}\",\"keccak256\":\"0x476cf7998d3c274d9ac0910acfdd4dd22d3b1ff2f5be753c9e4b797f0a292356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISushiXSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../adapters/BentoAdapter.sol\\\";\\nimport \\\"../adapters/TokenAdapter.sol\\\";\\nimport \\\"../adapters/SushiLegacyAdapter.sol\\\";\\nimport \\\"../adapters/TridentSwapAdapter.sol\\\";\\nimport \\\"../adapters/StargateAdapter.sol\\\";\\n\\ninterface ISushiXSwap {\\n    function cook(\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) external payable;\\n}\",\"keccak256\":\"0xad4ffa10c491b6ebf199199976d0c00684235dd76f234dd9380f7306895539c2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x08174fdf25e2267c319ad9507b0fe106b786a5184075c057455c400cfb65e5dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\nimport \\\"../ISushiXSwap.sol\\\";\\nimport \\\"./IStargateReceiver.sol\\\";\\nimport \\\"./IStargateWidget.sol\\\";\\n\\ninterface IStargateAdapter {}\",\"keccak256\":\"0xf104f1d6482c468f82e9be4acfffa8380863a99d2fadf4cec92806fc4797ac11\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\",\"keccak256\":\"0x18653b2aaf84bbf532839384ec9a735fc5f32decb1f994c57f9492eddac97e2f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/trident/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data)\\n        external\\n        returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\",\"keccak256\":\"0x40cff14f725681fad1ef4977a5d07ae1c89c2b400b9d01b7149b77e10ccb4025\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IPool.sol\\\";\\nimport \\\"../IBentoBoxMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\",\"keccak256\":\"0xc0509d17bb53d2ff9ded9d43022ff84473791f86258a2bcfb1eb3a9966f766d0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ITridentRouter.sol\\\";\\nimport \\\"../../adapters/BentoAdapter.sol\\\";\\nimport \\\"../../adapters/TokenAdapter.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\n\\ninterface ITridentSwapAdapter {}\",\"keccak256\":\"0x7ae23c19bef0f88085edb4aa8c2b2f7904719df63e3dfe3e78d0fc4d093e216f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0x8992c26baf30eb4a743dbe6d2a9cb27625fb783347b06283ce9664ffad83c411\",\"license\":\"GPL-3.0\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            pairCodeHash // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1],\\n                pairCodeHash\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i],\\n                pairCodeHash\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\",\"keccak256\":\"0x1c40987526aeba050176dc98589ed9211959422b07f5085af035471d900178b7\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/stargate/IStargateReceiver.sol":{"IStargateReceiver":{"abi":[{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"uint256","name":"_nonce","type":"uint256"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"amountLD","type":"uint256"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"sgReceive","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"sgReceive(uint16,bytes,uint256,address,uint256,bytes)":"ab8236f3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/stargate/IStargateReceiver.sol\":\"IStargateReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/stargate/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\",\"keccak256\":\"0x18653b2aaf84bbf532839384ec9a735fc5f32decb1f994c57f9492eddac97e2f\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/stargate/IStargateRouter.sol":{"IStargateRouter":{"abi":[{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint8","name":"_functionType","type":"uint8"},{"internalType":"bytes","name":"_toAddress","type":"bytes"},{"internalType":"bytes","name":"_transferAndCallPayload","type":"bytes"},{"components":[{"internalType":"uint256","name":"dstGasForCall","type":"uint256"},{"internalType":"uint256","name":"dstNativeAmount","type":"uint256"},{"internalType":"bytes","name":"dstNativeAddr","type":"bytes"}],"internalType":"struct IStargateRouter.lzTxObj","name":"_lzTxParams","type":"tuple"}],"name":"quoteLayerZeroFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_dstChainId","type":"uint16"},{"internalType":"uint256","name":"_srcPoolId","type":"uint256"},{"internalType":"uint256","name":"_dstPoolId","type":"uint256"},{"internalType":"address payable","name":"_refundAddress","type":"address"},{"internalType":"uint256","name":"_amountLD","type":"uint256"},{"internalType":"uint256","name":"_minAmountLD","type":"uint256"},{"components":[{"internalType":"uint256","name":"dstGasForCall","type":"uint256"},{"internalType":"uint256","name":"dstNativeAmount","type":"uint256"},{"internalType":"bytes","name":"dstNativeAddr","type":"bytes"}],"internalType":"struct IStargateRouter.lzTxObj","name":"_lzTxParams","type":"tuple"},{"internalType":"bytes","name":"_to","type":"bytes"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"swap","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"quoteLayerZeroFee(uint16,uint8,bytes,bytes,(uint256,uint256,bytes))":"0a512369","swap(uint16,uint256,uint256,address,uint256,uint256,(uint256,uint256,bytes),bytes,bytes)":"9fbf10fc"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_functionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_transferAndCallPayload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"quoteLayerZeroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountLD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/stargate/IStargateRouter.sol\":\"IStargateRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/stargate/IStargateWidget.sol":{"IStargateWidget":{"abi":[{"inputs":[{"internalType":"bytes2","name":"_partnerId","type":"bytes2"}],"name":"partnerSwap","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"partnerSwap(bytes2)":"a87376e9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes2\",\"name\":\"_partnerId\",\"type\":\"bytes2\"}],\"name\":\"partnerSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/stargate/IStargateWidget.sol\":\"IStargateWidget\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/trident/IPool.sol":{"IPool":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"Swap","type":"event"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"burn","outputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPool.TokenAmount[]","name":"withdrawnAmounts","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"burnSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flashSwap","outputs":[{"internalType":"uint256","name":"finalAmountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"getAmountIn","outputs":[{"internalType":"uint256","name":"finalAmountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"finalAmountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAssets","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"poolIdentifier","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"uint256","name":"finalAmountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Swap(address,address,address,uint256,uint256)":{"details":"This event must be emitted on all swaps."}},"kind":"dev","methods":{"burn(bytes)":{"details":"The input LP tokens must've already been sent to the pool.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"withdrawnAmounts":"The amount of various output tokens that were sent to the user."}},"burnSingle(bytes)":{"details":"The input LP tokens must've already been sent to the pool.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"amountOut":"The amount of output tokens that were sent to the user."}},"flashSwap(bytes)":{"details":"This function allows borrowing the output tokens and sending the input tokens in the callback.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"finalAmountOut":"The amount of output tokens that were sent to the user."}},"getAmountIn(bytes)":{"details":"The pool does not need to include a trade simulator directly in itself - it can use a library.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"finalAmountIn":"The amount of input tokens that are required from the user if the trade is executed."}},"getAmountOut(bytes)":{"details":"The pool does not need to include a trade simulator directly in itself - it can use a library.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"finalAmountOut":"The amount of output tokens that will be sent to the user if the trade is executed."}},"getAssets()":{"returns":{"_0":"An array of tokens supported by the pool."}},"mint(bytes)":{"params":{"data":"ABI-encoded params that the pool requires."},"returns":{"liquidity":"The amount of liquidity tokens that were minted for the user."}},"poolIdentifier()":{"returns":{"_0":"A unique identifier for the pool type."}},"swap(bytes)":{"details":"The input tokens must've already been sent to the pool.","params":{"data":"ABI-encoded params that the pool requires."},"returns":{"finalAmountOut":"The amount of output tokens that were sent to the user."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(bytes)":"2a07b6c7","burnSingle(bytes)":"af8c09bf","flashSwap(bytes)":"053da1c8","getAmountIn(bytes)":"499a3c50","getAmountOut(bytes)":"a8f1f52e","getAssets()":"67e4ac2c","mint(bytes)":"7ba0e2e7","poolIdentifier()":"a69840a8","swap(bytes)":"627dd56a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.TokenAmount[]\",\"name\":\"withdrawnAmounts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burnSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Swap(address,address,address,uint256,uint256)\":{\"details\":\"This event must be emitted on all swaps.\"}},\"kind\":\"dev\",\"methods\":{\"burn(bytes)\":{\"details\":\"The input LP tokens must've already been sent to the pool.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"withdrawnAmounts\":\"The amount of various output tokens that were sent to the user.\"}},\"burnSingle(bytes)\":{\"details\":\"The input LP tokens must've already been sent to the pool.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"amountOut\":\"The amount of output tokens that were sent to the user.\"}},\"flashSwap(bytes)\":{\"details\":\"This function allows borrowing the output tokens and sending the input tokens in the callback.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"finalAmountOut\":\"The amount of output tokens that were sent to the user.\"}},\"getAmountIn(bytes)\":{\"details\":\"The pool does not need to include a trade simulator directly in itself - it can use a library.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"finalAmountIn\":\"The amount of input tokens that are required from the user if the trade is executed.\"}},\"getAmountOut(bytes)\":{\"details\":\"The pool does not need to include a trade simulator directly in itself - it can use a library.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"finalAmountOut\":\"The amount of output tokens that will be sent to the user if the trade is executed.\"}},\"getAssets()\":{\"returns\":{\"_0\":\"An array of tokens supported by the pool.\"}},\"mint(bytes)\":{\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"liquidity\":\"The amount of liquidity tokens that were minted for the user.\"}},\"poolIdentifier()\":{\"returns\":{\"_0\":\"A unique identifier for the pool type.\"}},\"swap(bytes)\":{\"details\":\"The input tokens must've already been sent to the pool.\",\"params\":{\"data\":\"ABI-encoded params that the pool requires.\"},\"returns\":{\"finalAmountOut\":\"The amount of output tokens that were sent to the user.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(bytes)\":{\"notice\":\"Burns liquidity tokens.\"},\"burnSingle(bytes)\":{\"notice\":\"Burns liquidity tokens for a single output token.\"},\"flashSwap(bytes)\":{\"notice\":\"Executes a swap from one token to another with a callback.\"},\"getAmountIn(bytes)\":{\"notice\":\"Simulates a trade and returns the expected output.\"},\"getAmountOut(bytes)\":{\"notice\":\"Simulates a trade and returns the expected output.\"},\"mint(bytes)\":{\"notice\":\"Mints liquidity tokens.\"},\"swap(bytes)\":{\"notice\":\"Executes a swap from one token to another.\"}},\"notice\":\"Trident pool interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/trident/IPool.sol\":\"IPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/trident/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data)\\n        external\\n        returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\",\"keccak256\":\"0x40cff14f725681fad1ef4977a5d07ae1c89c2b400b9d01b7149b77e10ccb4025\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"burn(bytes)":{"notice":"Burns liquidity tokens."},"burnSingle(bytes)":{"notice":"Burns liquidity tokens for a single output token."},"flashSwap(bytes)":{"notice":"Executes a swap from one token to another with a callback."},"getAmountIn(bytes)":{"notice":"Simulates a trade and returns the expected output."},"getAmountOut(bytes)":{"notice":"Simulates a trade and returns the expected output."},"mint(bytes)":{"notice":"Mints liquidity tokens."},"swap(bytes)":{"notice":"Executes a swap from one token to another."}},"notice":"Trident pool interface.","version":1}}},"contracts/interfaces/trident/ITridentRouter.sol":{"ITridentRouter":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Trident pool router interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/trident/ITridentRouter.sol\":\"ITridentRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data)\\n        external\\n        returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\",\"keccak256\":\"0x40cff14f725681fad1ef4977a5d07ae1c89c2b400b9d01b7149b77e10ccb4025\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IPool.sol\\\";\\nimport \\\"../IBentoBoxMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\",\"keccak256\":\"0xc0509d17bb53d2ff9ded9d43022ff84473791f86258a2bcfb1eb3a9966f766d0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Trident pool router interface.","version":1}}},"contracts/interfaces/trident/ITridentSwapAdapter.sol":{"ITridentSwapAdapter":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/trident/ITridentSwapAdapter.sol\":\"ITridentSwapAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/adapters/BentoAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title BentoAdapter\\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\nabstract contract BentoAdapter is ImmutableState {\\n    /// @notice Deposits the token from users wallet into the BentoBox.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to deposit. Use token as address(0) when depositing native token\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to be deposited\\n    /// @param share share to be deposited\\n    /// @param value native token value to be deposited. Only use when token address is address(0)\\n    function _depositToBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) internal {\\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\\n    }\\n\\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to transfer. For native tokens, use wnative token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    /// @param share share to transfer\\n    /// @param unwrapBento use true for withdraw and false for transfer\\n    function _transferFromBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bentoBox.withdraw(token, from, to, amount, share);\\n        } else {\\n            if (amount > 0) {\\n                share = bentoBox.toShare(token, amount, false);\\n            }\\n            bentoBox.transfer(token, from, to, share);\\n        }\\n    }\\n}\",\"keccak256\":\"0x4d2bcdca572d865f27fb5479733973b463b88514e96d8ee4ee03914f6f42852c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/// @title TokenAdapter\\n/// @notice Adapter for all token operations\\nabstract contract TokenAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Function to transfer tokens from address(this)\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferTokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) != address(0)) {\\n            token.safeTransfer(to, amount);\\n        } else {\\n            payable(to).transfer(amount);\\n        }\\n    }\\n\\n    /// @notice Function to transfer tokens from user to the to address\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferFromToken(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        token.safeTransferFrom(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Unwraps the wrapper native into native and sends it to the receiver.\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    function _unwrapTransfer(address token, address to) internal {\\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\\n    }\\n\\n    /// @notice Wraps the token to the wrapped token\\n    /// @param token token to wrap\\n    /// @param amount amount to wrap\\n    function _wrapToken(address token, uint256 amount) internal {\\n        IWETH(token).deposit{value: amount}();\\n    }\\n}\",\"keccak256\":\"0x995299a2ed251da61f0827b5d87cecdfc8dad10915bcefdf3d2b2ad337227da9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title ImmutableState\\n/// @notice Stores the immutable state\\nabstract contract ImmutableState is IImmutableState {\\n    /// @notice BentoBox token vault\\n    IBentoBoxMinimal public immutable override bentoBox;\\n\\n    /// @notice Stargate Router for cross chain interaction\\n    IStargateRouter public immutable override stargateRouter;\\n\\n    /// @notice Stargate Widget for stargate partner fee\\n    IStargateWidget public immutable override stargateWidget;\\n\\n    /// @notice Sushiswap Legacy AMM Factory\\n    address public immutable override factory;\\n\\n    /// @notice Sushiswap Legacy AMM PairCodeHash\\n    bytes32 public immutable override pairCodeHash;\\n\\n    /// @notice Address of the Stargate ETH Vault\\n    address public immutable override SGETH;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        IStargateWidget _stargateWidget,\\n        address _SGETH\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        stargateWidget = _stargateWidget;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n        SGETH = _SGETH;\\n    }\\n}\",\"keccak256\":\"0x047f6df909198a6e179aaf17b3529de73ce21d14094ee18ad69e895bdf0f3ad8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\nimport \\\"./stargate/IStargateWidget.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function stargateWidget() external view returns (IStargateWidget);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n\\n    function SGETH() external view returns(address);\\n}\",\"keccak256\":\"0x476cf7998d3c274d9ac0910acfdd4dd22d3b1ff2f5be753c9e4b797f0a292356\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x08174fdf25e2267c319ad9507b0fe106b786a5184075c057455c400cfb65e5dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateWidget {\\n    function partnerSwap(bytes2 _partnerId) external;\\n}\",\"keccak256\":\"0x1e49b66fb7a83834f841efcaf50d045c1e30133bff76381a10dd52a1beaebff5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/trident/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data)\\n        external\\n        returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\",\"keccak256\":\"0x40cff14f725681fad1ef4977a5d07ae1c89c2b400b9d01b7149b77e10ccb4025\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IPool.sol\\\";\\nimport \\\"../IBentoBoxMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\",\"keccak256\":\"0xc0509d17bb53d2ff9ded9d43022ff84473791f86258a2bcfb1eb3a9966f766d0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ITridentRouter.sol\\\";\\nimport \\\"../../adapters/BentoAdapter.sol\\\";\\nimport \\\"../../adapters/TokenAdapter.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\n\\ninterface ITridentSwapAdapter {}\",\"keccak256\":\"0x7ae23c19bef0f88085edb4aa8c2b2f7904719df63e3dfe3e78d0fc4d093e216f\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/libraries/SafeMath.sol":{"SafeMathUniswap":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e3b4e30b54184f3253703acd99247658a9b210925f2b5fcfc0172cea9c63c6c564736f6c634300080b0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 0xB4 0xE3 SIGNEXTEND SLOAD XOR 0x4F ORIGIN MSTORE8 PUSH17 0x3ACD99247658A9B210925F2B5FCFC0172C 0xEA SWAP13 PUSH4 0xC6C56473 PUSH16 0x6C634300080B00330000000000000000 ","sourceMap":"170:464:29:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;170:464:29;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e3b4e30b54184f3253703acd99247658a9b210925f2b5fcfc0172cea9c63c6c564736f6c634300080b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 0xB4 0xE3 SIGNEXTEND SLOAD XOR 0x4F ORIGIN MSTORE8 PUSH17 0x3ACD99247658A9B210925F2B5FCFC0172C 0xEA SWAP13 PUSH4 0xC6C56473 PUSH16 0x6C634300080B00330000000000000000 ","sourceMap":"170:464:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SafeMath.sol\":\"SafeMathUniswap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0x8992c26baf30eb4a743dbe6d2a9cb27625fb783347b06283ce9664ffad83c411\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/libraries/UniswapV2Library.sol":{"UniswapV2Library":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ac0c8f92b0ea9a2debdeb7be47ba40bb04f34f465517a493d44f38a3c07af71864736f6c634300080b0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0xC DUP16 SWAP3 0xB0 0xEA SWAP11 0x2D 0xEB 0xDE 0xB7 0xBE SELFBALANCE 0xBA BLOCKHASH 0xBB DIV RETURN 0x4F CHAINID SSTORE OR LOG4 SWAP4 0xD4 0x4F CODESIZE LOG3 0xC0 PUSH27 0xF71864736F6C634300080B00330000000000000000000000000000 ","sourceMap":"166:5323:30:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;166:5323:30;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ac0c8f92b0ea9a2debdeb7be47ba40bb04f34f465517a493d44f38a3c07af71864736f6c634300080b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0xC DUP16 SWAP3 0xB0 0xEA SWAP11 0x2D 0xEB 0xDE 0xB7 0xBE SELFBALANCE 0xBA BLOCKHASH 0xBB DIV RETURN 0x4F CHAINID SSTORE OR LOG4 SWAP4 0xD4 0x4F CODESIZE LOG3 0xC0 PUSH27 0xF71864736F6C634300080B00330000000000000000000000000000 ","sourceMap":"166:5323:30:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAmountIn(uint256,uint256,uint256)":"infinite","getAmountOut(uint256,uint256,uint256)":"infinite","getAmountsIn(address,uint256,address[] memory,bytes32)":"infinite","getAmountsOut(address,uint256,address[] memory,bytes32)":"infinite","getReserves(address,address,address,bytes32)":"infinite","pairFor(address,address,address,bytes32)":"infinite","quote(uint256,uint256,uint256)":"infinite","sortTokens(address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/UniswapV2Library.sol\":\"UniswapV2Library\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0x8992c26baf30eb4a743dbe6d2a9cb27625fb783347b06283ce9664ffad83c411\",\"license\":\"GPL-3.0\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            pairCodeHash // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1],\\n                pairCodeHash\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i],\\n                pairCodeHash\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\",\"keccak256\":\"0x1c40987526aeba050176dc98589ed9211959422b07f5085af035471d900178b7\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/misc/StargateFeeV04Extraction.sol":{"StargateFeeV04Extraction":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"DELTA_1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DELTA_2","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DENOMINATOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FIFTY_PERCENT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LAMBDA_1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LAMBDA_2","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LP_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROTOCOL_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROTOCOL_SUBSIDY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SIXTY_PERCENT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"currentAssetSD","type":"uint256"},{"internalType":"uint256","name":"lpAsset","type":"uint256"},{"internalType":"uint256","name":"eqFeePool","type":"uint256"},{"internalType":"uint256","name":"idealBalance","type":"uint256"},{"internalType":"uint256","name":"currentBalance","type":"uint256"},{"internalType":"bool","name":"allocPointIsPositive","type":"bool"}],"internalType":"struct BridgeState","name":"state","type":"tuple"},{"internalType":"bool","name":"whitelisted","type":"bool"},{"internalType":"uint256","name":"amountSD","type":"uint256"}],"name":"getFees","outputs":[{"components":[{"internalType":"uint256","name":"eqFee","type":"uint256"},{"internalType":"uint256","name":"eqReward","type":"uint256"},{"internalType":"uint256","name":"lpFee","type":"uint256"},{"internalType":"uint256","name":"protocolFee","type":"uint256"}],"internalType":"struct Fees","name":"s","type":"tuple"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_5192":{"entryPoint":null,"id":5192,"parameterSlots":0,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610940806100206000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80635e3f2727116100815780638afbd3781161005b5780638afbd37814610144578063918f86741461018a578063a810de6c1461019957600080fd5b80635e3f27271461012a5780637ba5c12f14610137578063886a9c501461010d57600080fd5b80631e04cbf3116100b25780631e04cbf3146100fe5780633dad0dd51461010d578063518a9f9f1461011c57600080fd5b8063012a1c2d146100ce5780630b4501fd146100f0575b600080fd5b6100dd670dd280b9144a000081565b6040519081526020015b60405180910390f35b6100dd6601c6bf5263400081565b6100dd6706f05b59d3b2000081565b6100dd670853a0d2313c000081565b6100dd66b1a2bc2ec5000081565b6100dd655af3107a400081565b6100dd651b48eb57e00081565b610157610152366004610764565b6101a7565b6040516100e791908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6100dd670de0b6b3a764000081565b6100dd660e35fa931a000081565b6101d26040518060800160405280600081526020016000815260200160008152602001600081525090565b6101dc848361021c565b602082015260006101ed85846102db565b908352905083156101fe5750610215565b6102098584836104aa565b60408401526060830152505b9392505050565b60008260000151836020015111610235575060006102d5565b825160208401516000916102499190610625565b9050604b610273856020015161026d6064886000015161063190919063ffffffff16565b9061063d565b1080156102935750610286816002610631565b610291846064610631565b115b156102ce576102b38161026d85876040015161063190919063ffffffff16565b915083604001518211156102c957836040015191505b6102d3565b600091505b505b92915050565b60808201516060830151600091829184821015610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f53746172676174653a206e6f7420656e6f7567682062616c616e63650000000060448201526064015b60405180910390fd5b60006103658387610625565b90506000610387670de0b6b3a764000061026d85670853a0d2313c0000610631565b905060006103a8670de0b6b3a764000061026d8666b1a2bc2ec50000610631565b90506000808385106103da576103d0670de0b6b3a764000061026d8c651b48eb57e000610631565b915081905061049a565b8285106104125760008488106103f057846103f2565b875b905061040a660e35fa931a000060008787858b610649565b92505061049a565b82871061046f576000848810610428578461042a565b875b905061044c610445660e35fa931a000060008888868a610649565b8490610743565b925061040a610445670dd280b9144a0000660e35fa931a0000876000898c610649565b610497610490670dd280b9144a0000660e35fa931a00008660008c8b610649565b8390610743565b91505b909a909950975050505050505050565b6000806104d4836104ce670de0b6b3a764000061026d886601c6bf52634000610631565b90610625565b91506104f2670de0b6b3a764000061026d86655af3107a4000610631565b90508460a001511561050f576105088282610743565b9150600090505b602085015161051d5761061d565b600061054a670de0b6b3a764000061026d670853a0d2313c0000896060015161063190919063ffffffff16565b60808701516105599087610625565b1190506000610585876020015161026d670de0b6b3a76400008a6000015161063190919063ffffffff16565b90506706f05b59d3b20000811115801561059c5750815b156105ae57600093506000925061061a565b670853a0d2313c0000811080156105c25750815b1561061a5760006105e6600a6105e0846706f05b59d3b20000610625565b90610631565b90506105fe670de0b6b3a764000061026d8784610631565b9450610616670de0b6b3a764000061026d8684610631565b9350505b50505b935093915050565b60006102158284610863565b6000610215828461087a565b600061021582846108b7565b600083821015801561065b5750848311155b6106c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f53746172676174653a2062616c616e6365206f7574206f6620626f756e6400006044820152606401610350565b60006106cd8686610625565b905060006106ed886106e78461026d8d6105e08d8c610625565b90610743565b90506000610707896106e78561026d8e6105e08e8c610625565b905060006107158787610625565b9050610734670de0b6b3a764000061026d600281856105e08989610743565b9b9a5050505050505050505050565b600061021582846108f2565b8035801515811461075f57600080fd5b919050565b600080600083850361010081121561077b57600080fd5b60c081121561078957600080fd5b5060405160c0810181811067ffffffffffffffff821117156107d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8060405250843581526020850135602082015260408501356040820152606085013560608201526080850135608082015261081160a0860161074f565b60a0820152925061082460c0850161074f565b915060e084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561087557610875610834565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156108b2576108b2610834565b500290565b6000826108ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000821982111561090557610905610834565b50019056fea2646970667358221220e5e69a3a88ba332524548e420ed3b254902dbbf14a36b6d7779e02d044c3fdc364736f6c634300080b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x940 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5E3F2727 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0x8AFBD378 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8AFBD378 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x918F8674 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0xA810DE6C EQ PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5E3F2727 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x7BA5C12F EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x886A9C50 EQ PUSH2 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1E04CBF3 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x1E04CBF3 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0x3DAD0DD5 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x518A9F9F EQ PUSH2 0x11C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12A1C2D EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0xB4501FD EQ PUSH2 0xF0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDD PUSH8 0xDD280B9144A0000 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDD PUSH7 0x1C6BF52634000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH8 0x6F05B59D3B20000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH8 0x853A0D2313C0000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH7 0xB1A2BC2EC50000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH6 0x5AF3107A4000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH6 0x1B48EB57E000 DUP2 JUMP JUMPDEST PUSH2 0x157 PUSH2 0x152 CALLDATASIZE PUSH1 0x4 PUSH2 0x764 JUMP JUMPDEST PUSH2 0x1A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE7 SWAP2 SWAP1 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH2 0xDD PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH7 0xE35FA931A0000 DUP2 JUMP JUMPDEST PUSH2 0x1D2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x1DC DUP5 DUP4 PUSH2 0x21C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1ED DUP6 DUP5 PUSH2 0x2DB JUMP JUMPDEST SWAP1 DUP4 MSTORE SWAP1 POP DUP4 ISZERO PUSH2 0x1FE JUMPI POP PUSH2 0x215 JUMP JUMPDEST PUSH2 0x209 DUP6 DUP5 DUP4 PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD GT PUSH2 0x235 JUMPI POP PUSH1 0x0 PUSH2 0x2D5 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x249 SWAP2 SWAP1 PUSH2 0x625 JUMP JUMPDEST SWAP1 POP PUSH1 0x4B PUSH2 0x273 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x26D PUSH1 0x64 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x631 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x63D JUMP JUMPDEST LT DUP1 ISZERO PUSH2 0x293 JUMPI POP PUSH2 0x286 DUP2 PUSH1 0x2 PUSH2 0x631 JUMP JUMPDEST PUSH2 0x291 DUP5 PUSH1 0x64 PUSH2 0x631 JUMP JUMPDEST GT JUMPDEST ISZERO PUSH2 0x2CE JUMPI PUSH2 0x2B3 DUP2 PUSH2 0x26D DUP6 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x631 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP4 PUSH1 0x40 ADD MLOAD DUP3 GT ISZERO PUSH2 0x2C9 JUMPI DUP4 PUSH1 0x40 ADD MLOAD SWAP2 POP JUMPDEST PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP5 DUP3 LT ISZERO PUSH2 0x359 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53746172676174653A206E6F7420656E6F7567682062616C616E636500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x365 DUP4 DUP8 PUSH2 0x625 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x387 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP6 PUSH8 0x853A0D2313C0000 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3A8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP7 PUSH7 0xB1A2BC2EC50000 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP4 DUP6 LT PUSH2 0x3DA JUMPI PUSH2 0x3D0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP13 PUSH6 0x1B48EB57E000 PUSH2 0x631 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP PUSH2 0x49A JUMP JUMPDEST DUP3 DUP6 LT PUSH2 0x412 JUMPI PUSH1 0x0 DUP5 DUP9 LT PUSH2 0x3F0 JUMPI DUP5 PUSH2 0x3F2 JUMP JUMPDEST DUP8 JUMPDEST SWAP1 POP PUSH2 0x40A PUSH7 0xE35FA931A0000 PUSH1 0x0 DUP8 DUP8 DUP6 DUP12 PUSH2 0x649 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x49A JUMP JUMPDEST DUP3 DUP8 LT PUSH2 0x46F JUMPI PUSH1 0x0 DUP5 DUP9 LT PUSH2 0x428 JUMPI DUP5 PUSH2 0x42A JUMP JUMPDEST DUP8 JUMPDEST SWAP1 POP PUSH2 0x44C PUSH2 0x445 PUSH7 0xE35FA931A0000 PUSH1 0x0 DUP9 DUP9 DUP7 DUP11 PUSH2 0x649 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x743 JUMP JUMPDEST SWAP3 POP PUSH2 0x40A PUSH2 0x445 PUSH8 0xDD280B9144A0000 PUSH7 0xE35FA931A0000 DUP8 PUSH1 0x0 DUP10 DUP13 PUSH2 0x649 JUMP JUMPDEST PUSH2 0x497 PUSH2 0x490 PUSH8 0xDD280B9144A0000 PUSH7 0xE35FA931A0000 DUP7 PUSH1 0x0 DUP13 DUP12 PUSH2 0x649 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x743 JUMP JUMPDEST SWAP2 POP JUMPDEST SWAP1 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4D4 DUP4 PUSH2 0x4CE PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP9 PUSH7 0x1C6BF52634000 PUSH2 0x631 JUMP JUMPDEST SWAP1 PUSH2 0x625 JUMP JUMPDEST SWAP2 POP PUSH2 0x4F2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP7 PUSH6 0x5AF3107A4000 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0xA0 ADD MLOAD ISZERO PUSH2 0x50F JUMPI PUSH2 0x508 DUP3 DUP3 PUSH2 0x743 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x51D JUMPI PUSH2 0x61D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54A PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D PUSH8 0x853A0D2313C0000 DUP10 PUSH1 0x60 ADD MLOAD PUSH2 0x631 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x559 SWAP1 DUP8 PUSH2 0x625 JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 PUSH2 0x585 DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x26D PUSH8 0xDE0B6B3A7640000 DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0x631 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH8 0x6F05B59D3B20000 DUP2 GT ISZERO DUP1 ISZERO PUSH2 0x59C JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 0x5AE JUMPI PUSH1 0x0 SWAP4 POP PUSH1 0x0 SWAP3 POP PUSH2 0x61A JUMP JUMPDEST PUSH8 0x853A0D2313C0000 DUP2 LT DUP1 ISZERO PUSH2 0x5C2 JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 0x61A JUMPI PUSH1 0x0 PUSH2 0x5E6 PUSH1 0xA PUSH2 0x5E0 DUP5 PUSH8 0x6F05B59D3B20000 PUSH2 0x625 JUMP JUMPDEST SWAP1 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH2 0x5FE PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP8 DUP5 PUSH2 0x631 JUMP JUMPDEST SWAP5 POP PUSH2 0x616 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP7 DUP5 PUSH2 0x631 JUMP JUMPDEST SWAP4 POP POP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x215 DUP3 DUP5 PUSH2 0x863 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x215 DUP3 DUP5 PUSH2 0x87A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x215 DUP3 DUP5 PUSH2 0x8B7 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x65B JUMPI POP DUP5 DUP4 GT ISZERO JUMPDEST PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53746172676174653A2062616C616E6365206F7574206F6620626F756E640000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x350 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6CD DUP7 DUP7 PUSH2 0x625 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6ED DUP9 PUSH2 0x6E7 DUP5 PUSH2 0x26D DUP14 PUSH2 0x5E0 DUP14 DUP13 PUSH2 0x625 JUMP JUMPDEST SWAP1 PUSH2 0x743 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x707 DUP10 PUSH2 0x6E7 DUP6 PUSH2 0x26D DUP15 PUSH2 0x5E0 DUP15 DUP13 PUSH2 0x625 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x715 DUP8 DUP8 PUSH2 0x625 JUMP JUMPDEST SWAP1 POP PUSH2 0x734 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D PUSH1 0x2 DUP2 DUP6 PUSH2 0x5E0 DUP10 DUP10 PUSH2 0x743 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x215 DUP3 DUP5 PUSH2 0x8F2 JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x75F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH2 0x100 DUP2 SLT ISZERO PUSH2 0x77B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x7D4 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP DUP5 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x811 PUSH1 0xA0 DUP7 ADD PUSH2 0x74F JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE SWAP3 POP PUSH2 0x824 PUSH1 0xC0 DUP6 ADD PUSH2 0x74F JUMP JUMPDEST SWAP2 POP PUSH1 0xE0 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x875 JUMPI PUSH2 0x875 PUSH2 0x834 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x8B2 JUMPI PUSH2 0x8B2 PUSH2 0x834 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x8ED JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x905 JUMPI PUSH2 0x905 PUSH2 0x834 JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 0xE6 SWAP11 GASPRICE DUP9 0xBA CALLER 0x25 0x24 SLOAD DUP15 TIMESTAMP 0xE 0xD3 0xB2 SLOAD SWAP1 0x2D 0xBB CALL 0x4A CALLDATASIZE 0xB6 0xD7 PUSH24 0x9E02D044C3FDC364736F6C634300080B0033000000000000 ","sourceMap":"405:7796:31:-:0;;;1175:16;;;;;;;;;;405:7796;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DELTA_1_5148":{"entryPoint":null,"id":5148,"parameterSlots":0,"returnSlots":0},"@DELTA_2_5153":{"entryPoint":null,"id":5153,"parameterSlots":0,"returnSlots":0},"@DENOMINATOR_5143":{"entryPoint":null,"id":5143,"parameterSlots":0,"returnSlots":0},"@FIFTY_PERCENT_5183":{"entryPoint":null,"id":5183,"parameterSlots":0,"returnSlots":0},"@LAMBDA_1_5158":{"entryPoint":null,"id":5158,"parameterSlots":0,"returnSlots":0},"@LAMBDA_2_5163":{"entryPoint":null,"id":5163,"parameterSlots":0,"returnSlots":0},"@LP_FEE_5168":{"entryPoint":null,"id":5168,"parameterSlots":0,"returnSlots":0},"@PROTOCOL_FEE_5173":{"entryPoint":null,"id":5173,"parameterSlots":0,"returnSlots":0},"@PROTOCOL_SUBSIDY_5178":{"entryPoint":null,"id":5178,"parameterSlots":0,"returnSlots":0},"@SIXTY_PERCENT_5188":{"entryPoint":null,"id":5188,"parameterSlots":0,"returnSlots":0},"@_getEqReward_5328":{"entryPoint":540,"id":5328,"parameterSlots":2,"returnSlots":1},"@_getEquilibriumFee_5499":{"entryPoint":731,"id":5499,"parameterSlots":2,"returnSlots":2},"@_getProtocolAndLpFee_5643":{"entryPoint":1194,"id":5643,"parameterSlots":3,"returnSlots":2},"@_getTrapezoidArea_5732":{"entryPoint":1609,"id":5732,"parameterSlots":6,"returnSlots":1},"@add_1632":{"entryPoint":1859,"id":1632,"parameterSlots":2,"returnSlots":1},"@div_1677":{"entryPoint":1597,"id":1677,"parameterSlots":2,"returnSlots":1},"@getFees_5249":{"entryPoint":423,"id":5249,"parameterSlots":3,"returnSlots":1},"@mul_1662":{"entryPoint":1585,"id":1662,"parameterSlots":2,"returnSlots":1},"@sub_1647":{"entryPoint":1573,"id":1647,"parameterSlots":2,"returnSlots":1},"abi_decode_bool":{"entryPoint":1871,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_struct$_BridgeState_$5128_memory_ptrt_boolt_uint256":{"entryPoint":1892,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_tuple_t_stringliteral_4f8489e1ed900cc7a11e9afc2d03fb718a9d8bf33dd95deb11c5aac3f737ff19__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_52bbb3c40124075312477fad1dc400b4bf82afa864a6f9b935fbf33a9f2833cc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_Fees_$5137_memory_ptr__to_t_struct$_Fees_$5137_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2290,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":2231,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":2170,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2147,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":2100,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3604:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:33","statements":[{"nodeType":"YulAssignment","src":"125:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:33"},"nodeType":"YulFunctionCall","src":"133:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:33"},"nodeType":"YulFunctionCall","src":"160:25:33"},"nodeType":"YulExpressionStatement","src":"160:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:33","type":""}],"src":"14:177:33"},{"body":{"nodeType":"YulBlock","src":"242:114:33","statements":[{"nodeType":"YulAssignment","src":"252:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"274:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"261:12:33"},"nodeType":"YulFunctionCall","src":"261:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"252:5:33"}]},{"body":{"nodeType":"YulBlock","src":"334:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"343:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"346:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"336:6:33"},"nodeType":"YulFunctionCall","src":"336:12:33"},"nodeType":"YulExpressionStatement","src":"336:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"303:5:33"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"324:5:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"317:6:33"},"nodeType":"YulFunctionCall","src":"317:13:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"310:6:33"},"nodeType":"YulFunctionCall","src":"310:21:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"300:2:33"},"nodeType":"YulFunctionCall","src":"300:32:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"293:6:33"},"nodeType":"YulFunctionCall","src":"293:40:33"},"nodeType":"YulIf","src":"290:60:33"}]},"name":"abi_decode_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"221:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"232:5:33","type":""}],"src":"196:160:33"},{"body":{"nodeType":"YulBlock","src":"491:1008:33","statements":[{"nodeType":"YulVariableDeclaration","src":"501:33:33","value":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"515:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"524:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"511:3:33"},"nodeType":"YulFunctionCall","src":"511:23:33"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"505:2:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"559:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"568:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"571:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"561:6:33"},"nodeType":"YulFunctionCall","src":"561:12:33"},"nodeType":"YulExpressionStatement","src":"561:12:33"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"550:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"554:3:33","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"546:3:33"},"nodeType":"YulFunctionCall","src":"546:12:33"},"nodeType":"YulIf","src":"543:32:33"},{"body":{"nodeType":"YulBlock","src":"601:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"610:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"613:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"603:6:33"},"nodeType":"YulFunctionCall","src":"603:12:33"},"nodeType":"YulExpressionStatement","src":"603:12:33"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"591:2:33"},{"kind":"number","nodeType":"YulLiteral","src":"595:4:33","type":"","value":"0xc0"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"587:3:33"},"nodeType":"YulFunctionCall","src":"587:13:33"},"nodeType":"YulIf","src":"584:33:33"},{"nodeType":"YulVariableDeclaration","src":"626:23:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"646:2:33","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"640:5:33"},"nodeType":"YulFunctionCall","src":"640:9:33"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"630:6:33","type":""}]},{"nodeType":"YulVariableDeclaration","src":"658:35:33","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"680:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"688:4:33","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"676:3:33"},"nodeType":"YulFunctionCall","src":"676:17:33"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"662:10:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"776:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"797:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"800:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"790:6:33"},"nodeType":"YulFunctionCall","src":"790:88:33"},"nodeType":"YulExpressionStatement","src":"790:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"898:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"901:4:33","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"891:6:33"},"nodeType":"YulFunctionCall","src":"891:15:33"},"nodeType":"YulExpressionStatement","src":"891:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"926:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"929:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"919:6:33"},"nodeType":"YulFunctionCall","src":"919:15:33"},"nodeType":"YulExpressionStatement","src":"919:15:33"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"711:10:33"},{"kind":"number","nodeType":"YulLiteral","src":"723:18:33","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"708:2:33"},"nodeType":"YulFunctionCall","src":"708:34:33"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"747:10:33"},{"name":"memPtr","nodeType":"YulIdentifier","src":"759:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"744:2:33"},"nodeType":"YulFunctionCall","src":"744:22:33"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"705:2:33"},"nodeType":"YulFunctionCall","src":"705:62:33"},"nodeType":"YulIf","src":"702:242:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"960:2:33","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"964:10:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"953:6:33"},"nodeType":"YulFunctionCall","src":"953:22:33"},"nodeType":"YulExpressionStatement","src":"953:22:33"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"991:6:33"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1012:9:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"999:12:33"},"nodeType":"YulFunctionCall","src":"999:23:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"984:6:33"},"nodeType":"YulFunctionCall","src":"984:39:33"},"nodeType":"YulExpressionStatement","src":"984:39:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1043:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1051:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1039:3:33"},"nodeType":"YulFunctionCall","src":"1039:15:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1073:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1084:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1069:3:33"},"nodeType":"YulFunctionCall","src":"1069:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1056:12:33"},"nodeType":"YulFunctionCall","src":"1056:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1032:6:33"},"nodeType":"YulFunctionCall","src":"1032:57:33"},"nodeType":"YulExpressionStatement","src":"1032:57:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1109:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1117:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1105:3:33"},"nodeType":"YulFunctionCall","src":"1105:15:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1139:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1150:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1135:3:33"},"nodeType":"YulFunctionCall","src":"1135:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1122:12:33"},"nodeType":"YulFunctionCall","src":"1122:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1098:6:33"},"nodeType":"YulFunctionCall","src":"1098:57:33"},"nodeType":"YulExpressionStatement","src":"1098:57:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1175:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1183:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1171:3:33"},"nodeType":"YulFunctionCall","src":"1171:15:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1205:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1216:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1201:3:33"},"nodeType":"YulFunctionCall","src":"1201:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1188:12:33"},"nodeType":"YulFunctionCall","src":"1188:32:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1164:6:33"},"nodeType":"YulFunctionCall","src":"1164:57:33"},"nodeType":"YulExpressionStatement","src":"1164:57:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1241:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1249:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1237:3:33"},"nodeType":"YulFunctionCall","src":"1237:16:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1272:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1283:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1268:3:33"},"nodeType":"YulFunctionCall","src":"1268:19:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1255:12:33"},"nodeType":"YulFunctionCall","src":"1255:33:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1230:6:33"},"nodeType":"YulFunctionCall","src":"1230:59:33"},"nodeType":"YulExpressionStatement","src":"1230:59:33"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1309:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1317:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1305:3:33"},"nodeType":"YulFunctionCall","src":"1305:16:33"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1343:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1354:3:33","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1339:3:33"},"nodeType":"YulFunctionCall","src":"1339:19:33"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"1323:15:33"},"nodeType":"YulFunctionCall","src":"1323:36:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1298:6:33"},"nodeType":"YulFunctionCall","src":"1298:62:33"},"nodeType":"YulExpressionStatement","src":"1298:62:33"},{"nodeType":"YulAssignment","src":"1369:16:33","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1379:6:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1369:6:33"}]},{"nodeType":"YulAssignment","src":"1394:47:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1424:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1435:4:33","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1420:3:33"},"nodeType":"YulFunctionCall","src":"1420:20:33"}],"functionName":{"name":"abi_decode_bool","nodeType":"YulIdentifier","src":"1404:15:33"},"nodeType":"YulFunctionCall","src":"1404:37:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1394:6:33"}]},{"nodeType":"YulAssignment","src":"1450:43:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1477:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1488:3:33","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1473:3:33"},"nodeType":"YulFunctionCall","src":"1473:19:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1460:12:33"},"nodeType":"YulFunctionCall","src":"1460:33:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1450:6:33"}]}]},"name":"abi_decode_tuple_t_struct$_BridgeState_$5128_memory_ptrt_boolt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"441:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"452:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"464:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"472:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"480:6:33","type":""}],"src":"361:1138:33"},{"body":{"nodeType":"YulBlock","src":"1649:273:33","statements":[{"nodeType":"YulAssignment","src":"1659:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1671:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1682:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1667:3:33"},"nodeType":"YulFunctionCall","src":"1667:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1659:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1702:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1719:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1713:5:33"},"nodeType":"YulFunctionCall","src":"1713:13:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1695:6:33"},"nodeType":"YulFunctionCall","src":"1695:32:33"},"nodeType":"YulExpressionStatement","src":"1695:32:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1747:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1758:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1743:3:33"},"nodeType":"YulFunctionCall","src":"1743:20:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1775:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1783:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1771:3:33"},"nodeType":"YulFunctionCall","src":"1771:17:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1765:5:33"},"nodeType":"YulFunctionCall","src":"1765:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1736:6:33"},"nodeType":"YulFunctionCall","src":"1736:54:33"},"nodeType":"YulExpressionStatement","src":"1736:54:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1810:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1821:4:33","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1806:3:33"},"nodeType":"YulFunctionCall","src":"1806:20:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1838:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1846:4:33","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1834:3:33"},"nodeType":"YulFunctionCall","src":"1834:17:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1828:5:33"},"nodeType":"YulFunctionCall","src":"1828:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1799:6:33"},"nodeType":"YulFunctionCall","src":"1799:54:33"},"nodeType":"YulExpressionStatement","src":"1799:54:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1873:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1884:4:33","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1869:3:33"},"nodeType":"YulFunctionCall","src":"1869:20:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1901:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"1909:4:33","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1897:3:33"},"nodeType":"YulFunctionCall","src":"1897:17:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1891:5:33"},"nodeType":"YulFunctionCall","src":"1891:24:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1862:6:33"},"nodeType":"YulFunctionCall","src":"1862:54:33"},"nodeType":"YulExpressionStatement","src":"1862:54:33"}]},"name":"abi_encode_tuple_t_struct$_Fees_$5137_memory_ptr__to_t_struct$_Fees_$5137_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1618:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1629:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1640:4:33","type":""}],"src":"1504:418:33"},{"body":{"nodeType":"YulBlock","src":"2101:178:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2118:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2129:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2111:6:33"},"nodeType":"YulFunctionCall","src":"2111:21:33"},"nodeType":"YulExpressionStatement","src":"2111:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2152:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2148:3:33"},"nodeType":"YulFunctionCall","src":"2148:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"2168:2:33","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2141:6:33"},"nodeType":"YulFunctionCall","src":"2141:30:33"},"nodeType":"YulExpressionStatement","src":"2141:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2191:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2202:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2187:3:33"},"nodeType":"YulFunctionCall","src":"2187:18:33"},{"hexValue":"53746172676174653a206e6f7420656e6f7567682062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"2207:30:33","type":"","value":"Stargate: not enough balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2180:6:33"},"nodeType":"YulFunctionCall","src":"2180:58:33"},"nodeType":"YulExpressionStatement","src":"2180:58:33"},{"nodeType":"YulAssignment","src":"2247:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2259:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2270:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2255:3:33"},"nodeType":"YulFunctionCall","src":"2255:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2247:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_52bbb3c40124075312477fad1dc400b4bf82afa864a6f9b935fbf33a9f2833cc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2078:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2092:4:33","type":""}],"src":"1927:352:33"},{"body":{"nodeType":"YulBlock","src":"2316:152:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2333:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2336:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2326:6:33"},"nodeType":"YulFunctionCall","src":"2326:88:33"},"nodeType":"YulExpressionStatement","src":"2326:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2430:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2433:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2423:6:33"},"nodeType":"YulFunctionCall","src":"2423:15:33"},"nodeType":"YulExpressionStatement","src":"2423:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2454:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2457:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2447:6:33"},"nodeType":"YulFunctionCall","src":"2447:15:33"},"nodeType":"YulExpressionStatement","src":"2447:15:33"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"2284:184:33"},{"body":{"nodeType":"YulBlock","src":"2522:76:33","statements":[{"body":{"nodeType":"YulBlock","src":"2544:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2546:16:33"},"nodeType":"YulFunctionCall","src":"2546:18:33"},"nodeType":"YulExpressionStatement","src":"2546:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2538:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"2541:1:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2535:2:33"},"nodeType":"YulFunctionCall","src":"2535:8:33"},"nodeType":"YulIf","src":"2532:34:33"},{"nodeType":"YulAssignment","src":"2575:17:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2587:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"2590:1:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2583:3:33"},"nodeType":"YulFunctionCall","src":"2583:9:33"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"2575:4:33"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2504:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"2507:1:33","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"2513:4:33","type":""}],"src":"2473:125:33"},{"body":{"nodeType":"YulBlock","src":"2655:176:33","statements":[{"body":{"nodeType":"YulBlock","src":"2774:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2776:16:33"},"nodeType":"YulFunctionCall","src":"2776:18:33"},"nodeType":"YulExpressionStatement","src":"2776:18:33"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2686:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2679:6:33"},"nodeType":"YulFunctionCall","src":"2679:9:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2672:6:33"},"nodeType":"YulFunctionCall","src":"2672:17:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2694:1:33"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2701:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"2769:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2697:3:33"},"nodeType":"YulFunctionCall","src":"2697:74:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2691:2:33"},"nodeType":"YulFunctionCall","src":"2691:81:33"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2668:3:33"},"nodeType":"YulFunctionCall","src":"2668:105:33"},"nodeType":"YulIf","src":"2665:131:33"},{"nodeType":"YulAssignment","src":"2805:20:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2820:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"2823:1:33"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2816:3:33"},"nodeType":"YulFunctionCall","src":"2816:9:33"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"2805:7:33"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2634:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"2637:1:33","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"2643:7:33","type":""}],"src":"2603:228:33"},{"body":{"nodeType":"YulBlock","src":"2882:228:33","statements":[{"body":{"nodeType":"YulBlock","src":"2913:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2934:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2937:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2927:6:33"},"nodeType":"YulFunctionCall","src":"2927:88:33"},"nodeType":"YulExpressionStatement","src":"2927:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3035:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3038:4:33","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3028:6:33"},"nodeType":"YulFunctionCall","src":"3028:15:33"},"nodeType":"YulExpressionStatement","src":"3028:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3063:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3066:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3056:6:33"},"nodeType":"YulFunctionCall","src":"3056:15:33"},"nodeType":"YulExpressionStatement","src":"3056:15:33"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2902:1:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2895:6:33"},"nodeType":"YulFunctionCall","src":"2895:9:33"},"nodeType":"YulIf","src":"2892:189:33"},{"nodeType":"YulAssignment","src":"3090:14:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3099:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"3102:1:33"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3095:3:33"},"nodeType":"YulFunctionCall","src":"3095:9:33"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"3090:1:33"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2867:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"2870:1:33","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"2876:1:33","type":""}],"src":"2836:274:33"},{"body":{"nodeType":"YulBlock","src":"3289:180:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3306:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3317:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3299:6:33"},"nodeType":"YulFunctionCall","src":"3299:21:33"},"nodeType":"YulExpressionStatement","src":"3299:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3340:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3351:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3336:3:33"},"nodeType":"YulFunctionCall","src":"3336:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"3356:2:33","type":"","value":"30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3329:6:33"},"nodeType":"YulFunctionCall","src":"3329:30:33"},"nodeType":"YulExpressionStatement","src":"3329:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3379:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3390:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3375:3:33"},"nodeType":"YulFunctionCall","src":"3375:18:33"},{"hexValue":"53746172676174653a2062616c616e6365206f7574206f6620626f756e64","kind":"string","nodeType":"YulLiteral","src":"3395:32:33","type":"","value":"Stargate: balance out of bound"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3368:6:33"},"nodeType":"YulFunctionCall","src":"3368:60:33"},"nodeType":"YulExpressionStatement","src":"3368:60:33"},{"nodeType":"YulAssignment","src":"3437:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3449:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3460:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3445:3:33"},"nodeType":"YulFunctionCall","src":"3445:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3437:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_4f8489e1ed900cc7a11e9afc2d03fb718a9d8bf33dd95deb11c5aac3f737ff19__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3266:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3280:4:33","type":""}],"src":"3115:354:33"},{"body":{"nodeType":"YulBlock","src":"3522:80:33","statements":[{"body":{"nodeType":"YulBlock","src":"3549:22:33","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3551:16:33"},"nodeType":"YulFunctionCall","src":"3551:18:33"},"nodeType":"YulExpressionStatement","src":"3551:18:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3538:1:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3545:1:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3541:3:33"},"nodeType":"YulFunctionCall","src":"3541:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3535:2:33"},"nodeType":"YulFunctionCall","src":"3535:13:33"},"nodeType":"YulIf","src":"3532:39:33"},{"nodeType":"YulAssignment","src":"3580:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3591:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"3594:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3587:3:33"},"nodeType":"YulFunctionCall","src":"3587:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"3580:3:33"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3505:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"3508:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"3514:3:33","type":""}],"src":"3474:128:33"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_struct$_BridgeState_$5128_memory_ptrt_boolt_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        let _1 := sub(dataEnd, headStart)\n        if slt(_1, 256) { revert(0, 0) }\n        if slt(_1, 0xc0) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xc0)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        mstore(64, newFreePtr)\n        mstore(memPtr, calldataload(headStart))\n        mstore(add(memPtr, 32), calldataload(add(headStart, 32)))\n        mstore(add(memPtr, 64), calldataload(add(headStart, 64)))\n        mstore(add(memPtr, 96), calldataload(add(headStart, 96)))\n        mstore(add(memPtr, 128), calldataload(add(headStart, 128)))\n        mstore(add(memPtr, 160), abi_decode_bool(add(headStart, 160)))\n        value0 := memPtr\n        value1 := abi_decode_bool(add(headStart, 0xc0))\n        value2 := calldataload(add(headStart, 224))\n    }\n    function abi_encode_tuple_t_struct$_Fees_$5137_memory_ptr__to_t_struct$_Fees_$5137_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        mstore(add(headStart, 0x40), mload(add(value0, 0x40)))\n        mstore(add(headStart, 0x60), mload(add(value0, 0x60)))\n    }\n    function abi_encode_tuple_t_stringliteral_52bbb3c40124075312477fad1dc400b4bf82afa864a6f9b935fbf33a9f2833cc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Stargate: not enough balance\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_4f8489e1ed900cc7a11e9afc2d03fb718a9d8bf33dd95deb11c5aac3f737ff19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"Stargate: balance out of bound\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100c95760003560e01c80635e3f2727116100815780638afbd3781161005b5780638afbd37814610144578063918f86741461018a578063a810de6c1461019957600080fd5b80635e3f27271461012a5780637ba5c12f14610137578063886a9c501461010d57600080fd5b80631e04cbf3116100b25780631e04cbf3146100fe5780633dad0dd51461010d578063518a9f9f1461011c57600080fd5b8063012a1c2d146100ce5780630b4501fd146100f0575b600080fd5b6100dd670dd280b9144a000081565b6040519081526020015b60405180910390f35b6100dd6601c6bf5263400081565b6100dd6706f05b59d3b2000081565b6100dd670853a0d2313c000081565b6100dd66b1a2bc2ec5000081565b6100dd655af3107a400081565b6100dd651b48eb57e00081565b610157610152366004610764565b6101a7565b6040516100e791908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6100dd670de0b6b3a764000081565b6100dd660e35fa931a000081565b6101d26040518060800160405280600081526020016000815260200160008152602001600081525090565b6101dc848361021c565b602082015260006101ed85846102db565b908352905083156101fe5750610215565b6102098584836104aa565b60408401526060830152505b9392505050565b60008260000151836020015111610235575060006102d5565b825160208401516000916102499190610625565b9050604b610273856020015161026d6064886000015161063190919063ffffffff16565b9061063d565b1080156102935750610286816002610631565b610291846064610631565b115b156102ce576102b38161026d85876040015161063190919063ffffffff16565b915083604001518211156102c957836040015191505b6102d3565b600091505b505b92915050565b60808201516060830151600091829184821015610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f53746172676174653a206e6f7420656e6f7567682062616c616e63650000000060448201526064015b60405180910390fd5b60006103658387610625565b90506000610387670de0b6b3a764000061026d85670853a0d2313c0000610631565b905060006103a8670de0b6b3a764000061026d8666b1a2bc2ec50000610631565b90506000808385106103da576103d0670de0b6b3a764000061026d8c651b48eb57e000610631565b915081905061049a565b8285106104125760008488106103f057846103f2565b875b905061040a660e35fa931a000060008787858b610649565b92505061049a565b82871061046f576000848810610428578461042a565b875b905061044c610445660e35fa931a000060008888868a610649565b8490610743565b925061040a610445670dd280b9144a0000660e35fa931a0000876000898c610649565b610497610490670dd280b9144a0000660e35fa931a00008660008c8b610649565b8390610743565b91505b909a909950975050505050505050565b6000806104d4836104ce670de0b6b3a764000061026d886601c6bf52634000610631565b90610625565b91506104f2670de0b6b3a764000061026d86655af3107a4000610631565b90508460a001511561050f576105088282610743565b9150600090505b602085015161051d5761061d565b600061054a670de0b6b3a764000061026d670853a0d2313c0000896060015161063190919063ffffffff16565b60808701516105599087610625565b1190506000610585876020015161026d670de0b6b3a76400008a6000015161063190919063ffffffff16565b90506706f05b59d3b20000811115801561059c5750815b156105ae57600093506000925061061a565b670853a0d2313c0000811080156105c25750815b1561061a5760006105e6600a6105e0846706f05b59d3b20000610625565b90610631565b90506105fe670de0b6b3a764000061026d8784610631565b9450610616670de0b6b3a764000061026d8684610631565b9350505b50505b935093915050565b60006102158284610863565b6000610215828461087a565b600061021582846108b7565b600083821015801561065b5750848311155b6106c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f53746172676174653a2062616c616e6365206f7574206f6620626f756e6400006044820152606401610350565b60006106cd8686610625565b905060006106ed886106e78461026d8d6105e08d8c610625565b90610743565b90506000610707896106e78561026d8e6105e08e8c610625565b905060006107158787610625565b9050610734670de0b6b3a764000061026d600281856105e08989610743565b9b9a5050505050505050505050565b600061021582846108f2565b8035801515811461075f57600080fd5b919050565b600080600083850361010081121561077b57600080fd5b60c081121561078957600080fd5b5060405160c0810181811067ffffffffffffffff821117156107d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8060405250843581526020850135602082015260408501356040820152606085013560608201526080850135608082015261081160a0860161074f565b60a0820152925061082460c0850161074f565b915060e084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561087557610875610834565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156108b2576108b2610834565b500290565b6000826108ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000821982111561090557610905610834565b50019056fea2646970667358221220e5e69a3a88ba332524548e420ed3b254902dbbf14a36b6d7779e02d044c3fdc364736f6c634300080b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5E3F2727 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0x8AFBD378 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8AFBD378 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x918F8674 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0xA810DE6C EQ PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5E3F2727 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x7BA5C12F EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x886A9C50 EQ PUSH2 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1E04CBF3 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x1E04CBF3 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0x3DAD0DD5 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x518A9F9F EQ PUSH2 0x11C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12A1C2D EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0xB4501FD EQ PUSH2 0xF0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDD PUSH8 0xDD280B9144A0000 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDD PUSH7 0x1C6BF52634000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH8 0x6F05B59D3B20000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH8 0x853A0D2313C0000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH7 0xB1A2BC2EC50000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH6 0x5AF3107A4000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH6 0x1B48EB57E000 DUP2 JUMP JUMPDEST PUSH2 0x157 PUSH2 0x152 CALLDATASIZE PUSH1 0x4 PUSH2 0x764 JUMP JUMPDEST PUSH2 0x1A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE7 SWAP2 SWAP1 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH2 0xDD PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST PUSH2 0xDD PUSH7 0xE35FA931A0000 DUP2 JUMP JUMPDEST PUSH2 0x1D2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x1DC DUP5 DUP4 PUSH2 0x21C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1ED DUP6 DUP5 PUSH2 0x2DB JUMP JUMPDEST SWAP1 DUP4 MSTORE SWAP1 POP DUP4 ISZERO PUSH2 0x1FE JUMPI POP PUSH2 0x215 JUMP JUMPDEST PUSH2 0x209 DUP6 DUP5 DUP4 PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD GT PUSH2 0x235 JUMPI POP PUSH1 0x0 PUSH2 0x2D5 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x249 SWAP2 SWAP1 PUSH2 0x625 JUMP JUMPDEST SWAP1 POP PUSH1 0x4B PUSH2 0x273 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x26D PUSH1 0x64 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x631 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x63D JUMP JUMPDEST LT DUP1 ISZERO PUSH2 0x293 JUMPI POP PUSH2 0x286 DUP2 PUSH1 0x2 PUSH2 0x631 JUMP JUMPDEST PUSH2 0x291 DUP5 PUSH1 0x64 PUSH2 0x631 JUMP JUMPDEST GT JUMPDEST ISZERO PUSH2 0x2CE JUMPI PUSH2 0x2B3 DUP2 PUSH2 0x26D DUP6 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x631 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP DUP4 PUSH1 0x40 ADD MLOAD DUP3 GT ISZERO PUSH2 0x2C9 JUMPI DUP4 PUSH1 0x40 ADD MLOAD SWAP2 POP JUMPDEST PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP5 DUP3 LT ISZERO PUSH2 0x359 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53746172676174653A206E6F7420656E6F7567682062616C616E636500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x365 DUP4 DUP8 PUSH2 0x625 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x387 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP6 PUSH8 0x853A0D2313C0000 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3A8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP7 PUSH7 0xB1A2BC2EC50000 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP4 DUP6 LT PUSH2 0x3DA JUMPI PUSH2 0x3D0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP13 PUSH6 0x1B48EB57E000 PUSH2 0x631 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP PUSH2 0x49A JUMP JUMPDEST DUP3 DUP6 LT PUSH2 0x412 JUMPI PUSH1 0x0 DUP5 DUP9 LT PUSH2 0x3F0 JUMPI DUP5 PUSH2 0x3F2 JUMP JUMPDEST DUP8 JUMPDEST SWAP1 POP PUSH2 0x40A PUSH7 0xE35FA931A0000 PUSH1 0x0 DUP8 DUP8 DUP6 DUP12 PUSH2 0x649 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x49A JUMP JUMPDEST DUP3 DUP8 LT PUSH2 0x46F JUMPI PUSH1 0x0 DUP5 DUP9 LT PUSH2 0x428 JUMPI DUP5 PUSH2 0x42A JUMP JUMPDEST DUP8 JUMPDEST SWAP1 POP PUSH2 0x44C PUSH2 0x445 PUSH7 0xE35FA931A0000 PUSH1 0x0 DUP9 DUP9 DUP7 DUP11 PUSH2 0x649 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x743 JUMP JUMPDEST SWAP3 POP PUSH2 0x40A PUSH2 0x445 PUSH8 0xDD280B9144A0000 PUSH7 0xE35FA931A0000 DUP8 PUSH1 0x0 DUP10 DUP13 PUSH2 0x649 JUMP JUMPDEST PUSH2 0x497 PUSH2 0x490 PUSH8 0xDD280B9144A0000 PUSH7 0xE35FA931A0000 DUP7 PUSH1 0x0 DUP13 DUP12 PUSH2 0x649 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x743 JUMP JUMPDEST SWAP2 POP JUMPDEST SWAP1 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4D4 DUP4 PUSH2 0x4CE PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP9 PUSH7 0x1C6BF52634000 PUSH2 0x631 JUMP JUMPDEST SWAP1 PUSH2 0x625 JUMP JUMPDEST SWAP2 POP PUSH2 0x4F2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP7 PUSH6 0x5AF3107A4000 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0xA0 ADD MLOAD ISZERO PUSH2 0x50F JUMPI PUSH2 0x508 DUP3 DUP3 PUSH2 0x743 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x51D JUMPI PUSH2 0x61D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54A PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D PUSH8 0x853A0D2313C0000 DUP10 PUSH1 0x60 ADD MLOAD PUSH2 0x631 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x559 SWAP1 DUP8 PUSH2 0x625 JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 PUSH2 0x585 DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x26D PUSH8 0xDE0B6B3A7640000 DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0x631 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH8 0x6F05B59D3B20000 DUP2 GT ISZERO DUP1 ISZERO PUSH2 0x59C JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 0x5AE JUMPI PUSH1 0x0 SWAP4 POP PUSH1 0x0 SWAP3 POP PUSH2 0x61A JUMP JUMPDEST PUSH8 0x853A0D2313C0000 DUP2 LT DUP1 ISZERO PUSH2 0x5C2 JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 0x61A JUMPI PUSH1 0x0 PUSH2 0x5E6 PUSH1 0xA PUSH2 0x5E0 DUP5 PUSH8 0x6F05B59D3B20000 PUSH2 0x625 JUMP JUMPDEST SWAP1 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH2 0x5FE PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP8 DUP5 PUSH2 0x631 JUMP JUMPDEST SWAP5 POP PUSH2 0x616 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D DUP7 DUP5 PUSH2 0x631 JUMP JUMPDEST SWAP4 POP POP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x215 DUP3 DUP5 PUSH2 0x863 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x215 DUP3 DUP5 PUSH2 0x87A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x215 DUP3 DUP5 PUSH2 0x8B7 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x65B JUMPI POP DUP5 DUP4 GT ISZERO JUMPDEST PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53746172676174653A2062616C616E6365206F7574206F6620626F756E640000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x350 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6CD DUP7 DUP7 PUSH2 0x625 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6ED DUP9 PUSH2 0x6E7 DUP5 PUSH2 0x26D DUP14 PUSH2 0x5E0 DUP14 DUP13 PUSH2 0x625 JUMP JUMPDEST SWAP1 PUSH2 0x743 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x707 DUP10 PUSH2 0x6E7 DUP6 PUSH2 0x26D DUP15 PUSH2 0x5E0 DUP15 DUP13 PUSH2 0x625 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x715 DUP8 DUP8 PUSH2 0x625 JUMP JUMPDEST SWAP1 POP PUSH2 0x734 PUSH8 0xDE0B6B3A7640000 PUSH2 0x26D PUSH1 0x2 DUP2 DUP6 PUSH2 0x5E0 DUP10 DUP10 PUSH2 0x743 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x215 DUP3 DUP5 PUSH2 0x8F2 JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x75F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH2 0x100 DUP2 SLT ISZERO PUSH2 0x77B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x7D4 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP DUP5 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x811 PUSH1 0xA0 DUP7 ADD PUSH2 0x74F JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE SWAP3 POP PUSH2 0x824 PUSH1 0xC0 DUP6 ADD PUSH2 0x74F JUMP JUMPDEST SWAP2 POP PUSH1 0xE0 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x875 JUMPI PUSH2 0x875 PUSH2 0x834 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x8B2 JUMPI PUSH2 0x8B2 PUSH2 0x834 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x8ED JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x905 JUMPI PUSH2 0x905 PUSH2 0x834 JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 0xE6 SWAP11 GASPRICE DUP9 0xBA CALLER 0x25 0x24 SLOAD DUP15 TIMESTAMP 0xE 0xD3 0xB2 SLOAD SWAP1 0x2D 0xBB CALL 0x4A CALLDATASIZE 0xB6 0xD7 PUSH24 0x9E02D044C3FDC364736F6C634300080B0033000000000000 ","sourceMap":"405:7796:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;854:46;;889:11;854:46;;;;;160:25:33;;;148:2;133:18;854:46:31;;;;;;;;954:48;;993:9;954:48;;1066;;1106:8;1066:48;;703:45;;737:11;703:45;;754:44;;788:10;754:44;;906:42;;939:9;906:42;;1008:51;;1051:8;1008:51;;2234:679;;;;;;:::i;:::-;;:::i;:::-;;;;;;1713:13:33;;1695:32;;1783:4;1771:17;;;1765:24;1743:20;;;1736:54;1846:4;1834:17;;;1828:24;1806:20;;;1799:54;1909:4;1897:17;;;1891:24;1869:20;;;1862:54;;;;1682:3;1667:19;;1504:418;655:42:31;;693:4;655:42;;804:44;;839:9;804:44;;2234:679;2366:13;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2366:13:31;2448:29;2461:5;2468:8;2448:12;:29::i;:::-;2435:10;;;:42;2529:23;2591:35;2610:5;2617:8;2591:18;:35::i;:::-;2562:64;;;;-1:-1:-1;2705:50:31;;;;2736:8;;;2705:50;2833:54;2854:5;2861:8;2871:15;2833:20;:54::i;:::-;2822:7;;;2806:81;2807:13;;;2806:81;-1:-1:-1;2234:679:31;;;;;;:::o;2920:779::-;3031:16;3080:5;:20;;;3063:5;:13;;;:37;3059:76;;-1:-1:-1;3123:1:31;3116:8;;3059:76;3185:20;;3167:13;;;;3145:19;;3167:39;;:13;:17;:39::i;:::-;3145:61;;3371:2;3320:48;3354:5;:13;;;3320:29;3345:3;3320:5;:20;;;:24;;:29;;;;:::i;:::-;:33;;:48::i;:::-;:53;:95;;;;-1:-1:-1;3397:18:31;:11;3413:1;3397:15;:18::i;:::-;3377:17;:8;3390:3;3377:12;:17::i;:::-;:38;3320:95;3316:377;;;3489:46;3523:11;3489:29;3509:8;3489:5;:15;;;:19;;:29;;;;:::i;:46::-;3478:57;;3564:5;:15;;;3553:8;:26;3549:91;;;3610:5;:15;;;3599:26;;3549:91;3316:377;;;3681:1;3670:12;;3316:377;3049:650;2920:779;;;;;:::o;3705:1891::-;3874:20;;;;3927:18;;;;3822:7;;;;3964:25;;;;3956:66;;;;;;;2129:2:33;3956:66:31;;;2111:21:33;2168:2;2148:18;;;2141:30;2207;2187:18;;;2180:58;2255:18;;3956:66:31;;;;;;;;;4032:20;4055:27;:13;4073:8;4055:17;:27::i;:::-;4032:50;-1:-1:-1;4093:19:31;4115:42;693:4;4115:25;:12;737:11;4115:16;:25::i;:42::-;4093:64;-1:-1:-1;4167:19:31;4189:42;693:4;4189:25;:12;788:10;4189:16;:25::i;:42::-;4167:64;;4242:13;4269:23;4327:11;4311:12;:27;4307:1242;;4413:47;693:4;4413:30;:8;1051;4413:12;:30::i;:47::-;4405:55;;4492:5;4474:23;;4307:1242;;;4534:11;4518:12;:27;4514:1035;;4586:26;4631:11;4615:13;:27;:57;;4661:11;4615:57;;;4645:13;4615:57;4586:86;;4694:90;839:9;4722:1;4725:11;4738;4751:18;4771:12;4694:17;:90::i;:::-;4686:98;;4547:248;4514:1035;;;4863:11;4846:13;:28;4842:697;;4959:26;5004:11;4988:13;:27;:57;;5034:11;4988:57;;;5018:13;4988:57;4959:86;;5071:100;5081:89;839:9;5109:1;5112:11;5125;5138:18;5158:11;5081:17;:89::i;:::-;5071:5;;:9;:100::i;:::-;5063:108;;5223:91;5233:80;889:11;839:9;5271:11;5284:1;5287:11;5300:12;5233:17;:80::i;4842:697::-;5431:93;5441:82;889:11;839:9;5479:11;5492:1;5495:13;5510:12;5441:17;:82::i;:::-;5431:5;;:9;:93::i;:::-;5423:101;;4842:697;5566:5;;;;-1:-1:-1;3705:1891:31;-1:-1:-1;;;;;;;;3705:1891:31:o;5602:1791::-;5754:19;;5814:64;5862:15;5814:43;693:4;5814:26;:8;993:9;5814:12;:26::i;:43::-;:47;;:64::i;:::-;5800:78;-1:-1:-1;5896:37:31;693:4;5896:20;:8;939:9;5896:12;:20::i;:37::-;5888:45;;6024:5;:26;;;6020:116;;;6080:22;:11;6096:5;6080:15;:22::i;:::-;6066:36;;6124:1;6116:9;;6020:116;6150:13;;;;6146:76;;6184:27;;6146:76;6232:17;6289:54;693:4;6289:37;1160:8;6289:5;:18;;;:22;;:37;;;;:::i;:54::-;6252:20;;;;:34;;6277:8;6252:24;:34::i;:::-;:91;6232:111;;6353:29;6385:56;6427:5;:13;;;6385:37;693:4;6385:5;:20;;;:24;;:37;;;;:::i;:56::-;6353:88;;1106:8;6455:21;:38;;:54;;;;;6497:12;6455:54;6451:903;;;6574:1;6560:15;;6597:1;6589:9;;6451:903;;;1160:8;6620:21;:37;:53;;;;;6661:12;6620:53;6615:739;;;7121:15;7139:48;7184:2;7139:40;:21;1106:8;7139:25;:40::i;:::-;:44;;:48::i;:::-;7121:66;-1:-1:-1;7245:41:31;693:4;7245:24;:11;7121:66;7245:15;:24::i;:41::-;7231:55;-1:-1:-1;7308:35:31;693:4;7308:18;:5;7318:7;7308:9;:18::i;:35::-;7300:43;;6675:679;6615:739;5790:1603;;5602:1791;;;;;;;:::o;3122:96:8:-;3180:7;3206:5;3210:1;3206;:5;:::i;3465:96::-;3523:7;3549:5;3553:1;3549;:5;:::i;3850:96::-;3908:7;3934:5;3938:1;3934;:5;:::i;7399:800:31:-;7608:7;7643:11;7635:4;:19;;:44;;;;;7668:11;7658:6;:21;;7635:44;7627:87;;;;;;;3317:2:33;7627:87:31;;;3299:21:33;3356:2;3336:18;;;3329:30;3395:32;3375:18;;;3368:60;3445:18;;7627:87:31;3115:354:33;7627:87:31;7724:19;7746:28;:11;7762;7746:15;:28::i;:::-;7724:50;-1:-1:-1;7835:14:31;7852:65;7909:7;7852:52;7724:50;7852:35;7880:6;7852:23;:11;7868:6;7852:15;:23::i;:52::-;:56;;:65::i;:::-;7835:82;-1:-1:-1;7973:12:31;7988:63;8043:7;7988:50;8026:11;7988:33;8014:6;7988:21;:11;8004:4;7988:15;:21::i;:63::-;7973:78;-1:-1:-1;8090:14:31;8107:16;:6;8118:4;8107:10;:16::i;:::-;8090:33;-1:-1:-1;8140:52:31;693:4;8140:35;8173:1;8140:35;8090:33;8140:16;:6;8151:4;8140:10;:16::i;:52::-;8133:59;7399:800;-1:-1:-1;;;;;;;;;;;7399:800:31:o;2755:96:8:-;2813:7;2839:5;2843:1;2839;:5;:::i;196:160:33:-;261:20;;317:13;;310:21;300:32;;290:60;;346:1;343;336:12;290:60;196:160;;;:::o;361:1138::-;464:6;472;480;524:9;515:7;511:23;554:3;550:2;546:12;543:32;;;571:1;568;561:12;543:32;595:4;591:2;587:13;584:33;;;613:1;610;603:12;584:33;;646:2;640:9;688:4;680:6;676:17;759:6;747:10;744:22;723:18;711:10;708:34;705:62;702:242;;;800:77;797:1;790:88;901:4;898:1;891:15;929:4;926:1;919:15;702:242;964:10;960:2;953:22;;1012:9;999:23;991:6;984:39;1084:2;1073:9;1069:18;1056:32;1051:2;1043:6;1039:15;1032:57;1150:2;1139:9;1135:18;1122:32;1117:2;1109:6;1105:15;1098:57;1216:2;1205:9;1201:18;1188:32;1183:2;1175:6;1171:15;1164:57;1283:3;1272:9;1268:19;1255:33;1249:3;1241:6;1237:16;1230:59;1323:36;1354:3;1343:9;1339:19;1323:36;:::i;:::-;1317:3;1305:16;;1298:62;1309:6;-1:-1:-1;1404:37:33;1435:4;1420:20;;1404:37;:::i;:::-;1394:47;;1488:3;1477:9;1473:19;1460:33;1450:43;;361:1138;;;;;:::o;2284:184::-;2336:77;2333:1;2326:88;2433:4;2430:1;2423:15;2457:4;2454:1;2447:15;2473:125;2513:4;2541:1;2538;2535:8;2532:34;;;2546:18;;:::i;:::-;-1:-1:-1;2583:9:33;;2473:125::o;2603:228::-;2643:7;2769:1;2701:66;2697:74;2694:1;2691:81;2686:1;2679:9;2672:17;2668:105;2665:131;;;2776:18;;:::i;:::-;-1:-1:-1;2816:9:33;;2603:228::o;2836:274::-;2876:1;2902;2892:189;;2937:77;2934:1;2927:88;3038:4;3035:1;3028:15;3066:4;3063:1;3056:15;2892:189;-1:-1:-1;3095:9:33;;2836:274::o;3474:128::-;3514:3;3545:1;3541:6;3538:1;3535:13;3532:39;;;3551:18;;:::i;:::-;-1:-1:-1;3587:9:33;;3474:128::o"},"gasEstimates":{"creation":{"codeDepositCost":"473600","executionCost":"505","totalCost":"474105"},"external":{"DELTA_1()":"229","DELTA_2()":"251","DENOMINATOR()":"228","FIFTY_PERCENT()":"207","LAMBDA_1()":"250","LAMBDA_2()":"208","LP_FEE()":"207","PROTOCOL_FEE()":"230","PROTOCOL_SUBSIDY()":"229","SIXTY_PERCENT()":"251","getFees((uint256,uint256,uint256,uint256,uint256,bool),bool,uint256)":"infinite"},"internal":{"_getEqReward(struct BridgeState memory,uint256)":"infinite","_getEquilibriumFee(struct BridgeState memory,uint256)":"infinite","_getProtocolAndLpFee(struct BridgeState memory,uint256,uint256)":"infinite","_getTrapezoidArea(uint256,uint256,uint256,uint256,uint256,uint256)":"infinite"}},"methodIdentifiers":{"DELTA_1()":"3dad0dd5","DELTA_2()":"518a9f9f","DENOMINATOR()":"918f8674","FIFTY_PERCENT()":"1e04cbf3","LAMBDA_1()":"a810de6c","LAMBDA_2()":"012a1c2d","LP_FEE()":"5e3f2727","PROTOCOL_FEE()":"0b4501fd","PROTOCOL_SUBSIDY()":"7ba5c12f","SIXTY_PERCENT()":"886a9c50","getFees((uint256,uint256,uint256,uint256,uint256,bool),bool,uint256)":"8afbd378"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DELTA_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELTA_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIFTY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAMBDA_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAMBDA_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_SUBSIDY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIXTY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentAssetSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFeePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allocPointIsPositive\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountSD\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Fees\",\"name\":\"s\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/StargateFeeV04Extraction.sol\":\"StargateFeeV04Extraction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/misc/StargateFeeV04Extraction.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct BridgeState {\\n    uint256 currentAssetSD;\\n    uint256 lpAsset;\\n    uint256 eqFeePool;\\n    uint256 idealBalance;\\n    uint256 currentBalance;\\n    bool allocPointIsPositive;\\n}\\n\\nstruct Fees {\\n    uint256 eqFee;\\n    uint256 eqReward;\\n    uint256 lpFee;\\n    uint256 protocolFee;\\n}\\n\\ncontract StargateFeeV04Extraction {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n\\n    // equilibrium func params. all in BPs * 10 ^ 2, i.e. 1 % = 10 ^ 6 units\\n    uint256 public constant DENOMINATOR = 1e18;\\n    uint256 public constant DELTA_1 = 6000 * 1e14;\\n    uint256 public constant DELTA_2 = 500 * 1e14;\\n    uint256 public constant LAMBDA_1 = 40 * 1e14;\\n    uint256 public constant LAMBDA_2 = 9960 * 1e14;\\n    uint256 public constant LP_FEE = 10 * 1e13;\\n    uint256 public constant PROTOCOL_FEE = 50 * 1e13;\\n    uint256 public constant PROTOCOL_SUBSIDY = 3 * 1e13;\\n\\n    uint256 public constant FIFTY_PERCENT = 5 * 1e17;\\n    uint256 public constant SIXTY_PERCENT = 6 * 1e17;\\n\\n    constructor() {}\\n\\n    // function getBridgeState(\\n    //     uint256 srcPoolId,\\n    //     uint256 dstPoolId,\\n    //     uint16 dstChainId,\\n    //     address from\\n    // ) external view returns (BridgeState memory state, bool whitelisted) {        \\n    //     IStargateFeeLibrary feeLibrary = STARGATE_POOL_ADDRESS[srcChainId][srcBridgeToken.address].feeLibrary()\\n    //     Pool pool = feeLibrary.factory().getPool(srcPoolId);\\n    //     state.currentAssetSD = IERC20(pool.token()).balanceOf(address(pool)).div(pool.convertRate());\\n    //     state.lpAsset = pool.totalLiquidity();\\n    //     state.eqFeePool = pool.eqFeePool();\\n\\n    //     Pool.ChainPath memory chainPath = pool.getChainPath(dstChainId, dstPoolId);\\n    //     state.idealBalance = chainPath.idealBalance;\\n    //     state.currentBalance = chainPath.balance;\\n    //     (, uint256 allocPoint, , ) = feeLibrary.lpStaking().poolInfo(feeLibrary.poolIdToLpId(srcPoolId));\\n    //     state.allocPointIsPositive = allocPoint > 0\\n    //     whitelisted = feeLibrary.whitelist(from);\\n    // }\\n\\n    function getFees(\\n        BridgeState memory state,\\n        bool whitelisted,\\n        uint256 amountSD\\n    ) external pure returns (Fees memory s) {\\n        // calculate the equilibrium reward\\n        s.eqReward = _getEqReward(state, amountSD);\\n\\n        // calculate the equilibrium fee\\n        uint256 protocolSubsidy;\\n        (s.eqFee, protocolSubsidy) = _getEquilibriumFee(state, amountSD);\\n\\n        // return no protocol/lp fees for addresses in this mapping\\n        if (whitelisted) {\\n            return s;\\n        }\\n\\n        // calculate protocol and lp fee\\n        (s.protocolFee, s.lpFee) = _getProtocolAndLpFee(state, amountSD, protocolSubsidy);\\n\\n        return s;\\n    }\\n \\n    function _getEqReward(\\n        BridgeState memory state,\\n        uint256 amountSD\\n    ) internal pure returns (uint256 eqReward) {\\n        if (state.lpAsset <= state.currentAssetSD) {\\n            return 0;\\n        }\\n\\n        uint256 poolDeficit = state.lpAsset.sub(state.currentAssetSD);\\n        // assets in pool are < 75% of liquidity provided & amount transferred > 2% of pool deficit\\n        if (state.currentAssetSD.mul(100).div(state.lpAsset) < 75 && amountSD.mul(100) > poolDeficit.mul(2)) {\\n            // reward capped at rewardPoolSize\\n            eqReward = state.eqFeePool.mul(amountSD).div(poolDeficit);\\n            if (eqReward > state.eqFeePool) {\\n                eqReward = state.eqFeePool;\\n            }\\n        } else {\\n            eqReward = 0;\\n        }\\n    }\\n\\n    function _getEquilibriumFee(\\n        BridgeState memory state,\\n        uint256 amountSD\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 beforeBalance = state.currentBalance;\\n        uint256 idealBalance = state.idealBalance;\\n\\n        require(beforeBalance >= amountSD, \\\"Stargate: not enough balance\\\");\\n        uint256 afterBalance = beforeBalance.sub(amountSD);\\n\\n        uint256 safeZoneMax = idealBalance.mul(DELTA_1).div(DENOMINATOR);\\n        uint256 safeZoneMin = idealBalance.mul(DELTA_2).div(DENOMINATOR);\\n\\n        uint256 eqFee = 0;\\n        uint256 protocolSubsidy = 0;\\n\\n        if (afterBalance >= safeZoneMax) {\\n            // no fee zone, protocol subsidize it.\\n            eqFee = amountSD.mul(PROTOCOL_SUBSIDY).div(DENOMINATOR);\\n            protocolSubsidy = eqFee;\\n        } else if (afterBalance >= safeZoneMin) {\\n            // safe zone\\n            uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\\n            eqFee = _getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, afterBalance);\\n        } else {\\n            // danger zone\\n            if (beforeBalance >= safeZoneMin) {\\n                // across 2 or 3 zones\\n                // part 1\\n                uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, safeZoneMin));\\n                // part 2\\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, safeZoneMin, afterBalance));\\n            } else {\\n                // only in danger zone\\n                // part 2 only\\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, beforeBalance, afterBalance));\\n            }\\n        }\\n        return (eqFee, protocolSubsidy);\\n    }\\n\\n    function _getProtocolAndLpFee(\\n        BridgeState memory state,\\n        uint256 amountSD,\\n        uint256 protocolSubsidy\\n    ) internal pure returns (uint256 protocolFee, uint256 lpFee) {\\n        protocolFee = amountSD.mul(PROTOCOL_FEE).div(DENOMINATOR).sub(protocolSubsidy);\\n        lpFee = amountSD.mul(LP_FEE).div(DENOMINATOR);\\n\\n        // when there are active emissions, give the lp fee to the protocol\\n        if (state.allocPointIsPositive) {\\n            protocolFee = protocolFee.add(lpFee);\\n            lpFee = 0;\\n        }\\n\\n        if (state.lpAsset == 0) {\\n            return (protocolFee, lpFee);\\n        }\\n\\n        bool isAboveIdeal = state.currentBalance.sub(amountSD) > state.idealBalance.mul(SIXTY_PERCENT).div(DENOMINATOR);\\n        uint256 currentAssetNumerated = state.currentAssetSD.mul(DENOMINATOR).div(state.lpAsset);\\n        if (currentAssetNumerated <= FIFTY_PERCENT && isAboveIdeal) {\\n            // x <= 50% => no fees\\n            protocolFee = 0;\\n            lpFee = 0;\\n        } else if ( currentAssetNumerated < SIXTY_PERCENT && isAboveIdeal) {\\n            // 50% > x < 60% => scaled fees &&\\n            // the resulting transfer does not drain the pathway below 60% o`f the ideal balance,\\n\\n            // reduce the protocol and lp fee linearly\\n            // Examples:\\n            // currentAsset == 101, lpAsset == 200 -> haircut == 5%\\n            // currentAsset == 115, lpAsset == 200 -> haircut == 75%\\n            // currentAsset == 119, lpAsset == 200 -> haircut == 95%\\n            uint256 haircut = currentAssetNumerated.sub(FIFTY_PERCENT).mul(10); // scale the percentage by 10\\n            protocolFee = protocolFee.mul(haircut).div(DENOMINATOR);\\n            lpFee = lpFee.mul(haircut).div(DENOMINATOR);\\n        }\\n\\n        // x > 60% => full fees\\n    }\\n\\n    function _getTrapezoidArea(\\n        uint256 lambda,\\n        uint256 yOffset,\\n        uint256 xUpperBound,\\n        uint256 xLowerBound,\\n        uint256 xStart,\\n        uint256 xEnd\\n    ) internal pure returns (uint256) {\\n        require(xEnd >= xLowerBound && xStart <= xUpperBound, \\\"Stargate: balance out of bound\\\");\\n        uint256 xBoundWidth = xUpperBound.sub(xLowerBound);\\n\\n        // xStartDrift = xUpperBound.sub(xStart);\\n        uint256 yStart = xUpperBound.sub(xStart).mul(lambda).div(xBoundWidth).add(yOffset);\\n\\n        // xEndDrift = xUpperBound.sub(xEnd)\\n        uint256 yEnd = xUpperBound.sub(xEnd).mul(lambda).div(xBoundWidth).add(yOffset);\\n\\n        // compute the area\\n        uint256 deltaX = xStart.sub(xEnd);\\n        return yStart.add(yEnd).mul(deltaX).div(2).div(DENOMINATOR);\\n    }\\n}\",\"keccak256\":\"0x2f506eec32628599b1247ae30d5bb1ba4f1092676b7ac282185b6230e5c8234b\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/MockERC20.sol":{"MockERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_47":{"entryPoint":null,"id":47,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":280,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:396:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"69:325:33","statements":[{"nodeType":"YulAssignment","src":"79:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"93:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"96:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"89:3:33"},"nodeType":"YulFunctionCall","src":"89:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"79:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"110:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"140:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"146:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"136:3:33"},"nodeType":"YulFunctionCall","src":"136:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"114:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"187:31:33","statements":[{"nodeType":"YulAssignment","src":"189:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"203:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"211:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"199:3:33"},"nodeType":"YulFunctionCall","src":"199:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"189:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"167:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"160:6:33"},"nodeType":"YulFunctionCall","src":"160:26:33"},"nodeType":"YulIf","src":"157:61:33"},{"body":{"nodeType":"YulBlock","src":"277:111:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"298:1:33","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"305:3:33","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"310:10:33","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"301:3:33"},"nodeType":"YulFunctionCall","src":"301:20:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"291:6:33"},"nodeType":"YulFunctionCall","src":"291:31:33"},"nodeType":"YulExpressionStatement","src":"291:31:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"342:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"345:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"335:6:33"},"nodeType":"YulFunctionCall","src":"335:15:33"},"nodeType":"YulExpressionStatement","src":"335:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"370:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"373:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"363:6:33"},"nodeType":"YulFunctionCall","src":"363:15:33"},"nodeType":"YulExpressionStatement","src":"363:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"233:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"256:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"264:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"253:2:33"},"nodeType":"YulFunctionCall","src":"253:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"230:2:33"},"nodeType":"YulFunctionCall","src":"230:38:33"},"nodeType":"YulIf","src":"227:161:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"49:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"58:6:33","type":""}],"src":"14:380:33"}]},"contents":"{\n    { }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405180604001604052806007815260200166546f6b656e203160c81b81525060405180604001604052806003815260200162544f4b60e81b815250816003908051906020019061006392919061007f565b50805161007790600490602084019061007f565b505050610153565b82805461008b90610118565b90600052602060002090601f0160209004810192826100ad57600085556100f3565b82601f106100c657805160ff19168380011785556100f3565b828001600101855582156100f3579182015b828111156100f35782518255916020019190600101906100d8565b506100ff929150610103565b5090565b5b808211156100ff5760008155600101610104565b600181811c9082168061012c57607f821691505b6020821081141561014d57634e487b7160e01b600052602260045260246000fd5b50919050565b610b26806101626000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e39190610906565b60405180910390f35b6100ff6100fa3660046109a2565b610292565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046109cc565b6102aa565b604051601281526020016100e3565b6100ff6101513660046109a2565b6102ce565b610113610164366004610a08565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100d661031a565b6100ff6101a23660046109a2565b610329565b6100ff6101b53660046109a2565b6103ff565b6101136101c8366004610a2a565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461020f90610a5d565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610a5d565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b6000336102a081858561040d565b5060019392505050565b6000336102b88582856105c0565b6102c3858585610697565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102a09082908690610315908790610ab1565b61040d565b60606004805461020f90610a5d565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156103f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c3828686840361040d565b6000336102a0818585610697565b73ffffffffffffffffffffffffffffffffffffffff83166104af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff8216610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106915781811015610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103e9565b610691848484840361040d565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff82166107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610691565b600060208083528351808285015260005b8181101561093357858101830151858201604001528201610917565b81811115610945576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461099d57600080fd5b919050565b600080604083850312156109b557600080fd5b6109be83610979565b946020939093013593505050565b6000806000606084860312156109e157600080fd5b6109ea84610979565b92506109f860208501610979565b9150604084013590509250925092565b600060208284031215610a1a57600080fd5b610a2382610979565b9392505050565b60008060408385031215610a3d57600080fd5b610a4683610979565b9150610a5460208401610979565b90509250929050565b600181811c90821680610a7157607f821691505b60208210811415610aab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008219821115610aeb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220946360dc5ceb9a9c088181ed43f0d67db68f71e886d1f6093780cd1c30c10fa164736f6c634300080b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x546F6B656E2031 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x544F4B PUSH1 0xE8 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x63 SWAP3 SWAP2 SWAP1 PUSH2 0x7F JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x77 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x7F JUMP JUMPDEST POP POP POP PUSH2 0x153 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x8B SWAP1 PUSH2 0x118 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0xAD JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0xF3 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0xC6 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0xF3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xF3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xF3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xD8 JUMP JUMPDEST POP PUSH2 0xFF SWAP3 SWAP2 POP PUSH2 0x103 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xFF JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x104 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x12C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x14D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB26 DUP1 PUSH2 0x162 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x906 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x9CC JUMP JUMPDEST PUSH2 0x2AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x2CE JUMP JUMPDEST PUSH2 0x113 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x31A JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x329 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x3FF JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0xA2A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x20F SWAP1 PUSH2 0xA5D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x23B SWAP1 PUSH2 0xA5D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x288 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x25D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x288 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x26B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP2 DUP6 DUP6 PUSH2 0x40D JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2B8 DUP6 DUP3 DUP6 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C3 DUP6 DUP6 DUP6 PUSH2 0x697 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x2A0 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x315 SWAP1 DUP8 SWAP1 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x40D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x20F SWAP1 PUSH2 0xA5D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2C3 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x40D JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP2 DUP6 DUP6 PUSH2 0x697 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x4AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x691 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x684 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH2 0x691 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x40D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x73A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x893 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x691 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x933 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x917 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x99D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9BE DUP4 PUSH2 0x979 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9EA DUP5 PUSH2 0x979 JUMP JUMPDEST SWAP3 POP PUSH2 0x9F8 PUSH1 0x20 DUP6 ADD PUSH2 0x979 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA23 DUP3 PUSH2 0x979 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA46 DUP4 PUSH2 0x979 JUMP JUMPDEST SWAP2 POP PUSH2 0xA54 PUSH1 0x20 DUP5 ADD PUSH2 0x979 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xA71 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xAAB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xAEB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 PUSH4 0x60DC5CEB SWAP11 SWAP13 ADDMOD DUP2 DUP2 0xED NUMBER CREATE 0xD6 PUSH30 0xB68F71E886D1F6093780CD1C30C10FA164736F6C634300080B0033000000 ","sourceMap":"128:51:32:-:0;;;;;;;;;;;;;1980:113:1;;;;;;;;;;;;;-1:-1:-1;;;1980:113:1;;;;;;;;;;;;;;;;-1:-1:-1;;;1980:113:1;;;2054:5;2046;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2069:17:1;;;;:7;;:17;;;;;:::i;:::-;;1980:113;;128:51:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;128:51:32;;;-1:-1:-1;128:51:32;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:380:33;93:1;89:12;;;;136;;;157:61;;211:4;203:6;199:17;189:27;;157:61;264:2;256:6;253:14;233:18;230:38;227:161;;;310:10;305:3;301:20;298:1;291:31;345:4;342:1;335:15;373:4;370:1;363:15;227:161;;14:380;;;:::o;:::-;128:51:32;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_588":{"entryPoint":null,"id":588,"parameterSlots":3,"returnSlots":0},"@_approve_523":{"entryPoint":1037,"id":523,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_577":{"entryPoint":null,"id":577,"parameterSlots":3,"returnSlots":0},"@_msgSender_1446":{"entryPoint":null,"id":1446,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_566":{"entryPoint":1472,"id":566,"parameterSlots":3,"returnSlots":0},"@_transfer_349":{"entryPoint":1687,"id":349,"parameterSlots":3,"returnSlots":0},"@allowance_144":{"entryPoint":null,"id":144,"parameterSlots":2,"returnSlots":1},"@approve_169":{"entryPoint":658,"id":169,"parameterSlots":2,"returnSlots":1},"@balanceOf_101":{"entryPoint":null,"id":101,"parameterSlots":1,"returnSlots":1},"@decimals_77":{"entryPoint":null,"id":77,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_272":{"entryPoint":809,"id":272,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_231":{"entryPoint":718,"id":231,"parameterSlots":2,"returnSlots":1},"@name_57":{"entryPoint":512,"id":57,"parameterSlots":0,"returnSlots":1},"@symbol_67":{"entryPoint":794,"id":67,"parameterSlots":0,"returnSlots":1},"@totalSupply_87":{"entryPoint":null,"id":87,"parameterSlots":0,"returnSlots":1},"@transferFrom_202":{"entryPoint":682,"id":202,"parameterSlots":3,"returnSlots":1},"@transfer_126":{"entryPoint":1023,"id":126,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":2425,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2568,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":2602,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":2508,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2466,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2310,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2737,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":2653,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6002:33","statements":[{"nodeType":"YulBlock","src":"6:3:33","statements":[]},{"body":{"nodeType":"YulBlock","src":"135:535:33","statements":[{"nodeType":"YulVariableDeclaration","src":"145:12:33","value":{"kind":"number","nodeType":"YulLiteral","src":"155:2:33","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"149:2:33","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"184:2:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"166:6:33"},"nodeType":"YulFunctionCall","src":"166:21:33"},"nodeType":"YulExpressionStatement","src":"166:21:33"},{"nodeType":"YulVariableDeclaration","src":"196:27:33","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"216:6:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:33"},"nodeType":"YulFunctionCall","src":"210:13:33"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"200:6:33","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"243:9:33"},{"name":"_1","nodeType":"YulIdentifier","src":"254:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"239:3:33"},"nodeType":"YulFunctionCall","src":"239:18:33"},{"name":"length","nodeType":"YulIdentifier","src":"259:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"232:6:33"},"nodeType":"YulFunctionCall","src":"232:34:33"},"nodeType":"YulExpressionStatement","src":"232:34:33"},{"nodeType":"YulVariableDeclaration","src":"275:10:33","value":{"kind":"number","nodeType":"YulLiteral","src":"284:1:33","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"279:1:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"344:90:33","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"373:9:33"},{"name":"i","nodeType":"YulIdentifier","src":"384:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"369:3:33"},"nodeType":"YulFunctionCall","src":"369:17:33"},{"kind":"number","nodeType":"YulLiteral","src":"388:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"365:3:33"},"nodeType":"YulFunctionCall","src":"365:26:33"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:33"},{"name":"i","nodeType":"YulIdentifier","src":"415:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"403:3:33"},"nodeType":"YulFunctionCall","src":"403:14:33"},{"name":"_1","nodeType":"YulIdentifier","src":"419:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"399:3:33"},"nodeType":"YulFunctionCall","src":"399:23:33"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"393:5:33"},"nodeType":"YulFunctionCall","src":"393:30:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"358:6:33"},"nodeType":"YulFunctionCall","src":"358:66:33"},"nodeType":"YulExpressionStatement","src":"358:66:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"305:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"308:6:33"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"302:2:33"},"nodeType":"YulFunctionCall","src":"302:13:33"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"316:19:33","statements":[{"nodeType":"YulAssignment","src":"318:15:33","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"327:1:33"},{"name":"_1","nodeType":"YulIdentifier","src":"330:2:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"323:3:33"},"nodeType":"YulFunctionCall","src":"323:10:33"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"318:1:33"}]}]},"pre":{"nodeType":"YulBlock","src":"298:3:33","statements":[]},"src":"294:140:33"},{"body":{"nodeType":"YulBlock","src":"468:66:33","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"497:9:33"},{"name":"length","nodeType":"YulIdentifier","src":"508:6:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"493:3:33"},"nodeType":"YulFunctionCall","src":"493:22:33"},{"kind":"number","nodeType":"YulLiteral","src":"517:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"489:3:33"},"nodeType":"YulFunctionCall","src":"489:31:33"},{"kind":"number","nodeType":"YulLiteral","src":"522:1:33","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"482:6:33"},"nodeType":"YulFunctionCall","src":"482:42:33"},"nodeType":"YulExpressionStatement","src":"482:42:33"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"449:1:33"},{"name":"length","nodeType":"YulIdentifier","src":"452:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"446:2:33"},"nodeType":"YulFunctionCall","src":"446:13:33"},"nodeType":"YulIf","src":"443:91:33"},{"nodeType":"YulAssignment","src":"543:121:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"559:9:33"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"578:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"586:2:33","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"574:3:33"},"nodeType":"YulFunctionCall","src":"574:15:33"},{"kind":"number","nodeType":"YulLiteral","src":"591:66:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"570:3:33"},"nodeType":"YulFunctionCall","src":"570:88:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"555:3:33"},"nodeType":"YulFunctionCall","src":"555:104:33"},{"kind":"number","nodeType":"YulLiteral","src":"661:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"551:3:33"},"nodeType":"YulFunctionCall","src":"551:113:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"543:4:33"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"104:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"115:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"126:4:33","type":""}],"src":"14:656:33"},{"body":{"nodeType":"YulBlock","src":"724:147:33","statements":[{"nodeType":"YulAssignment","src":"734:29:33","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"756:6:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"743:12:33"},"nodeType":"YulFunctionCall","src":"743:20:33"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"734:5:33"}]},{"body":{"nodeType":"YulBlock","src":"849:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"858:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"861:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"851:6:33"},"nodeType":"YulFunctionCall","src":"851:12:33"},"nodeType":"YulExpressionStatement","src":"851:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"785:5:33"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"796:5:33"},{"kind":"number","nodeType":"YulLiteral","src":"803:42:33","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"792:3:33"},"nodeType":"YulFunctionCall","src":"792:54:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"782:2:33"},"nodeType":"YulFunctionCall","src":"782:65:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"775:6:33"},"nodeType":"YulFunctionCall","src":"775:73:33"},"nodeType":"YulIf","src":"772:93:33"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"703:6:33","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"714:5:33","type":""}],"src":"675:196:33"},{"body":{"nodeType":"YulBlock","src":"963:167:33","statements":[{"body":{"nodeType":"YulBlock","src":"1009:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1018:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1021:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1011:6:33"},"nodeType":"YulFunctionCall","src":"1011:12:33"},"nodeType":"YulExpressionStatement","src":"1011:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"984:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"993:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"980:3:33"},"nodeType":"YulFunctionCall","src":"980:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1005:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"976:3:33"},"nodeType":"YulFunctionCall","src":"976:32:33"},"nodeType":"YulIf","src":"973:52:33"},{"nodeType":"YulAssignment","src":"1034:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1063:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1044:18:33"},"nodeType":"YulFunctionCall","src":"1044:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1034:6:33"}]},{"nodeType":"YulAssignment","src":"1082:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1109:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1120:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1105:3:33"},"nodeType":"YulFunctionCall","src":"1105:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1092:12:33"},"nodeType":"YulFunctionCall","src":"1092:32:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1082:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"921:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"932:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"944:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"952:6:33","type":""}],"src":"876:254:33"},{"body":{"nodeType":"YulBlock","src":"1230:92:33","statements":[{"nodeType":"YulAssignment","src":"1240:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1252:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1263:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1248:3:33"},"nodeType":"YulFunctionCall","src":"1248:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1240:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1282:9:33"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1307:6:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1300:6:33"},"nodeType":"YulFunctionCall","src":"1300:14:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1293:6:33"},"nodeType":"YulFunctionCall","src":"1293:22:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1275:6:33"},"nodeType":"YulFunctionCall","src":"1275:41:33"},"nodeType":"YulExpressionStatement","src":"1275:41:33"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1199:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1210:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1221:4:33","type":""}],"src":"1135:187:33"},{"body":{"nodeType":"YulBlock","src":"1428:76:33","statements":[{"nodeType":"YulAssignment","src":"1438:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1450:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1461:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1446:3:33"},"nodeType":"YulFunctionCall","src":"1446:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1438:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1480:9:33"},{"name":"value0","nodeType":"YulIdentifier","src":"1491:6:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1473:6:33"},"nodeType":"YulFunctionCall","src":"1473:25:33"},"nodeType":"YulExpressionStatement","src":"1473:25:33"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1397:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1408:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1419:4:33","type":""}],"src":"1327:177:33"},{"body":{"nodeType":"YulBlock","src":"1613:224:33","statements":[{"body":{"nodeType":"YulBlock","src":"1659:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1668:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1671:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1661:6:33"},"nodeType":"YulFunctionCall","src":"1661:12:33"},"nodeType":"YulExpressionStatement","src":"1661:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1634:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"1643:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1630:3:33"},"nodeType":"YulFunctionCall","src":"1630:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"1655:2:33","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1626:3:33"},"nodeType":"YulFunctionCall","src":"1626:32:33"},"nodeType":"YulIf","src":"1623:52:33"},{"nodeType":"YulAssignment","src":"1684:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1713:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1694:18:33"},"nodeType":"YulFunctionCall","src":"1694:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1684:6:33"}]},{"nodeType":"YulAssignment","src":"1732:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1765:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1776:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1761:3:33"},"nodeType":"YulFunctionCall","src":"1761:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1742:18:33"},"nodeType":"YulFunctionCall","src":"1742:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1732:6:33"}]},{"nodeType":"YulAssignment","src":"1789:42:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1816:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1827:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1812:3:33"},"nodeType":"YulFunctionCall","src":"1812:18:33"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1799:12:33"},"nodeType":"YulFunctionCall","src":"1799:32:33"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1789:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1563:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1574:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1586:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1594:6:33","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1602:6:33","type":""}],"src":"1509:328:33"},{"body":{"nodeType":"YulBlock","src":"1939:87:33","statements":[{"nodeType":"YulAssignment","src":"1949:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1961:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"1972:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1957:3:33"},"nodeType":"YulFunctionCall","src":"1957:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1949:4:33"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1991:9:33"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2006:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2014:4:33","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2002:3:33"},"nodeType":"YulFunctionCall","src":"2002:17:33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1984:6:33"},"nodeType":"YulFunctionCall","src":"1984:36:33"},"nodeType":"YulExpressionStatement","src":"1984:36:33"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1908:9:33","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1919:6:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1930:4:33","type":""}],"src":"1842:184:33"},{"body":{"nodeType":"YulBlock","src":"2101:116:33","statements":[{"body":{"nodeType":"YulBlock","src":"2147:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2156:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2159:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2149:6:33"},"nodeType":"YulFunctionCall","src":"2149:12:33"},"nodeType":"YulExpressionStatement","src":"2149:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2122:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2131:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2118:3:33"},"nodeType":"YulFunctionCall","src":"2118:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2143:2:33","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2114:3:33"},"nodeType":"YulFunctionCall","src":"2114:32:33"},"nodeType":"YulIf","src":"2111:52:33"},{"nodeType":"YulAssignment","src":"2172:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2201:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2182:18:33"},"nodeType":"YulFunctionCall","src":"2182:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2172:6:33"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2067:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2078:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2090:6:33","type":""}],"src":"2031:186:33"},{"body":{"nodeType":"YulBlock","src":"2309:173:33","statements":[{"body":{"nodeType":"YulBlock","src":"2355:16:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2364:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2367:1:33","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2357:6:33"},"nodeType":"YulFunctionCall","src":"2357:12:33"},"nodeType":"YulExpressionStatement","src":"2357:12:33"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2330:7:33"},{"name":"headStart","nodeType":"YulIdentifier","src":"2339:9:33"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2326:3:33"},"nodeType":"YulFunctionCall","src":"2326:23:33"},{"kind":"number","nodeType":"YulLiteral","src":"2351:2:33","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2322:3:33"},"nodeType":"YulFunctionCall","src":"2322:32:33"},"nodeType":"YulIf","src":"2319:52:33"},{"nodeType":"YulAssignment","src":"2380:39:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2409:9:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2390:18:33"},"nodeType":"YulFunctionCall","src":"2390:29:33"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2380:6:33"}]},{"nodeType":"YulAssignment","src":"2428:48:33","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2461:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"2472:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2457:3:33"},"nodeType":"YulFunctionCall","src":"2457:18:33"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2438:18:33"},"nodeType":"YulFunctionCall","src":"2438:38:33"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2428:6:33"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2267:9:33","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2278:7:33","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2290:6:33","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2298:6:33","type":""}],"src":"2222:260:33"},{"body":{"nodeType":"YulBlock","src":"2542:382:33","statements":[{"nodeType":"YulAssignment","src":"2552:22:33","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2566:1:33","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2569:4:33"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2562:3:33"},"nodeType":"YulFunctionCall","src":"2562:12:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2552:6:33"}]},{"nodeType":"YulVariableDeclaration","src":"2583:38:33","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2613:4:33"},{"kind":"number","nodeType":"YulLiteral","src":"2619:1:33","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2609:3:33"},"nodeType":"YulFunctionCall","src":"2609:12:33"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2587:18:33","type":""}]},{"body":{"nodeType":"YulBlock","src":"2660:31:33","statements":[{"nodeType":"YulAssignment","src":"2662:27:33","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2676:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2684:4:33","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2672:3:33"},"nodeType":"YulFunctionCall","src":"2672:17:33"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2662:6:33"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2640:18:33"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2633:6:33"},"nodeType":"YulFunctionCall","src":"2633:26:33"},"nodeType":"YulIf","src":"2630:61:33"},{"body":{"nodeType":"YulBlock","src":"2750:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2774:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2764:6:33"},"nodeType":"YulFunctionCall","src":"2764:88:33"},"nodeType":"YulExpressionStatement","src":"2764:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2872:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2875:4:33","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2865:6:33"},"nodeType":"YulFunctionCall","src":"2865:15:33"},"nodeType":"YulExpressionStatement","src":"2865:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2900:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2903:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2893:6:33"},"nodeType":"YulFunctionCall","src":"2893:15:33"},"nodeType":"YulExpressionStatement","src":"2893:15:33"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2706:18:33"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2729:6:33"},{"kind":"number","nodeType":"YulLiteral","src":"2737:2:33","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2726:2:33"},"nodeType":"YulFunctionCall","src":"2726:14:33"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2703:2:33"},"nodeType":"YulFunctionCall","src":"2703:38:33"},"nodeType":"YulIf","src":"2700:218:33"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2522:4:33","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2531:6:33","type":""}],"src":"2487:437:33"},{"body":{"nodeType":"YulBlock","src":"2977:234:33","statements":[{"body":{"nodeType":"YulBlock","src":"3012:168:33","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3033:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3036:77:33","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3026:6:33"},"nodeType":"YulFunctionCall","src":"3026:88:33"},"nodeType":"YulExpressionStatement","src":"3026:88:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3134:1:33","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3137:4:33","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3127:6:33"},"nodeType":"YulFunctionCall","src":"3127:15:33"},"nodeType":"YulExpressionStatement","src":"3127:15:33"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3162:1:33","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3165:4:33","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3155:6:33"},"nodeType":"YulFunctionCall","src":"3155:15:33"},"nodeType":"YulExpressionStatement","src":"3155:15:33"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2993:1:33"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3000:1:33"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2996:3:33"},"nodeType":"YulFunctionCall","src":"2996:6:33"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2990:2:33"},"nodeType":"YulFunctionCall","src":"2990:13:33"},"nodeType":"YulIf","src":"2987:193:33"},{"nodeType":"YulAssignment","src":"3189:16:33","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3200:1:33"},{"name":"y","nodeType":"YulIdentifier","src":"3203:1:33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3196:3:33"},"nodeType":"YulFunctionCall","src":"3196:9:33"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"3189:3:33"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2960:1:33","type":""},{"name":"y","nodeType":"YulTypedName","src":"2963:1:33","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"2969:3:33","type":""}],"src":"2929:282:33"},{"body":{"nodeType":"YulBlock","src":"3390:227:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3407:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3418:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3400:6:33"},"nodeType":"YulFunctionCall","src":"3400:21:33"},"nodeType":"YulExpressionStatement","src":"3400:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3441:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3452:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3437:3:33"},"nodeType":"YulFunctionCall","src":"3437:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"3457:2:33","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3430:6:33"},"nodeType":"YulFunctionCall","src":"3430:30:33"},"nodeType":"YulExpressionStatement","src":"3430:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3480:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3491:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3476:3:33"},"nodeType":"YulFunctionCall","src":"3476:18:33"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"3496:34:33","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3469:6:33"},"nodeType":"YulFunctionCall","src":"3469:62:33"},"nodeType":"YulExpressionStatement","src":"3469:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3551:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3562:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3547:3:33"},"nodeType":"YulFunctionCall","src":"3547:18:33"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"3567:7:33","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3540:6:33"},"nodeType":"YulFunctionCall","src":"3540:35:33"},"nodeType":"YulExpressionStatement","src":"3540:35:33"},{"nodeType":"YulAssignment","src":"3584:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3596:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3607:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3592:3:33"},"nodeType":"YulFunctionCall","src":"3592:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3584:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3367:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3381:4:33","type":""}],"src":"3216:401:33"},{"body":{"nodeType":"YulBlock","src":"3796:226:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3813:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3824:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3806:6:33"},"nodeType":"YulFunctionCall","src":"3806:21:33"},"nodeType":"YulExpressionStatement","src":"3806:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3847:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3858:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3843:3:33"},"nodeType":"YulFunctionCall","src":"3843:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"3863:2:33","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3836:6:33"},"nodeType":"YulFunctionCall","src":"3836:30:33"},"nodeType":"YulExpressionStatement","src":"3836:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3886:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3897:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3882:3:33"},"nodeType":"YulFunctionCall","src":"3882:18:33"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"3902:34:33","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3875:6:33"},"nodeType":"YulFunctionCall","src":"3875:62:33"},"nodeType":"YulExpressionStatement","src":"3875:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3957:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"3968:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3953:3:33"},"nodeType":"YulFunctionCall","src":"3953:18:33"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"3973:6:33","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3946:6:33"},"nodeType":"YulFunctionCall","src":"3946:34:33"},"nodeType":"YulExpressionStatement","src":"3946:34:33"},{"nodeType":"YulAssignment","src":"3989:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4001:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4012:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3997:3:33"},"nodeType":"YulFunctionCall","src":"3997:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3989:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3773:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3787:4:33","type":""}],"src":"3622:400:33"},{"body":{"nodeType":"YulBlock","src":"4201:224:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4218:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4229:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4211:6:33"},"nodeType":"YulFunctionCall","src":"4211:21:33"},"nodeType":"YulExpressionStatement","src":"4211:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4252:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4263:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4248:3:33"},"nodeType":"YulFunctionCall","src":"4248:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"4268:2:33","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4241:6:33"},"nodeType":"YulFunctionCall","src":"4241:30:33"},"nodeType":"YulExpressionStatement","src":"4241:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4291:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4302:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4287:3:33"},"nodeType":"YulFunctionCall","src":"4287:18:33"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"4307:34:33","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4280:6:33"},"nodeType":"YulFunctionCall","src":"4280:62:33"},"nodeType":"YulExpressionStatement","src":"4280:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4362:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4373:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4358:3:33"},"nodeType":"YulFunctionCall","src":"4358:18:33"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"4378:4:33","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4351:6:33"},"nodeType":"YulFunctionCall","src":"4351:32:33"},"nodeType":"YulExpressionStatement","src":"4351:32:33"},{"nodeType":"YulAssignment","src":"4392:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4404:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4415:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4400:3:33"},"nodeType":"YulFunctionCall","src":"4400:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4392:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4178:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4192:4:33","type":""}],"src":"4027:398:33"},{"body":{"nodeType":"YulBlock","src":"4604:179:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4621:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4632:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4614:6:33"},"nodeType":"YulFunctionCall","src":"4614:21:33"},"nodeType":"YulExpressionStatement","src":"4614:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4655:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4666:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4651:3:33"},"nodeType":"YulFunctionCall","src":"4651:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"4671:2:33","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4644:6:33"},"nodeType":"YulFunctionCall","src":"4644:30:33"},"nodeType":"YulExpressionStatement","src":"4644:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4694:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4705:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4690:3:33"},"nodeType":"YulFunctionCall","src":"4690:18:33"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"4710:31:33","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4683:6:33"},"nodeType":"YulFunctionCall","src":"4683:59:33"},"nodeType":"YulExpressionStatement","src":"4683:59:33"},{"nodeType":"YulAssignment","src":"4751:26:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4763:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4774:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4759:3:33"},"nodeType":"YulFunctionCall","src":"4759:18:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4751:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4581:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4595:4:33","type":""}],"src":"4430:353:33"},{"body":{"nodeType":"YulBlock","src":"4962:227:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4979:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"4990:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4972:6:33"},"nodeType":"YulFunctionCall","src":"4972:21:33"},"nodeType":"YulExpressionStatement","src":"4972:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5013:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5024:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5009:3:33"},"nodeType":"YulFunctionCall","src":"5009:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5029:2:33","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5002:6:33"},"nodeType":"YulFunctionCall","src":"5002:30:33"},"nodeType":"YulExpressionStatement","src":"5002:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5052:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5063:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5048:3:33"},"nodeType":"YulFunctionCall","src":"5048:18:33"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"5068:34:33","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5041:6:33"},"nodeType":"YulFunctionCall","src":"5041:62:33"},"nodeType":"YulExpressionStatement","src":"5041:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5123:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5134:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5119:3:33"},"nodeType":"YulFunctionCall","src":"5119:18:33"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"5139:7:33","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5112:6:33"},"nodeType":"YulFunctionCall","src":"5112:35:33"},"nodeType":"YulExpressionStatement","src":"5112:35:33"},{"nodeType":"YulAssignment","src":"5156:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5168:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5179:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5164:3:33"},"nodeType":"YulFunctionCall","src":"5164:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5156:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4939:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4953:4:33","type":""}],"src":"4788:401:33"},{"body":{"nodeType":"YulBlock","src":"5368:225:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5385:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5396:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5378:6:33"},"nodeType":"YulFunctionCall","src":"5378:21:33"},"nodeType":"YulExpressionStatement","src":"5378:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5419:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5430:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5415:3:33"},"nodeType":"YulFunctionCall","src":"5415:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5435:2:33","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5408:6:33"},"nodeType":"YulFunctionCall","src":"5408:30:33"},"nodeType":"YulExpressionStatement","src":"5408:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5458:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5469:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5454:3:33"},"nodeType":"YulFunctionCall","src":"5454:18:33"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"5474:34:33","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5447:6:33"},"nodeType":"YulFunctionCall","src":"5447:62:33"},"nodeType":"YulExpressionStatement","src":"5447:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5529:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5540:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5525:3:33"},"nodeType":"YulFunctionCall","src":"5525:18:33"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"5545:5:33","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5518:6:33"},"nodeType":"YulFunctionCall","src":"5518:33:33"},"nodeType":"YulExpressionStatement","src":"5518:33:33"},{"nodeType":"YulAssignment","src":"5560:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5572:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5583:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5568:3:33"},"nodeType":"YulFunctionCall","src":"5568:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5560:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5345:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5359:4:33","type":""}],"src":"5194:399:33"},{"body":{"nodeType":"YulBlock","src":"5772:228:33","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5789:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5800:2:33","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5782:6:33"},"nodeType":"YulFunctionCall","src":"5782:21:33"},"nodeType":"YulExpressionStatement","src":"5782:21:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5823:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5834:2:33","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5819:3:33"},"nodeType":"YulFunctionCall","src":"5819:18:33"},{"kind":"number","nodeType":"YulLiteral","src":"5839:2:33","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5812:6:33"},"nodeType":"YulFunctionCall","src":"5812:30:33"},"nodeType":"YulExpressionStatement","src":"5812:30:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5862:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5873:2:33","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5858:3:33"},"nodeType":"YulFunctionCall","src":"5858:18:33"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"5878:34:33","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5851:6:33"},"nodeType":"YulFunctionCall","src":"5851:62:33"},"nodeType":"YulExpressionStatement","src":"5851:62:33"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5933:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5944:2:33","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5929:3:33"},"nodeType":"YulFunctionCall","src":"5929:18:33"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"5949:8:33","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5922:6:33"},"nodeType":"YulFunctionCall","src":"5922:36:33"},"nodeType":"YulExpressionStatement","src":"5922:36:33"},{"nodeType":"YulAssignment","src":"5967:27:33","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5979:9:33"},{"kind":"number","nodeType":"YulLiteral","src":"5990:3:33","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5975:3:33"},"nodeType":"YulFunctionCall","src":"5975:19:33"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5967:4:33"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5749:9:33","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5763:4:33","type":""}],"src":"5598:402:33"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}","id":33,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e39190610906565b60405180910390f35b6100ff6100fa3660046109a2565b610292565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046109cc565b6102aa565b604051601281526020016100e3565b6100ff6101513660046109a2565b6102ce565b610113610164366004610a08565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100d661031a565b6100ff6101a23660046109a2565b610329565b6100ff6101b53660046109a2565b6103ff565b6101136101c8366004610a2a565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461020f90610a5d565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610a5d565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b6000336102a081858561040d565b5060019392505050565b6000336102b88582856105c0565b6102c3858585610697565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102a09082908690610315908790610ab1565b61040d565b60606004805461020f90610a5d565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156103f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c3828686840361040d565b6000336102a0818585610697565b73ffffffffffffffffffffffffffffffffffffffff83166104af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff8216610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106915781811015610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103e9565b610691848484840361040d565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff82166107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610691565b600060208083528351808285015260005b8181101561093357858101830151858201604001528201610917565b81811115610945576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461099d57600080fd5b919050565b600080604083850312156109b557600080fd5b6109be83610979565b946020939093013593505050565b6000806000606084860312156109e157600080fd5b6109ea84610979565b92506109f860208501610979565b9150604084013590509250925092565b600060208284031215610a1a57600080fd5b610a2382610979565b9392505050565b60008060408385031215610a3d57600080fd5b610a4683610979565b9150610a5460208401610979565b90509250929050565b600181811c90821680610a7157607f821691505b60208210811415610aab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008219821115610aeb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220946360dc5ceb9a9c088181ed43f0d67db68f71e886d1f6093780cd1c30c10fa164736f6c634300080b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x18C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x906 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x9CC JUMP JUMPDEST PUSH2 0x2AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x2CE JUMP JUMPDEST PUSH2 0x113 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x31A JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x329 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x3FF JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1C8 CALLDATASIZE PUSH1 0x4 PUSH2 0xA2A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x20F SWAP1 PUSH2 0xA5D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x23B SWAP1 PUSH2 0xA5D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x288 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x25D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x288 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x26B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP2 DUP6 DUP6 PUSH2 0x40D JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2B8 DUP6 DUP3 DUP6 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C3 DUP6 DUP6 DUP6 PUSH2 0x697 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x2A0 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x315 SWAP1 DUP8 SWAP1 PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0x40D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x20F SWAP1 PUSH2 0xA5D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2C3 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x40D JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP2 DUP6 DUP6 PUSH2 0x697 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x4AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x691 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x684 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH2 0x691 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x40D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x73A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x893 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3E9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x691 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x933 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x917 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x99D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9BE DUP4 PUSH2 0x979 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9EA DUP5 PUSH2 0x979 JUMP JUMPDEST SWAP3 POP PUSH2 0x9F8 PUSH1 0x20 DUP6 ADD PUSH2 0x979 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA23 DUP3 PUSH2 0x979 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA46 DUP4 PUSH2 0x979 JUMP JUMPDEST SWAP2 POP PUSH2 0xA54 PUSH1 0x20 DUP5 ADD PUSH2 0x979 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xA71 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xAAB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xAEB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 PUSH4 0x60DC5CEB SWAP11 SWAP13 ADDMOD DUP2 DUP2 0xED NUMBER CREATE 0xD6 PUSH30 0xB68F71E886D1F6093780CD1C30C10FA164736F6C634300080B0033000000 ","sourceMap":"128:51:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4444:197;;;;;;:::i;:::-;;:::i;:::-;;;1300:14:33;;1293:22;1275:41;;1263:2;1248:18;4444:197:1;1135:187:33;3255:106:1;3342:12;;3255:106;;;1473:25:33;;;1461:2;1446:18;3255:106:1;1327:177:33;5203:256:1;;;;;;:::i;:::-;;:::i;3104:91::-;;;3186:2;1984:36:33;;1972:2;1957:18;3104:91:1;1842:184:33;5854:234:1;;;;;;:::i;:::-;;:::i;3419:125::-;;;;;;:::i;:::-;3519:18;;3493:7;3519:18;;;;;;;;;;;;3419:125;2369:102;;;:::i;6575:427::-;;;;;;:::i;:::-;;:::i;3740:189::-;;;;;;:::i;:::-;;:::i;3987:149::-;;;;;;:::i;:::-;4102:18;;;;4076:7;4102:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3987:149;2158:98;2212:13;2244:5;2237:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98;:::o;4444:197::-;4527:4;719:10:7;4581:32:1;719:10:7;4597:7:1;4606:6;4581:8;:32::i;:::-;-1:-1:-1;4630:4:1;;4444:197;-1:-1:-1;;;4444:197:1:o;5203:256::-;5300:4;719:10:7;5356:38:1;5372:4;719:10:7;5387:6:1;5356:15;:38::i;:::-;5404:27;5414:4;5420:2;5424:6;5404:9;:27::i;:::-;-1:-1:-1;5448:4:1;;5203:256;-1:-1:-1;;;;5203:256:1:o;5854:234::-;719:10:7;5942:4:1;4102:18;;;:11;:18;;;;;;;;;:27;;;;;;;;;;5942:4;;719:10:7;5996:64:1;;719:10:7;;4102:27:1;;6021:38;;6049:10;;6021:38;:::i;:::-;5996:8;:64::i;2369:102::-;2425:13;2457:7;2450:14;;;;;:::i;6575:427::-;719:10:7;6668:4:1;4102:18;;;:11;:18;;;;;;;;;:27;;;;;;;;;;6668:4;;719:10:7;6812:15:1;6792:16;:35;;6784:85;;;;;;;3418:2:33;6784:85:1;;;3400:21:33;3457:2;3437:18;;;3430:30;3496:34;3476:18;;;3469:62;3567:7;3547:18;;;3540:35;3592:19;;6784:85:1;;;;;;;;;6903:60;6912:5;6919:7;6947:15;6928:16;:34;6903:8;:60::i;3740:189::-;3819:4;719:10:7;3873:28:1;719:10:7;3890:2:1;3894:6;3873:9;:28::i;10457:340::-;10558:19;;;10550:68;;;;;;;3824:2:33;10550:68:1;;;3806:21:33;3863:2;3843:18;;;3836:30;3902:34;3882:18;;;3875:62;3973:6;3953:18;;;3946:34;3997:19;;10550:68:1;3622:400:33;10550:68:1;10636:21;;;10628:68;;;;;;;4229:2:33;10628:68:1;;;4211:21:33;4268:2;4248:18;;;4241:30;4307:34;4287:18;;;4280:62;4378:4;4358:18;;;4351:32;4400:19;;10628:68:1;4027:398:33;10628:68:1;10707:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10758:32;;1473:25:33;;;10758:32:1;;1446:18:33;10758:32:1;;;;;;;10457:340;;;:::o;11078:411::-;4102:18;;;;11178:24;4102:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;11264:17;11244:37;;11240:243;;11325:6;11305:16;:26;;11297:68;;;;;;;4632:2:33;11297:68:1;;;4614:21:33;4671:2;4651:18;;;4644:30;4710:31;4690:18;;;4683:59;4759:18;;11297:68:1;4430:353:33;11297:68:1;11407:51;11416:5;11423:7;11451:6;11432:16;:25;11407:8;:51::i;:::-;11168:321;11078:411;;;:::o;7456:788::-;7552:18;;;7544:68;;;;;;;4990:2:33;7544:68:1;;;4972:21:33;5029:2;5009:18;;;5002:30;5068:34;5048:18;;;5041:62;5139:7;5119:18;;;5112:35;5164:19;;7544:68:1;4788:401:33;7544:68:1;7630:16;;;7622:64;;;;;;;5396:2:33;7622:64:1;;;5378:21:33;5435:2;5415:18;;;5408:30;5474:34;5454:18;;;5447:62;5545:5;5525:18;;;5518:33;5568:19;;7622:64:1;5194:399:33;7622:64:1;7768:15;;;7746:19;7768:15;;;;;;;;;;;7801:21;;;;7793:72;;;;;;;5800:2:33;7793:72:1;;;5782:21:33;5839:2;5819:18;;;5812:30;5878:34;5858:18;;;5851:62;5949:8;5929:18;;;5922:36;5975:19;;7793:72:1;5598:402:33;7793:72:1;7899:15;;;;:9;:15;;;;;;;;;;;7917:20;;;7899:38;;8114:13;;;;;;;;;;:23;;;;;;8163:26;;1473:25:33;;;8114:13:1;;8163:26;;1446:18:33;8163:26:1;;;;;;;8200:37;12073:91;14:656:33;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;586:2:33;574:15;591:66;570:88;555:104;;;;661:2;551:113;;14:656;-1:-1:-1;;;14:656:33:o;675:196::-;743:20;;803:42;792:54;;782:65;;772:93;;861:1;858;851:12;772:93;675:196;;;:::o;876:254::-;944:6;952;1005:2;993:9;984:7;980:23;976:32;973:52;;;1021:1;1018;1011:12;973:52;1044:29;1063:9;1044:29;:::i;:::-;1034:39;1120:2;1105:18;;;;1092:32;;-1:-1:-1;;;876:254:33:o;1509:328::-;1586:6;1594;1602;1655:2;1643:9;1634:7;1630:23;1626:32;1623:52;;;1671:1;1668;1661:12;1623:52;1694:29;1713:9;1694:29;:::i;:::-;1684:39;;1742:38;1776:2;1765:9;1761:18;1742:38;:::i;:::-;1732:48;;1827:2;1816:9;1812:18;1799:32;1789:42;;1509:328;;;;;:::o;2031:186::-;2090:6;2143:2;2131:9;2122:7;2118:23;2114:32;2111:52;;;2159:1;2156;2149:12;2111:52;2182:29;2201:9;2182:29;:::i;:::-;2172:39;2031:186;-1:-1:-1;;;2031:186:33:o;2222:260::-;2290:6;2298;2351:2;2339:9;2330:7;2326:23;2322:32;2319:52;;;2367:1;2364;2357:12;2319:52;2390:29;2409:9;2390:29;:::i;:::-;2380:39;;2438:38;2472:2;2461:9;2457:18;2438:38;:::i;:::-;2428:48;;2222:260;;;;;:::o;2487:437::-;2566:1;2562:12;;;;2609;;;2630:61;;2684:4;2676:6;2672:17;2662:27;;2630:61;2737:2;2729:6;2726:14;2706:18;2703:38;2700:218;;;2774:77;2771:1;2764:88;2875:4;2872:1;2865:15;2903:4;2900:1;2893:15;2700:218;;2487:437;;;:::o;2929:282::-;2969:3;3000:1;2996:6;2993:1;2990:13;2987:193;;;3036:77;3033:1;3026:88;3137:4;3134:1;3127:15;3165:4;3162:1;3155:15;2987:193;-1:-1:-1;3196:9:33;;2929:282::o"},"gasEstimates":{"creation":{"codeDepositCost":"570800","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"24599","balanceOf(address)":"2561","decimals()":"244","decreaseAllowance(address,uint256)":"26862","increaseAllowance(address,uint256)":"26908","name()":"infinite","symbol()":"infinite","totalSupply()":"2304","transfer(address,uint256)":"51030","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockERC20.sol\":\"MockERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/mocks/MockERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MockERC20 is ERC20(\\\"Token 1\\\", \\\"TOK\\\") { \\n\\n}\",\"keccak256\":\"0xdbc449759517f2cff31672dde9420f2021cc8efc90077bb5390db42e97eb5fd7\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[{"astId":18,"contract":"contracts/mocks/MockERC20.sol:MockERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":24,"contract":"contracts/mocks/MockERC20.sol:MockERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":26,"contract":"contracts/mocks/MockERC20.sol:MockERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":28,"contract":"contracts/mocks/MockERC20.sol:MockERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":30,"contract":"contracts/mocks/MockERC20.sol:MockERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}