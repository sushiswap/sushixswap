/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SushiXSwapInterface extends utils.Interface {
  functions: {
    "SGETH()": FunctionFragment;
    "approveToStargateRouter(address)": FunctionFragment;
    "bentoBox()": FunctionFragment;
    "cook(uint8[],uint256[],bytes[])": FunctionFragment;
    "factory()": FunctionFragment;
    "getFee(uint16,uint8,address,uint256,uint256,bytes)": FunctionFragment;
    "pairCodeHash()": FunctionFragment;
    "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": FunctionFragment;
    "stargateRouter()": FunctionFragment;
    "stargateWidget()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SGETH"
      | "approveToStargateRouter"
      | "bentoBox"
      | "cook"
      | "factory"
      | "getFee"
      | "pairCodeHash"
      | "sgReceive"
      | "stargateRouter"
      | "stargateWidget"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "SGETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveToStargateRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "bentoBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cook",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pairCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sgReceive",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stargateRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stargateWidget",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "SGETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveToStargateRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bentoBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sgReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stargateRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stargateWidget",
    data: BytesLike
  ): Result;

  events: {
    "StargateSushiXSwapDst(bytes32,bool)": EventFragment;
    "StargateSushiXSwapSrc(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StargateSushiXSwapDst"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StargateSushiXSwapSrc"): EventFragment;
}

export interface StargateSushiXSwapDstEventObject {
  srcContext: string;
  failed: boolean;
}
export type StargateSushiXSwapDstEvent = TypedEvent<
  [string, boolean],
  StargateSushiXSwapDstEventObject
>;

export type StargateSushiXSwapDstEventFilter =
  TypedEventFilter<StargateSushiXSwapDstEvent>;

export interface StargateSushiXSwapSrcEventObject {
  srcContext: string;
}
export type StargateSushiXSwapSrcEvent = TypedEvent<
  [string],
  StargateSushiXSwapSrcEventObject
>;

export type StargateSushiXSwapSrcEventFilter =
  TypedEventFilter<StargateSushiXSwapSrcEvent>;

export interface SushiXSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SushiXSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SGETH(overrides?: CallOverrides): Promise<[string]>;

    approveToStargateRouter(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bentoBox(overrides?: CallOverrides): Promise<[string]>;

    cook(
      actions: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _functionType: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _gas: PromiseOrValue<BigNumberish>,
      _dustAmount: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { a: BigNumber; b: BigNumber }>;

    pairCodeHash(overrides?: CallOverrides): Promise<[string]>;

    sgReceive(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      amountLD: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stargateRouter(overrides?: CallOverrides): Promise<[string]>;

    stargateWidget(overrides?: CallOverrides): Promise<[string]>;
  };

  SGETH(overrides?: CallOverrides): Promise<string>;

  approveToStargateRouter(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bentoBox(overrides?: CallOverrides): Promise<string>;

  cook(
    actions: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    datas: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getFee(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _functionType: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    _gas: PromiseOrValue<BigNumberish>,
    _dustAmount: PromiseOrValue<BigNumberish>,
    _payload: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { a: BigNumber; b: BigNumber }>;

  pairCodeHash(overrides?: CallOverrides): Promise<string>;

  sgReceive(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    amountLD: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stargateRouter(overrides?: CallOverrides): Promise<string>;

  stargateWidget(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    SGETH(overrides?: CallOverrides): Promise<string>;

    approveToStargateRouter(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bentoBox(overrides?: CallOverrides): Promise<string>;

    cook(
      actions: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _functionType: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _gas: PromiseOrValue<BigNumberish>,
      _dustAmount: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { a: BigNumber; b: BigNumber }>;

    pairCodeHash(overrides?: CallOverrides): Promise<string>;

    sgReceive(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      amountLD: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    stargateRouter(overrides?: CallOverrides): Promise<string>;

    stargateWidget(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "StargateSushiXSwapDst(bytes32,bool)"(
      srcContext?: PromiseOrValue<BytesLike> | null,
      failed?: null
    ): StargateSushiXSwapDstEventFilter;
    StargateSushiXSwapDst(
      srcContext?: PromiseOrValue<BytesLike> | null,
      failed?: null
    ): StargateSushiXSwapDstEventFilter;

    "StargateSushiXSwapSrc(bytes32)"(
      srcContext?: PromiseOrValue<BytesLike> | null
    ): StargateSushiXSwapSrcEventFilter;
    StargateSushiXSwapSrc(
      srcContext?: PromiseOrValue<BytesLike> | null
    ): StargateSushiXSwapSrcEventFilter;
  };

  estimateGas: {
    SGETH(overrides?: CallOverrides): Promise<BigNumber>;

    approveToStargateRouter(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bentoBox(overrides?: CallOverrides): Promise<BigNumber>;

    cook(
      actions: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _functionType: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _gas: PromiseOrValue<BigNumberish>,
      _dustAmount: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    sgReceive(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      amountLD: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stargateRouter(overrides?: CallOverrides): Promise<BigNumber>;

    stargateWidget(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SGETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveToStargateRouter(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bentoBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cook(
      actions: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _functionType: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _gas: PromiseOrValue<BigNumberish>,
      _dustAmount: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sgReceive(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      amountLD: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stargateRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stargateWidget(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
