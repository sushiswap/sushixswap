/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type BridgeStateStruct = {
  currentAssetSD: PromiseOrValue<BigNumberish>;
  lpAsset: PromiseOrValue<BigNumberish>;
  eqFeePool: PromiseOrValue<BigNumberish>;
  idealBalance: PromiseOrValue<BigNumberish>;
  currentBalance: PromiseOrValue<BigNumberish>;
  allocPointIsPositive: PromiseOrValue<boolean>;
};

export type BridgeStateStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  currentAssetSD: BigNumber;
  lpAsset: BigNumber;
  eqFeePool: BigNumber;
  idealBalance: BigNumber;
  currentBalance: BigNumber;
  allocPointIsPositive: boolean;
};

export type FeesStruct = {
  eqFee: PromiseOrValue<BigNumberish>;
  eqReward: PromiseOrValue<BigNumberish>;
  lpFee: PromiseOrValue<BigNumberish>;
  protocolFee: PromiseOrValue<BigNumberish>;
};

export type FeesStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  eqFee: BigNumber;
  eqReward: BigNumber;
  lpFee: BigNumber;
  protocolFee: BigNumber;
};

export interface StargateFeeV04ExtractionInterface extends utils.Interface {
  functions: {
    "DELTA_1()": FunctionFragment;
    "DELTA_2()": FunctionFragment;
    "DENOMINATOR()": FunctionFragment;
    "FIFTY_PERCENT()": FunctionFragment;
    "LAMBDA_1()": FunctionFragment;
    "LAMBDA_2()": FunctionFragment;
    "LP_FEE()": FunctionFragment;
    "PROTOCOL_FEE()": FunctionFragment;
    "PROTOCOL_SUBSIDY()": FunctionFragment;
    "SIXTY_PERCENT()": FunctionFragment;
    "getFees((uint256,uint256,uint256,uint256,uint256,bool),bool,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DELTA_1"
      | "DELTA_2"
      | "DENOMINATOR"
      | "FIFTY_PERCENT"
      | "LAMBDA_1"
      | "LAMBDA_2"
      | "LP_FEE"
      | "PROTOCOL_FEE"
      | "PROTOCOL_SUBSIDY"
      | "SIXTY_PERCENT"
      | "getFees"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DELTA_1", values?: undefined): string;
  encodeFunctionData(functionFragment: "DELTA_2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIFTY_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LAMBDA_1", values?: undefined): string;
  encodeFunctionData(functionFragment: "LAMBDA_2", values?: undefined): string;
  encodeFunctionData(functionFragment: "LP_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_SUBSIDY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIXTY_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFees",
    values: [
      BridgeStateStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "DELTA_1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DELTA_2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FIFTY_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LAMBDA_1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LAMBDA_2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LP_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_SUBSIDY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIXTY_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFees", data: BytesLike): Result;

  events: {};
}

export interface StargateFeeV04Extraction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StargateFeeV04ExtractionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELTA_1(overrides?: CallOverrides): Promise<[BigNumber]>;

    DELTA_2(overrides?: CallOverrides): Promise<[BigNumber]>;

    DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    FIFTY_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    LAMBDA_1(overrides?: CallOverrides): Promise<[BigNumber]>;

    LAMBDA_2(overrides?: CallOverrides): Promise<[BigNumber]>;

    LP_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROTOCOL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<[BigNumber]>;

    SIXTY_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFees(
      state: BridgeStateStruct,
      whitelisted: PromiseOrValue<boolean>,
      amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[FeesStructOutput] & { s: FeesStructOutput }>;
  };

  DELTA_1(overrides?: CallOverrides): Promise<BigNumber>;

  DELTA_2(overrides?: CallOverrides): Promise<BigNumber>;

  DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  FIFTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  LAMBDA_1(overrides?: CallOverrides): Promise<BigNumber>;

  LAMBDA_2(overrides?: CallOverrides): Promise<BigNumber>;

  LP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;

  SIXTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  getFees(
    state: BridgeStateStruct,
    whitelisted: PromiseOrValue<boolean>,
    amountSD: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<FeesStructOutput>;

  callStatic: {
    DELTA_1(overrides?: CallOverrides): Promise<BigNumber>;

    DELTA_2(overrides?: CallOverrides): Promise<BigNumber>;

    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    FIFTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    LAMBDA_1(overrides?: CallOverrides): Promise<BigNumber>;

    LAMBDA_2(overrides?: CallOverrides): Promise<BigNumber>;

    LP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;

    SIXTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    getFees(
      state: BridgeStateStruct,
      whitelisted: PromiseOrValue<boolean>,
      amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<FeesStructOutput>;
  };

  filters: {};

  estimateGas: {
    DELTA_1(overrides?: CallOverrides): Promise<BigNumber>;

    DELTA_2(overrides?: CallOverrides): Promise<BigNumber>;

    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    FIFTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    LAMBDA_1(overrides?: CallOverrides): Promise<BigNumber>;

    LAMBDA_2(overrides?: CallOverrides): Promise<BigNumber>;

    LP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;

    SIXTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    getFees(
      state: BridgeStateStruct,
      whitelisted: PromiseOrValue<boolean>,
      amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELTA_1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DELTA_2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FIFTY_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LAMBDA_1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LAMBDA_2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LP_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_SUBSIDY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIXTY_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFees(
      state: BridgeStateStruct,
      whitelisted: PromiseOrValue<boolean>,
      amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
