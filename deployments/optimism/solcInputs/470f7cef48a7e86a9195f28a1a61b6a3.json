{
  "language": "Solidity",
  "sources": {
    "contracts/adapters/BentoAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"../interfaces/IBentoBoxMinimal.sol\";\nimport \"../base/ImmutableState.sol\";\n\n/// @title BentoAdapter\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\nabstract contract BentoAdapter is ImmutableState {\n    /// @notice Deposits the token from users wallet into the BentoBox.\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\n    /// Pass either amount or share.\n    /// @param token token to deposit. Use token as address(0) when depositing native token\n    /// @param from sender\n    /// @param to receiver\n    /// @param amount amount to be deposited\n    /// @param share share to be deposited\n    /// @param value native token value to be deposited. Only use when token address is address(0)\n    function _depositToBentoBox(\n        address token,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share,\n        uint256 value\n    ) internal {\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\n    }\n\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\n    /// Pass either amount or share.\n    /// @param token token to transfer. For native tokens, use wnative token address\n    /// @param from sender\n    /// @param to receiver\n    /// @param amount amount to transfer\n    /// @param share share to transfer\n    /// @param unwrapBento use true for withdraw and false for transfer\n    function _transferFromBentoBox(\n        address token,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share,\n        bool unwrapBento\n    ) internal {\n        if (unwrapBento) {\n            bentoBox.withdraw(token, from, to, amount, share);\n        } else {\n            if (amount > 0) {\n                share = bentoBox.toShare(token, amount, false);\n            }\n            bentoBox.transfer(token, from, to, share);\n        }\n    }\n}"
    },
    "contracts/interfaces/IBentoBoxMinimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\n/// @notice Minimal BentoBox vault interface.\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\ninterface IBentoBoxMinimal {\n    /// @notice Balance per ERC-20 token per account in shares.\n    function balanceOf(address, address) external view returns (uint256);\n\n    /// @dev Helper function to represent an `amount` of `token` in shares.\n    /// @param token The ERC-20 token.\n    /// @param amount The `token` amount.\n    /// @param roundUp If the result `share` should be rounded up.\n    /// @return share The token amount represented in shares.\n    function toShare(\n        address token,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share);\n\n    /// @dev Helper function to represent shares back into the `token` amount.\n    /// @param token The ERC-20 token.\n    /// @param share The amount of shares.\n    /// @param roundUp If the result should be rounded up.\n    /// @return amount The share amount back into native representation.\n    function toAmount(\n        address token,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount);\n\n    /// @notice Registers this contract so that users can approve it for BentoBox.\n    function registerProtocol() external;\n\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\n    /// @param token_ The ERC-20 token to deposit.\n    /// @param from which account to pull the tokens.\n    /// @param to which account to push the tokens.\n    /// @param amount Token amount in native representation to deposit.\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount represented in shares.\n    function deposit(\n        address token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    /// @notice Withdraws an amount of `token` from a user account.\n    /// @param token_ The ERC-20 token to withdraw.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n    /// @param share Like above, but `share` takes precedence over `amount`.\n    function withdraw(\n        address token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    /// @notice Transfer shares from a user account to another one.\n    /// @param token The ERC-20 token to transfer.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param share The amount of `token` in shares.\n    function transfer(\n        address token,\n        address from,\n        address to,\n        uint256 share\n    ) external;\n\n    function setMasterContractApproval(\n        address user,\n        address masterContract,\n        bool approved,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/base/ImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"../interfaces/IImmutableState.sol\";\n\n/// @title ImmutableState\n/// @notice Stores the immutable state\nabstract contract ImmutableState is IImmutableState {\n    /// @notice BentoBox token vault\n    IBentoBoxMinimal public immutable override bentoBox;\n\n    /// @notice Stargate Router for cross chain interaction\n    IStargateRouter public immutable override stargateRouter;\n\n    /// @notice Sushiswap Legacy AMM Factory\n    address public immutable override factory;\n\n    /// @notice Sushiswap Legacy AMM PairCodeHash\n    bytes32 public immutable override pairCodeHash;\n\n    constructor(\n        IBentoBoxMinimal _bentoBox,\n        IStargateRouter _stargateRouter,\n        address _factory,\n        bytes32 _pairCodeHash\n    ) {\n        bentoBox = _bentoBox;\n        stargateRouter = _stargateRouter;\n        factory = _factory;\n        pairCodeHash = _pairCodeHash;\n    }\n}"
    },
    "contracts/interfaces/IImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"./IBentoBoxMinimal.sol\";\nimport \"./stargate/IStargateRouter.sol\";\n\ninterface IImmutableState {\n    function bentoBox() external view returns (IBentoBoxMinimal);\n\n    function stargateRouter() external view returns (IStargateRouter);\n\n    function factory() external view returns (address);\n\n    function pairCodeHash() external view returns (bytes32);\n}"
    },
    "contracts/interfaces/stargate/IStargateRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.11;\n\ninterface IStargateRouter {\n\n    struct lzTxObj {\n        uint256 dstGasForCall;\n        uint256 dstNativeAmount;\n        bytes dstNativeAddr;\n    }\n\n    function swap(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable;\n\n    function quoteLayerZeroFee(\n        uint16 _dstChainId,\n        uint8 _functionType,\n        bytes calldata _toAddress,\n        bytes calldata _transferAndCallPayload,\n        lzTxObj memory _lzTxParams\n    ) external view returns (uint256, uint256);\n}"
    },
    "contracts/interfaces/trident/ITridentSwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"./ITridentRouter.sol\";\nimport \"../../adapters/BentoAdapter.sol\";\nimport \"../../adapters/TokenAdapter.sol\";\nimport \"../../base/ImmutableState.sol\";\n\ninterface ITridentSwapAdapter {}"
    },
    "contracts/interfaces/trident/ITridentRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"./IPool.sol\";\nimport \"../IBentoBoxMinimal.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\n/// @notice Trident pool router interface.\ninterface ITridentRouter {\n    struct Path {\n        address pool;\n        bytes data;\n    }\n\n    struct ExactInputSingleParams {\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        address pool;\n        address tokenIn;\n        bytes data;\n    }\n\n    struct ExactInputParams {\n        address tokenIn;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        Path[] path;\n    }\n\n    struct TokenInput {\n        address token;\n        bool native;\n        uint256 amount;\n    }\n\n    struct InitialPath {\n        address tokenIn;\n        address pool;\n        bool native;\n        uint256 amount;\n        bytes data;\n    }\n\n    struct PercentagePath {\n        address tokenIn;\n        address pool;\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\n        bytes data;\n    }\n\n    struct Output {\n        address token;\n        address to;\n        bool unwrapBento;\n        uint256 minAmount;\n    }\n\n    struct ComplexPathParams {\n        InitialPath[] initialPath;\n        PercentagePath[] percentagePath;\n        Output[] output;\n    }\n}"
    },
    "contracts/adapters/TokenAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IWETH.sol\";\n\n/// @title TokenAdapter\n/// @notice Adapter for all token operations\nabstract contract TokenAdapter {\n    using SafeERC20 for IERC20;\n\n    /// @notice Function to transfer tokens from address(this)\n    /// @param token token to transfer\n    /// @param to receiver\n    /// @param amount amount to transfer\n    function _transferTokens(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        if (address(token) != address(0)) {\n            token.safeTransfer(to, amount);\n        } else {\n            payable(to).transfer(amount);\n        }\n    }\n\n    /// @notice Function to transfer tokens from user to the to address\n    /// @param token token to transfer\n    /// @param to receiver\n    /// @param amount amount to transfer\n    function _transferFromToken(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        token.safeTransferFrom(msg.sender, to, amount);\n    }\n\n    /// @notice Unwraps the wrapper native into native and sends it to the receiver.\n    /// @param token token to transfer\n    /// @param to receiver\n    function _unwrapTransfer(address token, address to) internal {\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\n    }\n}"
    },
    "contracts/interfaces/trident/IPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\n/// @notice Trident pool interface.\ninterface IPool {\n    /// @notice Executes a swap from one token to another.\n    /// @dev The input tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\n    function swap(bytes calldata data)\n        external\n        returns (uint256 finalAmountOut);\n\n    /// @notice Executes a swap from one token to another with a callback.\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\n    function flashSwap(bytes calldata data)\n        external\n        returns (uint256 finalAmountOut);\n\n    /// @notice Mints liquidity tokens.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\n    function mint(bytes calldata data) external returns (uint256 liquidity);\n\n    /// @notice Burns liquidity tokens.\n    /// @dev The input LP tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\n    function burn(bytes calldata data)\n        external\n        returns (TokenAmount[] memory withdrawnAmounts);\n\n    /// @notice Burns liquidity tokens for a single output token.\n    /// @dev The input LP tokens must've already been sent to the pool.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return amountOut The amount of output tokens that were sent to the user.\n    function burnSingle(bytes calldata data)\n        external\n        returns (uint256 amountOut);\n\n    /// @return A unique identifier for the pool type.\n    function poolIdentifier() external pure returns (bytes32);\n\n    /// @return An array of tokens supported by the pool.\n    function getAssets() external view returns (address[] memory);\n\n    /// @notice Simulates a trade and returns the expected output.\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\n    function getAmountOut(bytes calldata data)\n        external\n        view\n        returns (uint256 finalAmountOut);\n\n    /// @notice Simulates a trade and returns the expected output.\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\n    /// @param data ABI-encoded params that the pool requires.\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\n    function getAmountIn(bytes calldata data)\n        external\n        view\n        returns (uint256 finalAmountIn);\n\n    /// @dev This event must be emitted on all swaps.\n    event Swap(\n        address indexed recipient,\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /// @dev This struct frames output tokens for burns.\n    struct TokenAmount {\n        address token;\n        uint256 amount;\n    }\n}"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/adapters/SushiLegacyAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../libraries/UniswapV2Library.sol\";\nimport \"../base/ImmutableState.sol\";\n\n/// @title SushiLegacyAdapter\n/// @notice Adapter for functions used to swap using Sushiswap Legacy AMM.\nabstract contract SushiLegacyAdapter is ImmutableState {\n    using SafeERC20 for IERC20;\n\n    function _swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        bool sendTokens\n    ) internal returns (uint256 amountOut) {\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\n            factory,\n            amountIn,\n            path,\n            pairCodeHash\n        );\n        amountOut = amounts[amounts.length - 1];\n\n        require(amountOut >= amountOutMin, \"insufficient-amount-out\");\n\n        /// @dev force sends token to the first pair if not already sent\n        if (sendTokens) {\n            IERC20(path[0]).safeTransfer(\n                UniswapV2Library.pairFor(\n                    factory,\n                    path[0],\n                    path[1],\n                    pairCodeHash\n                ),\n                IERC20(path[0]).balanceOf(address(this))\n            );\n        }\n        _swap(amounts, path, to);\n    }\n\n    /// @dev requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory path,\n        address _to\n    ) internal virtual {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            address to = i < path.length - 2\n                ? UniswapV2Library.pairFor(\n                    factory,\n                    output,\n                    path[i + 2],\n                    pairCodeHash\n                )\n                : _to;\n            IUniswapV2Pair(\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n}"
    },
    "contracts/libraries/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\nimport \"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\";\n\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMathUniswap for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB,\n        bytes32 pairCodeHash\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            pairCodeHash // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB,\n        bytes32 pairCodeHash\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\n        ).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\n        require(\n            reserveA > 0 && reserveB > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path,\n        bytes32 pairCodeHash\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i],\n                path[i + 1],\n                pairCodeHash\n            );\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path,\n        bytes32 pairCodeHash\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n                factory,\n                path[i - 1],\n                path[i],\n                pairCodeHash\n            );\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}"
    },
    "@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.12;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMathUniswap {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n}"
    },
    "contracts/interfaces/ISushiXSwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"../adapters/BentoAdapter.sol\";\nimport \"../adapters/TokenAdapter.sol\";\nimport \"../adapters/SushiLegacyAdapter.sol\";\nimport \"../adapters/TridentSwapAdapter.sol\";\nimport \"../adapters/StargateAdapter.sol\";\n\ninterface ISushiXSwap {\n    function cook(\n        uint8[] memory actions,\n        uint256[] memory values,\n        bytes[] memory datas\n    ) external payable;\n}"
    },
    "contracts/adapters/TridentSwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"../interfaces/trident/ITridentSwapAdapter.sol\";\n\n/// @title TridentSwapAdapter\n/// @notice Adapter for all Trident based Swaps\n\nabstract contract TridentSwapAdapter is\n    ITridentRouter,\n    ImmutableState,\n    BentoAdapter,\n    TokenAdapter\n{\n    // Custom Error\n    error TooLittleReceived();\n\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\n    function _exactInput(ExactInputParams memory params)\n        internal\n        returns (uint256 amountOut)\n    {\n        if (params.amountIn == 0) {\n          uint256 tokenBalance = IERC20(params.tokenIn).balanceOf(\n                address(this)\n            );\n            _transferTokens(\n                IERC20(params.tokenIn),\n                address(bentoBox),\n                tokenBalance\n            );\n            // Pay the first pool directly.\n            (, params.amountIn) = bentoBox.deposit(\n                params.tokenIn,\n                address(bentoBox),\n                params.path[0].pool,\n                IERC20(params.tokenIn).balanceOf(address(this)),\n                0\n            );\n        }\n\n        // Call every pool in the path.\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\n        // The last pool should transfer its output tokens to the user.\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\n        // a batch call should be made to `unwrapWETH`.\n        uint256 n = params.path.length;\n        for (uint256 i = 0; i < n; i = _increment(i)) {\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\n        }\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\n    }\n\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\n    /// @param params This includes everything needed for the swap.\n    /// Look at the `ComplexPathParams` struct for more details.\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\n    function _complexPath(ComplexPathParams memory params) internal {\n        // Deposit all initial tokens to respective pools and initiate the swaps.\n        // Input tokens come from the user - output goes to following pools.\n        uint256 n = params.initialPath.length;\n        for (uint256 i = 0; i < n; i = _increment(i)) {\n            bentoBox.transfer(\n                params.initialPath[i].tokenIn,\n                address(this),\n                params.initialPath[i].pool,\n                params.initialPath[i].amount\n            );\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\n        }\n        // Do all the middle swaps. Input comes from previous pools.\n        n = params.percentagePath.length;\n        for (uint256 i = 0; i < n; i = _increment(i)) {\n            uint256 balanceShares = bentoBox.balanceOf(\n                params.percentagePath[i].tokenIn,\n                address(this)\n            );\n            uint256 transferShares = (balanceShares *\n                params.percentagePath[i].balancePercentage) / uint256(10)**8;\n            bentoBox.transfer(\n                params.percentagePath[i].tokenIn,\n                address(this),\n                params.percentagePath[i].pool,\n                transferShares\n            );\n            IPool(params.percentagePath[i].pool).swap(\n                params.percentagePath[i].data\n            );\n        }\n        // Ensure enough was received and transfer the ouput to the recipient.\n        n = params.output.length;\n        for (uint256 i = 0; i < n; i = _increment(i)) {\n            uint256 balanceShares = bentoBox.balanceOf(\n                params.output[i].token,\n                address(this)\n            );\n            if (balanceShares < params.output[i].minAmount)\n                revert TooLittleReceived();\n            if (params.output[i].unwrapBento) {\n                bentoBox.withdraw(\n                    params.output[i].token,\n                    address(this),\n                    params.output[i].to,\n                    0,\n                    balanceShares\n                );\n            } else {\n                bentoBox.transfer(\n                    params.output[i].token,\n                    address(this),\n                    params.output[i].to,\n                    balanceShares\n                );\n            }\n        }\n    }\n\n    function _increment(uint256 i) internal pure returns (uint256) {\n        unchecked {\n            return i + 1;\n        }\n    }\n}"
    },
    "contracts/adapters/StargateAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"../interfaces/stargate/IStargateAdapter.sol\";\n\n/// @title StargateAdapter\n/// @notice Adapter for function used by Stargate Bridge\nabstract contract StargateAdapter is ImmutableState, IStargateReceiver {\n    using SafeERC20 for IERC20;\n\n    // Custom Error\n    error NotStargateRouter();\n\n    struct StargateTeleportParams {\n        uint16 dstChainId; // stargate dst chain id\n        address token; // token getting bridged\n        uint256 srcPoolId; // stargate src pool id\n        uint256 dstPoolId; // stargate dst pool id\n        uint256 amount; // amount to bridge\n        uint256 amountMin; // amount to bridge minimum\n        uint256 dustAmount; // native token to be received on dst chain\n        address receiver; // sushiXswap on dst chain\n        address to; // receiver bridge token incase of transaction reverts on dst chain\n        uint256 gas; // extra gas to be sent for dst chain operations\n    }\n\n    /// @notice Approves token to the Stargate Router\n    /// @param token token to approve\n    function approveToStargateRouter(IERC20 token) external {\n        token.safeApprove(address(stargateRouter), type(uint256).max);\n    }\n\n    /// @notice Bridges the token to dst chain using Stargate Router\n    /// @dev It is hardcoded to use all the contract balance. Only call this as the last step.\n    /// The refund address for extra fees sent it msg.sender.\n    /// @param params required by the Stargate, can be found at StargateTeleportParams struct.\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\n    function _stargateTeleport(\n        StargateTeleportParams memory params,\n        uint8[] memory actions,\n        uint256[] memory values,\n        bytes[] memory datas\n    ) internal {\n        bytes memory payload = abi.encode(params.to, actions, values, datas);\n\n        stargateRouter.swap{value: address(this).balance}(\n            params.dstChainId,\n            params.srcPoolId,\n            params.dstPoolId,\n            payable(msg.sender), // refund address\n            params.amount != 0\n                ? params.amount\n                : IERC20(params.token).balanceOf(address(this)),\n            params.amountMin,\n            IStargateRouter.lzTxObj(\n                params.gas, // extra gas to be sent for dst execution\n                params.dustAmount,\n                abi.encodePacked(params.receiver)\n            ),\n            abi.encodePacked(params.receiver), // sushiXswap on the dst chain\n            payload\n        );\n    }\n\n    /// @notice Get the fees to be paid in native token for the swap\n    /// @param _dstChainId stargate dst chainId\n    /// @param _functionType stargate Function type 1 for swap.\n    /// See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\n    /// @param _receiver sushiXswap on the dst chain\n    /// @param _gas extra gas being sent\n    /// @param _dustAmount dust amount to be received at the dst chain\n    /// @param _payload payload being sent at the dst chain\n    function getFee(\n        uint16 _dstChainId,\n        uint8 _functionType,\n        address _receiver,\n        uint256 _gas,\n        uint256 _dustAmount,\n        bytes memory _payload\n    ) external view returns (uint256 a, uint256 b) {\n        (a, b) = stargateRouter.quoteLayerZeroFee(\n            _dstChainId,\n            _functionType,\n            abi.encodePacked(_receiver),\n            abi.encode(_payload),\n            IStargateRouter.lzTxObj(\n                _gas,\n                _dustAmount,\n                abi.encodePacked(_receiver)\n            )\n        );\n    }\n\n    /// @notice Receiver function on dst chain\n    /// @param _token bridge token received\n    /// @param amountLD amount received\n    /// @param payload ABI-Encoded data received from src chain\n    function sgReceive(\n        uint16,\n        bytes memory,\n        uint256,\n        address _token,\n        uint256 amountLD,\n        bytes memory payload\n    ) external override {\n        if (msg.sender != address(stargateRouter)) revert NotStargateRouter();\n\n        (\n            address to,\n            uint8[] memory actions,\n            uint256[] memory values,\n            bytes[] memory datas\n        ) = abi.decode(payload, (address, uint8[], uint256[], bytes[]));\n\n        /// @dev incase the actions fail, transfer bridge token to the to address\n        try\n            ISushiXSwap(payable(address(this))).cook(actions, values, datas)\n        {} catch (bytes memory) {\n            IERC20(_token).transfer(to, amountLD);\n        }\n\n        /// @dev transfer any native token received as dust to the to address\n        if (address(this).balance > 0)\n            payable(to).transfer(address(this).balance);\n    }\n}"
    },
    "contracts/interfaces/stargate/IStargateAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../base/ImmutableState.sol\";\nimport \"../ISushiXSwap.sol\";\nimport \"./IStargateReceiver.sol\";\n\ninterface IStargateAdapter {}"
    },
    "contracts/interfaces/stargate/IStargateReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.11;\n\ninterface IStargateReceiver {\n    function sgReceive(\n        uint16 _chainId,\n        bytes memory _srcAddress,\n        uint256 _nonce,\n        address _token,\n        uint256 amountLD,\n        bytes memory payload\n    ) external;\n}"
    },
    "contracts/SushiXSwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"./interfaces/ISushiXSwap.sol\";\n\n/// @title SushiXSwap\n/// @notice Enables cross chain swap for sushiswap.\n/// @dev Supports both BentoBox and Wallet. Supports both Trident and Legacy AMM. Uses Stargate as bridge.\ncontract SushiXSwap is\n    ISushiXSwap,\n    BentoAdapter,\n    TokenAdapter,\n    SushiLegacyAdapter,\n    TridentSwapAdapter,\n    StargateAdapter\n{\n    constructor(\n        IBentoBoxMinimal _bentoBox,\n        IStargateRouter _stargateRouter,\n        address _factory,\n        bytes32 _pairCodeHash\n    ) ImmutableState(_bentoBox, _stargateRouter, _factory, _pairCodeHash) {\n        // Register to BentoBox\n        _bentoBox.registerProtocol();\n    }\n\n    /// @notice List of ACTIONS supported by the `cook()`.\n\n    // Bento and Token Operations\n    uint8 internal constant ACTION_MASTER_CONTRACT_APPROVAL = 0;\n    uint8 internal constant ACTION_SRC_DEPOSIT_TO_BENTOBOX = 1;\n    uint8 internal constant ACTION_SRC_TRANSFER_FROM_BENTOBOX = 2;\n    uint8 internal constant ACTION_DST_DEPOSIT_TO_BENTOBOX = 3;\n    uint8 internal constant ACTION_DST_WITHDRAW_TOKEN = 4;\n    uint8 internal constant ACTION_DST_WITHDRAW_FROM_BENTOBOX = 5;\n    uint8 internal constant ACTION_UNWRAP_AND_TRANSFER = 6;\n\n    // Swap Operations\n    uint8 internal constant ACTION_LEGACY_SWAP = 7;\n    uint8 internal constant ACTION_TRIDENT_SWAP = 8;\n    uint8 internal constant ACTION_TRIDENT_COMPLEX_PATH_SWAP = 9;\n\n    // Bridge Operations\n    uint8 internal constant ACTION_STARGATE_TELEPORT = 10;\n\n    uint8 internal constant ACTION_SRC_TOKEN_TRANSFER = 11;\n\n    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\n    /// @dev The function gets invoked both at the src and dst chain.\n    function cook(\n        uint8[] memory actions,\n        uint256[] memory values,\n        bytes[] memory datas\n    ) public payable override {\n        uint256 actionLength = actions.length;\n        for (uint256 i; i < actionLength; i = _increment(i)) {\n            uint8 action = actions[i];\n            // update for total amounts in contract?\n            if (action == ACTION_MASTER_CONTRACT_APPROVAL) {\n                (\n                    address user,\n                    bool approved,\n                    uint8 v,\n                    bytes32 r,\n                    bytes32 s\n                ) = abi.decode(\n                        datas[i],\n                        (address, bool, uint8, bytes32, bytes32)\n                    );\n\n                bentoBox.setMasterContractApproval(\n                    user,\n                    address(this),\n                    approved,\n                    v,\n                    r,\n                    s\n                );\n            } else if (action == ACTION_SRC_DEPOSIT_TO_BENTOBOX) {\n                (address token, address to, uint256 amount, uint256 share) = abi\n                    .decode(datas[i], (address, address, uint256, uint256));\n                _depositToBentoBox(\n                    token,\n                    msg.sender,\n                    to,\n                    amount,\n                    share,\n                    values[i]\n                );\n            } else if (action == ACTION_SRC_TRANSFER_FROM_BENTOBOX) {\n                (\n                    address token,\n                    address to,\n                    uint256 amount,\n                    uint256 share,\n                    bool unwrapBento\n                ) = abi.decode(\n                        datas[i],\n                        (address, address, uint256, uint256, bool)\n                    );\n                _transferFromBentoBox(\n                    token,\n                    msg.sender,\n                    to,\n                    amount,\n                    share,\n                    unwrapBento\n                );\n            } else if (action == ACTION_SRC_TOKEN_TRANSFER) {\n                (address token, address to, uint256 amount) = abi.decode(\n                    datas[i],\n                    (address, address, uint256)\n                );\n\n                _transferFromToken(IERC20(token), to, amount);\n            } else if (action == ACTION_DST_DEPOSIT_TO_BENTOBOX) {\n                (address token, address to, uint256 amount, uint256 share) = abi\n                    .decode(datas[i], (address, address, uint256, uint256));\n\n                if (amount == 0) {\n                    amount = IERC20(token).balanceOf(address(this));\n                    // Stargate Router doesn't support value? Should we update it anyway?\n                    // values[i] = address(this).balance;\n                }\n\n                _transferTokens(IERC20(token), address(bentoBox), amount);\n\n                _depositToBentoBox(\n                    token,\n                    address(bentoBox),\n                    to,\n                    amount,\n                    share,\n                    values[i]\n                );\n            } else if (action == ACTION_DST_WITHDRAW_TOKEN) {\n                (address token, address to, uint256 amount) = abi.decode(\n                    datas[i],\n                    (address, address, uint256)\n                );\n                if (amount == 0) {\n                    if (token != address(0)) {\n                        amount = IERC20(token).balanceOf(address(this));\n                    } else {\n                        amount = address(this).balance;\n                    }\n                }\n                _transferTokens(IERC20(token), to, amount);\n            } else if (action == ACTION_DST_WITHDRAW_FROM_BENTOBOX) {\n                (\n                    address token,\n                    address to,\n                    uint256 amount,\n                    uint256 share,\n                    bool unwrapBento\n                ) = abi.decode(\n                        datas[i],\n                        (address, address, uint256, uint256, bool)\n                    );\n                if (amount == 0) {\n                    amount = IERC20(token).balanceOf(address(this));\n                }\n                _transferFromBentoBox(\n                    token,\n                    address(this),\n                    to,\n                    amount,\n                    share,\n                    unwrapBento\n                );\n            } else if (action == ACTION_UNWRAP_AND_TRANSFER) {\n                (address token, address to) = abi.decode(\n                    datas[i],\n                    (address, address)\n                );\n\n                _unwrapTransfer(token, to);\n            } else if (action == ACTION_LEGACY_SWAP) {\n                (\n                    uint256 amountIn,\n                    uint256 amountOutMin,\n                    address[] memory path,\n                    address to\n                ) = abi.decode(\n                        datas[i],\n                        (uint256, uint256, address[], address)\n                    );\n                bool sendTokens;\n                if (amountIn == 0) {\n                    amountIn = IERC20(path[0]).balanceOf(address(this));\n                    sendTokens = true;\n                }\n                _swapExactTokensForTokens(\n                    amountIn,\n                    amountOutMin,\n                    path,\n                    to,\n                    sendTokens\n                );\n            } else if (action == ACTION_TRIDENT_SWAP) {\n                ExactInputParams memory params = abi.decode(\n                    datas[i],\n                    (ExactInputParams)\n                );\n\n                _exactInput(params);\n            } else if (action == ACTION_TRIDENT_COMPLEX_PATH_SWAP) {\n                ComplexPathParams memory params = abi.decode(\n                    datas[i],\n                    (ComplexPathParams)\n                );\n\n                _complexPath(params);\n            } else if (action == ACTION_STARGATE_TELEPORT) {\n                (\n                    StargateTeleportParams memory params,\n                    uint8[] memory actionsDST,\n                    uint256[] memory valuesDST,\n                    bytes[] memory datasDST\n                ) = abi.decode(\n                        datas[i],\n                        (StargateTeleportParams, uint8[], uint256[], bytes[])\n                    );\n\n                _stargateTeleport(params, actionsDST, valuesDST, datasDST);\n            }\n        }\n    }\n\n    /// @notice Allows the contract to receive Native tokens\n    receive() external payable {}\n}"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20(\"Token 1\", \"TOK\") { \n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
